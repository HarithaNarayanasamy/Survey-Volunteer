//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class svcfEntities : DbContext
    {
        public svcfEntities()
            : base("name=svcfEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<arbitratinnotice> arbitratinnotices { get; set; }
        public virtual DbSet<assignreceiptbook> assignreceiptbooks { get; set; }
        public virtual DbSet<bankdetail> bankdetails { get; set; }
        public virtual DbSet<beforeremovalnotice> beforeremovalnotices { get; set; }
        public virtual DbSet<branchdetail> branchdetails { get; set; }
        public virtual DbSet<afterremovalnotice> afterremovalnotices { get; set; }
        public virtual DbSet<appvoucher> appvouchers { get; set; }
        public virtual DbSet<branchpayment> branchpayments { get; set; }
        public virtual DbSet<branchsuboffice> branchsuboffices { get; set; }
        public virtual DbSet<cashcollection> cashcollections { get; set; }
        public virtual DbSet<chithead> chitheads { get; set; }
        public virtual DbSet<chitpaymentmaster> chitpaymentmasters { get; set; }
        public virtual DbSet<customerbank> customerbanks { get; set; }
        public virtual DbSet<dailyactivity> dailyactivities { get; set; }
        public virtual DbSet<dar> dars { get; set; }
        public virtual DbSet<darcheque> darcheques { get; set; }
        public virtual DbSet<depositpayment> depositpayments { get; set; }
        public virtual DbSet<documentdetail> documentdetails { get; set; }
        public virtual DbSet<employee_details> employee_details { get; set; }
        public virtual DbSet<employeedesignation> employeedesignations { get; set; }
        public virtual DbSet<empsalarydetail> empsalarydetails { get; set; }
        public virtual DbSet<fd> fds { get; set; }
        public virtual DbSet<filingfee> filingfees { get; set; }
        public virtual DbSet<guarantormaster> guarantormasters { get; set; }
        public virtual DbSet<head> heads { get; set; }
        public virtual DbSet<headstree> headstrees { get; set; }
        public virtual DbSet<jointpronote> jointpronotes { get; set; }
        public virtual DbSet<loanpronote> loanpronotes { get; set; }
        public virtual DbSet<login> logins { get; set; }
        public virtual DbSet<membermaster> membermasters { get; set; }
        public virtual DbSet<membersdocument> membersdocuments { get; set; }
        public virtual DbSet<appvoucherapproval> appvoucherapprovals { get; set; }
        public virtual DbSet<cashcollectionamount> cashcollectionamounts { get; set; }
        public virtual DbSet<commissionandservicetax> commissionandservicetaxes { get; set; }
        public virtual DbSet<commissiondetail> commissiondetails { get; set; }
        public virtual DbSet<membersuggestion> membersuggestions { get; set; }
        public virtual DbSet<membertogroupmaster> membertogroupmasters { get; set; }
        public virtual DbSet<mobileappvoucher> mobileappvouchers { get; set; }
        public virtual DbSet<moneycollector> moneycollectors { get; set; }
        public virtual DbSet<nomineetable> nomineetables { get; set; }
        public virtual DbSet<PasswordChangeHistory> PasswordChangeHistories { get; set; }
        public virtual DbSet<pdrr> pdrrs { get; set; }
        public virtual DbSet<petrolconsumption> petrolconsumptions { get; set; }
        public virtual DbSet<relisation> relisations { get; set; }
        public virtual DbSet<removal_approval> removal_approval { get; set; }
        public virtual DbSet<removedmaster> removedmasters { get; set; }
        public virtual DbSet<restrictionmaster> restrictionmasters { get; set; }
        public virtual DbSet<right> rights { get; set; }
        public virtual DbSet<role> roles { get; set; }
        public virtual DbSet<transfer_approval> transfer_approval { get; set; }
        public virtual DbSet<transfermaster> transfermasters { get; set; }
        public virtual DbSet<transloan> transloans { get; set; }
        public virtual DbSet<transprofitandloss> transprofitandlosses { get; set; }
        public virtual DbSet<VoucherSer> VoucherSers { get; set; }
        public virtual DbSet<voucherdeleted> voucherdeleteds { get; set; }
        public virtual DbSet<subscriber> subscribers { get; set; }
        public virtual DbSet<SubscriberDetail> SubscriberDetails { get; set; }
        public virtual DbSet<substitutedmaster> substitutedmasters { get; set; }
        public virtual DbSet<tablemaster> tablemasters { get; set; }
        public virtual DbSet<transadvance> transadvances { get; set; }
        public virtual DbSet<transcourt> transcourts { get; set; }
        public virtual DbSet<singlepronote> singlepronotes { get; set; }
        public virtual DbSet<receiptmaster> receiptmasters { get; set; }
        public virtual DbSet<rejectedmember> rejectedmembers { get; set; }
        public virtual DbSet<relation> relations { get; set; }
        public virtual DbSet<salarytransbank> salarytransbanks { get; set; }
        public virtual DbSet<reauctionparticular> reauctionparticulars { get; set; }
        public virtual DbSet<prospect> prospects { get; set; }
        public virtual DbSet<auctiondetail> auctiondetails { get; set; }
        public virtual DbSet<groupmaster> groupmasters { get; set; }
        public virtual DbSet<voucher> vouchers { get; set; }
        public virtual DbSet<trans_payment> trans_payment { get; set; }
        public virtual DbSet<transbank> transbanks { get; set; }
    
        public virtual ObjectResult<BkBindAdvance_Result> BkBindAdvance(Nullable<int> branchId, Nullable<int> rootid, Nullable<System.DateTime> todte)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var rootidParameter = rootid.HasValue ?
                new ObjectParameter("Rootid", rootid) :
                new ObjectParameter("Rootid", typeof(int));
    
            var todteParameter = todte.HasValue ?
                new ObjectParameter("todte", todte) :
                new ObjectParameter("todte", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BkBindAdvance_Result>("BkBindAdvance", branchIdParameter, rootidParameter, todteParameter);
        }
    
        public virtual ObjectResult<BkBindAdvancePart2_Result> BkBindAdvancePart2(Nullable<System.DateTime> toDate, Nullable<int> branchid)
        {
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BkBindAdvancePart2_Result>("BkBindAdvancePart2", toDateParameter, branchidParameter);
        }
    
        public virtual ObjectResult<BkBindBankFD_Result> BkBindBankFD(Nullable<System.DateTime> toDate, Nullable<int> branchid)
        {
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BkBindBankFD_Result>("BkBindBankFD", toDateParameter, branchidParameter);
        }
    
        public virtual ObjectResult<BkBindBankSB_Result> BkBindBankSB(Nullable<System.DateTime> toDate, Nullable<int> branchid)
        {
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BkBindBankSB_Result>("BkBindBankSB", toDateParameter, branchidParameter);
        }
    
        public virtual ObjectResult<BkBindDecree1_Result> BkBindDecree1(Nullable<int> bid, Nullable<System.DateTime> todate)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BkBindDecree1_Result>("BkBindDecree1", bidParameter, todateParameter);
        }
    
        public virtual ObjectResult<BkBindPandL_Result> BkBindPandL(Nullable<int> branchid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("branchid", branchid) :
                new ObjectParameter("branchid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BkBindPandL_Result>("BkBindPandL", branchidParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<ChitCredit_Result> ChitCredit(Nullable<int> sBranchID, Nullable<System.DateTime> sChoosenDate)
        {
            var sBranchIDParameter = sBranchID.HasValue ?
                new ObjectParameter("SBranchID", sBranchID) :
                new ObjectParameter("SBranchID", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ChitCredit_Result>("ChitCredit", sBranchIDParameter, sChoosenDateParameter);
        }
    
        public virtual ObjectResult<FortnightlyChits_Result> FortnightlyChits(Nullable<int> branchid, Nullable<System.DateTime> sChoosenDate)
        {
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FortnightlyChits_Result>("FortnightlyChits", branchidParameter, sChoosenDateParameter);
        }
    
        public virtual ObjectResult<getbranches_Result> getbranches(Nullable<int> bid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getbranches_Result>("getbranches", bidParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<Investments_GroupHead_Result> Investments_GroupHead(Nullable<int> bid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var bidParameter = bid.HasValue ?
                new ObjectParameter("bid", bid) :
                new ObjectParameter("bid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Investments_GroupHead_Result>("Investments_GroupHead", bidParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<Loans_Result> Loans(Nullable<int> sBranchID, Nullable<System.DateTime> sChoosenDate)
        {
            var sBranchIDParameter = sBranchID.HasValue ?
                new ObjectParameter("SBranchID", sBranchID) :
                new ObjectParameter("SBranchID", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Loans_Result>("Loans", sBranchIDParameter, sChoosenDateParameter);
        }
    
        public virtual ObjectResult<MonthlyChit_Result> MonthlyChit(Nullable<int> branchid, Nullable<System.DateTime> sChoosenDate)
        {
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MonthlyChit_Result>("MonthlyChit", branchidParameter, sChoosenDateParameter);
        }
    
        public virtual ObjectResult<OutStanding_Result> OutStanding(Nullable<int> sBranchID, Nullable<System.DateTime> sChoosenDate)
        {
            var sBranchIDParameter = sBranchID.HasValue ?
                new ObjectParameter("SBranchID", sBranchID) :
                new ObjectParameter("SBranchID", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OutStanding_Result>("OutStanding", sBranchIDParameter, sChoosenDateParameter);
        }
    
        public virtual ObjectResult<RCM1Credit_Result> RCM1Credit(Nullable<int> sBranchID, Nullable<System.DateTime> sChoosenDate)
        {
            var sBranchIDParameter = sBranchID.HasValue ?
                new ObjectParameter("SBranchID", sBranchID) :
                new ObjectParameter("SBranchID", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RCM1Credit_Result>("RCM1Credit", sBranchIDParameter, sChoosenDateParameter);
        }
    
        public virtual ObjectResult<RCM2Credit_Result> RCM2Credit(Nullable<int> sBranchID, Nullable<System.DateTime> sChoosenDate)
        {
            var sBranchIDParameter = sBranchID.HasValue ?
                new ObjectParameter("SBranchID", sBranchID) :
                new ObjectParameter("SBranchID", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RCM2Credit_Result>("RCM2Credit", sBranchIDParameter, sChoosenDateParameter);
        }
    
        public virtual ObjectResult<TrimonthlyChits_Result> TrimonthlyChits(Nullable<int> sBranchID, Nullable<System.DateTime> sChoosenDate)
        {
            var sBranchIDParameter = sBranchID.HasValue ?
                new ObjectParameter("SBranchID", sBranchID) :
                new ObjectParameter("SBranchID", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TrimonthlyChits_Result>("TrimonthlyChits", sBranchIDParameter, sChoosenDateParameter);
        }
    
        public virtual ObjectResult<UnpaidPrizeMoney_Result> UnpaidPrizeMoney(Nullable<int> sBranchID, Nullable<System.DateTime> sChoosenDate)
        {
            var sBranchIDParameter = sBranchID.HasValue ?
                new ObjectParameter("SBranchID", sBranchID) :
                new ObjectParameter("SBranchID", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UnpaidPrizeMoney_Result>("UnpaidPrizeMoney", sBranchIDParameter, sChoosenDateParameter);
        }
    
        public virtual ObjectResult<UnpaidPrizemoneypayable_Result> UnpaidPrizemoneypayable(Nullable<int> sBranchID, Nullable<System.DateTime> sChoosenDate)
        {
            var sBranchIDParameter = sBranchID.HasValue ?
                new ObjectParameter("SBranchID", sBranchID) :
                new ObjectParameter("SBranchID", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UnpaidPrizemoneypayable_Result>("UnpaidPrizemoneypayable", sBranchIDParameter, sChoosenDateParameter);
        }
    
        public virtual ObjectResult<TrialBalanceofOtherItems_Result> TrialBalanceofOtherItems(Nullable<int> sBranchID, Nullable<System.DateTime> sChoosenDate)
        {
            var sBranchIDParameter = sBranchID.HasValue ?
                new ObjectParameter("SBranchID", sBranchID) :
                new ObjectParameter("SBranchID", typeof(int));
    
            var sChoosenDateParameter = sChoosenDate.HasValue ?
                new ObjectParameter("SChoosenDate", sChoosenDate) :
                new ObjectParameter("SChoosenDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TrialBalanceofOtherItems_Result>("TrialBalanceofOtherItems", sBranchIDParameter, sChoosenDateParameter);
        }
    }
}
