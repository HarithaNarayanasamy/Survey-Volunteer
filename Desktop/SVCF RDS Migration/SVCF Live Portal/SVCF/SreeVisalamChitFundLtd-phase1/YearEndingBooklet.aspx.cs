using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using ClosedXML.Excel;
using System.Xml;
using SVCF_BusinessAccessLayer;
using System.IO;
using System.Data;
using SVCF_DataAccessLayer;
using Spire.Xls;
using System.Configuration;
using System.Drawing;

namespace SreeVisalamChitFundLtd_phase1
{
    public partial class YearEndingBooklet : System.Web.UI.Page
    {
        BusinessLayer objBAL = new BusinessLayer();
        BusinessLayer balayer = new BusinessLayer();
        ClsYearEndingBk_1 objBk1 = new ClsYearEndingBk_1();
        //Yearendingbookletclass YearEndingObj = new Yearendingbookletclass(outputlocation);
        Yearendingbookletclass YearEndingObj = new Yearendingbookletclass(outputlocation);
        static string outputlocation = @"C:\test\";
        ClsYEBAll ClsYeb = new ClsYEBAll(outputlocation);
        DataTable rentpaid = new DataTable();
        DataTable baddebts = new DataTable();

        DataTable dtbranch = new DataTable();
        DataTable dtinvest = new DataTable();
        DataTable Finalivest = new DataTable();
        DataTable dtBank = new DataTable();
        DataTable Foreman = new DataTable();
        DataTable Decree = new DataTable();
        //   DataTable Loans = new DataTable();
        DataTable OtherItems = new DataTable();
        DataTable Monthlychit = new DataTable();
        DataTable Chitheads = new DataTable();
        DataTable Stamps = new DataTable();
        DataTable Heads = new DataTable();
        int secondtablewidth = 0;
        int thirdtablewidth = 0;
        int fourthtablewidth = 0;
        int firsttablerowcount = 0;

        int comparefirst = 0;
        int comparethird = 0;


        DataTable Outstunpaid = new DataTable();


        decimal PrizeMoney = 0;
        decimal Kasar = 0;
        decimal OSTotal = 0;
        decimal Commission = 0;
        decimal UPTotal = 0;
        decimal amtremit = 0;

        DataTable dtBind = new DataTable();
        decimal NonPrized = 0;
        decimal NP = 0;
        decimal NPArr = 0;
        decimal OutTotal = 0;
        decimal BalancePayable = 0;
        DataTable Loansout = new DataTable();

        DataTable Chitdebit = new DataTable();

        string strChits = "";
        DataTable dtC;
        string credit;
        string debit;
        decimal E_Credit = 0;
        decimal E_Debit = 0;
        decimal P_Arrear = 0;
        decimal Sr_Amount = 0;
        decimal Call_Amount = 0;
        decimal Decree_Amount = 0;
        decimal Court_Amount = 0;
        decimal value = 0;
        decimal finalamount = 0;
        //   decimal PrizeMoney;

        DataTable sundries = new DataTable();
        string query = "";
        string filepath = "";
        string imgpath = "";
        decimal chitval;
        decimal bh;
        decimal Totalcommission;
        string imagepath = "";
        decimal finaltotal;
        decimal finaltotal2;
        decimal finaltotal3;
        decimal totalamountofkaser;
        decimal prizedAmount;
        decimal ForemanBalpay = 0;
        decimal Foremancallamntpaid = 0;
        decimal prizedarrear = 0;
        decimal nonprizedarrear = 0;
        decimal excessremittance = 0;
        decimal PrizeMoneyforman = 0;
        decimal CallAmount = 0;
        decimal BalancePayableforman = 0;
        decimal prize = 0;
        decimal callforman = 0;
        decimal balance = 0;

        double otherCredit = 0;
        double otherDebit = 0;

        public YearEndingBooklet()
        {
            outputlocation = filepath;
        }
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                LoadbranchList();
                filepath = Server.MapPath("imglogo.png");
            }
            filepath = Server.MapPath("imglogo.png");
        }

        public void LoadbranchList()
        {
            if (balayer.ToobjectstrEvenNull(Session["Branchid"]) == "161")
            {
                drpdownBranchlist.DataSource = null;
                DataTable dtgroupno = null;
                dtgroupno = objBAL.GetDataTable("select NodeID,Node from headstree where ParentID=1");
                DataRow dr = dtgroupno.NewRow();
                dr[0] = "0";
                dr[1] = "--Select--";
                drpdownBranchlist.DataValueField = "NodeID";
                drpdownBranchlist.DataTextField = "Node";
                dtgroupno.Rows.InsertAt(dr, 0);
                drpdownBranchlist.DataSource = dtgroupno;
                drpdownBranchlist.DataBind();
            }
            else
            {
                drpdownBranchlist.DataSource = null;
                DataTable dtgroupno = null;
                dtgroupno = objBAL.GetDataTable("select NodeID,Node from headstree where NodeID='" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + "'");
                DataRow dr = dtgroupno.NewRow();
                dr[0] = "0";
                dr[1] = "--Select--";
                drpdownBranchlist.DataValueField = "NodeID";
                drpdownBranchlist.DataTextField = "Node";
                dtgroupno.Rows.InsertAt(dr, 0);
                drpdownBranchlist.DataSource = dtgroupno;
                drpdownBranchlist.DataBind();
            }
        }

        void AddImage(XLWorkbook wb, string sheetName, int col, int row, string imagelocation)
        {
            try
            {
                string filepath = Server.MapPath(imagelocation);
                if (!File.Exists(filepath)) return;
                var ws = wb.Worksheet(sheetName);
                var image = ws.AddPicture(filepath);
                image.MoveTo(ws.Cell(row, col).Address);
                image.Scale(.5);
                // optional: resize picture
                //  wb.Save();
            }
            catch (Exception err)
            {

            }
        }


        protected void BtnSt_01_Click(object sender, EventArgs e)
        {
            try
            {
                DateTime FromDt = DateTime.Parse(txtFrmDate.Text);
                DateTime ToDt = DateTime.Parse(txtToDate.Text);

                #region Current Liabilities for Chit Credit
                decimal BroughtForward_libailities1 = 0;
                decimal I_Credit = 0, I_Debit = 0, E_Credit = 0, E_Debit = 0, N_Credit = 0, N_Debit = 0, NonPrized = 0, Prized = 0, TotalAmountofKasar = 0, NP = 0, P = 0;
                decimal FI_Credit = 0, FI_Debit = 0, FE_Credit = 0, FE_Debit = 0, FN_Credit = 0, FN_Debit = 0, FNonPrized = 0, FPrized = 0, FTotalAmountofKasar = 0, FNP = 0, FP = 0;
                decimal TI_Credit = 0, TI_Debit = 0, TE_Credit = 0, TE_Debit = 0, TN_Credit = 0, TN_Debit = 0, TNonPrized = 0, TPrized = 0, TTotalAmountofKasar = 0, TNP = 0, TP = 0;
                decimal RcmSummary = 0;
                decimal AmountActuallyremittedbytheParty = 0;
                decimal unpaidPrizedMoneySummary = 0;
                decimal unpaidPrizedMoneyLedgerCredit = 0;
                decimal ChitCollectiontobeAccounted = 0;
                decimal UnpaidOutstandingTotalSummary = 0;
                decimal ForemanandCSCSummary = 0;
                decimal NetBalanceChitabstract = 0, decPrizeMoney2 = 0, decCallAmount2 = 0, decBalancePayable2 = 0, decCallAmountPaid2 = 0;
                decimal decPrizeMoney1 = 0, decCallAmount1 = 0, decBalancePayable1 = 0, decCallAmountPaid1 = 0;
                decimal ForemanBalancePayable = 0;
                decimal TotalCreditSummary = 0, TotalDebitSummary = 0;

                var chitTrialMonthly = BindChitTrial("Monthly");
                var chitTrialFortnightly = BindChitTrial("Fortnightly");
                var chitTrialTrimonthly = BindChitTrial("Trimonthly");
                var chitOutstanding = BindOutstanding();
                var RCM = BindRCM();
                var ForemanCSCdt = BindForemanCSC();
                var ChitAbstract = BindChitAbstract();
                var ForemanDt = BindForemanOnly();
                var AdvanceDt = objBk1.BindAdvancePart1(Convert.ToInt32(drpdownBranchlist.SelectedValue), txtFrmDate.Text, txtToDate.Text);
                List<ModelAdvanceDecree> decreeAdvance = objBk1.BindAdvancePart1(Convert.ToInt32(drpdownBranchlist.SelectedValue), txtFrmDate.Text, txtToDate.Text);
                List<ModelOtherItems> GetOtherItemsData = objBk1.BindOtherItems(Convert.ToInt32(drpdownBranchlist.SelectedValue), txtToDate.Text);
                List<Bind12Heads> Get12HeadsData = objBk1.Get12Heads(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedValue));
                List<ModelAdvance> GetAdv = objBk1.BindAdvance(Convert.ToInt32(drpdownBranchlist.SelectedValue), txtToDate.Text);

                List<ModelBanks> GetScheduled = objBk1.BindScheduledBanks(txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedValue));
                List<ModelBanks> GetFDBanks = objBk1.BindFixedBanks(txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedValue));
                #region Summary Calculation
                RcmSummary = 0;

                decimal decSCC = 0, decSCD = 0, decRAC = 0, decRAD = 0, decVRAC = 0, decVRAD = 0;
                //var sundrycredit_summary= decreeAdv.Where(r=>r.Narration)
                AmountActuallyremittedbytheParty = 0;
                unpaidPrizedMoneySummary = 0;
                unpaidPrizedMoneyLedgerCredit = 0;
                ChitCollectiontobeAccounted = 0;
                UnpaidOutstandingTotalSummary = 0;
                ForemanandCSCSummary = 0;
                NetBalanceChitabstract = 0; decPrizeMoney2 = 0; decCallAmount2 = 0; decBalancePayable2 = 0; decCallAmountPaid2 = 0;
                decPrizeMoney1 = 0; decCallAmount1 = 0; decBalancePayable1 = 0; decCallAmountPaid1 = 0;
                ForemanBalancePayable = 0;
                TotalCreditSummary = 0; TotalDebitSummary = 0;

                #region SUNDRIES AND ADVANCES
                decSCC = GetAdv.Sum(r => r.SC_Credit);
                decSCD = GetAdv.Sum(r => r.SC_Debit);
                decRAC = GetAdv.Sum(r => r.RA_Credit);
                decRAD = GetAdv.Sum(r => r.RA_Debit);
                decVRAC = GetAdv.Sum(r => r.VRA_Credit);
                decVRAD = GetAdv.Sum(r => r.VRA_Debit);
                #endregion


                #region Foreman 
                decPrizeMoney1 = Convert.ToDecimal(ForemanDt.Compute("sum(PrizeMoney)", ""));
                decCallAmount1 = Convert.ToDecimal(ForemanDt.Compute("sum(CallAmount)", ""));
                decBalancePayable1 = Convert.ToDecimal(ForemanDt.Compute("sum(BalancePayable)", ""));
                decCallAmountPaid1 = Convert.ToDecimal(ForemanDt.Compute("sum(CallAmountPaid)", ""));
                #endregion

                #region Foreman CSC Net Balance
                decPrizeMoney2 = Convert.ToDecimal(ForemanCSCdt.Compute("sum(PrizeMoney)", ""));
                decCallAmount2 = Convert.ToDecimal(ForemanCSCdt.Compute("sum(CallAmount)", ""));
                decBalancePayable2 = Convert.ToDecimal(ForemanCSCdt.Compute("sum(BalancePayable)", ""));
                decCallAmountPaid2 = Convert.ToDecimal(ForemanCSCdt.Compute("sum(CallAmountPaid)", ""));
                #endregion
                if ((decBalancePayable2 - decBalancePayable1) > (decCallAmountPaid2))
                {
                    ForemanBalancePayable = (decBalancePayable2 - decBalancePayable1) - (decCallAmountPaid2);
                }
                else
                {
                    ForemanBalancePayable = (decCallAmountPaid2) - (decBalancePayable2 - decBalancePayable1);
                }
                decimal ForemanCallamountPaidforNonprized;

                ForemanCallamountPaidforNonprized = decCallAmountPaid2;
                I_Credit = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    I_Credit = I_Credit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(I_Credit)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FI_Credit = FI_Credit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(I_Credit)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TI_Credit = TI_Credit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(I_Credit)", ""));


                I_Debit = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    I_Debit = I_Debit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(I_Debit)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FI_Debit = FI_Debit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(I_Debit)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TI_Debit = TI_Debit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(I_Debit)", ""));

                E_Credit = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    E_Credit = E_Credit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(E_Credit)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FE_Credit = FE_Credit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(E_Credit)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TE_Credit = TE_Credit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(E_Credit)", ""));


                E_Debit = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    E_Debit = E_Debit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(E_Debit)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FE_Debit = FE_Debit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(E_Debit)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TE_Debit = TE_Debit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(E_Debit)", ""));

                N_Credit = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    N_Credit = N_Credit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(N_Credit)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FN_Credit = FN_Credit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(N_Credit)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TN_Credit = TN_Credit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(N_Credit)", ""));

                N_Debit = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    N_Debit = N_Debit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(N_Debit)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FN_Debit = FN_Debit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(N_Debit)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TN_Debit = TN_Debit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(N_Debit)", ""));


                NonPrized = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    NonPrized = NonPrized + Convert.ToDecimal(chitTrialMonthly.Compute("sum(NonPrized)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FNonPrized = FNonPrized + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(NonPrized)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TNonPrized = TNonPrized + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(NonPrized)", ""));


                Prized = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    Prized = Prized + Convert.ToDecimal(chitTrialMonthly.Compute("sum(Prized)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FPrized = FPrized + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(Prized)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TPrized = TPrized + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(Prized)", ""));

                TotalAmountofKasar = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    TotalAmountofKasar = TotalAmountofKasar + Convert.ToDecimal(chitTrialMonthly.Compute("sum(TotalAmountofKasar)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FTotalAmountofKasar = FTotalAmountofKasar + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(TotalAmountofKasar)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TTotalAmountofKasar = TTotalAmountofKasar + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(TotalAmountofKasar)", ""));

                NP = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    NP = NP + Convert.ToDecimal(chitTrialMonthly.Compute("sum(NP)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FNP = FNP + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(NP)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TNP = TNP + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(NP)", ""));

                P = 0;
                if (chitTrialMonthly.Rows.Count > 0)
                    P = P + Convert.ToDecimal(chitTrialMonthly.Compute("sum(P)", ""));
                if (chitTrialFortnightly.Rows.Count > 1)
                    FP = FP + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(P)", ""));
                if (chitTrialTrimonthly.Rows.Count > 1)
                    TP = TP + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(P)", ""));

                AmountActuallyremittedbytheParty = Convert.ToDecimal(chitOutstanding.Compute("sum(AmountActuallyremittedbytheParty)", ""));
                unpaidPrizedMoneySummary = (Convert.ToDecimal(chitOutstanding.Compute("sum(UnpaidPrizeMoney)", "")) - Convert.ToDecimal(chitOutstanding.Compute("sum(AmountActuallyremittedbytheParty)", "")));

                RcmSummary = Convert.ToDecimal(RCM.Compute("sum(RCM1_Credit)", ""));
                RcmSummary = RcmSummary + Convert.ToDecimal(RCM.Compute("sum(RCM2_Credit)", ""));

                //Chit abstact credit data
                ChitCollectiontobeAccounted = Convert.ToDecimal(ChitAbstract.Rows[3][2]);
                UnpaidOutstandingTotalSummary = Convert.ToDecimal(chitOutstanding.Compute("sum(OutTotal)", ""));
                ForemanandCSCSummary = Convert.ToDecimal(ForemanCSCdt.Compute("sum(CallAmountPaid)", ""));
                NetBalanceChitabstract = Convert.ToDecimal(ChitAbstract.Rows[ChitAbstract.Rows.Count - 1][2]);

                //unpaid prized money ledger
                if (Convert.ToDecimal(ChitAbstract.Rows[6][2]) > 0)
                    unpaidPrizedMoneyLedgerCredit = Convert.ToDecimal(ChitAbstract.Rows[6][2]);
                else
                    unpaidPrizedMoneyLedgerCredit = Convert.ToDecimal(ChitAbstract.Rows[6][3]);

                #endregion

                TotalCreditSummary = I_Credit + FI_Credit + TI_Credit;
                TotalCreditSummary = (TotalCreditSummary - AmountActuallyremittedbytheParty);
                TotalCreditSummary = (TotalCreditSummary + RcmSummary + ChitCollectiontobeAccounted + unpaidPrizedMoneyLedgerCredit + UnpaidOutstandingTotalSummary);
                TotalDebitSummary = I_Debit + FI_Debit + TI_Debit;
                TotalDebitSummary = TotalDebitSummary + unpaidPrizedMoneySummary;
                TotalDebitSummary = (TotalDebitSummary - ForemanandCSCSummary);
                decimal ChitCredit_Balance = TotalCreditSummary;
                decimal ChitDebit_Balance = TotalDebitSummary;
                #endregion


                //string folderPath = "E:\\Exceltest\\";
                // decimal BranchTotal = 0;
                // if (!Directory.Exists(folderPath))
                // {
                //     Directory.CreateDirectory(folderPath);
                // }
                string filename = "BS-St-01_" + DateTime.Now.Minute.ToString() + "_" + DateTime.Now.Second.ToString();
                using (XLWorkbook wb = new XLWorkbook())
                {
                    var ws = wb.Worksheets.Add("BS-St-01");
                    AddImage(wb, "BS-St-01", 1, 1, "imglogo.png");

                    ws.Cell(1, 9).Value = "Statement No. 01";
                    ws.Range(1, 9, 1, 10).Merge().AddToNamed("Titles");

                    ws.Cell(1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                    ws.Cell(1, 2).Style.Font.Bold = true;
                    ws.Cell(1, 2).Style.Font.FontSize = 14;

                    var branch = 2;
                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }

                    ws.Cell(2, 2).Style.Font.Bold = true;
                    ws.Cell(2, 2).Style.Font.FontSize = 13;

                    ws.Cell(3, 1).Value = "BALANCE SHEET AS AT 31st MARCH 2017";
                    ws.Cell(3, 1).Style.Font.Bold = true;
                    ws.Cell(3, 1).Style.Font.FontSize = 13;
                    ws.Range(3, 1, 3, 10).Merge().AddToNamed("Titles");
                    var rangedbr1 = ws.Range(ws.Cell(5, 1), ws.Cell(5, 10));
                    rangedbr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    #region Left Heading                   
                    ws.Cell(4, 1).Value = "Sl.No.";
                    ws.Cell(4, 1).Style.Font.Bold = true;
                    ws.Cell(4, 1).Style.Font.FontSize = 11;

                    ws.Cell(4, 2).Value = "LIABILITIES";
                    ws.Range(4, 2, 4, 3).Merge().AddToNamed("Titles");
                    ws.Cell(4, 2).Style.Font.Bold = true;
                    ws.Cell(4, 2).Style.Font.FontSize = 11;

                    ws.Cell(4, 4).Value = "AMOUNT";
                    ws.Cell(4, 4).Style.Font.Bold = true;
                    ws.Cell(4, 4).Style.Font.FontSize = 11;

                    var rangedbr2 = ws.Range(ws.Cell(4, 1), ws.Cell(4, 4));
                    rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    #endregion


                    #region right heading
                    ws.Cell(4, 5).Value = "Sl.No.";
                    ws.Cell(4, 5).Style.Font.Bold = true;
                    ws.Cell(4, 5).Style.Font.FontSize = 11;

                    ws.Cell(4, 6).Value = "ASSETS";
                    ws.Range(4, 6, 4, 9).Merge().AddToNamed("Titles");
                    ws.Cell(4, 6).Style.Font.Bold = true;
                    ws.Cell(4, 6).Style.Font.FontSize = 11;

                    ws.Cell(4, 10).Value = "AMOUNT";
                    ws.Cell(4, 10).Style.Font.Bold = true;
                    ws.Cell(4, 10).Style.Font.FontSize = 11;

                    var rangedbr3 = ws.Range(ws.Cell(4, 5), ws.Cell(4, 10));
                    rangedbr3.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    //var rangedbr4 = ws.Range(ws.Cell(6, 8), ws.Cell(6, 15));
                    //rangedbr4.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    #endregion
                    int RangeRow = 5;
                    #region Branches
                    ws.Cell(RangeRow, 1).Value = "I.";
                    ws.Cell(RangeRow, 1).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 2).Value = "BRANCHES:    PALLATHUR";
                    ws.Cell(RangeRow, 2).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 5).Value = "I.";
                    ws.Cell(RangeRow, 5).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 6).Value = "BRANCHES:";
                    ws.Cell(RangeRow, 6).Style.Font.Bold = true;
                    List<ModelBranchTrialBalance> St_01_objBranch = objBk1.BindBranches(Convert.ToInt32(drpdownBranchlist.SelectedValue), txtToDate.Text);
                    decimal BranchTotal = 0;
                    if (Convert.ToDecimal(St_01_objBranch[(St_01_objBranch.Count - 1)].Credit) > 0)
                    {
                        ws.Cell(RangeRow, 4).Value = St_01_objBranch[(St_01_objBranch.Count - 1)].Credit;
                        BranchTotal = St_01_objBranch[(St_01_objBranch.Count - 1)].Credit;
                    }
                    else
                    {
                        ws.Cell(RangeRow, 10).Value = St_01_objBranch[(St_01_objBranch.Count - 1)].Debit;
                        BranchTotal = St_01_objBranch[(St_01_objBranch.Count - 1)].Debit;
                    }

                    #endregion
                    System.Data.DataTable buil = Buildings();
                    var ssb = buil.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    var aab = buil.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));

                    System.Data.DataTable land = lands();
                    var ssl = land.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    var aal = land.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));
                    RangeRow = RangeRow + 2;

                    #region Capital Account  & FIXED ASSETS
                    ws.Cell(RangeRow, 1).Value = "II.";
                    ws.Cell(RangeRow, 1).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 2).Value = "CAPITAL ACCOUNT";
                    ws.Cell(RangeRow, 2).Style.Font.Bold = true;
                    //fixed assets
                    ws.Cell(RangeRow, 5).Value = "II.";
                    ws.Cell(RangeRow, 5).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 6).Value = "FIXED ASSETS";
                    ws.Cell(RangeRow, 6).Style.Font.Bold = true;
                    RangeRow++;
                    ws.Cell(RangeRow, 2).Value = "Founders Shares";
                    //fixed assets
                    //ws.Cell(RangeRow, ).Value = "a)";
                    ws.Cell(RangeRow, 6).Value = "a)Lands as on " + txtFrmDate.Text;
                    ws.Cell(RangeRow, 6).Style.Font.Bold = true;
                    RangeRow++;

                    ws.Cell(RangeRow, 2).Value = "'B' Class Shares";
                    //fixed assets
                    //ws.Cell(RangeRow, 10).Value = "Add:";
                    ws.Cell(RangeRow, 6).Value = "Add: Purchased on";
                    RangeRow++;

                    ws.Cell(RangeRow, 2).Value = "'A' Class Shares";
                    //   ws.Cell(RangeRow, 6).Value = "0";
                    //fixed assets
                    // ws.Cell(RangeRow, 10).Value = "Less:";
                    ws.Cell(RangeRow, 6).Value = "Less: Sold on";
                    RangeRow++;
                    ws.Cell(RangeRow, 6).Value = "(Sale Price Rs.  )";

                    RangeRow++;

                    #endregion
                    //      RangeRow++;

                    #region RESERVE & SURPLUS / Right hand side data
                    ws.Cell(RangeRow, 1).Value = "III.";
                    ws.Cell(RangeRow, 1).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 2).Value = "RESERVES & SURPLUS";
                    ws.Cell(RangeRow, 2).Style.Font.Bold = true;
                    //Right hand side data
                    //ws.Cell(RangeRow, 9).Value = "b)";
                    //ws.Cell(RangeRow, 6).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 6).Value = "b)Buildings as on " + txtFrmDate.Text;
                    ws.Cell(RangeRow, 6).Style.Font.Bold = true;
                    RangeRow++;

                    ws.Cell(RangeRow, 2).Value = "a) General Reserve";

                    //Right hand side data
                    //ws.Cell(RangeRow, 10).Value = "Add:";
                    ws.Cell(RangeRow, 6).Value = "Add: Purchased on";
                    RangeRow++;

                    ws.Cell(RangeRow, 2).Value = "b) Reserve under Chit Funds Act";

                    //Right hand side data
                    //ws.Cell(RangeRow, 10).Value = "Less:";
                    ws.Cell(RangeRow, 6).Value = "Less: Sold on";
                    RangeRow++;

                    ws.Cell(RangeRow, 2).Value = "c) Capital Reserve";

                    //Right hand side data
                    ws.Cell(RangeRow, 6).Value = "(Sale Price Rs.                          )";
                    RangeRow++;

                    ws.Cell(RangeRow, 2).Value = "d) Surplus In Profit and Loss Account";

                    //Right hand side data
                    ws.Cell(RangeRow, 6).Value = "Depreciation ";
                    ws.Cell(RangeRow, 7).Value = "0.00";
                    #endregion
                    RangeRow++;

                    #region SECURED LOANS & INVESTMENTS
                    ws.Cell(RangeRow, 1).Value = "IV.";
                    ws.Cell(RangeRow, 1).Style.Font.Bold = true;
                    //     ws.Cell(RangeRow, 9).Value = "c)";
                    List<ModelFixedAssets> FixedAsset = objBk1.FixedAssetSummary1(txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedValue));
                    System.Data.DataTable Furn = FURNITURE();
                    var ss1 = Furn.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    var aa1 = Furn.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));
                    //     var s1 = ss1.Sum(i=>i.);
                    System.Data.DataTable elec = Electrical();
                    var ss2 = elec.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    var aa2 = elec.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));

                    System.Data.DataTable mach = Machineries();
                    var ss3 = mach.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    var aa3 = mach.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));

                    System.Data.DataTable frwheel = Car();
                    var ss4 = frwheel.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    var aa4 = frwheel.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));

                    System.Data.DataTable twowhe = Bike();
                    var ss5 = twowhe.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    var aa5 = twowhe.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));

                    System.Data.DataTable comp = COMPUTERS();
                    var ss6 = comp.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    var aa6 = comp.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));


                    System.Data.DataTable mob = MOBILES();
                    var ss7 = mob.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    var aa7 = mob.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));

                    //System.Data.DataTable bicyc = BiCycle();
                    //var ss1 = Furn.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    //var aa1 = Furn.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));

                    System.Data.DataTable shre = Shares();
                    var ss8 = shre.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Valueason")));
                    var aa8 = shre.AsEnumerable().Sum(i => Convert.ToDouble(i.Field<string>("Amount")));
                    var NodeIdList = FixedAsset.Select(r => r.PID).Distinct().ToList();
                    //       var ss = FixedAsset.Sum(i => Convert.ToDouble(i.Debit)).ToString();



                    decimal asonDate_Value = 0;
                    decimal PurchaseAmount = 0, Depreciation_withoutSale = 0, Carryforward = 0;
                    bool ItemSold1 = false;
                    foreach (var node in NodeIdList)
                    {
                        var headname = FixedAsset.Where(r => r.PID == node).Select(r => r.Heads).FirstOrDefault();
                        ws.Cell(RangeRow, 6).Value = "c)" + headname + " as on " + txtFrmDate.Text;
                        RangeRow++;
                        var ChildRowList = FixedAsset.AsEnumerable().Where(r => r.PID == node).Select(r => r).ToList();

                        asonDate_Value = 0;

                        foreach (var cid in ChildRowList)
                        {
                            try
                            {
                                var Hd_AsonAmount = objBAL.GetScalarDecimal(@"select if(sum(Amount)>0, sum(Amount),0) as 'Amount' from voucher where head_Id = " + cid.CNodeID + " and choosendate <= '" + objBAL.changedateformat(FromDt, 2) + "' and voucher_type = 'D';");

                                if (Hd_AsonAmount > 0)
                                {
                                    var subhead_name = FixedAsset.Where(r => r.PID == node && r.CNodeID == Convert.ToInt32(cid.CNodeID)).Select(r => r.Narration).FirstOrDefault();
                                    RangeRow++;

                                    ws.Cell(RangeRow, 11).Value = subhead_name + "As on " + txtFrmDate.Text;
                                    ws.Cell(RangeRow, 12).Value = Hd_AsonAmount;
                                    ws.Cell(RangeRow, 12).Style.NumberFormat.Format = "#,##0.00";
                                }
                                var GetDepreciation = objBAL.GetDataTable(@"SELECT uuid_from_bin(t1.DualTransactionKey) as 'DualTransactionKey',t2.Voucher_Type,t1.Head_Id as 'Credit',t2.Head_Id as 'Debit',t1.Amount,t1.Voucher_type,t1.choosenDate,t1.Series,t1.Narration " +
                                  "FROM voucher T1 JOIN voucher T2 ON T1.DualTransactionKey = T2.DualTransactionKey and t1.Amount=t2.Amount" +
                                      " WHERE t1.Voucher_Type='C' and t2.Voucher_Type='D' and T1.Head_Id =" + cid.CNodeID + " and t2.Head_Id=00122 and t1.Branchid=" + drpdownBranchlist.SelectedValue + " and " +
                                     " t1.choosendate between '" + objBAL.changedateformat(FromDt, 2) + "' and '" + objBAL.changedateformat(ToDt, 2) + "';");


                                var GetPurchase = objBAL.GetDataTable(@"select * from voucher as vc
                                        join accruedloanfd_details as afd on afd.dualtransactionkey=vc.DualTransactionKey
                                        where vc.head_Id=" + cid.CNodeID + " and vc.BranchID=" + drpdownBranchlist.SelectedValue + " " +
                                           "and vc.ChoosenDate between '" + objBAL.changedateformat(FromDt, 2) + "' and '" + objBAL.changedateformat(ToDt, 2) + "' and vc.Voucher_Type='D';");

                                var GetsaleData_Profit = objBAL.GetDataTable(@"SELECT uuid_from_bin(t1.DualTransactionKey) as 'DualTransactionKey',t2.Voucher_Type,t1.Head_Id as 'Credit',t2.Head_Id as 'Debit', " +
                                        "t1.Amount,t2.Amount as 'DebitAmount',t1.Voucher_type,t1.choosenDate,t1.Series,t1.Narration" +
                                        " FROM voucher T1 JOIN voucher T2 ON T1.DualTransactionKey = T2.DualTransactionKey and t1.Amount=t2.Amount " +
                                        "join headstree as hd on hd.NodeID=t1.Head_Id " +
                                        "WHERE t1.Voucher_Type='C' and t2.Voucher_Type='D' and T1.Head_Id in (hd.NodeId) and T2.Head_Id=" + cid.CNodeID + " and t1.Branchid=" + drpdownBranchlist.SelectedValue + " and " +
                                            "t1.choosendate between '" + objBAL.changedateformat(FromDt, 2) + "' and '" + objBAL.changedateformat(ToDt, 2) + "'  and hd.ParentID=11;");



                                if ((GetPurchase.Rows.Count > 0) && !(GetPurchase.Rows[0]["purchasedate"]).Equals(System.DBNull.Value))
                                {
                                    RangeRow++; RangeRow++;
                                    ws.Cell(RangeRow, 11).Value = "Purchased on " + GetPurchase.Rows[0]["purchasedate"];
                                    ws.Cell(RangeRow, 12).Value = GetPurchase.Rows[0]["Amount"];
                                    ws.Cell(RangeRow, 12).Style.NumberFormat.Format = "#,##0.00";
                                    PurchaseAmount = Convert.ToDecimal(GetPurchase.Rows[0]["Amount"]);
                                }

                                if (GetDepreciation.Rows.Count > 0)
                                {
                                    RangeRow++; RangeRow++;
                                    var dtch = GetDepreciation.Rows[0]["choosenDate"];
                                    var DepreciationDt = objBAL.GetDataTable("select accruedid, dualtransactionkey, branchid, date_format(choosendate,'%d/%m/%Y') as choosendate, head_id, subhead_id, " +
                                        "frmdate, todate, rootid, date_format(purchasedate,'%d/%m/%Y') as purchasedate, date_format(saledate,'%d/%m/%Y') as saledate, amount, buildingname, rateofrent from accruedloanfd_details " +
                                        "where uuid_from_bin(dualtransactionkey)='" + GetDepreciation.Rows[0]["DualTransactionKey"] + "' and " +
                                        "head_id=" + GetDepreciation.Rows[0]["Debit"] + " and choosenDate='" + objBAL.changedateformat(Convert.ToDateTime(dtch), 2) + "'");
                                    if (DepreciationDt.Rows.Count > 0)
                                    {

                                        ws.Cell(RangeRow, 10).Value = "Less:";
                                        ws.Cell(RangeRow, 11).Value = "Depreciation " + DepreciationDt.Rows[0]["choosendate"];
                                        ws.Cell(RangeRow, 12).Value = GetDepreciation.Rows[0]["Amount"];
                                        ws.Cell(RangeRow, 12).Style.NumberFormat.Format = "#,##0.00";

                                    }
                                }

                                //Depreciation with sale
                                if (GetsaleData_Profit.Rows.Count == 0)
                                {
                                    var GetsaleData_Loss = objBAL.GetDataTable(@"SELECT uuid_from_bin(t1.DualTransactionKey) as 'DualTransactionKey',t2.Voucher_Type,t1.Head_Id as 'Credit',t2.Head_Id as 'Debit',
                                        t1.Amount,t2.Amount as 'DebitAmount',t1.Voucher_type,date_format(t1.choosenDate,'%d/%m/%Y') as 'choosenDate',t1.Series,t1.Narration
                                        FROM voucher T1 JOIN voucher T2 ON T1.DualTransactionKey = T2.DualTransactionKey and t1.Amount=t2.Amount
                                        join headstree as hd on hd.NodeID=t1.Head_Id
                                        WHERE t1.Voucher_Type='C' and t2.Voucher_Type='D' and T1.Head_Id=" + cid.CNodeID + " and T2.Head_Id in (hd.NodeId) and t1.Branchid=" + drpdownBranchlist.SelectedValue + " and " +
                                           "t1.choosendate between '" + objBAL.changedateformat(FromDt, 2) + "' and '" + objBAL.changedateformat(ToDt, 2) + "'  and hd.ParentID=11;");

                                    if (GetsaleData_Loss.Rows.Count > 0)
                                    {

                                        var SaleDt_loss = objBAL.GetDataTable(@"select accruedid, dualtransactionkey, branchid, date_format(choosendate,'%d/%m/%Y') as choosendate, head_id, subhead_id, " +
                                          "frmdate, todate, rootid, date_format(purchasedate,'%d/%m/%Y') as purchasedate, date_format(saledate,'%d/%m/%Y') as saledate, amount, buildingname, rateofrent from accruedloanfd_details " +
                                          "where uuid_from_bin(dualtransactionkey)='" + GetsaleData_Loss.Rows[0]["DualTransactionKey"] + "' and " +
                                          "head_id=" + GetsaleData_Loss.Rows[0]["Debit"] + " and amount=" + GetsaleData_Loss.Rows[0]["Amount"] + " and choosenDate='" + GetDepreciation.Rows[0]["choosenDate"] + "'");

                                        if (SaleDt_loss.Rows.Count > 0)
                                        {
                                            ItemSold1 = true;
                                            var saledate = SaleDt_loss.Rows[0]["saledate"].ToString();
                                            RangeRow++; RangeRow++;
                                            ws.Cell(RangeRow, 11).Value = "Sold on " + saledate;
                                            RangeRow++;
                                            ws.Cell(RangeRow, 11).Value = "(Sale Price Rs. " + GetsaleData_Loss.Rows[0]["Amount"] + ")";
                                            ItemSold1 = false;
                                        }

                                    }
                                    if ((GetDepreciation.Rows.Count > 0) && (GetsaleData_Loss.Rows.Count == 0))
                                        Depreciation_withoutSale = Convert.ToDecimal(GetDepreciation.Rows[0]["Amount"]);
                                }
                                else
                                {
                                    var saldt = GetDepreciation.Rows[0]["choosenDate"];
                                    var SaleDt_Profit = objBAL.GetDataTable(@"select accruedid, dualtransactionkey, branchid, date_format(choosendate,'%d/%m/%Y') as choosendate, head_id, subhead_id, " +
                                 "frmdate, todate, rootid, date_format(purchasedate,'%d/%m/%Y') as purchasedate, date_format(saledate,'%d/%m/%Y') as saledate, amount, buildingname, rateofrent from accruedloanfd_details " +
                                 "where uuid_from_bin(dualtransactionkey)='" + GetsaleData_Profit.Rows[0]["DualTransactionKey"] + "' and " +
                                 "head_id=" + GetsaleData_Profit.Rows[0]["Debit"] + " and amount=" + GetsaleData_Profit.Rows[0]["Amount"] + " and choosenDate='" + objBAL.changedateformat(Convert.ToDateTime(saldt), 2) + "'");
                                    if (SaleDt_Profit.Rows.Count > 0)
                                    {
                                        ItemSold1 = true;
                                        RangeRow++; RangeRow++;
                                        var saledate = SaleDt_Profit.Rows[0]["saledate"].ToString();
                                        ws.Cell(RangeRow, 11).Value = "Sold on " + saledate;
                                        RangeRow++;
                                        ws.Cell(RangeRow, 11).Value = "(Sale Price Rs. " + GetsaleData_Profit.Rows[0]["Amount"] + ")";
                                    }
                                }
                                if (ItemSold1 == false)
                                {
                                    asonDate_Value = (Hd_AsonAmount + PurchaseAmount) - Depreciation_withoutSale;
                                    Carryforward = Carryforward + asonDate_Value;
                                    ws.Cell(RangeRow, 13).Value = asonDate_Value;
                                    ws.Cell(RangeRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                }
                                asonDate_Value = 0; PurchaseAmount = 0; Depreciation_withoutSale = 0; Hd_AsonAmount = 0;
                                // TotalDepreciation = TotalDepreciation + Inv_depreciation;
                            }
                            catch (Exception) { }

                        }


                        //ws.Cell((RangeRow - 4), 12).Value = asonDate_Value;
                        //ws.Cell(RangeRow, 13).Value = TotalDepreciation;
                        //ws.Cell(RangeRow, 14).Value = (asonDate_Value - TotalDepreciation);
                        //TotalBalance_Investment = TotalBalance_Investment + (asonDate_Value - TotalDepreciation);
                        //RangeRow++;
                        var rangedbr35 = ws.Range(ws.Cell(7, 1), ws.Cell(RangeRow, 6));
                        rangedbr35.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    }

                    ws.Cell(RangeRow, 4).Value = "Carried Over";
                    ws.Cell(RangeRow, 4).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 4).Style.Font.FontSize = 11;
                    ws.Cell(RangeRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeRow, 6).Value = BranchTotal;
                    ws.Cell(RangeRow, 6).Style.NumberFormat.Format = "#,##0.00";

                    var rangedbr25 = ws.Range(ws.Cell(7, 1), ws.Cell(RangeRow, 6));
                    rangedbr25.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    //Asset carried over
                    ws.Cell(RangeRow, 11).Value = "Carried Over";
                    ws.Cell(RangeRow, 11).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 11).Style.Font.FontSize = 11;
                    ws.Cell(RangeRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeRow, 14).Value = Carryforward;
                    ws.Cell(RangeRow, 14).Style.NumberFormat.Format = "#,##0.00";

                    var rangedbr5 = ws.Range(ws.Cell(7, 8), ws.Cell(RangeRow, 15));
                    rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    #endregion
                    RangeRow++; RangeRow++;
                    #region Liabilities-Expenses and Provisions
                    int SecondGridStartingRow = RangeRow;
                    ws.Cell(RangeRow, 1).Value = "Sl.No";
                    ws.Cell(RangeRow, 4).Value = "LIABILITIES";
                    ws.Cell(RangeRow, 6).Value = "AMOUNT";

                    var rangedbr6 = ws.Range(ws.Cell(SecondGridStartingRow, 1), ws.Cell(RangeRow, 6));
                    rangedbr6.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;


                    ws.Cell(RangeRow, 8).Value = "Sl.No";
                    ws.Cell(RangeRow, 11).Value = "ASSETS";
                    ws.Cell(RangeRow, 15).Value = "AMOUNT";

                    var rangedbr7 = ws.Range(ws.Cell(SecondGridStartingRow, 8), ws.Cell(RangeRow, 15));
                    rangedbr7.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    #endregion
                    RangeRow++;
                    var Liabilities_datarow_starting = RangeRow;
                    #region Liabilities-Expenses and Provisions - Data
                    ws.Cell(RangeRow, 4).Value = "Brought Forward";
                    ws.Cell(RangeRow, 6).Value = BranchTotal;
                    ws.Cell(RangeRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeRow, 6).Style.NumberFormat.Format = "#,##0.00";
                    RangeRow++;

                    #region CURRENT Liabilities 
                    decimal debitSummary_Liabilities = 0, creditSummary_Liabilities = 0;
                    ws.Cell(RangeRow, 2).Value = "CURRENT LIABILITIES"; RangeRow++;
                    ws.Cell(RangeRow, 2).Value = "Chit Credit";
                    ws.Cell(RangeRow, 4).Value = ChitCredit_Balance;
                    ws.Cell(RangeRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeRow, 4).Style.NumberFormat.Format = "#,##0.00";


                    var decDC = decreeAdvance.Sum(r => r.Degree_Credit);
                    var decDD = decreeAdvance.Sum(r => r.Degree_Debit);
                    if (decDC > 0 || decDD > 0)
                    {
                        RangeRow++;
                        ws.Cell(RangeRow, 2).Value = "Decree Advance";
                        if (decDC > decDD)
                        {
                            ws.Cell(RangeRow, 5).Value = (decDC - decDD);
                            creditSummary_Liabilities = creditSummary_Liabilities + (decDC - decDD);
                            ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";
                        }
                        else
                        {
                            ws.Cell(RangeRow, 6).Value = (decDD - decDC);
                            debitSummary_Liabilities = debitSummary_Liabilities + (decDD - decDC);
                            ws.Cell(RangeRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 6).Style.NumberFormat.Format = "#,##0.00";
                        }
                    }

                    if (decSCC > 0 || decSCD > 0)
                    {
                        RangeRow++;
                        ws.Cell(RangeRow, 2).Value = "Sundry Creditors";
                        if (decSCC > decSCD)
                        {
                            ws.Cell(RangeRow, 5).Value = (decSCC - decSCD);
                            creditSummary_Liabilities = creditSummary_Liabilities + (decSCC - decSCD);
                            ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";
                        }
                        else
                        {
                            ws.Cell(RangeRow, 6).Value = (decSCD - decSCC);
                            debitSummary_Liabilities = debitSummary_Liabilities + (decSCD - decSCC);
                            ws.Cell(RangeRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 6).Style.NumberFormat.Format = "#,##0.00";
                        }
                    }


                    if (decRAC > 0 || decRAD > 0)
                    {
                        RangeRow++;
                        ws.Cell(RangeRow, 2).Value = "Rent Advance";
                        if (decRAC > decRAD)
                        {
                            ws.Cell(RangeRow, 5).Value = (decRAC - decRAD);
                            creditSummary_Liabilities = creditSummary_Liabilities + (decRAC - decRAD);
                            ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";
                        }
                        else
                        {
                            ws.Cell(RangeRow, 6).Value = (decRAD - decRAC);
                            debitSummary_Liabilities = debitSummary_Liabilities + (decRAD - decRAC);
                            ws.Cell(RangeRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 6).Style.NumberFormat.Format = "#,##0.00";
                        }
                    }

                    if (drpdownBranchlist.SelectedValue == "161")
                    {
                        RangeRow++;
                        ws.Cell(RangeRow, 2).Value = "Vehile Advance Recovery";

                        if (decVRAC > decVRAD)
                        {
                            ws.Cell(RangeRow, 5).Value = (decVRAC - decVRAD);
                            creditSummary_Liabilities = creditSummary_Liabilities + (decVRAC - decVRAD);
                            ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";
                        }
                        else
                        {
                            ws.Cell(RangeRow, 6).Value = (decVRAD - decVRAC);
                            debitSummary_Liabilities = debitSummary_Liabilities + (decVRAD - decVRAC);
                            ws.Cell(RangeRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 6).Style.NumberFormat.Format = "#,##0.00";
                        }
                    }
                    else
                    {
                        ws.Cell(RangeRow, 2).Value = "Vehile Advance Recovery";
                    }
                    #endregion

                    RangeRow++;
                    ws.Cell(RangeRow, 6).Value = ChitCredit_Balance;
                    ws.Cell(RangeRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeRow, 6).Style.NumberFormat.Format = "#,##0.00";

                    RangeRow++;
                    ws.Cell(RangeRow, 2).Value = "LIABILITIES FOR EXPENSES";
                    ws.Cell(RangeRow, 2).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 2).Style.Font.FontSize = 11;



                    foreach (var row in GetOtherItemsData)
                    {
                        if (row.Credit > 0 || row.Debit > 0)
                        {
                            RangeRow++;
                            ws.Cell(RangeRow, 2).Value = row.Heads;
                            if (row.Credit > 0)
                            {
                                ws.Cell(RangeRow, 5).Value = row.Credit;
                                creditSummary_Liabilities = creditSummary_Liabilities + row.Credit;
                            }
                            else
                            {
                                ws.Cell(RangeRow, 6).Value = row.Debit;
                                debitSummary_Liabilities = debitSummary_Liabilities + row.Debit;
                            }
                        }
                    }

                    //PROVISIONS
                    RangeRow++;
                    ws.Cell(RangeRow, 2).Value = "PROVISIONS";
                    ws.Cell(RangeRow, 2).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 2).Style.Font.FontSize = 11;
                    if (drpdownBranchlist.SelectedValue == "161")
                    {
                        RangeRow++;
                        ws.Cell(RangeRow, 2).Value = "For Taxation";
                        ws.Cell(RangeRow, 5).Value = "0.0";
                        RangeRow++;
                        ws.Cell(RangeRow, 2).Value = "For Dividend";
                        ws.Cell(RangeRow, 5).Value = "0.0";
                    }
                    else
                    {
                        RangeRow++;
                        ws.Cell(RangeRow, 2).Value = "For Taxation";
                        ws.Cell(RangeRow, 5).Value = "0.0";
                        RangeRow++;
                        ws.Cell(RangeRow, 2).Value = "For Dividend";
                        ws.Cell(RangeRow, 5).Value = "0.0";
                    }

                    #endregion

                    RangeRow++;
                    ws.Cell(RangeRow, 4).Value = "Carried Over";
                    ws.Cell(RangeRow, 4).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 4).Style.Font.FontSize = 11;
                    debitSummary_Liabilities = debitSummary_Liabilities + ChitCredit_Balance;
                    if (creditSummary_Liabilities > debitSummary_Liabilities)
                    {
                        ws.Cell(RangeRow, 5).Value = creditSummary_Liabilities - debitSummary_Liabilities;
                    }
                    else
                    {
                        ws.Cell(RangeRow, 6).Value = debitSummary_Liabilities - creditSummary_Liabilities;
                    }

                    var rangedbr8 = ws.Range(ws.Cell(SecondGridStartingRow, 1), ws.Cell(RangeRow, 6));
                    rangedbr8.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    #region Right handside
                    RangeRow = SecondGridStartingRow + 1;
                    ws.Cell(RangeRow, 11).Value = "Brought Forward";
                    ws.Cell(RangeRow, 11).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 11).Style.Font.FontSize = 11;
                    ws.Cell(RangeRow, 15).Value = Carryforward;
                    BroughtForward_libailities1 = creditSummary_Liabilities - debitSummary_Liabilities;

                    List<ModelFixedAssets> FixedAsset2 = objBk1.FixedAssetSummary2(txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedValue));
                    bool ItemSold = false;
                    var NodeIdList2 = FixedAsset.Select(r => r.PID).Distinct().ToList();
                    asonDate_Value = 0;
                    PurchaseAmount = 0; Depreciation_withoutSale = 0;
                    foreach (var node in NodeIdList2)
                    {
                        var headname = FixedAsset.Where(r => r.PID == node).Select(r => r.Heads).FirstOrDefault();
                        ws.Cell(RangeRow, 10).Value = headname + " as on " + txtFrmDate.Text;
                        RangeRow++;
                        var ChildRowList = FixedAsset.AsEnumerable().Where(r => r.PID == node).Select(r => r).ToList();

                        asonDate_Value = 0;

                        foreach (var cid in ChildRowList)
                        {
                            try
                            {
                                var Hd_AsonAmount = objBAL.GetScalarDecimal(@"select if(sum(Amount)>0, sum(Amount),0) as 'Amount' from voucher where head_Id = " + cid.CNodeID + " and choosendate <= '" + objBAL.changedateformat(FromDt, 2) + "' and voucher_type = 'D';");

                                if (Hd_AsonAmount > 0)
                                {
                                    var subhead_name = FixedAsset.Where(r => r.PID == node && r.CNodeID == Convert.ToInt32(cid.CNodeID)).Select(r => r.Narration).FirstOrDefault();
                                    RangeRow++;

                                    ws.Cell(RangeRow, 11).Value = subhead_name + " As on " + txtFrmDate.Text;
                                    ws.Cell(RangeRow, 12).Value = Hd_AsonAmount;
                                    ws.Cell(RangeRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                }
                                var GetDepreciation = objBAL.GetDataTable(@"SELECT uuid_from_bin(t1.DualTransactionKey) as 'DualTransactionKey',t2.Voucher_Type,t1.Head_Id as 'Credit',t2.Head_Id as 'Debit',t1.Amount,t1.Voucher_type,t1.choosenDate,t1.Series,t1.Narration " +
                                  "FROM voucher T1 JOIN voucher T2 ON T1.DualTransactionKey = T2.DualTransactionKey and t1.Amount=t2.Amount" +
                                      " WHERE t1.Voucher_Type='C' and t2.Voucher_Type='D' and T1.Head_Id =" + cid.CNodeID + " and t2.Head_Id=00122 and t1.Branchid=" + drpdownBranchlist.SelectedValue + " and " +
                                     " t1.choosendate between '" + objBAL.changedateformat(FromDt, 2) + "' and '" + objBAL.changedateformat(ToDt, 2) + "';");


                                var GetPurchase = objBAL.GetDataTable(@"select * from voucher as vc
                                        join accruedloanfd_details as afd on afd.dualtransactionkey=vc.DualTransactionKey
                                        where vc.head_Id=" + cid.CNodeID + " and vc.BranchID=" + drpdownBranchlist.SelectedValue + " " +
                                           "and vc.ChoosenDate between '" + objBAL.changedateformat(FromDt, 2) + "' and '" + objBAL.changedateformat(ToDt, 2) + "' and vc.Voucher_Type='D';");

                                var GetsaleData_Profit = objBAL.GetDataTable(@"SELECT uuid_from_bin(t1.DualTransactionKey) as 'DualTransactionKey',t2.Voucher_Type,t1.Head_Id as 'Credit',t2.Head_Id as 'Debit', " +
                                        "t1.Amount,t2.Amount as 'DebitAmount',t1.Voucher_type,t1.choosenDate,t1.Series,t1.Narration" +
                                        " FROM voucher T1 JOIN voucher T2 ON T1.DualTransactionKey = T2.DualTransactionKey and t1.Amount=t2.Amount " +
                                        "join headstree as hd on hd.NodeID=t1.Head_Id " +
                                        "WHERE t1.Voucher_Type='C' and t2.Voucher_Type='D' and T1.Head_Id in (hd.NodeId) and T2.Head_Id=" + cid.CNodeID + " and t1.Branchid=" + drpdownBranchlist.SelectedValue + " and " +
                                            "t1.choosendate between '" + objBAL.changedateformat(FromDt, 2) + "' and '" + objBAL.changedateformat(ToDt, 2) + "'  and hd.ParentID=11;");



                                if ((GetPurchase.Rows.Count > 0) && !(GetPurchase.Rows[0]["purchasedate"]).Equals(System.DBNull.Value))
                                {
                                    RangeRow++; RangeRow++;
                                    ws.Cell(RangeRow, 11).Value = "Purchased on " + GetPurchase.Rows[0]["purchasedate"];
                                    ws.Cell(RangeRow, 12).Value = GetPurchase.Rows[0]["Amount"];
                                    ws.Cell(RangeRow, 12).Style.NumberFormat.Format = "#,##0.00";
                                    PurchaseAmount = Convert.ToDecimal(GetPurchase.Rows[0]["Amount"]);
                                }

                                if (GetDepreciation.Rows.Count > 0)
                                {
                                    RangeRow++; RangeRow++;
                                    var dtch = GetDepreciation.Rows[0]["choosenDate"];
                                    var DepreciationDt = objBAL.GetDataTable("select accruedid, dualtransactionkey, branchid, date_format(choosendate,'%d/%m/%Y') as choosendate, head_id, subhead_id, " +
                                        "frmdate, todate, rootid, date_format(purchasedate,'%d/%m/%Y') as purchasedate, date_format(saledate,'%d/%m/%Y') as saledate, amount, buildingname, rateofrent from accruedloanfd_details " +
                                        "where uuid_from_bin(dualtransactionkey)='" + GetDepreciation.Rows[0]["DualTransactionKey"] + "' and " +
                                        "head_id=" + GetDepreciation.Rows[0]["Debit"] + " and choosenDate='" + objBAL.changedateformat(Convert.ToDateTime(dtch), 2) + "'");
                                    if (DepreciationDt.Rows.Count > 0)
                                    {

                                        ws.Cell(RangeRow, 10).Value = "Less:";
                                        ws.Cell(RangeRow, 11).Value = "Depreciation " + DepreciationDt.Rows[0]["choosendate"];
                                        ws.Cell(RangeRow, 12).Value = GetDepreciation.Rows[0]["Amount"];
                                        ws.Cell(RangeRow, 12).Style.NumberFormat.Format = "#,##0.00";

                                    }
                                }

                                //Depreciation with sale
                                if (GetsaleData_Profit.Rows.Count == 0)
                                {
                                    var GetsaleData_Loss = objBAL.GetDataTable(@"SELECT uuid_from_bin(t1.DualTransactionKey) as 'DualTransactionKey',t2.Voucher_Type,t1.Head_Id as 'Credit',t2.Head_Id as 'Debit',
                                        t1.Amount,t2.Amount as 'DebitAmount',t1.Voucher_type,date_format(t1.choosenDate,'%d/%m/%Y') as 'choosenDate',t1.Series,t1.Narration
                                        FROM voucher T1 JOIN voucher T2 ON T1.DualTransactionKey = T2.DualTransactionKey and t1.Amount=t2.Amount
                                        join headstree as hd on hd.NodeID=t1.Head_Id
                                        WHERE t1.Voucher_Type='C' and t2.Voucher_Type='D' and T1.Head_Id=" + cid.CNodeID + " and T2.Head_Id in (hd.NodeId) and t1.Branchid=" + drpdownBranchlist.SelectedValue + " and " +
                                           "t1.choosendate between '" + objBAL.changedateformat(FromDt, 2) + "' and '" + objBAL.changedateformat(ToDt, 2) + "'  and hd.ParentID=11;");

                                    if (GetsaleData_Loss.Rows.Count > 0)
                                    {
                                        var SaleDt_loss = objBAL.GetDataTable(@"select accruedid, dualtransactionkey, branchid, date_format(choosendate,'%d/%m/%Y') as choosendate, head_id, subhead_id, " +
                                          "frmdate, todate, rootid, date_format(purchasedate,'%d/%m/%Y') as purchasedate, date_format(saledate,'%d/%m/%Y') as saledate, amount, buildingname, rateofrent from accruedloanfd_details " +
                                          "where uuid_from_bin(dualtransactionkey)='" + GetsaleData_Loss.Rows[0]["DualTransactionKey"] + "' and " +
                                          "head_id=" + GetsaleData_Loss.Rows[0]["Debit"] + " and amount=" + GetsaleData_Loss.Rows[0]["Amount"] + " and choosenDate='" + GetDepreciation.Rows[0]["choosenDate"] + "'");

                                        if (SaleDt_loss.Rows.Count > 0)
                                        {
                                            var saledate = SaleDt_loss.Rows[0]["saledate"].ToString();
                                            RangeRow++; RangeRow++;
                                            ws.Cell(RangeRow, 11).Value = "Sold on " + saledate;
                                            RangeRow++;
                                            ws.Cell(RangeRow, 11).Value = "(Sale Price Rs. " + GetsaleData_Loss.Rows[0]["Amount"] + ")";
                                            ItemSold = true;
                                        }
                                    }
                                    else
                                    {
                                        if ((GetDepreciation.Rows.Count > 0) && (GetsaleData_Loss.Rows.Count == 0))
                                        {
                                            Depreciation_withoutSale = Convert.ToDecimal(GetDepreciation.Rows[0]["Amount"]);
                                            ItemSold = false;
                                        }

                                    }
                                }
                                else
                                {
                                    ItemSold = true;
                                    var saldt = GetDepreciation.Rows[0]["choosenDate"];
                                    var SaleDt_Profit = objBAL.GetDataTable(@"select accruedid, dualtransactionkey, branchid, date_format(choosendate,'%d/%m/%Y') as choosendate, head_id, subhead_id, " +
                                 "frmdate, todate, rootid, date_format(purchasedate,'%d/%m/%Y') as purchasedate, date_format(saledate,'%d/%m/%Y') as saledate, amount, buildingname, rateofrent from accruedloanfd_details " +
                                 "where uuid_from_bin(dualtransactionkey)='" + GetsaleData_Profit.Rows[0]["DualTransactionKey"] + "' and " +
                                 "head_id=" + GetsaleData_Profit.Rows[0]["Debit"] + " and amount=" + GetsaleData_Profit.Rows[0]["Amount"] + " and choosenDate='" + objBAL.changedateformat(Convert.ToDateTime(saldt), 2) + "'");
                                    if (SaleDt_Profit.Rows.Count > 0)
                                    {
                                        RangeRow++; RangeRow++;
                                        var saledate = SaleDt_Profit.Rows[0]["saledate"].ToString();
                                        ws.Cell(RangeRow, 11).Value = "Sold on " + saledate;
                                        RangeRow++;
                                        ws.Cell(RangeRow, 11).Value = "(Sale Price Rs. " + GetsaleData_Profit.Rows[0]["Amount"] + ")";
                                    }
                                }

                                asonDate_Value = (Hd_AsonAmount + PurchaseAmount) - Depreciation_withoutSale;

                                if (ItemSold == false)
                                {
                                    Carryforward = Carryforward + asonDate_Value;
                                    ws.Cell(RangeRow, 13).Value = asonDate_Value;
                                    ws.Cell(RangeRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                    asonDate_Value = 0; PurchaseAmount = 0; Depreciation_withoutSale = 0; Hd_AsonAmount = 0;
                                }
                            }
                            catch (Exception) { }
                        }
                    }
                    ws.Cell(RangeRow, 11).Value = "Carried Over";
                    ws.Cell(RangeRow, 14).Value = Carryforward;

                    #endregion

                    var rangedbr9 = ws.Range(ws.Cell((SecondGridStartingRow + 1), 8), ws.Cell(RangeRow, 15));
                    rangedbr9.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    RangeRow++;

                    #region Current Asset Left and Right Title
                    var currentAssetStartingRow = RangeRow;
                    ws.Cell(RangeRow, 1).Value = "Sl.No";
                    ws.Cell(RangeRow, 4).Value = "LIABILITIES";
                    ws.Cell(RangeRow, 6).Value = "AMOUNT";
                    var rangedbr12 = ws.Range(ws.Cell(currentAssetStartingRow, 8), ws.Cell(RangeRow, 6));
                    rangedbr12.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    ws.Cell(RangeRow, 8).Value = "Sl.No";
                    ws.Cell(RangeRow, 11).Value = "ASSETS";
                    ws.Cell(RangeRow, 15).Value = "AMOUNT";
                    var rangedbr13 = ws.Range(ws.Cell(currentAssetStartingRow, 8), ws.Cell(RangeRow, 15));
                    rangedbr13.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    #endregion
                    decimal CurrentAssetSummary = 0;
                    #region Current Asset Left and Right Data
                    RangeRow = currentAssetStartingRow + 1;
                    RangeRow++;
                    ws.Cell(RangeRow, 3).Value = "Brought Forward";
                    ws.Cell(RangeRow, 5).Value = Carryforward;

                    RangeRow = currentAssetStartingRow + 1;
                    RangeRow++;
                    ws.Cell(RangeRow, 9).Value = "CURRENT ASSETS";
                    ws.Cell(RangeRow, 9).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 9).Style.Font.FontSize = 11;
                    RangeRow++;
                    ws.Cell(RangeRow, 9).Value = "Balance in Chit Account";
                    ws.Cell(RangeRow, 10).Value = (TotalDebitSummary - ForemanandCSCSummary);
                    CurrentAssetSummary = (TotalDebitSummary - ForemanandCSCSummary);
                    RangeRow++;

                    var BindDecreeBal = objBk1.BindDecree(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedValue));

                    ws.Cell(RangeRow, 9).Value = "Balance in Decree Account";
                    if (BindDecreeBal.Rows[BindDecreeBal.Rows.Count - 1]["EP No./OS No./ARC No./ARB No."].ToString() == "Net Balance CR")
                    {
                        ws.Cell(RangeRow, 10).Value = BindDecreeBal.Rows[BindDecreeBal.Rows.Count - 1]["Name"];
                        ws.Cell(RangeRow, 10).Style.NumberFormat.Format = "#,##0.00";
                        CurrentAssetSummary = CurrentAssetSummary + Convert.ToDecimal(BindDecreeBal.Rows[BindDecreeBal.Rows.Count - 1]["Name"]);
                    }
                    else if (BindDecreeBal.Rows[BindDecreeBal.Rows.Count - 1]["EP No./OS No./ARC No./ARB No."].ToString() == "Net Balance DR")
                    {
                        ws.Cell(RangeRow, 11).Value = BindDecreeBal.Rows[BindDecreeBal.Rows.Count - 1]["Name"];
                        ws.Cell(RangeRow, 11).Style.NumberFormat.Format = "#,##0.00";
                        CurrentAssetSummary = CurrentAssetSummary + Convert.ToDecimal(BindDecreeBal.Rows[BindDecreeBal.Rows.Count - 1]["Name"]);
                    }

                    RangeRow++;
                    ws.Cell(RangeRow, 9).Value = "Books Forms & Stationary on hand ";
                    var bookforms_stationarySummaryCr = GetOtherItemsData.Where(r => r.NodeID == 1657).Sum(r => r.Credit);
                    var bookforms_stationarySummaryDb = GetOtherItemsData.Where(r => r.NodeID == 1657).Sum(r => r.Debit);
                    if (bookforms_stationarySummaryCr > 0)
                    {
                        ws.Cell(RangeRow, 10).Value = bookforms_stationarySummaryCr;
                        CurrentAssetSummary = CurrentAssetSummary + bookforms_stationarySummaryCr;
                        ws.Cell(RangeRow, 10).Style.NumberFormat.Format = "#,##0.00";
                    }
                    else
                    {
                        ws.Cell(RangeRow, 11).Value = bookforms_stationarySummaryDb;
                        ws.Cell(RangeRow, 11).Style.NumberFormat.Format = "#,##0.00";
                    }

                    RangeRow++;
                    ws.Cell(RangeRow, 9).Value = "Pre-Paid Insurance";
                    var PrepaidInsuranceSummary_Cr = GetOtherItemsData.Where(r => r.NodeID == 1126656 && r.NodeID == 1126657).Sum(r => r.Credit);
                    var PrepaidInsuranceSummary_Db = GetOtherItemsData.Where(r => r.NodeID == 1126656 && r.NodeID == 1126657).Sum(r => r.Debit);
                    if (PrepaidInsuranceSummary_Cr > 0)
                    {
                        ws.Cell(RangeRow, 10).Value = PrepaidInsuranceSummary_Cr;
                        ws.Cell(RangeRow, 10).Style.NumberFormat.Format = "#,##0.00";
                        CurrentAssetSummary = CurrentAssetSummary + PrepaidInsuranceSummary_Cr;

                    }
                    else
                    {
                        ws.Cell(RangeRow, 11).Value = PrepaidInsuranceSummary_Db;
                        ws.Cell(RangeRow, 11).Style.NumberFormat.Format = "#,##0.00";
                        CurrentAssetSummary = CurrentAssetSummary + PrepaidInsuranceSummary_Db;
                    }
                    RangeRow++;
                    ws.Cell(RangeRow, 9).Value = "Deferred Tax :";
                    RangeRow++;

                    ws.Cell(RangeRow, 9).Value = "Income Tax Refund receivable Account 2013-2014";
                    RangeRow++;
                    ws.Cell(RangeRow, 9).Value = "Income Tax Refund receivable Account 2014-2015";
                    ws.Cell(RangeRow, 15).Value = CurrentAssetSummary;
                    ws.Cell(RangeRow, 11).Style.NumberFormat.Format = "#,##0.00";
                    RangeRow = RangeRow + 3;
                    ws.Cell(RangeRow, 9).Value = "Cash with Scheduled Banks";
                    decimal ScheduledBankSummary = 0;
                    RangeRow++;
                    int bankCount = 0;
                    foreach (var it in GetScheduled)
                    {
                        bankCount++;
                        ws.Cell(RangeRow, 9).Value = bankCount + ")";
                        ws.Cell(RangeRow, 10).Value = it.BankName + "," + it.AccountNo;
                        if (it.Credit > 0)
                        {
                            ws.Cell(RangeRow, 11).Value = it.Credit;
                            ScheduledBankSummary = ScheduledBankSummary + it.Credit;
                        }
                        else if (it.Debit > 0)
                        {
                            ws.Cell(RangeRow, 12).Value = it.Debit;
                            ScheduledBankSummary = ScheduledBankSummary + it.Debit;
                        }
                        RangeRow++;
                    }
                    RangeRow++;
                    decimal bankSummary = 0;
                    ws.Cell(RangeRow, 13).Value = ScheduledBankSummary;
                    ws.Cell(RangeRow, 13).Style.NumberFormat.Format = "#,##0.00";
                    RangeRow++;
                    decimal FDbankSummary = 0;
                    ws.Cell(RangeRow, 9).Value = "Fixed Deposit with Banks";
                    foreach (var it in GetFDBanks)
                    {
                        bankCount++;
                        ws.Cell(RangeRow, 9).Value = bankCount + ")";
                        ws.Cell(RangeRow, 10).Value = it.BankName + "," + it.AccountNo;
                        if (it.Credit > 0)
                        {
                            ws.Cell(RangeRow, 11).Value = it.Credit;
                            FDbankSummary = +FDbankSummary + it.Credit;
                        }
                        else if (it.Debit > 0)
                        {
                            ws.Cell(RangeRow, 12).Value = it.Debit;
                            FDbankSummary = +FDbankSummary + it.Debit;
                        }
                        RangeRow++;
                    }

                    RangeRow++;
                    ws.Cell(RangeRow, 13).Value = FDbankSummary;
                    ws.Cell(RangeRow, 13).Style.NumberFormat.Format = "#,##0.00";

                    ws.Cell(RangeRow, 14).Value = (ScheduledBankSummary + FDbankSummary);
                    ws.Cell(RangeRow, 14).Style.NumberFormat.Format = "#,##0.00";
                    RangeRow++;
                    bankSummary = (ScheduledBankSummary + FDbankSummary);

                    ws.Cell(RangeRow, 9).Value = "Accrued interest on fixed deposits";
                    // ws.Cell(RangeRow, 12).Value =



                    var rangedbr16 = ws.Range(ws.Cell((currentAssetStartingRow + 1), 1), ws.Cell(RangeRow, 6));
                    rangedbr16.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    var rangedbr17 = ws.Range(ws.Cell((currentAssetStartingRow + 1), 8), ws.Cell(RangeRow, 15));
                    rangedbr17.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    #endregion

                    var LeftsideGridStarting = RangeRow;
                    #region Asset Left side grid and loans title
                    ws.Cell(RangeRow, 1).Value = "Sl.No";
                    ws.Cell(RangeRow, 4).Value = "LIABILITIES";
                    ws.Cell(RangeRow, 6).Value = "AMOUNT";
                    var rangedbr10 = ws.Range(ws.Cell(LeftsideGridStarting, 8), ws.Cell(RangeRow, 6));
                    rangedbr10.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    ws.Cell(RangeRow, 8).Value = "Sl.No";
                    ws.Cell(RangeRow, 11).Value = "ASSETS";
                    ws.Cell(RangeRow, 15).Value = "AMOUNT";
                    var rangedbr11 = ws.Range(ws.Cell(LeftsideGridStarting, 8), ws.Cell(RangeRow, 15));
                    rangedbr11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    #endregion

                    #region Data filling for brought forward
                    ws.Cell(RangeRow, 4).Value = "Brought Forward";
                    ws.Cell(RangeRow, 4).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 4).Style.Font.FontSize = 11;
                    ws.Cell(RangeRow, 6).Value = BroughtForward_libailities1;
                    #endregion


                    #region Loans & Advances 
                    ws.Cell(RangeRow, 11).Value = "Brought Forward";
                    ws.Cell(RangeRow, 11).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 11).Style.Font.FontSize = 11;
                    ws.Cell(RangeRow, 15).Value = "0.0";

                    RangeRow++;
                    ws.Cell(RangeRow, 9).Value = "LOANS & ADVANCES";
                    ws.Cell(RangeRow, 9).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 9).Style.Font.FontSize = 11;
                    RangeRow++;
                    ws.Cell(RangeRow, 10).Value = "a) LOANS";
                    ws.Cell(RangeRow, 11).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 11).Style.Font.FontSize = 11;

                    RangeRow++;
                    ws.Cell(RangeRow, 11).Value = "Chit Loan";
                    var Chit_Loan = objBAL.GetScalarDecimal(" select if(sum(Amount)>0,sum(Amount),0) as Amount from voucher where Head_Id=53 and BranchID=" + drpdownBranchlist.SelectedValue + " and choosendate<='" + objBAL.changedateformat(ToDt, 2) + "';");
                    ws.Cell(RangeRow, 13).Value = Chit_Loan;
                    RangeRow++;
                    ws.Cell(RangeRow, 11).Value = "Staff Loan";
                    var Staff_Loan = objBAL.GetScalarDecimal(" select if(sum(Amount)>0,sum(Amount),0) as Amount from voucher where Head_Id=55 and BranchID=" + drpdownBranchlist.SelectedValue + " and choosendate<='" + objBAL.changedateformat(ToDt, 2) + "';");
                    ws.Cell(RangeRow, 13).Value = Staff_Loan;
                    RangeRow++;
                    ws.Cell(RangeRow, 11).Value = "Accrued Interest on Loans";
                    var Accrued_Loan = objBAL.GetScalarDecimal(" select if(sum(Amount)>0,sum(Amount),0) as Amount from voucher where Head_Id=2076 and BranchID=" + drpdownBranchlist.SelectedValue + " and choosendate<='" + objBAL.changedateformat(ToDt, 2) + "';");
                    ws.Cell(RangeRow, 13).Value = Accrued_Loan;
                    ws.Cell(RangeRow, 15).Value = (Accrued_Loan + Staff_Loan + Chit_Loan);

                    RangeRow++;
                    ws.Cell(RangeRow, 10).Value = "b) ADVANCES";
                    ws.Cell(RangeRow, 11).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 11).Style.Font.FontSize = 11;
                    RangeRow++;
                    ws.Cell(RangeRow, 11).Value = "1) RENT ADVANCE"; RangeRow++;
                    ws.Cell(RangeRow, 11).Value = "2) STAFF ADVANCE"; RangeRow++;
                    ws.Cell(RangeRow, 11).Value = "3) E.B. DEPOSIT";
                    RangeRow = RangeRow + 10;

                    var Tb_deposit = objBk1.GetTelephone_Deposit(Convert.ToInt32(drpdownBranchlist.SelectedValue), txtToDate.Text);

                    ws.Cell(RangeRow, 9).Value = "TELEPHONE DEPOSIT";
                    if (Convert.ToDecimal(Tb_deposit.Rows[0]["TD_Credit"]) > 0)
                        ws.Cell(RangeRow, 15).Value = Tb_deposit.Rows[0]["TD_Credit"];
                    else
                        ws.Cell(RangeRow, 15).Value = Tb_deposit.Rows[0]["TD_Debit"];
                    ws.Cell(RangeRow, 9).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 9).Style.Font.FontSize = 11;

                    RangeRow = RangeRow + 4;
                    #endregion
                    var rangedbr14 = ws.Range(ws.Cell((LeftsideGridStarting + 1), 8), ws.Cell(RangeRow, 15));
                    rangedbr14.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    var rangedbr15 = ws.Range(ws.Cell((LeftsideGridStarting + 1), 1), ws.Cell(RangeRow, 6));
                    rangedbr15.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();
                    // wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }
                }
            }
            catch (Exception err) { }
        }


        protected void BtnDebtsoutsExceed_Click(object sender, EventArgs e)
        {
            try
            {
                txtFrmDate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                List<DebtsoutsExceed6month> DebtsExceed_6months = objBk1.GetDebtsOutExceed_6months(txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedValue), txtFrmDate.Text);
                //string folderPath = "C:\\Exceltest\\";
                //if (!Directory.Exists(folderPath))
                //{
                //    Directory.CreateDirectory(folderPath);
                //}
                string filename = "DebtsoutsExceed6monthSt-25_" + DateTime.Now.Second.ToString();
                using (XLWorkbook wb = new XLWorkbook())
                {
                    var ws = wb.Worksheets.Add("Debts outs Exceed 6month St- 25");
                    AddImage(wb, "Debts outs Exceed 6month St- 25", 1, 1, "imglogo.png");

                    ws.Cell(1, 9).Value = "Statement No. 25";
                    ws.Range(1, 9, 1, 10).Merge().AddToNamed("Titles");

                    ws.Cell(1, 3).Value = "Sree Visalam Chit Fund Ltd.,";
                    ws.Cell(1, 3).Style.Font.Bold = true;
                    ws.Cell(1, 3).Style.Font.FontSize = 14;



                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {
                        ws.Cell(2, 3).Value = "Branch:  " + "Mount Road";
                        ws.Cell(2, 3).Style.Font.Bold = true;
                        ws.Cell(2, 3).Style.Font.FontSize = 13;
                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        ws.Cell(2, 3).Value = "Branch:  " + "Pallathur";
                        ws.Cell(2, 3).Style.Font.Bold = true;
                        ws.Cell(2, 3).Style.Font.FontSize = 13;
                    }
                    else
                    {
                        ws.Cell(2, 3).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        ws.Cell(2, 3).Style.Font.Bold = true;
                        ws.Cell(2, 3).Style.Font.FontSize = 13;
                    }

                    ws.Cell(3, 1).Value = "Particulars of Debts Outstanding for a period exceeding six months as at " + txtToDate.Text;
                    ws.Cell(3, 1).Style.Font.Bold = true;
                    ws.Cell(3, 1).Style.Font.FontSize = 13;
                    ws.Range(3, 1, 3, 10).Merge().AddToNamed("Titles");


                    ws.Cell(4, 1).Value = "Sl.No.";
                    ws.Cell(4, 1).Style.Font.Bold = true;
                    ws.Cell(4, 1).Style.Font.FontSize = 11;
                    ws.Range(4, 1, 5, 1).Merge();

                    ws.Cell(4, 2).Value = "Chit Number";
                    ws.Cell(4, 2).Style.Font.Bold = true;
                    ws.Cell(4, 2).Style.Font.FontSize = 11;
                    ws.Range(4, 2, 5, 2).Merge();

                    ws.Cell(4, 3).Value = "Name of the Party";
                    ws.Cell(4, 3).Style.Font.Bold = true;
                    ws.Cell(4, 3).Style.Font.FontSize = 11;
                    ws.Range(4, 3, 5, 3).Merge();

                    ws.Cell(4, 4).Value = "Arrears from (Date)";
                    ws.Cell(4, 4).Style.Font.Bold = true;
                    ws.Cell(4, 4).Style.Font.FontSize = 11;
                    ws.Range(4, 4, 5, 4).Merge();

                    ws.Cell(4, 5).Value = "CONTRIBUTION MADE FOR";
                    ws.Cell(4, 5).Style.Font.Bold = true;
                    ws.Cell(4, 5).Style.Font.FontSize = 11;
                    ws.Cell(4, 5).Style.Alignment.WrapText = true;
                    ws.Range(4, 5, 4, 6);
                    var range123 = ws.Range(4, 5, 4, 6);
                    range123.Merge();
                    range123.Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);


                    ws.Cell(5, 5).Value = "Running";
                    ws.Cell(5, 5).Style.Font.Bold = true;
                    ws.Cell(5, 5).Style.Font.FontSize = 11;

                    ws.Cell(5, 6).Value = "Terminated";
                    ws.Cell(5, 6).Style.Font.Bold = true;
                    ws.Cell(5, 6).Style.Font.FontSize = 11;


                    ws.Cell(4, 7).Value = "Chit Loan";
                    ws.Cell(4, 7).Style.Font.Bold = true;
                    ws.Cell(4, 7).Style.Font.FontSize = 11;
                    ws.Range(4, 7, 5, 7).Merge();

                    ws.Cell(4, 8).Value = "Date of Loan";
                    ws.Cell(4, 8).Style.Font.Bold = true;
                    ws.Cell(4, 8).Style.Font.FontSize = 11;
                    ws.Range(4, 8, 5, 8).Merge();

                    ws.Cell(4, 9).Value = "Advances excluding staff, Rent and Telephone";
                    ws.Cell(4, 9).Style.Font.Bold = true;
                    ws.Cell(4, 9).Style.Font.FontSize = 11;
                    ws.Range(4, 9, 5, 9).Merge();

                    ws.Cell(4, 10).Value = "Date of Advances";
                    ws.Cell(4, 10).Style.Font.Bold = true;
                    ws.Cell(4, 10).Style.Font.FontSize = 11;
                    ws.Range(4, 10, 5, 10).Merge();

                    var rangedbr7 = ws.Range(ws.Cell(4, 1), ws.Cell(5, 10));
                    rangedbr7.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                    var rangedbr8 = ws.Range(ws.Cell(4, 1), ws.Cell(5, 10));
                    rangedbr8.Style.Border.InsideBorder = XLBorderStyleValues.Double;


                    IFormatProvider culture3 = new System.Globalization.CultureInfo("fr-FR", true);
                    DateTime ToDt = DateTime.Parse(txtToDate.Text, culture3, System.Globalization.DateTimeStyles.AssumeLocal);
                    DateTime newDate = ToDt.AddMonths(-6);









                    decimal sum2 = 0;
                    decimal sum1 = 0;
                    int RangeRow = 6;
                    int sno = 1;
                    foreach (var id in DebtsExceed_6months)
                    {
                        try
                        {
                            if (id.ArrearsfromDate < newDate)
                            {
                                ws.Cell(RangeRow, 1).Value = sno.ToString();
                                ws.Cell(RangeRow, 2).Value = id.ChitNumber;
                                ws.Cell(RangeRow, 3).Value = id.NameoftheParty;
                                ws.Cell(RangeRow, 4).Value = id.ArrearsfromDate;
                                ws.Cell(RangeRow, 5).Value = id.Running_AmountinChitAccnt;
                                sum1 += id.Running_AmountinChitAccnt;
                                ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";

                                ws.Cell(RangeRow, 6).Value = id.Terminated_AmountinChitAccnt;
                                sum2 += Convert.ToDecimal(id.Terminated_AmountinChitAccnt);
                                ws.Cell(RangeRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeRow, 6).Style.NumberFormat.Format = "#,##0.00";

                                ws.Cell(RangeRow, 7).Value = id.ChitLoan;
                                ws.Cell(RangeRow, 8).Value = "";
                                ws.Cell(RangeRow, 9).Value = "";
                                ws.Cell(RangeRow, 10).Value = "";
                                RangeRow++;
                                var rangedbr51 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeRow, 10));
                                rangedbr51.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                var rangedbr52 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeRow, 10));
                                rangedbr52.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                sno++;
                            }
                        }
                        catch (Exception) { }
                    }

                    RangeRow = RangeRow + 2;
                    ws.Cell(RangeRow, 3).Value = "Total";
                    ws.Cell(RangeRow, 3).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 3).Style.Font.FontSize = 11;
                    ws.Cell(RangeRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeRow, 5).Value = sum1;
                    ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeRow, 5).Style.Font.Bold = true;

                    ws.Cell(RangeRow, 6).Value = sum2;
                    ws.Cell(RangeRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeRow, 6).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeRow, 6).Style.Font.Bold = true;

                    var rangedbr5 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeRow, 10));
                    rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    var rangedbr5211 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeRow, 10));
                    rangedbr5211.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();
                    // wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }
                }
            }
            catch (Exception) { }

        }

        protected void BtnTrBlBankSt04_Click(object sender, EventArgs e)
        {
            try
            {
                Export_TrBlBankSt04();
            }
            catch (Exception err) { }
        }

        public DataTable GetBank()
        {
            var dt1 = new DataTable();
            try
            {
                string str = @"select concat(t3.BankName, ',' ,t3.BankLocation) as BankLocation,t3.AccountNo as AccountNo, " +
                    "(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) " +
                    "then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`," +
                    "(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then " +
                    "sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` " +
                    "from voucher as t1  left Join bankdetails as t3 on t1.Head_ID=t3.Head_ID where t3.TypeofBank='Scheduled Banks' " +
                    "and t1.RootID=3 and `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and t1.ChoosenDate between '2009/03/31' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by `t1`.`Head_ID`";

                dt1 = objBAL.GetDataTable(str);

            }
            catch (Exception err)
            {
            }
            return dt1;
        }


        DataTable BindChitTrial(string ChitCategory)
        {
            DataTable dtBind = new DataTable();
            try
            {
                string strChits = "", credit = "", debit = "";
                DataTable dtC = new DataTable();
                objBAL.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
                objBAL.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') group by `auctiondetails`.`GroupID`");
                DataTable dt = objBAL.GetDataTable("select * from groupmaster where `ChitStartDate` <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID=" + drpdownBranchlist.SelectedValue + " and ChitCategory='" + ChitCategory + "'");

                DataTable dtB = new DataTable();
                dtB.Columns.Add("Head_Id");
                dtB.Columns.Add("GROUPNO");
                DataRow drB = dtB.NewRow();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    //DataTable dtTerminated = objBAL.GetDataTable("SELECT * FROM svcf.auctiondetails where IsPrized='I' and GroupID=" + dt.Rows[i]["Head_Id"]);
                    DataTable dtTerminated = objBAL.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                    string drawno = objBAL.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                    string Noofmem = objBAL.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);
                    //if (dtTerminated.Rows.Count == 0)
                    if (drawno == Noofmem)
                    {
                        drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                        drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                        dtB.Rows.Add(drB.ItemArray);
                    }
                }
                dtBind.Columns.Add("SNo");
                dtBind.Columns.Add("GroupNo");
                dtBind.Columns.Add("I_Credit", typeof(decimal));
                dtBind.Columns.Add("I_Debit", typeof(decimal));
                dtBind.Columns.Add("E_Credit", typeof(decimal));
                dtBind.Columns.Add("E_Debit", typeof(decimal));
                dtBind.Columns.Add("N_Credit", typeof(decimal));
                dtBind.Columns.Add("N_Debit", typeof(decimal));
                dtBind.Columns.Add("NonPrized", typeof(decimal));
                dtBind.Columns.Add("Prized", typeof(decimal));
                dtBind.Columns.Add("TotalAmountofKasar", typeof(decimal));
                dtBind.Columns.Add("NP", typeof(int));
                dtBind.Columns.Add("P", typeof(int));
                dtBind.Columns.Add("Remarks");
                DataRow drBind = dtBind.NewRow();
                drBind["SNo"] = "";
                drBind["GroupNo"] = "Terminated";
                drBind["Remarks"] = "";
                dtBind.Rows.Add(drBind.ItemArray);
                int iCount = 0;
                for (int i = 0; i < dtB.Rows.Count; i++)
                {
                    #region Terminated
                    DataTable dt1 = objBAL.GetDataTable(@"select mg1.Head_Id,cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where " +
                        "mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");
                    if (dt1.Rows.Count > 0)
                    {
                        try
                        {
                            #region start
                            if (((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M) && Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", "")) == 0.00M)
                            {

                            }
                            else
                            {
                                //* Total Number Calculation Start
                                //List<string> lstExcess = new List<string>();
                                List<string> lstPArr = new List<string>();
                                int iPCount = 0;
                                int ip1 = 0;

                                DataTable dtNPkasar = objBAL.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate is null  or " +
                                    "tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 " +
                                    "on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm " +
                                    "on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' " +
                                    "group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                                if (dtNPkasar.Rows.Count > 0)
                                {
                                    for (int iRow = 0; iRow < dtNPkasar.Rows.Count; iRow++)
                                    {
                                        if (Convert.ToDecimal(dtNPkasar.Rows[iRow]["NPKasar"]) > 0)
                                        {
                                            lstPArr.Add(Convert.ToString(dtNPkasar.Rows[iRow]["Head_Id"]));
                                            ip1++;
                                        }
                                    }
                                }

                                DataTable dtPArr = objBAL.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                                if (dtPArr.Rows.Count > 0)
                                {
                                    for (int iRow = 0; iRow < dtPArr.Rows.Count; iRow++)
                                    {
                                        if (Convert.ToDecimal(dtPArr.Rows[iRow]["PArrier"]) > 0)
                                        {
                                            lstPArr.Add(Convert.ToString(dtPArr.Rows[iRow]["Head_Id"]));
                                            iPCount++;
                                        }
                                    }
                                }

                                // Total Number Calculation End
                                if (Convert.ToInt32(dtB.Rows[i]["Head_Id"]) == 01193)
                                {
                                    DataTable dtS = objBAL.GetDataTable("SELECT sum((case when (Voucher_Type='C') then Amount else 0.00 end)) as Credit,sum((case when (Voucher_Type='D') then Amount else 0.00 end)) as Debit FROM svcf.voucher where ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id=1194");
                                    if (dtS.Rows.Count > 0)
                                    {
                                        if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) < Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                        {
                                            drBind["SNo"] = iCount + 1;
                                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                            drBind["I_Credit"] = 0.00;
                                            drBind["I_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                            drBind["E_Credit"] = 0.00;
                                            drBind["E_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                            drBind["N_Credit"] = 0.00;
                                            drBind["N_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                            drBind["NonPrized"] = "0.00";
                                            drBind["Prized"] = "0.00";
                                            drBind["TotalAmountofKasar"] = "0.00";
                                            drBind["NP"] = "0";
                                            drBind["P"] = "0";
                                            drBind["Remarks"] = "";
                                            iCount++;
                                            dtBind.Rows.Add(drBind.ItemArray);
                                        }
                                        else if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) > Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                        {
                                            drBind["SNo"] = iCount + 1;
                                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                            drBind["I_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                            drBind["I_Debit"] = 0.00;
                                            drBind["E_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                            drBind["E_Debit"] = 0.00;
                                            drBind["N_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                            drBind["N_Debit"] = 0.00;
                                            drBind["NonPrized"] = "0.00";
                                            drBind["Prized"] = "0.00";
                                            drBind["TotalAmountofKasar"] = "0.00";
                                            drBind["NP"] = "0";
                                            drBind["P"] = "0";
                                            drBind["Remarks"] = "";
                                            iCount++;
                                            dtBind.Rows.Add(drBind.ItemArray);
                                        }
                                    }
                                }
                                else
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];

                                    drBind["I_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                                    // drBind["I_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) + Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                                    drBind["I_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", ""));
                                    drBind["E_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) + Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                                    drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) - Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", ""));

                                    if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) > Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                                    {
                                        drBind["N_Credit"] = (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                                        drBind["N_Debit"] = "0.00";
                                        // drBind["N_Credit"] = (Credit + PKasar + NPKasar) - (Debit);

                                    }
                                    else if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) < Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                                    {
                                        drBind["N_Credit"] = "0.00";
                                        drBind["N_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")));
                                        //drBind["N_Debit"] = (Debit) - (Credit + PKasar + NPKasar);
                                    }
                                    ///////////////////////=====================///////////////////////
                                    else
                                    {
                                        drBind["N_Credit"] = "0.00";
                                        drBind["N_Debit"] = "0.00";
                                    }
                                    ////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
                                    //drBind["NonPrized"] = "0.00";
                                    drBind["NonPrized"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                                    drBind["Prized"] = "0.00";
                                    drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                                    //drBind["NP"] = "0";
                                    drBind["NP"] = ip1;
                                    drBind["P"] = iPCount; // "0";
                                    drBind["Remarks"] = "";
                                    iCount++;
                                    dtBind.Rows.Add(drBind.ItemArray);
                                }
                            }
                            #endregion
                        }
                        catch (Exception) { }
                    }
                    #endregion
                }
                objBAL.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
                objBAL.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') group by `auctiondetails`.`GroupID`");
                dt = objBAL.GetDataTable("select * from groupmaster where `PSOOrderDate` <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID=" + drpdownBranchlist.SelectedValue + " and ChitCategory='" + ChitCategory + "'");

                if (dt.Rows.Count != 0)
                {

                    dtB = new DataTable();
                    dtB.Columns.Add("Head_Id");
                    dtB.Columns.Add("GROUPNO");
                    drB = dtB.NewRow();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataTable dtTerminated = objBAL.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                        string drawno = objBAL.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                        string Noofmem = objBAL.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);

                        if (drawno != Noofmem)
                        {
                            drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                            drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                            dtB.Rows.Add(drB.ItemArray);
                        }
                    }
                    DataRow drBind1 = dtBind.NewRow();
                    drBind1["SNo"] = "";
                    drBind1["GroupNo"] = "Running";
                    drBind1["Remarks"] = "";
                    dtBind.Rows.Add(drBind1.ItemArray);

                    iCount = 0;
                    for (int i = 0; i < dtB.Rows.Count; i++)
                    {

                        DataTable dtInit = objBAL.GetDataTable("select * from auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                        //jeya --------------
                        string prizecount = objBAL.GetSingleValue("select count(*) from trans_payment where ChitGroupID = " + dtB.Rows[i]["Head_Id"] + " and PaymentDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");
                        string Totalcount = objBAL.GetSingleValue("select count(*) from auctiondetails where GroupID=" + dtB.Rows[i]["Head_Id"] + ";");
                        //jeya -----------------
                        string drawno = objBAL.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dtB.Rows[i]["Head_Id"]);
                        string Noofmem = objBAL.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dtB.Rows[i]["Head_Id"]);
                        DataTable dt1 = objBAL.GetDataTable(@"select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");

                        if (drawno != Noofmem && dt1.Rows.Count > 0)
                        {
                            if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M)
                            {

                            }
                            else
                            {
                                try
                                {
                                    #region Running IF
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["I_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                                    drBind["I_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                                    drBind["E_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                                    drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                    if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) > Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                                    {
                                        drBind["N_Credit"] = (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - (Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")));
                                        drBind["N_Debit"] = "0.00";
                                    }
                                    else if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) < Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                                    {
                                        drBind["N_Credit"] = "0.00";
                                        drBind["N_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")));
                                    }
                                    ///////////////////////////-------------------------////////////////
                                    else
                                    {
                                        drBind["N_Credit"] = "0.00";
                                        drBind["N_Debit"] = "0.00";
                                    }
                                    /////////////////////////--------==================//////////////////
                                    drBind["NonPrized"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));

                                    //jeya
                                    if (prizecount == "1")
                                    {
                                        drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                        drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                        drBind["P"] = (prizecount);
                                        drBind["NP"] = Convert.ToInt16(Totalcount) - Convert.ToInt16(prizecount);
                                    }
                                    else if (prizecount != "1")
                                    {
                                        drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                        drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                        drBind["NP"] = dt1.AsEnumerable()
                                                .Where(r => (decimal)r["NPKasar"] != 0.00m)
                                                .Count();
                                        drBind["P"] = dt1.AsEnumerable()
                                                    .Where(r => (decimal)r["PKasar"] != 0.00m)
                                                    .Count(); ;
                                    }
                                    else if (prizecount == "0")
                                    {
                                        drBind["NP"] = Convert.ToInt16(Totalcount);
                                    }
                                    //jeya


                                    drBind["Remarks"] = "";
                                    iCount++;
                                    dtBind.Rows.Add(drBind.ItemArray);

                                    #endregion
                                }
                                catch (Exception err) { }
                            }

                        }
                        else
                        {
                            #region Else                           
                            decimal credit1 = 0;
                            decimal debit1 = 0;
                            decimal decCredit = 0;
                            decimal decDebit = 0;
                            strChits = "";
                            dtC = new DataTable();
                            dtC = balayer.GetDataTable("SELECT concat(Cast(NodeID as char(10)),',') FROM svcf.headstree where ParentID=" + dtB.Rows[i]["Head_Id"]);
                            for (int k = 0; k < dtC.Rows.Count; k++)
                            {
                                strChits = strChits + dtC.Rows[k][0];
                            }
                            if (string.IsNullOrEmpty(strChits))
                            {
                                strChits = "0";
                            }
                            else
                            {
                                strChits = strChits.TrimEnd(',');
                            }
                            credit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='C') then Amount else 0.00 end) as Credit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                            debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                            credit1 = Convert.ToDecimal(credit);
                            debit1 = Convert.ToDecimal(debit);
                            if (string.IsNullOrEmpty(credit))
                                credit = "0.00";
                            if (string.IsNullOrEmpty(debit))
                                debit = "0.00";

                            if (prizecount == "0")
                            {
                                debit = "0.00";
                            }
                            else
                            {
                                debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                            }
                            if (credit1 > debit1)
                            {
                                decCredit = Convert.ToDecimal(credit1) - Convert.ToDecimal(debit1);
                            }
                            else
                            {
                                decCredit = Convert.ToDecimal(debit1) - Convert.ToDecimal(credit1);
                            }

                            //decCredit = Convert.ToDecimal(credit);
                            decDebit = Convert.ToDecimal(debit);
                            string npkas = "";
                            string pkas = "";
                            int NPcount = 0;
                            int Pcount = 0;

                            DataTable dtDetails = objBAL.GetDataTable(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( tp1.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar                              from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (" + strChits + ") and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC;");

                            if (dtDetails.Rows.Count > 0)
                            {
                                for (int iRow = 0; iRow < dtDetails.Rows.Count; iRow++)
                                {
                                    if (Convert.ToDecimal(dtDetails.Rows[iRow]["NPKasar"]) > 0)
                                        NPcount++;
                                    if (Convert.ToDecimal(dtDetails.Rows[iRow]["PKasar"]) > 0)
                                        Pcount++;
                                }
                                pkas = Convert.ToString(dtDetails.Compute("sum(PKasar)", ""));
                                npkas = Convert.ToString(dtDetails.Compute("sum(NPKasar)", ""));
                                credit = Convert.ToString(dtDetails.Compute("sum(Credit)", ""));
                                debit = Convert.ToString(dtDetails.Compute("sum(Debit)", ""));
                            }

                            if (string.IsNullOrEmpty(npkas))
                                npkas = "0.00";
                            if (string.IsNullOrEmpty(pkas))
                                pkas = "0.00";

                            string netCredit = "0.00";
                            string netDebit = "0.00";

                            if ((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) > Convert.ToDecimal(debit))
                                //netCredit = Convert.ToString((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) - Convert.ToDecimal(debit));
                                netCredit = Convert.ToString((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) - Convert.ToDecimal(debit1));
                            else
                                //netDebit = Convert.ToString(Convert.ToDecimal(debit) - (Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)));
                                netDebit = Convert.ToString(Convert.ToDecimal(debit1) - (Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)));

                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                            //drBind["I_Credit"] = Convert.ToString(Convert.ToDecimal(credit) 26+ Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas));
                            drBind["I_Credit"] = decCredit;
                            drBind["I_Debit"] = debit; //0.00M;
                                                       /*drBind["E_Credit"] = credit;*/
                                                       //decCredit - decDebit;
                            drBind["E_Credit"] = decCredit;
                            drBind["E_Debit"] = Convert.ToString(Convert.ToDecimal(debit) - Convert.ToDecimal(pkas)); //0.00M;
                            drBind["N_Credit"] = netCredit;
                            drBind["N_Debit"] = netDebit;
                            drBind["NonPrized"] = npkas;
                            drBind["Prized"] = pkas;
                            drBind["TotalAmountofKasar"] = Convert.ToString(Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas));

                            if (prizecount == "1")
                            {
                                drBind["P"] = (prizecount);
                                drBind["NP"] = Convert.ToInt16(Totalcount) - Convert.ToInt16(prizecount);
                            }
                            else if (prizecount != "1" && prizecount != "0")
                            {
                                drBind["NP"] = dt1.AsEnumerable()
                                        .Where(r => (decimal)r["NPKasar"] != 0.00m)
                                        .Count();
                                drBind["P"] = dt1.AsEnumerable()
                                            .Where(r => (decimal)r["PKasar"] != 0.00m)
                                            .Count(); ;
                            }
                            else if (prizecount == "0")
                            {
                                drBind["NP"] = Convert.ToInt16(Totalcount);
                                drBind["P"] = (prizecount);
                            }
                            drBind["Remarks"] = "";
                            iCount++;
                            dtBind.Rows.Add(drBind.ItemArray);
                            #endregion
                        }
                    }
                }
            }
            catch (Exception err)
            {

            }
            return dtBind;

        }

        DataTable BindOutstanding()
        {
            var dt = new DataTable();
            DataTable dtBind = null;
            try
            {

                string str = "";

                var today = DateTime.ParseExact(txtToDate.Text, "dd/MM/yyyy", null);
                var month = new DateTime(today.Year, today.Month, 1);

                var dtHeads = objBAL.GetDataTable("select cast(concat(PrizedMemberID,'',',')as char) from svcf.auctiondetails join trans_payment tp where tp.TokenNumber=auctiondetails.PrizedMemberID and tp.DrawNo=auctiondetails.DrawNO and tp.ChitGroupId=auctiondetails.GroupID and tp.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and IsPrized='Y'  and auctiondetails.AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and auctiondetails.BranchId=" + drpdownBranchlist.SelectedValue + "");

                string sHeads = "";

                if (dtHeads.Rows.Count <= 0)
                {
                }
                else
                {
                    for (int i = 0; i < dtHeads.Rows.Count; i++)
                    {
                        sHeads += objBAL.ToobjectstrEvenNull(dtHeads.Rows[i][0]);
                    }
                    sHeads = sHeads.TrimEnd(',').Replace(",,", ",");
                    sHeads = " and auctiondetails.prizedMemberID not  in (" + sHeads + ")";
                }


                //str = @"SELECT `auctiondetails`.`PrizedMemberID`,`membertogroupmaster`.`GrpMemberID` AS `Chit Number`,`membertogroupmaster`.`GroupID` AS `GroupId`,`auctiondetails`.`DrawNO` AS `Instmnt`,DATE_FORMAT(`auctiondetails`.`AuctionDate`,'%d/%m/%Y') AS `Date`,`membertogroupmaster`.`MemberName` as `Name of the Subscriber`,(`auctiondetails`.`PrizedAmount`) AS `PrizedMoney1`,if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`auctiondetails`.`PrizedAmount`+`commissiondetails`.`Commission`),0.0) AS `Kasar`,(`auctiondetails`.`PrizedAmount` +`auctiondetails`.`KasarAmount`) as `Total`, if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`,`commissiondetails`.`ChitValue` AS `PrizeMoney2`, '' AS Arrears FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `auctiondetails`.`BranchID`=" + drpdownBranchlist.SelectedValue + " and auctiondetails.AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'" + sHeads + "";
                str = @"SELECT `auctiondetails`.`PrizedMemberID`,`membertogroupmaster`.`GrpMemberID` AS `Chit Number`,`membertogroupmaster`.`GroupID` AS `GroupId`,`auctiondetails`.`DrawNO` AS `Instmnt`,DATE_FORMAT(`auctiondetails`.`AuctionDate`,'%d/%m/%Y') AS `Date`,`membertogroupmaster`.`MemberName` as `Name of the Subscriber`,(`auctiondetails`.`PrizedAmount`) AS `PrizedMoney1`,if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`auctiondetails`.`PrizedAmount`+`commissiondetails`.`Commission`),0.0) AS `Kasar`,(`auctiondetails`.`PrizedAmount` +`auctiondetails`.`KasarAmount`) as `Total`, if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`,`commissiondetails`.`ChitValue` AS `PrizeMoney2`, '' AS Arrears FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` and `auctiondetails`.`BranchID`=" + drpdownBranchlist.SelectedValue + " and auctiondetails.AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'" + sHeads + "";

                dt = new DataTable();
                dt = objBAL.GetDataTable(str);

                //   var unpaiddt = objBAL.GetDataTable("select (case when (sum(case when t1.Voucher_Type='C' and t1.Head_Id=46 then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' and t1.Head_Id=46 then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' and t1.Head_Id=46 then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' and t1.Head_Id=46 then t1.Amount else 0.00 end ) else 0.00 end ) as `Amount` from voucher as t1  where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and t1.ChoosenDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                // dt.Merge(unpaiddt);

                dtBind = new DataTable();
                dtBind.Columns.Add("SNo");
                dtBind.Columns.Add("ChitNumber");
                dtBind.Columns.Add("GroupId");
                dtBind.Columns.Add("PrizedMemberID");
                dtBind.Columns.Add("Instmnt");
                dtBind.Columns.Add("Date");
                dtBind.Columns.Add("NameoftheSubscriber");
                dtBind.Columns.Add("OutPrizedMoney", typeof(decimal));
                dtBind.Columns.Add("OutKasar", typeof(decimal));
                dtBind.Columns.Add("OutTotal", typeof(decimal));
                dtBind.Columns.Add("UnpaidCommision", typeof(decimal));
                dtBind.Columns.Add("UnpaidPrizeMoney", typeof(decimal));
                dtBind.Columns.Add("AmountActuallyremittedbytheParty", typeof(decimal));
                dtBind.Columns.Add("Arrears");
                dtBind.Columns.Add("UnpaidPrizeMoneyPayable");
                dtBind.Columns.Add("Remarks");
                DataRow drBind = dtBind.NewRow();
                int mmmm = 0;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i]["Date"].ToString() != "00/00/0000")
                    {
                        if (objBAL.ToobjectstrEvenNull(dt.Rows[i]["Chit Number"]) == "CX-31-4" || objBAL.ToobjectstrEvenNull(dt.Rows[i]["Chit Number"]) == "CX-31/25")
                        { }
                        else
                        {
                            drBind["SNo"] = mmmm + 1;
                            drBind["ChitNumber"] = dt.Rows[i]["Chit Number"];
                            drBind["Instmnt"] = dt.Rows[i]["Instmnt"];
                            drBind["Date"] = dt.Rows[i]["Date"];
                            drBind["NameoftheSubscriber"] = dt.Rows[i]["Name of the Subscriber"];
                            drBind["OutPrizedMoney"] = dt.Rows[i]["PrizedMoney1"];
                            drBind["OutKasar"] = dt.Rows[i]["Kasar"];
                            drBind["OutTotal"] = dt.Rows[i]["Total"];
                            drBind["UnpaidCommision"] = dt.Rows[i]["Commision"];
                            drBind["UnpaidPrizeMoney"] = dt.Rows[i]["PrizeMoney2"];


                            string sdfgd = objBAL.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

                            if (string.IsNullOrEmpty(sdfgd))
                            {
                                drBind["AmountActuallyremittedbytheParty"] = "0.00"; ;
                            }
                            else
                            {
                                drBind["AmountActuallyremittedbytheParty"] = sdfgd;
                            }
                            string TotaldueAmount = "";

                            TotaldueAmount = objBAL.GetSingleValue(@"select sum(CurrentDueAmount) from auctiondetails where GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                            string nparr = objBAL.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            if (string.IsNullOrEmpty(nparr))
                            {
                                drBind["Arrears"] = "0.00";
                            }
                            else
                            {
                                drBind["Arrears"] = nparr;
                            }

                            //drBind["Arrears"] = "";
                            drBind["UnpaidPrizeMoneyPayable"] = "";
                            drBind["Remarks"] = "";
                            dtBind.Rows.Add(drBind.ItemArray);
                            mmmm++;
                        }
                    }
                }
            }
            catch (Exception err) { }

            return dtBind;
        }

        DataTable BindRCM()
        {
            var dt1 = new DataTable();
            try
            {
                string str = @"select t3.Node as Heads,t3.NodeID,t3.ParentID , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount " +
                     "else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '5,44%') then " +
                     "sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `RCM1_Credit`,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '5,45%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `RCM2_Credit`,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '5,43%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Cc_Credit` from voucher as t1  " +
                     "left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 5  and " +
                     "(t3.TreeHint like '5,44%' or t3.TreeHint like '5,45%') and t1.ChoosenDate between '2009/03/31' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by `t1`.`Head_ID`";

                dt1 = objBAL.GetDataTable(str);
                DataTable dt = new DataTable();
                dt.Columns.Add("SNo");
                dt.Columns.Add("Heads");
                dt.Columns.Add("rcm1", typeof(decimal));
                dt.Columns.Add("rcm2", typeof(decimal));
                dt.Columns.Add("cc", typeof(decimal));
                dt.Columns.Add("description");
                DataRow dr = dt.NewRow();
                int icount = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    if (Convert.ToDecimal(dt1.Rows[i]["RCM1_Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["RCM2_Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["Cc_Credit"]) > 0)
                    {
                        dr["SNo"] = icount + 1;
                        dr["Heads"] = objBAL.GetSingleValue("SELECT MemberName FROM svcf.chitheads where HeadId=" + dt1.Rows[i]["NodeID"]); ; ;
                        dr["rcm1"] = dt1.Rows[i]["RCM1_Credit"];
                        dr["rcm2"] = dt1.Rows[i]["RCM2_Credit"];
                        dr["cc"] = dt1.Rows[i]["Cc_Credit"];
                        dr["description"] = objBAL.GetSingleValue("SELECT ChitName FROM svcf.chitheads where HeadId=" + dt1.Rows[i]["NodeID"]); ;
                        dt.Rows.Add(dr.ItemArray);
                        icount++;
                    }
                }
            }
            catch (Exception err)
            {

            }
            return dt1;
        }


        DataTable BindChitAbstract()
        {

            var dtChit = objBAL.GetDataTable("select t3.Node as Heads , sum(case when ((case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as ChitCredit, sum(case when ((case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%' ) and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as ChitDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

            var dtRCM1 = objBAL.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as RCM1Credit, sum(case when ((case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as RCM1Debit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
            var dtRCM2 = objBAL.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as RCM2Credit, sum(case when ((case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as RCM2Debit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
            var dtChitCollection = objBAL.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as ChitCredit, sum(case when ((case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as ChitDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
            var dtOutStanding = objBAL.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as OutCredit, sum(case when ((case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as OutDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
            var dtUnpaid = objBAL.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as UnCredit, sum(case when ((case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as UnDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
            var Unpaidpayable = objBAL.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as OutCredit, sum(case when ((case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as OutDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
            var dtBind = new DataTable();
            dtBind.Columns.Add("Slno");
            dtBind.Columns.Add("Abstract");
            dtBind.Columns.Add("Credit", typeof(decimal));
            dtBind.Columns.Add("Debit", typeof(decimal));
            DataRow dr = dtBind.NewRow();
            dr["Slno"] = "1";
            dr["Abstract"] = "Chits";
            decimal decChitCrdit = Convert.ToDecimal(dtChit.Rows[0][1]);
            decimal decChitDebit = Convert.ToDecimal(dtChit.Rows[0][2]);
            if (decChitCrdit > decChitDebit)
            {
                dr["Credit"] = decChitCrdit - decChitDebit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decChitDebit - decChitCrdit;
            }
            dtBind.Rows.Add(dr.ItemArray);

            dr["Slno"] = "2";
            dr["Abstract"] = "RCM A/c 1";
            decimal decRcm1Crdit = Convert.ToDecimal(dtRCM1.Rows[0][1]);
            decimal decRcm1Debit = Convert.ToDecimal(dtRCM1.Rows[0][2]);
            if (decRcm1Crdit > decRcm1Debit)
            {
                dr["Credit"] = decRcm1Crdit - decRcm1Debit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decRcm1Debit - decRcm1Crdit;
            }
            dtBind.Rows.Add(dr.ItemArray);

            dr["Slno"] = "3";
            dr["Abstract"] = "RCM A/c 2";
            decimal decRcm2Crdit = Convert.ToDecimal(dtRCM2.Rows[0][1]);
            decimal decRcm2Debit = Convert.ToDecimal(dtRCM2.Rows[0][2]);
            if (decRcm2Crdit > decRcm2Debit)
            {
                dr["Credit"] = decRcm2Crdit - decRcm2Debit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decRcm2Debit - decRcm2Crdit;
            }
            dtBind.Rows.Add(dr.ItemArray);

            dr["Slno"] = "4";
            dr["Abstract"] = "Chit Collection to be Accounted";
            decimal decChitCollectionCrdit = Convert.ToDecimal(dtChitCollection.Rows[0][1]);
            decimal decChitCollectionDebit = Convert.ToDecimal(dtChitCollection.Rows[0][2]);
            if (decChitCollectionCrdit > decChitCollectionDebit)
            {
                dr["Credit"] = decChitCollectionCrdit - decChitCollectionDebit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decChitCollectionDebit - decChitCollectionCrdit;
            }
            dtBind.Rows.Add(dr.ItemArray);

            dr["Slno"] = "5";
            dr["Abstract"] = "Outstanding Prize Money";
            decimal decOutCrdit = Convert.ToDecimal(dtOutStanding.Rows[0][1]);
            decimal decOutDebit = Convert.ToDecimal(dtOutStanding.Rows[0][2]);
            if (decOutCrdit > decOutDebit)
            {
                dr["Credit"] = decOutCrdit - decOutDebit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decOutDebit - decOutCrdit;
            }
            dtBind.Rows.Add(dr.ItemArray);

            dr["Slno"] = "6";
            dr["Abstract"] = "Unpaid Prize Money";
            decimal decUnCrdit = Convert.ToDecimal(dtUnpaid.Rows[0][1]);
            decimal decUnDebit = Convert.ToDecimal(dtUnpaid.Rows[0][2]);
            if (decUnCrdit > decUnDebit)
            {
                dr["Credit"] = decUnCrdit - decUnDebit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decUnDebit - decUnCrdit;
            }

            dtBind.Rows.Add(dr.ItemArray);

            dr["Slno"] = "7";
            dr["Abstract"] = "Unpaid Prizemoney payable (Ledger Credit)";
            decimal decpayable = Convert.ToDecimal(Unpaidpayable.Rows[0][1]);
            decimal decpayabledt = Convert.ToDecimal(Unpaidpayable.Rows[0][2]);
            if (decpayable > decpayabledt)
            {
                dr["Credit"] = decpayable - decpayabledt;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decpayabledt - decpayable;
            }

            dtBind.Rows.Add(dr.ItemArray);

            decimal decCredit = (Convert.ToDecimal(dtChit.Rows[0][1]) + Convert.ToDecimal(dtRCM1.Rows[0][1]) + Convert.ToDecimal(dtRCM2.Rows[0][1]) + Convert.ToDecimal(dtOutStanding.Rows[0][1]) + Convert.ToDecimal(dtChitCollection.Rows[0][1]) + Convert.ToDecimal(dtUnpaid.Rows[0][1]) + Convert.ToDecimal(Unpaidpayable.Rows[0][1]));
            decimal decDebit = (Convert.ToDecimal(dtChit.Rows[0][2]) + Convert.ToDecimal(dtRCM1.Rows[0][2]) + Convert.ToDecimal(dtRCM2.Rows[0][2]) + Convert.ToDecimal(dtOutStanding.Rows[0][2]) + Convert.ToDecimal(dtChitCollection.Rows[0][2]) + Convert.ToDecimal(dtUnpaid.Rows[0][2]) + Convert.ToDecimal(Unpaidpayable.Rows[0][2]));
            dr["Slno"] = "";
            dr["Abstract"] = "Total";
            if (decCredit > decDebit)
            {
                dr["Credit"] = decCredit - decDebit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decDebit - decCredit;
            }
            dtBind.Rows.Add(dr.ItemArray);
            return dtBind;
        }

        DataTable BindForemanCSC()
        {
            var dtM = new DataTable();
            try
            {
                var dtG = new DataTable();

                int CSCCallId = 0, CSCPrizedId = 0;
                double PrizedCSCDebitValue = 0;
                double PrizedCSCCreditValue = 0;
                double CallCSCDebitValue = 0, CallCSCCreditValue = 0;

                DataTable dt = objBAL.GetDataTable("select * from groupmaster where BranchID=" + drpdownBranchlist.SelectedValue);

                DataTable dtB = new DataTable();
                dtB.Columns.Add("Head_Id");
                dtB.Columns.Add("GROUPNO");
                dtB.Columns.Add("ChitValue");
                dtB.Columns.Add("NoofMembers");
                DataRow drB = dtB.NewRow();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataTable dtTerminated = objBAL.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt.Rows[i]["Head_Id"]);
                    if (dtTerminated.Rows.Count > 0)
                    {
                        drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                        drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                        drB["ChitValue"] = dt.Rows[i]["ChitValue"];
                        drB["NoofMembers"] = dt.Rows[i]["NoofMembers"];
                        dtB.Rows.Add(drB.ItemArray);
                    }
                }


                dtM.Columns.Add("SNo");
                dtM.Columns.Add("ChitNumber", typeof(string));
                dtM.Columns.Add("PrizeMoney", typeof(decimal));
                dtM.Columns.Add("CallAmount", typeof(decimal));
                dtM.Columns.Add("BalancePayable", typeof(decimal));
                dtM.Columns.Add("CallAmountPaid", typeof(decimal));
                dtM.Columns.Add("NoofInstalmentsPaid");//
                DataRow dr = dtM.NewRow();
                string sA = objBAL.GetSingleValue("set group_concat_max_len=30000; " +
                "SELECT cast(group_concat( GroupmemberID) as char) FROM svcf.removedmaster where (fromdate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')");
                DataTable dt1 = objBAL.GetDataTable("SELECT * FROM svcf.membertogroupmaster where  Head_Id in (" + sA + ") and BranchID=" + drpdownBranchlist.SelectedValue);

                int iCount = 0;
                decimal sumAmnt = 0;
                string sumsingle = "";
                string sumcsc = "";
                string sumcsccl = "";

                string sumauct = "";
                //DataRow dr1 = dtM.NewRow();
                //dr1["SNo"] = "II";
                //dr1["ChitNumber"] = "CSC Chits";
                //dtM.Rows.Add(dr1.ItemArray);
                string qry = "";
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    int sum = Convert.ToInt32(objBAL.GetSingleValue("SELECT NoofMembers FROM svcf.groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]));
                    int iSum = Convert.ToInt32(objBAL.GetSingleValue("SELECT count(*) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                    ////Foreman Prized Id
                    qry = "select NodeID from headstree where parentid = 49 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dt1.Rows[i]["GroupID"] + " and GrpMemberID='" + dt1.Rows[i]["GrpMemberID"] + "')";
                    CSCCallId = objBAL.GetScalarDataInt(qry);

                    qry = "select NodeID from headstree where parentid = 50 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dt1.Rows[i]["GroupID"] + " and GrpMemberID='" + dt1.Rows[i]["GrpMemberID"] + "')";
                    CSCPrizedId = objBAL.GetScalarDataInt(qry);

                    qry = "select sum(Amount) from voucher where Head_Id=" + CSCCallId + " and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'";
                    PrizedCSCCreditValue = objBAL.GetScalarDataDbl(qry);

                    qry = "select sum(Amount) from voucher where Head_Id=" + CSCCallId + " and Voucher_Type='D' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'";
                    PrizedCSCDebitValue = objBAL.GetScalarDataDbl(qry);


                    qry = "select sum(Amount) from voucher where Head_Id=" + CSCPrizedId + " and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'";
                    CallCSCCreditValue = objBAL.GetScalarDataDbl(qry);

                    qry = "select sum(Amount) from voucher where Head_Id=" + CSCPrizedId + " and Voucher_Type='D' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'";
                    CallCSCDebitValue = objBAL.GetScalarDataDbl(qry);



                    if (sum == iSum)
                    {
                        //Sum of prized id(c) - sum of prized id(d) = 0
                        if ((PrizedCSCCreditValue - PrizedCSCDebitValue) != 0 && (CallCSCCreditValue - CallCSCDebitValue) != 0)
                        {
                            dr["SNo"] = iCount + 1;
                            dr["ChitNumber"] = dt1.Rows[i]["GrpMemberID"];
                            dtG = new DataTable();
                            dtG = objBAL.GetDataTable("select * from groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]);
                            string dddd = objBAL.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber=" + dt1.Rows[i]["Head_Id"] + " and BranchID=" + drpdownBranchlist.SelectedValue + " and PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                            string ssss = objBAL.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and PrizedMemberID=" + dt1.Rows[i]["Head_Id"]);
                            //ssss = objBAL.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]);
                            //              //jeya-nandha 12-06-2016
                            if (!(string.IsNullOrEmpty(dddd)))
                            {
                                // sumcsc = objBAL.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                                //// sumcsccl = objBAL.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                                // sumcsccl = objBAL.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                                sumcsc = objBAL.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id in (select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                                sumcsccl = objBAL.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");

                            }


                            if (string.IsNullOrEmpty(dddd))
                            {
                                dr["PrizeMoney"] = 0.00;
                                dr["CallAmount"] = 0.00;
                                dr["BalancePayable"] = 0.00;
                                dr["CallAmountPaid"] = Convert.ToDecimal(objBAL.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                                dr["NoofInstalmentsPaid"] = iSum;
                            }
                            else
                            {
                                sumauct = objBAL.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]);

                                //if (!(string.IsNullOrEmpty(sumcsc)))
                                if (string.IsNullOrEmpty(sumcsc))
                                {
                                    dr["PrizeMoney"] = Convert.ToDecimal(ssss) + Convert.ToDecimal(sumcsc);
                                }
                                else
                                {
                                    dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                                }

                                //                   //jeya
                                if (!(string.IsNullOrEmpty(sumcsccl)))
                                {
                                    dr["CallAmount"] = Convert.ToDecimal(sumcsccl);
                                }
                                else
                                {
                                    dr["CallAmount"] = 0.00;
                                    sumcsccl = null;
                                }
                                //dr["BalancePayable"] = Convert.ToDecimal(ssss) - Convert.ToDecimal(objBAL.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));

                                sumsingle = objBAL.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                                if (sumsingle != "")
                                {
                                    sumAmnt = Convert.ToDecimal(sumsingle);
                                }
                                //dr["BalancePayable"] = Convert.ToDecimal(ssss) - Convert.ToDecimal(objBAL.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id="+dt1 .Rows [i]["Head_Id"]+" and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0"));
                                if (!(string.IsNullOrEmpty(sumcsc)))
                                {
                                    dr["BalancePayable"] = (Convert.ToDecimal(sumcsc)) - (Convert.ToDecimal(sumcsccl));
                                }
                                else if (!(string.IsNullOrEmpty(sumcsccl)))
                                {
                                    // dr["BalancePayable"] = Convert.ToDecimal(sumcsc) - Convert.ToDecimal(sumcsccl);
                                    dr["BalancePayable"] = Convert.ToDecimal(sumcsc);
                                }
                                else
                                {
                                    dr["BalancePayable"] = Convert.ToDecimal(sumcsc);
                                }

                                dr["CallAmountPaid"] = 0.00;
                                dr["NoofInstalmentsPaid"] = iSum;
                            }

                            dtM.Rows.Add(dr.ItemArray);
                            iCount++;
                        }

                    }
                    else if (sum != iSum)
                    {
                        dr["SNo"] = iCount + 1;
                        dr["ChitNumber"] = dt1.Rows[i]["GrpMemberID"];
                        dtG = new DataTable();
                        dtG = objBAL.GetDataTable("select * from groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]);
                        string dddd = objBAL.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber=" + dt1.Rows[i]["Head_Id"] + " and BranchID=" + drpdownBranchlist.SelectedValue + " and PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                        string ssss = objBAL.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and PrizedMemberID=" + dt1.Rows[i]["Head_Id"]);

                        if (!(string.IsNullOrEmpty(dddd)))
                        {
                            //sumcsc = objBAL.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                            //sumcsccl = objBAL.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                            sumcsc = objBAL.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id in (select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                            sumcsccl = objBAL.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                        }


                        if (string.IsNullOrEmpty(dddd))
                        {
                            dr["PrizeMoney"] = 0.00;
                            dr["CallAmount"] = 0.00;
                            dr["BalancePayable"] = 0.00;
                            // dr["CallAmountPaid"] = Convert.ToDecimal(objBAL.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                            dr["CallAmountPaid"] = objBAL.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                            dr["NoofInstalmentsPaid"] = iSum;
                        }
                        else
                        {
                            sumauct = objBAL.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]);

                            if ((string.IsNullOrEmpty(sumcsc)))
                            {
                                dr["PrizeMoney"] = Convert.ToDecimal(ssss) + Convert.ToDecimal(sumcsc);
                                //dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                            }
                            else
                            {
                                //dr["PrizeMoney"] = Convert.ToDecimal(ssss);
                                dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                            }

                            //                   //jeya
                            if (!(string.IsNullOrEmpty(sumcsccl)))
                            {
                                dr["CallAmount"] = Convert.ToDecimal(sumcsccl);
                            }
                            else
                            {
                                dr["CallAmount"] = 0.00;
                                sumcsccl = null;
                            }

                            sumsingle = objBAL.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                            if (sumsingle != "")
                            {
                                sumAmnt = Convert.ToDecimal(sumsingle);
                            }

                            if (!(string.IsNullOrEmpty(sumcsc)))
                            {
                                if (Convert.ToDecimal(sumcsc) > Convert.ToDecimal(sumcsccl))
                                {
                                    dr["BalancePayable"] = (Convert.ToDecimal(sumcsc)) - (Convert.ToDecimal(sumcsccl));
                                }
                                else
                                {
                                    dr["BalancePayable"] = (Convert.ToDecimal(sumcsccl)) - (Convert.ToDecimal(sumcsc));
                                }

                            }
                            else if (!(string.IsNullOrEmpty(sumcsccl)))
                            {
                                dr["BalancePayable"] = Convert.ToDecimal(sumcsc) - Convert.ToDecimal(sumcsccl);
                            }
                            else
                            {
                                dr["BalancePayable"] = Convert.ToDecimal(sumcsc);
                            }

                            dr["CallAmountPaid"] = 0.00;
                            dr["NoofInstalmentsPaid"] = iSum;
                        }

                        dtM.Rows.Add(dr.ItemArray);
                        iCount++;
                    }
                    else
                    {
                        DataTable st = objBAL.GetDataTable("SELECT insertkey_from_bin(DualTransactionKey) FROM svcf.voucher where Head_id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='D' and ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                        for (int k = 0; k < st.Rows.Count; k++)
                        {
                            DataTable sdsd = objBAL.GetDataTable("select * from voucher where Voucher_Type='C' and Head_Id=00069");
                            if (sdsd.Rows.Count <= 0)
                            {
                                dr["SNo"] = iCount + 1;
                                dr["ChitNumber"] = dt1.Rows[i]["GrpMemberID"];
                                dtG = objBAL.GetDataTable("select * from groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]);

                                string dddd = objBAL.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber=" + dt1.Rows[i]["Head_Id"] + " and BranchID=" + drpdownBranchlist.SelectedValue + " and PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                                string ssss = objBAL.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and PrizedMemberID=" + dt1.Rows[i]["Head_Id"]);


                                if (!(string.IsNullOrEmpty(dddd)))
                                {
                                    //sumcsc = objBAL.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                                    //sumcsccl = objBAL.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                                    sumcsc = objBAL.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id in (select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                                    sumcsccl = objBAL.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                                }

                                if (string.IsNullOrEmpty(dddd))
                                {
                                    sumcsc = objBAL.GetSingleValue("select sum(amount) from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + ") and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                                    dr["PrizeMoney"] = 0.00;
                                    dr["CallAmount"] = 0.00;
                                    dr["BalancePayable"] = 0.00;
                                    dr["CallAmountPaid"] = Convert.ToDecimal(objBAL.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                                    dr["NoofInstalmentsPaid"] = iSum;
                                }
                                else
                                {
                                    if ((string.IsNullOrEmpty(sumcsc)))
                                    {
                                        dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                                    }
                                    else
                                    {
                                        dr["PrizeMoney"] = Convert.ToDecimal(ssss);
                                    }
                                    dr["CallAmount"] = Convert.ToDecimal(sumcsccl);

                                    sumsingle = objBAL.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                                    if (sumsingle != "")
                                    {
                                        sumcsc = objBAL.GetSingleValue("select sum(amount) from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + ") and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                                        sumAmnt = Convert.ToDecimal(sumsingle) + Convert.ToDecimal(sumcsc);
                                    }
                                    if (Convert.ToDecimal(sumcsc) > Convert.ToDecimal(sumcsccl))
                                    {
                                        dr["BalancePayable"] = (Convert.ToDecimal(sumcsc)) - (Convert.ToDecimal(sumcsccl));
                                    }
                                    else
                                    {
                                        dr["BalancePayable"] = (Convert.ToDecimal(sumcsccl)) - (Convert.ToDecimal(sumcsc));
                                    }


                                    dr["CallAmountPaid"] = 0.00;
                                    dr["NoofInstalmentsPaid"] = iSum;
                                }
                                dtM.Rows.Add(dr.ItemArray);
                                iCount++;
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception) { }
            return dtM;
        }

        DataTable BindForemanOnly()
        {
            int CSCCallId = 0, CSCPrizedId = 0;
            double PrizedCSCDebitValue = 0;
            double PrizedCSCCreditValue = 0;

            double CallCSCDebitValue = 0, CallCSCCreditValue = 0;

            decimal ForemanCallSumAmount_Cr = 0;
            decimal ForemanCallSumAmount_Db = 0;
            decimal ForemanPrizedSumAmount_Cr = 0;
            decimal ForemanPrizedSumAmount_Db = 0;
            int ForemanCallId = 0, ForemanPrizedId = 0;
            //string str = @"select t3.Node as Heads , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '5,44%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `RCM1_Credit`,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '5,45%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `RCM2_Credit`,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '5,43%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Cc_Credit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 5  and (t3.TreeHint like '5,44%' or t3.TreeHint like '5,45%') and t1.ChoosenDate between '2009/03/31' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by `t1`.`Head_ID`";
            var dt = objBAL.GetDataTable("select * from groupmaster where BranchID=" + drpdownBranchlist.SelectedValue);

            var dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            dtB.Columns.Add("ChitValue");
            dtB.Columns.Add("NoofMembers");
            DataRow drB = dtB.NewRow();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                var dtTerminated = objBAL.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt.Rows[i]["Head_Id"]);
                if (dtTerminated.Rows.Count > 0)
                {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    drB["ChitValue"] = dt.Rows[i]["ChitValue"];
                    drB["NoofMembers"] = dt.Rows[i]["NoofMembers"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }

            var dtM = new DataTable();
            dtM.Columns.Add("SNo");
            dtM.Columns.Add("ChitNumber", typeof(string));
            dtM.Columns.Add("PrizeMoney", typeof(decimal));
            dtM.Columns.Add("CallAmount", typeof(decimal));
            dtM.Columns.Add("BalancePayable", typeof(decimal));
            dtM.Columns.Add("CallAmountPaid", typeof(decimal));
            dtM.Columns.Add("NoofInstalmentsPaid");//
            DataRow dr = dtM.NewRow();
            //dr["SNo"] = "I";
            //dr["ChitNumber"] = "Foreman Chits";
            //dtM.Rows.Add(dr.ItemArray);
            int iCount = 0;
            var dtforeman = new DataTable();
            int Foremancallid = 0;
            string foremanToken = "";
            string query = "";
            var foremanpramount = new DataTable();

            for (int i = 0; i < dtB.Rows.Count; i++)
            {

                int iSum = Convert.ToInt32(objBAL.GetSingleValue("SELECT count(*) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]));
                // decimal? decimalValue = (decimal?)doubleValue;
                //     decimal iCreditDebitDiff = Convert.ToDecimal(objBAL.GetSingleValue("Select sum(case when Voucher_Type='C' then Amount else 0.00 end )-sum(case when Voucher_Type='D' then Amount else 0.00 end ) From voucher Where Head_Id in (Select nodeid from headstree where parentid = " + dtB.Rows[i]["Head_Id"] + ")"));
                decimal iCreditDebitDiff = Convert.ToDecimal(objBAL.GetSingleValue("Select COALESCE(sum(case when Voucher_Type='C' then Amount else 0.00 end )-sum(case when Voucher_Type='D' then Amount else 0.00 end ),0) From voucher Where Head_Id in (Select nodeid from headstree where parentid = " + dtB.Rows[i]["Head_Id"] + ")"));

                dtforeman = objBAL.GetDataTable("select NodeID,Node from headstree where ParentID = 1054 and Node in (select GrpMemberID from membertogroupmaster mg join membermaster mm on (mm.MemberIDNew=mg.MemberID) where mm.TypeOfMember = 'Foreman' and mg.branchid= " + drpdownBranchlist.SelectedValue + " and mg.GroupID=" + dtB.Rows[i]["Head_Id"] + ")");
                if (dtforeman.Rows.Count > 0)
                {
                    if (Convert.ToString(dtforeman.Rows[0]["Node"]) == "Null")
                        foremanToken = Convert.ToString(dtforeman.Rows[0]["Node"]).Split('/')[1];

                    //   if (dtforeman.Rows.Count > 0)
                    //    {
                    //To get foreman token

                    // foremanToken = Convert.ToString(dtforeman.Rows[0]["Node"]).Split('/')[1];


                    foremanpramount = objBAL.GetDataTable("select (select NodeID FROM svcf.headstree where Node='" + Convert.ToString(dtforeman.Rows[0]["Node"]) + "' and ParentID=1052 ) as Prmemberid,(select if (Amount > 0,Amount,0) from voucher where Head_Id = Prmemberid and Trans_Type=2  and Voucher_Type ='D' and ChoosenDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') as Amount");


                    //if ((Convert.ToInt32(dtB.Rows[i]["NoofMembers"]) != iSum && iSum != 0 && dtforeman.Rows.Count > 0) || iCreditDebitDiff != 0 && foremanToken == Convert.ToString(dt.Rows[i]["NoofMembers"]))
                    if ((iSum != 0 && Convert.ToString(foremanpramount.Rows[0]["Amount"]) == "" && dtforeman.Rows.Count > 0) || iCreditDebitDiff != 0 && Convert.ToString(foremanpramount.Rows[0]["Amount"]) == "" && foremanToken == Convert.ToString(dt.Rows[i]["NoofMembers"]))
                    {
                        query = "select NodeID from headstree where parentid = 1054 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ");";
                        ForemanCallId = objBAL.GetScalarDataInt(query);

                        query = "select NodeID from headstree where parentid = 1052 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ");";
                        ForemanPrizedId = objBAL.GetScalarDataInt(query);

                        //Foreman Call Credit Sum
                        query = "select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where Head_Id=" + ForemanCallId + " and voucher_type='C' and ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';";
                        ForemanCallSumAmount_Cr = objBAL.GetScalarDecimal(query);

                        //Foreman Call Debit Sum
                        query = "select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where Head_Id=" + ForemanCallId + " and voucher_type='D' and ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';";
                        ForemanCallSumAmount_Db = objBAL.GetScalarDecimal(query);

                        //Foreman Prized Credit Sum
                        query = "select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where Head_Id=" + ForemanPrizedId + " and voucher_type='C' and ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';";
                        ForemanPrizedSumAmount_Cr = objBAL.GetScalarDecimal(query);

                        //Foreman Prized Debit Sum
                        query = "select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where Head_Id=" + ForemanPrizedId + " and voucher_type='D' and ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';";
                        ForemanPrizedSumAmount_Db = objBAL.GetScalarDecimal(query);


                        ////1052 Foreman Chit(prized)
                        decimal dtPrizedAmount = Convert.ToDecimal(objBAL.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where head_id in (select NodeID from headstree where parentid = 1052 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ")) and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'"));
                        ////1054 Foreman chit(call)
                        decimal dtCallAmount = Convert.ToDecimal(objBAL.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where head_id in (select NodeID from headstree where parentid = 1054 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ")) and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'"));

                        //decimal subprizedncall = dtPrizedAmount - dtCallAmount;

                        //if (subprizedncall != 0)
                        //{
                        if ((ForemanCallSumAmount_Cr - ForemanCallSumAmount_Db) != 0 && (ForemanPrizedSumAmount_Cr - ForemanPrizedSumAmount_Db) != 0)
                        {
                            dr["SNo"] = iCount + 1;

                            dr["ChitNumber"] = dtB.Rows[i]["GROUPNO"];


                            decimal dcPrizedAmount = 0;

                            if (dtPrizedAmount != 0)

                                dcPrizedAmount = dtPrizedAmount;

                            dr["PrizeMoney"] = dcPrizedAmount; // dtB.Rows[i]["ChitValue"];

                            //if (dtforeman.Rows.Count <= 0) dtforeman = objBAL.GetDataTable("select GrpMemberID,Head_Id from membertogroupmaster mg join membermaster mm on (mm.MemberIDNew=mg.MemberID) where mm.TypeOfMember = 'Company' and mg.branchid= " + drpdownBranchlist.SelectedValue + " and mg.GroupID=" + dtB.Rows[i]["Head_Id"]);

                            //Foremancallid = objBAL.GetScalarDataInt("select NodeID from headstree where ParentID in (50, 1054) and Node='" + dtforeman.Rows[0]["GrpMemberID"] + "'");
                            Foremancallid = Convert.ToInt32(dtforeman.Rows[0][0]);

                            dr["CallAmount"] = objBAL.GetScalarDataDbl("select sum(amount) from voucher where BranchId=" + drpdownBranchlist.SelectedValue + " and Head_Id=" + Foremancallid + " and Voucher_Type='D' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");


                            // dr["BalancePayable"] = Convert.ToDecimal(dtB.Rows[i]["ChitValue"]) - ((Convert.ToDecimal(dtB.Rows[i]["ChitValue"]) / Convert.ToInt32(Convert.ToInt32(dtB.Rows[i]["NoofMembers"]))) * iSum);
                            dr["BalancePayable"] = Convert.ToDecimal(dr["PrizeMoney"]) - Convert.ToDecimal(dr["CallAmount"]);
                            dr["CallAmountPaid"] = 0.00;
                            dr["NoofInstalmentsPaid"] = iSum;
                            dtM.Rows.Add(dr.ItemArray);
                            iCount++;
                            //}
                        }
                    }
                    //  } 
                }
            }

            return dtM;
        }


        protected void BtnBPPSt17_Click(object sender, EventArgs e)
        {
            try
            {
                List<Business_Perform_St_17> BppStatement17 = objBk1.GetBPPFor_OtherBranch(Convert.ToInt32(drpdownBranchlist.SelectedValue), txtFrmDate.Text, txtToDate.Text);
                //string folderPath = "C:\\Exceltest\\";
                //if (!Directory.Exists(folderPath))
                //{
                //    Directory.CreateDirectory(folderPath);
                //}
                string filename = "BppStatement17" + DateTime.Now.Second.ToString();
                using (XLWorkbook wb = new XLWorkbook())
                {

                    var ws = wb.Worksheets.Add("Business Perform St- 17");
                    AddImage(wb, "Business Perform St- 17", 1, 1, "imglogo.png");

                    //ws.Cell(1, 7).Value = "Business Perform St- 17";
                    //ws.Range(1, 7, 1, 8).Merge().AddToNamed("Titles");

                    ws.Cell(1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                    ws.Cell(1, 2).Style.Font.Bold = true;
                    ws.Cell(1, 2).Style.Font.FontSize = 14;

                    var branch = 2;
                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }


                    ws.Cell(2, 2).Style.Font.Bold = true;
                    ws.Cell(2, 2).Style.Font.FontSize = 13;

                    ws.Cell(2, 6).Value = "Statement No. 17";
                    ws.Cell(2, 6).Style.Font.Bold = true;
                    ws.Cell(2, 6).Style.Font.FontSize = 13;

                    ws.Cell(3, 1).Value = "Particulars of Business Performance pay paid during " + txtFrmDate.Text + " to " + txtToDate.Text;
                    ws.Cell(3, 1).Style.Font.Bold = true;
                    ws.Cell(3, 1).Style.Font.FontSize = 14;
                    ws.Range(3, 1, 3, 6).Merge().AddToNamed("Titles");
                    var rangedbr1 = ws.Range(ws.Cell(3, 1), ws.Cell(3, 6));
                    rangedbr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    #region Title
                    ws.Cell(5, 1).Value = "Sl.No.";
                    ws.Cell(5, 1).Style.Font.Bold = true;
                    ws.Cell(5, 1).Style.Font.FontSize = 11;

                    ws.Cell(5, 2).Value = "Name of the Staff";
                    ws.Cell(5, 2).Style.Font.Bold = true;
                    ws.Cell(5, 2).Style.Font.FontSize = 11;
                    ws.Column(2).AdjustToContents();

                    ws.Cell(5, 3).Value = "Full Residential Address of the Staff";
                    ws.Cell(5, 3).Style.Font.Bold = true;
                    ws.Cell(5, 3).Style.Font.FontSize = 11;
                    ws.Column(3).AdjustToContents();

                    ws.Cell(5, 4).Value = "Number of Payments made";
                    ws.Cell(5, 4).Style.Font.Bold = true;
                    ws.Cell(5, 4).Style.Font.FontSize = 11;
                    ws.Column(4).AdjustToContents();

                    ws.Cell(5, 5).Value = "Total Amount paid";
                    ws.Cell(5, 5).Style.Font.Bold = true;
                    ws.Cell(5, 5).Style.Font.FontSize = 11;
                    ws.Column(5).AdjustToContents();

                    ws.Cell(5, 6).Value = "Particulars of approval of the Administrative Office for payment";
                    ws.Cell(5, 6).Style.Font.Bold = true;
                    ws.Cell(5, 6).Style.Font.FontSize = 11;
                    ws.Column(6).AdjustToContents();
                    var rangee = ws.Range(ws.Cell(5, 1), ws.Cell(5, 6));
                    rangee.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    var rangee1 = ws.Range(ws.Cell(5, 1), ws.Cell(5, 6));
                    rangee1.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    #endregion

                    #region Filling Data
                    int RangeRow = 6;
                    int rowcount = 0;
                    int startingRowNumber = 0;
                    int NoOfSection = 0;
                    int secionCount = 0;
                    decimal SumAmount = 0;
                    foreach (var row in BppStatement17)
                    {
                        rowcount++;
                        NoOfSection = (BppStatement17.Count / 34);
                        // secionCount++;

                        if ((rowcount > 34) && (secionCount == 1))
                        {
                            ws.Cell(RangeRow, 3).Value = "Carried Over";
                            ws.Cell(RangeRow, 3).Style.Font.Bold = true;
                            ws.Cell(RangeRow, 3).Style.Font.FontSize = 13;
                            ws.Cell(RangeRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 5).Value = SumAmount;
                            ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 5).Style.Font.Bold = true;
                            var rangeddata_border1 = ws.Range(ws.Cell(startingRowNumber, 1), ws.Cell(RangeRow, 6));
                            rangeddata_border1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            AddImage(wb, "Business Perform St- 17", 1, 1, "imglogo.png");

                            //ws.Cell(1, 7).Value = "Business Perform St- 17";
                            //ws.Range(1, 7, 1, 8).Merge().AddToNamed("Titles");

                            ws.Cell(RangeRow + 1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                            ws.Cell(RangeRow + 1, 2).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 1, 2).Style.Font.FontSize = 14;

                            ws.Cell(RangeRow + 2, 2).Value = "Branch:   " + drpdownBranchlist.SelectedItem.Text;

                            ws.Cell(RangeRow + 2, 2).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 2, 2).Style.Font.FontSize = 13;

                            ws.Cell(RangeRow + 2, 6).Value = "Statement No. 17";
                            ws.Cell(RangeRow + 2, 6).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 2, 6).Style.Font.FontSize = 13;

                            ws.Cell(RangeRow + 3, 1).Value = "Particulars of Business Performance pay paid during " + txtFrmDate.Text + " to " + txtToDate.Text;
                            ws.Cell(RangeRow + 3, 1).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 3, 1).Style.Font.FontSize = 14;
                            ws.Range(RangeRow + 3, 1, RangeRow + 3, 6).Merge().AddToNamed("Titles");
                            var rangedbr11 = ws.Range(ws.Cell(RangeRow + 3, 1), ws.Cell(RangeRow + 3, 6));
                            rangedbr11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            #region Title
                            RangeRow++;
                            ws.Cell(RangeRow + 4, 1).Value = "Sl.No.";
                            ws.Cell(RangeRow + 4, 1).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 1).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 2).Value = "Name of the Staff";
                            ws.Cell(RangeRow + 4, 2).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 2).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 3).Value = "Full Residential Address of the Staff";
                            ws.Cell(RangeRow + 4, 3).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 4).Value = "Number of Payments made";
                            ws.Cell(RangeRow + 4, 4).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 4).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 5).Value = "Total Amount paid";
                            ws.Cell(RangeRow + 4, 5).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 5).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 6).Value = "Particulars of approval of the Administrative Office for payment";
                            ws.Cell(RangeRow + 4, 6).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 6).Style.Font.FontSize = 11;
                            var rangedtitle_border1 = ws.Range(ws.Cell(RangeRow + 4, 1), ws.Cell(RangeRow + 5, 6));
                            rangedtitle_border1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            rangedtitle_border1.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            rowcount = 1;
                            //RangeRow++;
                            ws.Cell(RangeRow + 5, 3).Value = "Brought Forward";
                            ws.Cell(RangeRow + 5, 3).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 5, 3).Style.Font.FontSize = 11;
                            ws.Cell(RangeRow + 5, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow + 5, 5).Value = SumAmount;
                            ws.Cell(RangeRow + 5, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeRow + 5, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow + 5, 5).Style.Font.Bold = true;
                            secionCount++;
                            RangeRow = RangeRow + 6;
                            #endregion
                        }

                        if ((rowcount > 69) && (secionCount == 3))
                        {
                            ws.Cell(RangeRow, 3).Value = "Carried Over";
                            ws.Cell(RangeRow, 3).Style.Font.Bold = true;
                            ws.Cell(RangeRow, 3).Style.Font.FontSize = 13;
                            ws.Cell(RangeRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 5).Value = SumAmount;
                            ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 5).Style.Font.Bold = true;
                            var rangeddata_border1 = ws.Range(ws.Cell(startingRowNumber, 1), ws.Cell(RangeRow, 6));
                            rangeddata_border1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            AddImage(wb, "Business Perform St- 17", 1, 1, "imglogo.png");

                            //ws.Cell(1, 7).Value = "Business Perform St- 17";
                            //ws.Range(1, 7, 1, 8).Merge().AddToNamed("Titles");

                            ws.Cell(RangeRow + 1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                            ws.Cell(RangeRow + 1, 2).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 1, 2).Style.Font.FontSize = 14;

                            ws.Cell(RangeRow + 2, 2).Value = "Branch:   " + drpdownBranchlist.SelectedItem.Text;

                            ws.Cell(RangeRow + 2, 2).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 2, 2).Style.Font.FontSize = 13;

                            ws.Cell(RangeRow + 2, 6).Value = "Statement No. 17";
                            ws.Cell(RangeRow + 2, 6).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 2, 6).Style.Font.FontSize = 13;

                            ws.Cell(RangeRow + 3, 1).Value = "Particulars of Business Performance pay paid during " + txtFrmDate.Text + " to " + txtToDate.Text;
                            ws.Cell(RangeRow + 3, 1).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 3, 1).Style.Font.FontSize = 14;
                            ws.Range(RangeRow + 3, 1, RangeRow + 3, 6).Merge().AddToNamed("Titles");
                            var rangedbr11 = ws.Range(ws.Cell(RangeRow + 3, 1), ws.Cell(RangeRow + 3, 6));
                            rangedbr11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            #region Title
                            RangeRow++;
                            ws.Cell(RangeRow + 4, 1).Value = "Sl.No.";
                            ws.Cell(RangeRow + 4, 1).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 1).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 2).Value = "Name of the Staff";
                            ws.Cell(RangeRow + 4, 2).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 2).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 3).Value = "Full Residential Address of the Staff";
                            ws.Cell(RangeRow + 4, 3).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 4).Value = "Number of Payments made";
                            ws.Cell(RangeRow + 4, 4).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 4).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 5).Value = "Total Amount paid";
                            ws.Cell(RangeRow + 4, 5).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 5).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 6).Value = "Particulars of approval of the Administrative Office for payment";
                            ws.Cell(RangeRow + 4, 6).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 6).Style.Font.FontSize = 11;
                            var rangedtitle_border1 = ws.Range(ws.Cell(RangeRow + 4, 1), ws.Cell(RangeRow + 5, 6));
                            rangedtitle_border1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            rangedtitle_border1.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            rowcount = 1;
                            //RangeRow++;
                            ws.Cell(RangeRow + 5, 3).Value = "Brought Forward";
                            ws.Cell(RangeRow + 5, 3).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 5, 3).Style.Font.FontSize = 11;
                            ws.Cell(RangeRow + 5, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow + 5, 5).Value = SumAmount;
                            ws.Cell(RangeRow + 5, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeRow + 5, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow + 5, 5).Style.Font.Bold = true;
                            secionCount++;
                            RangeRow = RangeRow + 6;
                            #endregion
                        }
                        if ((rowcount > 104) && (secionCount == 5))
                        {
                            ws.Cell(RangeRow, 3).Value = "Carried Over";
                            ws.Cell(RangeRow, 3).Style.Font.Bold = true;
                            ws.Cell(RangeRow, 3).Style.Font.FontSize = 13;
                            ws.Cell(RangeRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 5).Value = SumAmount;
                            ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow, 5).Style.Font.Bold = true;
                            var rangeddata_border1 = ws.Range(ws.Cell(startingRowNumber, 1), ws.Cell(RangeRow, 6));
                            rangeddata_border1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            AddImage(wb, "Business Perform St- 17", 1, 1, "imglogo.png");

                            //ws.Cell(1, 7).Value = "Business Perform St- 17";
                            //ws.Range(1, 7, 1, 8).Merge().AddToNamed("Titles");

                            ws.Cell(RangeRow + 1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                            ws.Cell(RangeRow + 1, 2).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 1, 2).Style.Font.FontSize = 14;

                            ws.Cell(RangeRow + 2, 2).Value = "Branch:   " + drpdownBranchlist.SelectedItem.Text;

                            ws.Cell(RangeRow + 2, 2).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 2, 2).Style.Font.FontSize = 13;

                            ws.Cell(RangeRow + 2, 6).Value = "Statement No. 17";
                            ws.Cell(RangeRow + 2, 6).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 2, 6).Style.Font.FontSize = 13;

                            ws.Cell(RangeRow + 3, 1).Value = "Particulars of Business Performance pay paid during " + txtFrmDate.Text + " to " + txtToDate.Text;
                            ws.Cell(RangeRow + 3, 1).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 3, 1).Style.Font.FontSize = 14;
                            ws.Range(RangeRow + 3, 1, RangeRow + 3, 6).Merge().AddToNamed("Titles");
                            var rangedbr11 = ws.Range(ws.Cell(RangeRow + 3, 1), ws.Cell(RangeRow + 3, 6));
                            rangedbr11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            #region Title
                            RangeRow++;
                            ws.Cell(RangeRow + 4, 1).Value = "Sl.No.";
                            ws.Cell(RangeRow + 4, 1).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 1).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 2).Value = "Name of the Staff";
                            ws.Cell(RangeRow + 4, 2).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 2).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 3).Value = "Full Residential Address of the Staff";
                            ws.Cell(RangeRow + 4, 3).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 4).Value = "Number of Payments made";
                            ws.Cell(RangeRow + 4, 4).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 4).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 5).Value = "Total Amount paid";
                            ws.Cell(RangeRow + 4, 5).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 5).Style.Font.FontSize = 11;

                            ws.Cell(RangeRow + 4, 6).Value = "Particulars of approval of the Administrative Office for payment";
                            ws.Cell(RangeRow + 4, 6).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 4, 6).Style.Font.FontSize = 11;
                            var rangedtitle_border1 = ws.Range(ws.Cell(RangeRow + 4, 1), ws.Cell(RangeRow + 5, 6));
                            rangedtitle_border1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            rangedtitle_border1.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            rowcount = 1;
                            //RangeRow++;
                            ws.Cell(RangeRow + 5, 3).Value = "Brought Forward";
                            ws.Cell(RangeRow + 5, 3).Style.Font.Bold = true;
                            ws.Cell(RangeRow + 5, 3).Style.Font.FontSize = 11;
                            ws.Cell(RangeRow + 5, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow + 5, 5).Value = SumAmount;
                            ws.Cell(RangeRow + 5, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeRow + 5, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeRow + 5, 5).Style.Font.Bold = true;
                            secionCount++;
                            RangeRow = RangeRow + 6;
                            #endregion
                        }
                        if (rowcount == 1)
                            startingRowNumber = RangeRow;
                        ws.Cell(RangeRow, 1).Value = row.SlNo;
                        ws.Cell(RangeRow, 2).Value = row.NameoftheStaff;
                        ws.Cell(RangeRow, 3).Value = row.FullResidentialAddressofStaff;
                        ws.Cell(RangeRow, 4).Value = row.NoOfPaymentsmade;
                        ws.Cell(RangeRow, 5).Value = row.TotalAmountPaid;
                        ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";
                        SumAmount += row.TotalAmountPaid;
                        ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeRow, 6).Value = row.ApprovalNoOfAdminOffice;
                        RangeRow++;
                        var rangedfinal1 = ws.Range(ws.Cell(startingRowNumber, 1), ws.Cell(RangeRow, 6));
                        rangedfinal1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedfinal2 = ws.Range(ws.Cell(startingRowNumber, 1), ws.Cell(RangeRow, 6));
                        rangedfinal2.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        if (rowcount == 34)
                        {
                            secionCount = 1;
                        }
                        if (rowcount == 69)
                        {
                            secionCount = 3;
                        }
                        if (rowcount == 104)
                        {
                            secionCount = 5;
                        }
                    }
                    #endregion

                    ws.Cell(RangeRow, 3).Value = "TOTAL";
                    ws.Cell(RangeRow, 3).Style.Font.Bold = true;
                    ws.Cell(RangeRow, 3).Style.Font.FontSize = 11;
                    ws.Cell(RangeRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(RangeRow, 5).Value = SumAmount;
                    ws.Cell(RangeRow, 5).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeRow, 5).Style.Font.Bold = true;
                    RangeRow++;
                    if (BppStatement17.Count == 0) { startingRowNumber = RangeRow; }
                    var rangedfinal = ws.Range(ws.Cell(startingRowNumber, 1), ws.Cell(RangeRow, 6));
                    rangedfinal.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    var range = ws.Range(ws.Cell(startingRowNumber, 1), ws.Cell(RangeRow, 6));
                    range.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();
                    // wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }
                }
            }
            catch (Exception) { }
        }
        protected void BtnReconDiffSt04_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    // YearEndingObj.recon(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value), filepath);
            //    var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
            //    Workbook workbook = new Workbook();
            //    workbook.CreateEmptySheets(1);
            //    Worksheet sheet = workbook.Worksheets[0];
            //    ExcelFont fontBold = workbook.CreateFont();
            //    fontBold.IsBold = true;
            //    sheet.Pictures.Add(1, 1, filepath);
            //    sheet.Name = "Recon Diff Bank Bal St-04 Contd";
            //    CellRange range = sheet.Range["A5:H6"];
            //    range.Borders.LineStyle = LineStyleType.Double;
            //    range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            //    range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

            //    sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
            //    RichText richText01 = sheet.Range["C1"].RichText;
            //    richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

            //    sheet.Range["C2"].Value = "Branch:" + branchtext;
            //    RichText richText02 = sheet.Range["C2"].RichText;
            //    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

            //    sheet.Range["A3"].Value = "RECONCILATION for Difference in Bank Balance as at" + txtToDate.Text;
            //    RichText richText03 = sheet.Range["A3"].RichText;
            //    richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
            //    sheet.Range["A3:L3"].Merge();

            //    sheet.Range["A4"].Value = "(Full details i.e. Date, Cheque No. Name of the Bank, Place and Amount should be given)";
            //    RichText richText04 = sheet.Range["A4"].RichText;
            //    richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
            //    sheet.Range["A4:L4"].Merge();

            //    sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            //    sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;



            //    sheet.Range["A5:A6"].Merge();
            //    sheet.Range["A5"].Value = "Sl.No.";
            //    sheet.Range["A5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            //    sheet.Range["A5"].Style.VerticalAlignment = VerticalAlignType.Center;


            //    sheet.Range["B5:B6"].Merge();
            //    sheet.Range["B5"].Value = "Particulars.";
            //    sheet.Range["B5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            //    sheet.Range["B5"].Style.VerticalAlignment = VerticalAlignType.Center;

            //    sheet.Range["C5:C6"].Merge();
            //    sheet.Range["C5"].Value = "Credit.";
            //    sheet.Range["C5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            //    sheet.Range["C5"].Style.VerticalAlignment = VerticalAlignType.Center;

            //    sheet.Range["D5:D6"].Merge();
            //    sheet.Range["D5"].Value = "Debit";
            //    sheet.Range["D5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            //    sheet.Range["D5"].Style.VerticalAlignment = VerticalAlignType.Center;

            //    sheet.Range["E5:E6"].Merge();
            //    sheet.Range["E5"].Value = "Sl.No.";
            //    sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            //    sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;


            //    sheet.Range["F5:F6"].Merge();
            //    sheet.Range["F5"].Value = "Particulars.";
            //    sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            //    sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;

            //    sheet.Range["G5:G6"].Merge();
            //    sheet.Range["G5"].Value = "Credit.";
            //    sheet.Range["G5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            //    sheet.Range["G5"].Style.VerticalAlignment = VerticalAlignType.Center;

            //    sheet.Range["H5:H6"].Merge();
            //    sheet.Range["H5"].Value = "Debit";
            //    sheet.Range["H5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            //    sheet.Range["H5"].Style.VerticalAlignment = VerticalAlignType.Center;




            //    int rowcnt = 5;

            //    rowcnt = rowcnt + 2;

            //    CellRange range2 = sheet.Range["A7:" + "H" + rowcnt];
            //    range2.BorderAround(LineStyleType.Medium, Color.Black);

            //    //CellRange range3 = sheet.Range["E7:" + "H" + rowcnt];
            //    //range3.BorderAround(LineStyleType.Medium, Color.Black);


            //    sheet.AllocatedRange.AutoFitColumns();
            //    sheet.AllocatedRange.AutoFitRows();

            //    sheet.SetRowHeight(4, 29);
            //    sheet.SetColumnWidth(1, 9);
            //    sheet.SetRowHeight(5, 24);
            //    sheet.SetRowHeight(1, 24);
            //    sheet.SetRowHeight(2, 24);


            //    workbook.SaveToHttpResponse("Recon Diff Bank Bal st-04.xlsx", HttpContext.Current.Response);
            //}
            //catch (Exception) { }
            try
            {
                var filename = "Recon Diff Bank Bal St-04 Contd";
                using (XLWorkbook wb = new XLWorkbook())
                {
                    var ws = wb.Worksheets.Add("Recon Diff Bank Bal St-04 Contd");
                    AddImage(wb, "Recon Diff Bank Bal St-04 Contd", 1, 1, "imglogo.png");

                    ws.Cell(1, 8).Value = "Statement  No. 04 Contd....";
                    ws.Range(1, 8, 1, 9).Merge().AddToNamed("Titles");

                    ws.Cell(1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                    ws.Cell(1, 2).Style.Font.Bold = true;
                    ws.Cell(1, 2).Style.Font.FontSize = 14;

                    var branch = 2;
                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }

                    ws.Cell(2, 2).Style.Font.Bold = true;
                    ws.Cell(2, 2).Style.Font.FontSize = 13;

                    ws.Cell(3, 1).Value = "RECONCILATION for Difference in Bank Balance as at " + txtToDate.Text;
                    ws.Cell(3, 1).Style.Font.Bold = true;
                    ws.Cell(3, 1).Style.Font.FontSize = 13;
                    ws.Range(3, 1, 3, 9).Merge().AddToNamed("Titles");

                    ws.Cell(4, 1).Value = "(Full details i.e. Date, Cheque No. Name of the Bank, Place and Amount should be given)";
                    ws.Cell(4, 1).Style.Font.Bold = true;
                    ws.Cell(4, 1).Style.Font.FontSize = 13;
                    ws.Range(4, 1, 4, 10).Merge().AddToNamed("Titles");





                    ws.Cell(5, 1).Value = "Sl.No.";
                    ws.Cell(5, 1).Style.Font.Bold = true;
                    ws.Cell(5, 1).Style.Font.FontSize = 11;

                    ws.Cell(5, 2).Value = "Particulars.";
                    ws.Cell(5, 2).Style.Font.Bold = true;
                    ws.Cell(5, 2).Style.Font.FontSize = 11;

                    ws.Cell(5, 3).Value = "Credit.";
                    ws.Cell(5, 3).Style.Font.Bold = true;
                    ws.Cell(5, 3).Style.Font.FontSize = 11;

                    ws.Cell(5, 4).Value = "Debit.";
                    ws.Cell(5, 4).Style.Font.Bold = true;
                    ws.Cell(5, 4).Style.Font.FontSize = 11;

                    ws.Cell(5, 6).Value = "Sl.No.";
                    ws.Cell(5, 6).Style.Font.Bold = true;
                    ws.Cell(5, 6).Style.Font.FontSize = 11;

                    ws.Cell(5, 7).Value = "Particulars.                          ";
                    ws.Cell(5, 7).Style.Font.Bold = true;
                    ws.Cell(5, 7).Style.Font.FontSize = 11;

                    ws.Cell(5, 8).Value = "Credit.";
                    ws.Cell(5, 8).Style.Font.Bold = true;
                    ws.Cell(5, 8).Style.Font.FontSize = 11;

                    ws.Cell(5, 9).Value = "Debit.";
                    ws.Cell(5, 9).Style.Font.Bold = true;
                    ws.Cell(5, 9).Style.Font.FontSize = 11;


                    var rangedbr5 = ws.Range(ws.Cell(4, 1), ws.Cell(35, 9));
                    rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    var rangedbr6 = ws.Range(ws.Cell(4, 1), ws.Cell(35, 9));
                    rangedbr6.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                    var rangedbr7 = ws.Range(ws.Cell(4, 1), ws.Cell(35, 9));
                    rangedbr7.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    // wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }

                }
            }
            catch (Exception err) { }
        }
        protected void BtnEmolumentsSt12_Click(object sender, EventArgs e)
        {
            try
            {
                List<Emoluments_St_12> EmolumentsSt12 = objBk1.GetEmoluments(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedValue));
                int RangeCell = 0;
                int sno = 0;
                string filename = "EmolumentsSt12" + DateTime.Now.Second.ToString();
                using (XLWorkbook wb = new XLWorkbook())
                {
                    int logo = 1;
                    int branch = 2;
                    int date = 3;
                    int CREDIT = 4;
                    int SNo1 = 5;
                    List<string> ss = new List<string> { "imglogo.png", "imglogo1.png", "imglogo2.png" };
                    double page = Math.Ceiling((float)EmolumentsSt12.Count / 24);
                    var ws = wb.Worksheets.Add("Emoluments St-12");
                    for (int i = 0; i < page; i++)
                    {
                        AddImage(wb, "Emoluments St-12", 1, logo, "imglogo.png");

                        ws.Cell(logo, 13).Value = "Statement No. 12";
                        ws.Range(logo, 13, logo, 14).Merge().AddToNamed("Titles");

                        ws.Cell(logo, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(logo, 2).Style.Font.Bold = true;
                        ws.Cell(logo, 2).Style.Font.FontSize = 14;

                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                            ws.Cell(branch, 2).Style.Font.Bold = true;
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                            ws.Cell(branch, 2).Style.Font.Bold = true;
                        }
                        else
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                            ws.Cell(branch, 2).Style.Font.Bold = true;
                        }
                        ws.Cell(date, 1).Value = "Particulars of Emoluments and others paid to Staff Members during the financial year  " + txtFrmDate.Text + " - " + txtToDate.Text + "";
                        ws.Cell(date, 1).Style.Font.Bold = true;
                        ws.Cell(date, 1).Style.Font.FontSize = 13;
                        ws.Range(date, 1, date, 10).Merge().AddToNamed("Titles");



                        ws.Cell(CREDIT, 1).Value = "S.No.";
                        ws.Cell(CREDIT, 1).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 1).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 1, SNo1, 1).Merge();

                        ws.Cell(CREDIT, 2).Value = "S.R / APR No.";
                        ws.Cell(CREDIT, 2).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 2).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 2, SNo1, 2).Merge();
                        var range = ws.Range(CREDIT, 2, SNo1, 2);
                        range.Merge();
                        range.Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                        ws.Cell(CREDIT, 3).Value = "Period Worked";
                        ws.Cell(CREDIT, 3).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 3).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 3, CREDIT, 4).Merge();
                        var range1 = ws.Range(CREDIT, 3, CREDIT, 4);
                        range1.Merge();
                        range1.Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);


                        //Sub Columns------------------
                        ws.Cell(SNo1, 3).Value = "Months";
                        ws.Cell(SNo1, 3).Style.Font.Bold = true;
                        ws.Cell(SNo1, 3).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 4).Value = "Days";
                        ws.Cell(SNo1, 4).Style.Font.Bold = true;
                        ws.Cell(SNo1, 4).Style.Font.FontSize = 11;
                        //Sub Columns------------------
                        ws.Cell(CREDIT, 5).Value = "Name of the Staff";
                        ws.Cell(CREDIT, 5).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 5).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 5, SNo1, 5).Merge();
                        var range12 = ws.Range(CREDIT, 5, SNo1, 5);
                        range12.Merge();
                        range12.Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                        ws.Cell(CREDIT, 6).Value = "TOTAL EMOLUMENTS PAID ITEM WAR";
                        ws.Cell(CREDIT, 6).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 6).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 6, CREDIT, 12).Merge();
                        var range123 = ws.Range(CREDIT, 6, CREDIT, 12);
                        range123.Merge();
                        range123.Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                        // ws.Cell(5, 6).Style.Alignment.WrapText = true;


                        //Sub Columns started-------------------------------
                        ws.Cell(SNo1, 6).Value = "Salary";
                        ws.Cell(SNo1, 6).Style.Font.Bold = true;
                        ws.Cell(SNo1, 6).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 7).Value = "D.A";
                        ws.Cell(SNo1, 7).Style.Font.Bold = true;
                        ws.Cell(SNo1, 7).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 8).Value = "H.R.A";
                        ws.Cell(SNo1, 8).Style.Font.Bold = true;
                        ws.Cell(SNo1, 8).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 9).Value = "Bonus";
                        ws.Cell(SNo1, 9).Style.Font.Bold = true;
                        ws.Cell(SNo1, 9).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 10).Value = "Business Incentive";
                        ws.Cell(SNo1, 10).Style.Font.Bold = true;
                        ws.Cell(SNo1, 10).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 11).Value = "B.P.P. For Br. Chits";
                        ws.Cell(SNo1, 11).Style.Font.Bold = true;
                        ws.Cell(SNo1, 11).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 12).Value = "B.P.P for M. Chits";
                        ws.Cell(SNo1, 12).Style.Font.Bold = true;
                        ws.Cell(SNo1, 12).Style.Font.FontSize = 11;

                        //Sub Columns started-------------------------------

                        ws.Cell(CREDIT, 13).Value = "Aggregate total Carried Over";
                        ws.Cell(CREDIT, 13).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 13).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 13).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 13, SNo1, 13).Merge();

                        ws.Cell(CREDIT, 14).Value = "Confirmation of the staff having receipt of the amount shown against them";
                        ws.Cell(CREDIT, 14).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 14).Style.Alignment.WrapText = true;
                        ws.Cell(CREDIT, 14).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 14, SNo1, 14).Merge();

                        var rangedbr7 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 14));
                        rangedbr7.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        var rangedbr8 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 14));
                        rangedbr8.Style.Border.InsideBorder = XLBorderStyleValues.Double;

                        logo = logo + 31;
                        branch = branch + 31;
                        date = date + 31;
                        CREDIT = CREDIT + 31;
                        SNo1 = SNo1 + 31;
                    }

                    RangeCell = 6;
                    // SNo = 1;
                    decimal SumAmount1 = 0;
                    decimal SumAmount2 = 0;
                    decimal SumAmount3 = 0;
                    decimal SumAmount4 = 0;
                    decimal SumAmount5 = 0;
                    decimal SumAmount6 = 0;
                    decimal SumAmount7 = 0;
                    decimal SumAmount8 = 0;
                    int LastRRow = 0;
                    int debitrows = 0;
                    for (int j = 0; j < EmolumentsSt12.Count; j++)
                    {
                        if (j < 24)
                        {
                            sno += 1;
                            debitrows = debitrows + 1;
                            ws.Cell(RangeCell, 1).Value = sno;
                            ws.Cell(RangeCell, 2).Value = EmolumentsSt12[j].AprNo;
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(RangeCell, 5).Value = EmolumentsSt12[j].NameoftheStaff;
                            ws.Cell(RangeCell, 6).Value = EmolumentsSt12[j].Salary;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            SumAmount1 += EmolumentsSt12[j].Salary;
                            ws.Cell(RangeCell, 7).Value = EmolumentsSt12[j].DearnessAllowance;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            SumAmount2 += EmolumentsSt12[j].DearnessAllowance;
                            ws.Cell(RangeCell, 8).Value = EmolumentsSt12[j].HouseRentAllowance;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            SumAmount3 += EmolumentsSt12[j].HouseRentAllowance;
                            ws.Cell(RangeCell, 9).Value = EmolumentsSt12[j].Bonus;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            SumAmount4 += EmolumentsSt12[j].Bonus;
                            ws.Cell(RangeCell, 10).Value = EmolumentsSt12[j].BusinessIncentive;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            SumAmount5 += EmolumentsSt12[j].BusinessIncentive;
                            ws.Cell(RangeCell, 11).Value = EmolumentsSt12[j].BPPforCurrentBranch;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            SumAmount6 += EmolumentsSt12[j].BPPforCurrentBranch;
                            ws.Cell(RangeCell, 12).Value = EmolumentsSt12[j].BPPforOtherBranch;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            SumAmount7 += EmolumentsSt12[j].BPPforOtherBranch;
                            ws.Cell(RangeCell, 13).Value = EmolumentsSt12[j].AggregateTotal;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            SumAmount8 += EmolumentsSt12[j].AggregateTotal;
                            ws.Cell(RangeCell, 14).Value = EmolumentsSt12[j].ConfirmationReceipt;


                            var rangedbr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                            rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr29 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                            rangedbr29.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            RangeCell++;
                        }
                        else
                        {
                            break;
                        }
                    }

                    if (EmolumentsSt12.Count > 24)
                    {
                        ws.Cell(RangeCell, 5).Value = "Total Carried Over";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 6).Value = SumAmount1;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = SumAmount2;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = SumAmount3;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SumAmount4;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = SumAmount5;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = SumAmount6;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = SumAmount7;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 13).Value = SumAmount8;
                        ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        LastRRow = (RangeCell - 1);
                        var rangedbr2 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell = RangeCell + 7;

                        ws.Cell(RangeCell, 5).Value = "Brought Forward";
                        //       ws.Cell(RangeCell, 5).Value = "Total Carried Over";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 6).Value = SumAmount1;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = SumAmount2;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = SumAmount3;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SumAmount4;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = SumAmount5;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = SumAmount6;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = SumAmount7;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 13).Value = SumAmount8;
                        ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        var rangedbr55 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                        rangedbr55.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr56 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                        rangedbr56.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell = 38;

                        for (; debitrows < EmolumentsSt12.Count;)
                        {
                            if (debitrows < 48)
                            {
                                sno += 1;
                                ws.Cell(RangeCell, 1).Value = sno;
                                ws.Cell(RangeCell, 2).Value = EmolumentsSt12[debitrows].AprNo;
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(RangeCell, 5).Value = EmolumentsSt12[debitrows].NameoftheStaff;
                                ws.Cell(RangeCell, 6).Value = EmolumentsSt12[debitrows].Salary;
                                ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                SumAmount1 += EmolumentsSt12[debitrows].Salary;
                                ws.Cell(RangeCell, 7).Value = EmolumentsSt12[debitrows].DearnessAllowance;
                                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                                SumAmount2 += EmolumentsSt12[debitrows].DearnessAllowance;
                                ws.Cell(RangeCell, 8).Value = EmolumentsSt12[debitrows].HouseRentAllowance;
                                ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                                SumAmount3 += EmolumentsSt12[debitrows].HouseRentAllowance;
                                ws.Cell(RangeCell, 9).Value = EmolumentsSt12[debitrows].Bonus;
                                ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                                SumAmount4 += EmolumentsSt12[debitrows].Bonus;
                                ws.Cell(RangeCell, 10).Value = EmolumentsSt12[debitrows].BusinessIncentive;
                                ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                                SumAmount5 += EmolumentsSt12[debitrows].BusinessIncentive;
                                ws.Cell(RangeCell, 11).Value = EmolumentsSt12[debitrows].BPPforCurrentBranch;
                                ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                                SumAmount6 += EmolumentsSt12[debitrows].BPPforCurrentBranch;
                                ws.Cell(RangeCell, 12).Value = EmolumentsSt12[debitrows].BPPforOtherBranch;
                                ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                                SumAmount7 += EmolumentsSt12[debitrows].BPPforOtherBranch;
                                ws.Cell(RangeCell, 13).Value = EmolumentsSt12[debitrows].AggregateTotal;
                                ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                                SumAmount8 += EmolumentsSt12[debitrows].AggregateTotal;
                                ws.Cell(RangeCell, 14).Value = EmolumentsSt12[debitrows].ConfirmationReceipt;
                                RangeCell = RangeCell + 1;

                                var rangedbr552 = ws.Range(ws.Cell(RangeCell - 1, 1), ws.Cell(RangeCell - 1, 14));
                                rangedbr552.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                var rangedbr562 = ws.Range(ws.Cell(RangeCell - 1, 1), ws.Cell(RangeCell - 1, 14));
                                rangedbr562.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                debitrows = debitrows + 1;
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (EmolumentsSt12.Count > 48)
                        {
                            ws.Cell(RangeCell, 5).Value = "Total Carried Over";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 6).Value = SumAmount1;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount2;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount3;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount4;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount5;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount6;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount7;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount8;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            LastRRow = (RangeCell - 1);
                            var rangedbr22 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                            rangedbr22.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr33 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                            rangedbr33.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            RangeCell = RangeCell + 6;

                            ws.Cell(RangeCell, 5).Value = "Brought Forward";
                            //         ws.Cell(RangeCell, 5).Value = "Total Carried Over";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 6).Value = SumAmount1;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount2;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount3;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount4;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount5;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount6;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount7;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount8;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            var rangedbr555 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                            rangedbr555.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr566 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                            rangedbr566.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            RangeCell = 69;
                            for (; debitrows < EmolumentsSt12.Count;)
                            {
                                if (debitrows < 72)
                                {
                                    sno += 1;
                                    ws.Cell(RangeCell, 1).Value = sno;
                                    ws.Cell(RangeCell, 2).Value = EmolumentsSt12[debitrows].AprNo;
                                    ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Cell(RangeCell, 5).Value = EmolumentsSt12[debitrows].NameoftheStaff;
                                    ws.Cell(RangeCell, 6).Value = EmolumentsSt12[debitrows].Salary;
                                    ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                    SumAmount1 += EmolumentsSt12[debitrows].Salary;
                                    ws.Cell(RangeCell, 7).Value = EmolumentsSt12[debitrows].DearnessAllowance;
                                    ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                                    SumAmount2 += EmolumentsSt12[debitrows].DearnessAllowance;
                                    ws.Cell(RangeCell, 8).Value = EmolumentsSt12[debitrows].HouseRentAllowance;
                                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                                    SumAmount3 += EmolumentsSt12[debitrows].HouseRentAllowance;
                                    ws.Cell(RangeCell, 9).Value = EmolumentsSt12[debitrows].Bonus;
                                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                                    SumAmount4 += EmolumentsSt12[debitrows].Bonus;
                                    ws.Cell(RangeCell, 10).Value = EmolumentsSt12[debitrows].BusinessIncentive;
                                    ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                                    SumAmount5 += EmolumentsSt12[debitrows].BusinessIncentive;
                                    ws.Cell(RangeCell, 11).Value = EmolumentsSt12[debitrows].BPPforCurrentBranch;
                                    ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                                    SumAmount6 += EmolumentsSt12[debitrows].BPPforCurrentBranch;
                                    ws.Cell(RangeCell, 12).Value = EmolumentsSt12[debitrows].BPPforOtherBranch;
                                    ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                                    SumAmount7 += EmolumentsSt12[debitrows].BPPforOtherBranch;
                                    ws.Cell(RangeCell, 13).Value = EmolumentsSt12[debitrows].AggregateTotal;
                                    ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                                    SumAmount8 += EmolumentsSt12[debitrows].AggregateTotal;
                                    ws.Cell(RangeCell, 14).Value = EmolumentsSt12[debitrows].ConfirmationReceipt;
                                    RangeCell = RangeCell + 1;

                                    var rangedbr552 = ws.Range(ws.Cell(RangeCell - 1, 1), ws.Cell(RangeCell - 1, 14));
                                    rangedbr552.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                    var rangedbr562 = ws.Range(ws.Cell(RangeCell - 1, 1), ws.Cell(RangeCell - 1, 14));
                                    rangedbr562.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                    debitrows = debitrows + 1;
                                }
                                else
                                {
                                    break;
                                }
                            }

                            ws.Cell(RangeCell, 5).Value = "Total";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 6).Value = SumAmount1;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount2;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount3;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount4;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount5;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount6;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount7;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount8;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            LastRRow = (RangeCell - 1);
                            var rangedbr234 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr334 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                            rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        }
                        else
                        {
                            ws.Cell(RangeCell, 5).Value = "Total";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 6).Value = SumAmount1;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount2;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount3;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount4;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount5;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount6;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount7;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount8;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            LastRRow = (RangeCell - 1);
                            var rangedbr234 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr334 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 14));
                            rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        }
                    }
                    else
                    {
                        RangeCell = 30;
                        ws.Cell(RangeCell, 5).Value = "Total";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 6).Value = SumAmount1;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = SumAmount2;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = SumAmount3;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SumAmount4;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = SumAmount5;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = SumAmount6;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = SumAmount7;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 13).Value = SumAmount8;
                        ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        LastRRow = (RangeCell - 1);
                        var rangedbr2 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 14));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 14));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }

                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }

                }


            }
            catch (Exception err)
            {
                LogCls.LogError(err, "Emoluments St12");
            }
            finally
            {

            }
        }

        public void Export_AbsForemanandSubstitutedSt06()
        {
            try
            {

                decimal ForemanCSCPrized = 0;
                decimal ForemanCSCCallAmount = 0;
                decimal ForemanCSCBalancePayable = 0;
                decimal ForemanCSCNPCallAmountPaid = 0;
                decimal ForemanPrized = 0;
                decimal ForemanCallAmount = 0;
                decimal ForemanBalancePayable = 0;
                decimal ForemanNPCallAmountPaid = 0;
                var ForemanList = BindForemanOnly();


                var ForemanCSCList = BindForemanCSC();


                //string folderPath = "E:\\Exceltest\\";
                //if (!Directory.Exists(folderPath))
                //{
                //    Directory.CreateDirectory(folderPath);
                //}
                string filename = "AbsForemanandSubSt06" + DateTime.Now.Second.ToString();
                using (XLWorkbook wb = new XLWorkbook())
                {
                    var ws = wb.Worksheets.Add("Foreman & Subst Chits St-06");
                    AddImage(wb, "Foreman & Subst Chits St-06", 1, 1, "imglogo.png");
                    ws.Cell(1, 4).Value = "Statement No. 06";
                    ws.Range(1, 4, 1, 5).Merge().AddToNamed("Titles");
                    ws.Cell(1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                    ws.Cell(1, 2).Style.Font.Bold = true;
                    ws.Cell(1, 2).Style.Font.FontSize = 14;
                    var branch = 2;
                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }

                    ws.Cell(2, 2).Style.Font.Bold = true;
                    ws.Cell(2, 2).Style.Font.FontSize = 13;

                    ws.Cell(3, 1).Value = "Abstract of Foreman and Substituted Chits as at " + txtToDate.Text;
                    ws.Cell(3, 1).Style.Font.Bold = true;
                    ws.Cell(3, 1).Style.Font.FontSize = 13;
                    ws.Range(3, 1, 3, 5).Merge().AddToNamed("Titles");


                    #region First Head                   
                    ws.Cell(5, 1).Value = "S.No.";
                    ws.Cell(5, 1).Style.Font.Bold = true;
                    ws.Cell(5, 1).Style.Font.FontSize = 11;

                    ws.Cell(5, 2).Value = "Particulars";
                    ws.Cell(5, 2).Style.Font.Bold = true;
                    ws.Cell(5, 2).Style.Font.FontSize = 11;

                    ws.Cell(5, 3).Value = "Amount";
                    ws.Cell(5, 3).Style.Font.Bold = true;
                    ws.Cell(5, 3).Style.Font.FontSize = 11;

                    ws.Cell(5, 4).Value = "Net Credit";
                    ws.Cell(5, 4).Style.Font.Bold = true;
                    ws.Cell(5, 4).Style.Font.FontSize = 11;

                    ws.Cell(5, 5).Value = "Net Debit";
                    ws.Cell(5, 5).Style.Font.Bold = true;
                    ws.Cell(5, 5).Style.Font.FontSize = 11;
                    #endregion
                    if (ForemanList.Rows.Count != 0)
                    {
                        ForemanPrized = Convert.ToDecimal(ForemanList.Compute("sum(PrizeMoney)", ""));
                        ForemanCallAmount = Convert.ToDecimal(ForemanList.Compute("sum(CallAmount)", ""));
                        ForemanBalancePayable = Convert.ToDecimal(ForemanList.Compute("sum(BalancePayable)", ""));
                        ForemanNPCallAmountPaid = Convert.ToDecimal(ForemanList.Compute("sum(CallAmountPaid)", ""));
                    }
                    if (ForemanCSCList.Rows.Count != 0)
                    {
                        ForemanCSCPrized = Convert.ToDecimal(ForemanCSCList.Compute("sum(PrizeMoney)", ""));
                        ForemanCSCCallAmount = Convert.ToDecimal(ForemanCSCList.Compute("sum(CallAmount)", ""));
                        ForemanCSCBalancePayable = Convert.ToDecimal(ForemanCSCList.Compute("sum(BalancePayable)", ""));
                        ForemanCSCNPCallAmountPaid = Convert.ToDecimal(ForemanCSCList.Compute("sum(CallAmountPaid)", ""));
                        
                    }
                    int CellSno = 1;
                    ws.Cell(6, 1).Value = CellSno;
                    ws.Cell(6, 2).Value = "AMOUNT PAYABLE BY THE FOREMAN (DR)";
                    ws.Cell(7, 2).Value = "i.   Foreman Chits Prized";
                    ws.Cell(7, 3).Value = ForemanPrized;
                    ws.Cell(7, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(7, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(8, 2).Value = "ii.  Less: Call amount paid up to date";
                    ws.Cell(8, 3).Value = ForemanCallAmount;
                    ws.Cell(8, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(8, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(8, 5).Value = ForemanBalancePayable;
                    ws.Cell(8, 5).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(8, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(9, 2).Value = "(Balance to be entered in Net Debit Coloumn)";
                    CellSno++;

                    ws.Cell(11, 1).Value = CellSno;
                    ws.Cell(11, 2).Value = "AMOUNT PAYABLE BY THE FOREMAN IN SUBSTITUTED CHITS (DR)";
                    ws.Cell(12, 2).Value = "i.   Foreman substituted chits prized";
                    ws.Cell(12, 3).Value = ForemanCSCPrized;
                    ws.Cell(12, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(12, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(13, 2).Value = "ii.  Less: Call amount paid up to date";
                    ws.Cell(13, 3).Value = ForemanCSCCallAmount;
                    ws.Cell(13, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(13, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(13, 5).Value = ForemanCSCBalancePayable;
                    ws.Cell(13, 5).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(13, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(14, 2).Value = "(Balance to be entered in Net Debit Coloumn)";

                    CellSno++;
                    ws.Cell(16, 1).Value = CellSno;
                    ws.Cell(16, 2).Value = "AMOUNT PAID BY THE FOREMAN IN NON PRIZED SUBSTITUTED CHITS (CR)";
                    ws.Cell(17, 2).Value = "(Balance to be entered in Net Credit Coloumn)";
                    ws.Cell(17, 4).Value = Convert.ToDecimal(ForemanNPCallAmountPaid) + Convert.ToDecimal(ForemanCSCNPCallAmountPaid);
                    ws.Cell(17, 4).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(17, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(19, 2).Value = "TOTAL";
                    ws.Cell(19, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(19, 2).Style.Font.Bold = true;
                    ws.Cell(19, 2).Style.Font.FontSize = 11;
                    ws.Cell(19, 2).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(19, 4).Value = Convert.ToDecimal(ForemanNPCallAmountPaid) + Convert.ToDecimal(ForemanCSCNPCallAmountPaid); ;
                    ws.Cell(19, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(19, 4).Style.Font.Bold = true;
                    ws.Cell(19, 4).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(19, 5).Value = Convert.ToDecimal(ForemanBalancePayable) + Convert.ToDecimal(ForemanCSCBalancePayable);
                    ws.Cell(19, 5).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(19, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(19, 5).Style.Font.Bold = true;

                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    var rangedbr2 = ws.Range(ws.Cell(5, 1), ws.Cell(5, 5));
                    rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    var rangedbr8 = ws.Range(ws.Cell(5, 1), ws.Cell(5, 5));
                    rangedbr8.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    var rangedbr3 = ws.Range(ws.Cell(6, 1), ws.Cell(19, 5));
                    rangedbr3.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    var rangedbr4 = ws.Range(ws.Cell(6, 1), ws.Cell(19, 5));
                    rangedbr4.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                    //  titlesStyle.Fill.BackgroundColor = XLColor.Cyan;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    // wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }
                }
            }
            catch (Exception ex) { }
        }

        protected void BtnAbsForemanandSubstitutedSt06_Click(object sender, EventArgs e)
        {

            try
            {
                Export_AbsForemanandSubstitutedSt06();
            }
            catch (Exception err) { }
        }
        protected void BtnAbsChitSt5_Click(object sender, EventArgs e)
        {
            try
            {
                string strChits = "", credit = "", debit = "";
                decimal I_Credit = 0, I_Debit = 0, E_Credit = 0, E_Debit = 0, N_Credit = 0, N_Debit = 0, NonPrized = 0, Prized = 0, TotalAmountofKasar = 0, NP = 0, P = 0;
                decimal FI_Credit = 0, FI_Debit = 0, FE_Credit = 0, FE_Debit = 0, FN_Credit = 0, FN_Debit = 0, FNonPrized = 0, FPrized = 0, FTotalAmountofKasar = 0, FNP = 0, FP = 0;
                decimal TI_Credit = 0, TI_Debit = 0, TE_Credit = 0, TE_Debit = 0, TN_Credit = 0, TN_Debit = 0, TNonPrized = 0, TPrized = 0, TTotalAmountofKasar = 0, TNP = 0, TP = 0;
                decimal RcmSummary = 0;
                decimal AmountActuallyremittedbytheParty = 0;
                decimal unpaidPrizedMoneySummary = 0;
                decimal unpaidPrizedMoneyLedgerCredit = 0;
                decimal ChitCollectiontobeAccounted = 0;
                decimal UnpaidOutstandingTotalSummary = 0;
                decimal ForemanandCSCSummary = 0;
                decimal NetBalanceChitabstract = 0, decPrizeMoney2 = 0, decCallAmount2 = 0, decBalancePayable2 = 0, decCallAmountPaid2 = 0;
                decimal decPrizeMoney1 = 0, decCallAmount1 = 0, decBalancePayable1 = 0, decCallAmountPaid1 = 0;
                decimal ForemanBalancePayable = 0;
                decimal TotalCreditSummary = 0, TotalDebitSummary = 0;

                var chitTrialMonthly = BindChitTrial("Monthly");
                var chitTrialFortnightly = BindChitTrial("Fortnightly");
                var chitTrialTrimonthly = BindChitTrial("Trimonthly");
                //var chitOutstanding = BindOutstanding();
                var chitOutstanding = ClsYeb.BindOutstanding(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                var RCM = BindRCM();
                var ForemanCSCdt = BindForemanCSC();
                var ChitAbstract = BindChitAbstract();
                var ForemanDt = BindForemanOnly();
                #region Summary Calculation
                if (ForemanDt.Rows.Count > 0)
                {
                    RcmSummary = 0;
                    AmountActuallyremittedbytheParty = 0;
                    unpaidPrizedMoneySummary = 0;
                    unpaidPrizedMoneyLedgerCredit = 0;
                    ChitCollectiontobeAccounted = 0;
                    UnpaidOutstandingTotalSummary = 0;
                    ForemanandCSCSummary = 0;
                    NetBalanceChitabstract = 0; decPrizeMoney2 = 0; decCallAmount2 = 0; decBalancePayable2 = 0; decCallAmountPaid2 = 0;
                    decPrizeMoney1 = 0; decCallAmount1 = 0; decBalancePayable1 = 0; decCallAmountPaid1 = 0;
                    ForemanBalancePayable = 0;
                    TotalCreditSummary = 0; TotalDebitSummary = 0;

                    #region Foreman 
                    decPrizeMoney1 = Convert.ToDecimal(ForemanDt.Compute("sum(PrizeMoney)", ""));
                    decCallAmount1 = Convert.ToDecimal(ForemanDt.Compute("sum(CallAmount)", ""));
                    decBalancePayable1 = Convert.ToDecimal(ForemanDt.Compute("sum(BalancePayable)", ""));
                    decCallAmountPaid1 = Convert.ToDecimal(ForemanDt.Compute("sum(CallAmountPaid)", ""));
                    #endregion

                    #region Foreman CSC Net Balance
                    if (ForemanCSCdt.Rows.Count > 0)
                    {
                        decPrizeMoney2 = Convert.ToDecimal(ForemanCSCdt.Compute("sum(PrizeMoney)", ""));
                        decCallAmount2 = Convert.ToDecimal(ForemanCSCdt.Compute("sum(CallAmount)", ""));
                        decBalancePayable2 = Convert.ToDecimal(ForemanCSCdt.Compute("sum(BalancePayable)", ""));
                        decCallAmountPaid2 = Convert.ToDecimal(ForemanCSCdt.Compute("sum(CallAmountPaid)", ""));
                    }
                    #endregion
                    // }
                    if ((decBalancePayable2 - decBalancePayable1) > (decCallAmountPaid2))
                    {
                        ForemanBalancePayable = (decBalancePayable2 - decBalancePayable1) - (decCallAmountPaid2);
                    }
                    else
                    {
                        ForemanBalancePayable = (decCallAmountPaid2) - (decBalancePayable2 - decBalancePayable1);
                    }

                    #region Foreman calculation jeya Edit

                    ForemanBalpay = decBalancePayable1 + decBalancePayable2;
                    Foremancallamntpaid = decCallAmountPaid1 + decCallAmountPaid2;



                    #endregion

                    decimal ForemanCallamountPaidforNonprized;

                    ForemanCallamountPaidforNonprized = decCallAmountPaid2;
                    I_Credit = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        I_Credit = I_Credit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(I_Credit)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FI_Credit = FI_Credit + Convert.ToDecimal(chitTrialFortnightly.Compute("Sum(I_Credit)",""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TI_Credit = TI_Credit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(I_Credit)", ""));


                    I_Debit = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        I_Debit = I_Debit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(I_Debit)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FI_Debit = FI_Debit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(I_Debit)", ""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TI_Debit = TI_Debit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(I_Debit)", ""));

                    E_Credit = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        E_Credit = E_Credit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(E_Credit)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FE_Credit = FE_Credit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(E_Credit)", ""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TE_Credit = TE_Credit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(E_Credit)", ""));


                    E_Debit = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        E_Debit = E_Debit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(E_Debit)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FE_Debit = FE_Debit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(E_Debit)", ""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TE_Debit = TE_Debit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(E_Debit)", ""));

                    N_Credit = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        N_Credit = N_Credit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(N_Credit)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FN_Credit = FN_Credit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(N_Credit)", ""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TN_Credit = TN_Credit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(N_Credit)", ""));

                    N_Debit = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        N_Debit = N_Debit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(N_Debit)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FN_Debit = FN_Debit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(N_Debit)", ""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TN_Debit = TN_Debit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(N_Debit)", ""));


                    NonPrized = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        NonPrized = NonPrized + Convert.ToDecimal(chitTrialMonthly.Compute("sum(NonPrized)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FNonPrized = FNonPrized + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(NonPrized)", ""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TNonPrized = TNonPrized + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(NonPrized)", ""));


                    Prized = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        Prized = Prized + Convert.ToDecimal(chitTrialMonthly.Compute("sum(Prized)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FPrized = FPrized + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(Prized)", ""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TPrized = TPrized + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(Prized)", ""));

                    TotalAmountofKasar = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        TotalAmountofKasar = TotalAmountofKasar + Convert.ToDecimal(chitTrialMonthly.Compute("sum(TotalAmountofKasar)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FTotalAmountofKasar = FTotalAmountofKasar + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(TotalAmountofKasar)", ""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TTotalAmountofKasar = TTotalAmountofKasar + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(TotalAmountofKasar)", ""));

                    NP = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        NP = NP + Convert.ToDecimal(chitTrialMonthly.Compute("sum(NP)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FNP = FNP + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(NP)", ""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TNP = TNP + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(NP)", ""));

                    P = 0;
                    if (chitTrialMonthly.Rows.Count > 2)
                        P = P + Convert.ToDecimal(chitTrialMonthly.Compute("sum(P)", ""));
                    if (chitTrialFortnightly.Rows.Count > 2)
                        FP = FP + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(P)", ""));
                    if (chitTrialTrimonthly.Rows.Count > 2)
                        TP = TP + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(P)", ""));

                    AmountActuallyremittedbytheParty = Convert.ToDecimal(chitOutstanding.Compute("sum(AmountActuallyremittedbytheParty)", ""));
                    unpaidPrizedMoneySummary = (Convert.ToDecimal(chitOutstanding.Compute("sum(UnpaidPrizeMoney)", "")) - Convert.ToDecimal(chitOutstanding.Compute("sum(AmountActuallyremittedbytheParty)", "")));
                    if (RCM.Rows.Count != 0)
                    {
                        RcmSummary = Convert.ToDecimal(RCM.Compute("sum(RCM1_Credit)", ""));
                        RcmSummary = RcmSummary + Convert.ToDecimal(RCM.Compute("sum(RCM2_Credit)", ""));
                    }


                    //Chit abstact credit data
                    ChitCollectiontobeAccounted = Convert.ToDecimal(ChitAbstract.Rows[3][2]);
                    UnpaidOutstandingTotalSummary = Convert.ToDecimal(chitOutstanding.Compute("sum(OutTotal)", ""));
                    if (ForemanCSCdt.Rows.Count > 0)
                    {
                        ForemanandCSCSummary = Convert.ToDecimal(ForemanCSCdt.Compute("sum(CallAmountPaid)", ""));
                    }
                    NetBalanceChitabstract = Convert.ToDecimal(ChitAbstract.Rows[ChitAbstract.Rows.Count - 1][2]);

                    //unpaid prized money ledger
                    if (Convert.ToDecimal(ChitAbstract.Rows[6][2]) > 0)
                        unpaidPrizedMoneyLedgerCredit = Convert.ToDecimal(ChitAbstract.Rows[6][2]);
                    else
                        unpaidPrizedMoneyLedgerCredit = Convert.ToDecimal(ChitAbstract.Rows[6][3]);

                    #endregion
                }
                //string folderPath = "E:\\Exceltest\\";
                //if (!Directory.Exists(folderPath))
                //{
                //    Directory.CreateDirectory(folderPath);
                //}
                string filename = "AbsChitSt5F" + DateTime.Now.Second.ToString();
                using (XLWorkbook wb = new XLWorkbook())
                {
                    var ws = wb.Worksheets.Add("Abstract Chit St-5(F)");
                    AddImage(wb, "Abstract Chit St-5(F)", 1, 1, "imglogo.png");

                    ws.Cell(1, 7).Value = "Statement No. 5(F)";
                    ws.Range(1, 7, 1, 8).Merge().AddToNamed("Titles");

                    ws.Cell(1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                    ws.Cell(1, 2).Style.Font.Bold = true;
                    ws.Cell(1, 2).Style.Font.FontSize = 14;

                    var branch = 2;
                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }

                    ws.Cell(2, 2).Style.Font.Bold = true;
                    ws.Cell(2, 2).Style.Font.FontSize = 13;

                    ws.Cell(5, 1).Value = "ABSTRACT OF CHITS AS AT " + txtToDate.Text;
                    ws.Cell(5, 1).Style.Font.Bold = true;
                    ws.Cell(5, 1).Style.Font.FontSize = 13;
                    ws.Range(5, 1, 5, 10).Merge().AddToNamed("Titles");
                    var rangedbr1 = ws.Range(ws.Cell(5, 1), ws.Cell(5, 10));
                    rangedbr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;


                    #region Left Heading                   
                    ws.Cell(6, 1).Value = "Sl.No.";
                    ws.Cell(6, 1).Style.Font.Bold = true;
                    ws.Cell(6, 1).Style.Font.FontSize = 11;

                    ws.Cell(6, 2).Value = "Particulars";
                    ws.Cell(6, 2).Style.Font.Bold = true;
                    ws.Cell(6, 2).Style.Font.FontSize = 11;

                    ws.Cell(6, 3).Value = "Gross Credit";
                    ws.Cell(6, 3).Style.Font.Bold = true;
                    ws.Cell(6, 3).Style.Font.FontSize = 11;

                    ws.Cell(6, 4).Value = "Gross Debit";
                    ws.Cell(6, 4).Style.Font.Bold = true;
                    ws.Cell(6, 4).Style.Font.FontSize = 11;
                    var rangedbr2 = ws.Range(ws.Cell(6, 1), ws.Cell(6, 4));
                    rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    var rangedbr3 = ws.Range(ws.Cell(6, 1), ws.Cell(6, 4));
                    rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    #endregion

                    #region right heading
                    ws.Cell(6, 7).Value = "Sl.No.";
                    ws.Cell(6, 7).Style.Font.Bold = true;
                    ws.Cell(6, 7).Style.Font.FontSize = 11;

                    ws.Cell(6, 8).Value = "Particulars";
                    ws.Cell(6, 8).Style.Font.Bold = true;
                    ws.Cell(6, 8).Style.Font.FontSize = 11;

                    ws.Cell(6, 9).Value = "Gross Credit";
                    ws.Cell(6, 9).Style.Font.Bold = true;
                    ws.Cell(6, 9).Style.Font.FontSize = 11;

                    ws.Cell(6, 10).Value = "Gross Debit";
                    ws.Cell(6, 10).Style.Font.Bold = true;
                    ws.Cell(6, 10).Style.Font.FontSize = 11;
                    var rangedbr27 = ws.Range(ws.Cell(6, 7), ws.Cell(6, 10));
                    rangedbr27.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    var rangedbr6 = ws.Range(ws.Cell(6, 7), ws.Cell(6, 10));
                    rangedbr6.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    #endregion
                    int SNo = 1;
                    int RangeCell = 7;

                    #region Left Hand Side Filling
                    ws.Cell(RangeCell, 1).Value = SNo;
                    ws.Cell(RangeCell, 2).Value = "Monthly Chits";
                    ws.Cell(RangeCell, 3).Value = I_Credit;
                    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 4).Value = I_Debit;
                    ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                    TotalCreditSummary = TotalCreditSummary + I_Credit;
                    TotalDebitSummary = TotalDebitSummary + I_Debit;


                    SNo++;
                    RangeCell++;
                    ws.Cell(RangeCell, 1).Value = SNo;
                    ws.Cell(RangeCell, 2).Value = "Fortnightly Chits";
                    ws.Cell(RangeCell, 3).Value = FI_Credit;
                    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 4).Value = FI_Debit;
                    ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                    TotalCreditSummary = TotalCreditSummary + FI_Credit;
                    TotalDebitSummary = TotalDebitSummary + FI_Debit;

                    SNo++;
                    RangeCell++;
                    ws.Cell(RangeCell, 1).Value = SNo;
                    ws.Cell(RangeCell, 2).Value = "Trimonthly Chits";
                    ws.Cell(RangeCell, 3).Value = TI_Credit;
                    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 4).Value = TI_Debit;
                    ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                    TotalCreditSummary = TotalCreditSummary + TI_Credit;
                    TotalDebitSummary = TotalDebitSummary + TI_Debit;


                    RangeCell = RangeCell + 2;
                    int ChitTotalRangeCell = RangeCell;
                    ws.Cell(RangeCell, 2).Value = "Total";
                    ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
                    ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(C7:C" + (RangeCell - 1) + ")}";
                    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(D7:D" + (RangeCell - 1) + ")}";
                    ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    SNo++;
                    RangeCell++;
                    ws.Cell(RangeCell, 1).Value = SNo;
                    ws.Cell(RangeCell, 2).Value = "Less:";
                    ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
                    RangeCell++;
                    ws.Cell(RangeCell, 2).Value = "Amount actually paid ";
                    RangeCell++;
                    ws.Cell(RangeCell, 2).Value = "by the subscribers as";
                    RangeCell++;
                    ws.Cell(RangeCell, 2).Value = "per outstanding prizemoney";
                    RangeCell++;
                    ws.Cell(RangeCell, 2).Value = "statement (5) (E)";
                    ws.Cell(RangeCell, 3).Value = AmountActuallyremittedbytheParty;
                    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                    TotalCreditSummary = (TotalCreditSummary - AmountActuallyremittedbytheParty);

                    // SNo++;
                    RangeCell = RangeCell + 2;
                    int BalanceCreditCell = (RangeCell - 2);
                    //ws.Cell(RangeCell, 1).Value = SNo;
                    ws.Cell(RangeCell, 2).Value = "Balance";
                    ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
                    ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(RangeCell, 3).FormulaA1 = "=C" + ChitTotalRangeCell + "-C" + (RangeCell - 2) + "";
                    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(D7:D9)}";
                    ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    SNo++;
                    RangeCell++;
                    ws.Cell(RangeCell, 1).Value = SNo;
                    ws.Cell(RangeCell, 2).Value = "Add:";
                    ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                    RangeCell++;
                    ws.Cell(RangeCell, 2).Value = "Balance payable by the";
                    RangeCell++;
                    ws.Cell(RangeCell, 2).Value = " subscribers as per ";
                    RangeCell++;
                    ws.Cell(RangeCell, 2).Value = "outstanding prizemoney ";
                    RangeCell++;
                    ws.Cell(RangeCell, 2).Value = "statement 5(E)";
                    ws.Cell(RangeCell, 4).Value = unpaidPrizedMoneySummary;
                    ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    TotalDebitSummary = TotalDebitSummary + unpaidPrizedMoneySummary;


                    RangeCell = RangeCell + 2;
                    int carriedoverRangecell = (RangeCell - 2);
                    ws.Cell(RangeCell, 2).Value = "Balance Carried over";
                    ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                    ws.Cell(RangeCell, 3).FormulaA1 = "=C" + ChitTotalRangeCell + "-C" + BalanceCreditCell + "";
                    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(D" + BalanceCreditCell + ":D" + (RangeCell - 2) + ")}";
                    ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    var rangedbr21 = ws.Range(ws.Cell(7, 1), ws.Cell(RangeCell, 4));
                    rangedbr21.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    var rangedbr4 = ws.Range(ws.Cell(7, 1), ws.Cell(RangeCell, 4));
                    rangedbr4.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    #endregion

                    #region Right Hand Side Filling       

                    RangeCell = 7;
                    ws.Cell(RangeCell, 8).Value = "Brought Forward";
                    ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 8).Style.Font.FontSize = 11;

                    ws.Cell(RangeCell, 9).FormulaA1 = "=C" + ChitTotalRangeCell + "-C" + BalanceCreditCell + "";
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeCell, 10).FormulaA1 = "{=SUM(D" + BalanceCreditCell + ":D" + carriedoverRangecell + ")}";
                    ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    decimal BroughtForwardCredit = TotalCreditSummary;
                    decimal BroughtForwardDebit = TotalDebitSummary;


                    RangeCell++;
                    SNo++;
                    ws.Cell(RangeCell, 7).Value = SNo;
                    ws.Cell(RangeCell, 8).Value = "Removed Chits";
                    ws.Cell(RangeCell, 9).Value = RcmSummary;
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    RangeCell++;
                    SNo++;
                    ws.Cell(RangeCell, 7).Value = SNo;
                    ws.Cell(RangeCell, 8).Value = "Chit Collection to be accounted";
                    ws.Cell(RangeCell, 9).Value = ChitCollectiontobeAccounted;
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    RangeCell++;
                    SNo++;
                    ws.Cell(RangeCell, 7).Value = SNo;
                    ws.Cell(RangeCell, 8).Value = "Unpaid prizemoney (Ledger Credit)";
                    ws.Cell(RangeCell, 9).Value = unpaidPrizedMoneyLedgerCredit;
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    RangeCell = RangeCell + 2;
                    //SNo++;
                    //ws.Cell(RangeCell, 7).Value = SNo;
                    ws.Cell(RangeCell, 8).Value = "Total ";
                    ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 8).Style.Font.FontSize = 11;
                    ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(RangeCell, 9).Value = (BroughtForwardCredit + RcmSummary + ChitCollectiontobeAccounted + unpaidPrizedMoneyLedgerCredit);
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 10).Value = BroughtForwardDebit;
                    ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    RangeCell++;
                    SNo++;
                    ws.Cell(RangeCell, 7).Value = SNo;
                    ws.Cell(RangeCell, 8).Value = "Outstanding Prize Money payable";
                    ws.Cell(RangeCell, 9).Value = UnpaidOutstandingTotalSummary;
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    RangeCell = RangeCell + 2;
                    // SNo++;
                    //ws.Cell(RangeCell, 7).Value = SNo;
                    ws.Cell(RangeCell, 8).Value = "Grand Total";
                    ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 8).Style.Font.FontSize = 11;
                    ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(RangeCell, 9).Value = (BroughtForwardCredit + RcmSummary + ChitCollectiontobeAccounted + unpaidPrizedMoneyLedgerCredit + UnpaidOutstandingTotalSummary);
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(RangeCell, 10).Value = BroughtForwardDebit;
                    ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    decimal cgdot = (BroughtForwardCredit + RcmSummary + ChitCollectiontobeAccounted + unpaidPrizedMoneyLedgerCredit + UnpaidOutstandingTotalSummary);
                    decimal dgdot = BroughtForwardDebit;
                    decimal creansgtot = 0;
                    decimal debansgtot = 0;
                    bool chitval = false;
                    if (cgdot > dgdot)
                    {
                        creansgtot = (BroughtForwardCredit + RcmSummary + ChitCollectiontobeAccounted + unpaidPrizedMoneyLedgerCredit + UnpaidOutstandingTotalSummary) - BroughtForwardDebit;
                        chitval = true;
                    }
                    if (dgdot > cgdot)
                    {
                        creansgtot = BroughtForwardDebit - (BroughtForwardCredit + RcmSummary + ChitCollectiontobeAccounted + unpaidPrizedMoneyLedgerCredit + UnpaidOutstandingTotalSummary);
                    }

                    SNo++;
                    RangeCell++;
                    ws.Cell(RangeCell, 7).Value = SNo;
                    ws.Cell(RangeCell, 8).Value = "Less:";
                    ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 8).Style.Font.FontSize = 11;

                    RangeCell++;
                    ws.Cell(RangeCell, 8).Value = "Foreman Chits and Foreman Substituted Chits as per Statement No.06";
                    ws.Cell(RangeCell, 9).Value = Foremancallamntpaid;
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 10).Value = ForemanBalpay;
                    ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";



                    RangeCell = RangeCell + 2;
                    ws.Cell(RangeCell, 8).Value = "Balance";
                    ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 8).Style.Font.FontSize = 11;
                    ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(RangeCell, 9).Value = ((BroughtForwardCredit + RcmSummary + ChitCollectiontobeAccounted + unpaidPrizedMoneyLedgerCredit + UnpaidOutstandingTotalSummary) - (Foremancallamntpaid));
                    ws.Cell(RangeCell, 10).Value = (BroughtForwardDebit - ForemanBalpay);
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    RangeCell = RangeCell + 2;
                    ws.Cell(RangeCell, 8).Value = "Net Balance CR / DR";
                    ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 8).Style.Font.FontSize = 11;
                    ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    decimal credithigh = (BroughtForwardCredit + RcmSummary + ChitCollectiontobeAccounted + unpaidPrizedMoneyLedgerCredit + UnpaidOutstandingTotalSummary) - (Foremancallamntpaid);
                    decimal debithigh = (BroughtForwardDebit - ForemanBalpay);
                    decimal hihval = 0;
                    if (credithigh > debithigh)
                    {
                        hihval = credithigh - debithigh;
                    }
                    if (debithigh > credithigh)
                    {
                        hihval = debithigh - credithigh;
                    }

                    ws.Cell(RangeCell, 9).Value = hihval;
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    RangeCell++;
                    ws.Cell(RangeCell, 8).Value = "Net Balance In Chit Account";
                    ws.Cell(RangeCell, 9).Value = creansgtot;
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    decimal regt = 0;
                    var Foremancalc = Foremancallamntpaid - ForemanBalpay;
                    decimal cftot = Foremancallamntpaid + creansgtot;
                    decimal dftot = debansgtot + ForemanBalpay;
                    string removeminus = Convert.ToString(Foremancalc);
                    removeminus = removeminus.Replace("-", "");
                    RangeCell++;
                    bool formanisc = false;
                    if (Foremancallamntpaid > ForemanBalpay)
                    {
                        regt = Foremancallamntpaid - ForemanBalpay;
                        formanisc = true;
                    }
                    if (ForemanBalpay > Foremancallamntpaid)
                    {
                        regt = ForemanBalpay - Foremancallamntpaid;
                    }

                    ws.Cell(RangeCell, 8).Value = "Net Balance in Foreman & Foreman substituted chits";
                    ws.Cell(RangeCell, 9).Value = removeminus;
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    //ws.Cell(RangeCell, 10).Value = ForemanBalpay;
                    //ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "0.00";
                    //ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    decimal vkava = 0;
                    if (formanisc == true && chitval == true)
                    {
                        vkava = regt + creansgtot;

                    }
                    else
                    {
                        vkava = hihval;
                    }

                    RangeCell++;
                    ws.Cell(RangeCell, 8).Value = "Total";
                    ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 8).Style.Font.FontSize = 11;
                    ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                    ws.Cell(RangeCell, 9).Value = vkava;
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);





                    RangeCell++;
                    ws.Cell(RangeCell, 8).Value = "Net Balance CR / DR";
                    ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 8).Style.Font.FontSize = 11;
                    ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);


                    ws.Cell(RangeCell, 9).Value = vkava;
                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                    ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    var rangedbr25 = ws.Range(ws.Cell(7, 7), ws.Cell(RangeCell, 10));
                    rangedbr25.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    var rangedbr5 = ws.Range(ws.Cell(7, 7), ws.Cell(RangeCell, 10));
                    rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    #endregion


                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();
                    // wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }
                }
                //}
            }
            catch (Exception err) { }
        }


        //public void Export_TrBlBankSt04()
        //{
        //    try
        //    {

        //        List<string> banklist = new List<string>();
        //        string filename = "TrBlBankSt04" + DateTime.Now.Second.ToString();
        //        using (XLWorkbook wb = new XLWorkbook())
        //        {
        //            var ws = wb.Worksheets.Add("Tr. Bl. Bank St-04");
        //            AddImage(wb, "Tr. Bl. Bank St-04", 1, 1, "imglogo.png");

        //            ws.Cell(1, 7).Value = "Statement  No. 04";
        //            ws.Range(1, 7, 1, 8).Merge().AddToNamed("Titles");

        //            ws.Cell(1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
        //            ws.Cell(1, 2).Style.Font.Bold = true;
        //            ws.Cell(1, 2).Style.Font.FontSize = 14;


        //            ws.Cell(2, 2).Value = "Branch:" + drpdownBranchlist.SelectedItem; ;
        //            ws.Cell(2, 2).Style.Font.Bold = true;
        //            ws.Cell(2, 2).Style.Font.FontSize = 13;

        //            ws.Cell(3, 1).Value = "TRIAL BALANCE OF BANKS AS AT " + txtToDate.Text;
        //            ws.Cell(3, 1).Style.Font.Bold = true;
        //            ws.Cell(3, 1).Style.Font.FontSize = 13;
        //            ws.Range(3, 1, 3, 10).Merge().AddToNamed("Titles");

        //            var getdt1 = GetBank();

        //            int getrow = 0;

        //            int RangeCell = 5;
        //            int SNo = 1;

        //            int Rangecol = 1;

        //            int rowcount = getdt1.Rows.Count;
        //            int rounded1 = rowcount / 2;
        //            string rounded = Convert.ToString(Decimal.Divide(rowcount, 2));
        //            if (rowcount <= 5)
        //            {
        //                #region First Head  
        //                int cellcount = 1;
        //                ws.Cell(4, cellcount).Value = "S.No.";
        //                ws.Cell(4, cellcount).Style.Font.Bold = true;
        //                ws.Cell(4, cellcount).Style.Font.FontSize = 11;

        //                cellcount++;
        //                ws.Cell(4, cellcount).Value = "Name of the Banks & Place";
        //                ws.Cell(4, cellcount).Style.Font.Bold = true;
        //                ws.Cell(4, cellcount).Style.Font.FontSize = 11;

        //                cellcount++;
        //                ws.Cell(4, cellcount).Value = "Credit";
        //                ws.Cell(4, cellcount).Style.Font.Bold = true;
        //                ws.Cell(4, cellcount).Style.Font.FontSize = 11;

        //                cellcount++;
        //                ws.Cell(4, cellcount).Value = "Debit";
        //                ws.Cell(4, cellcount).Style.Font.Bold = true;
        //                ws.Cell(4, cellcount).Style.Font.FontSize = 11;
        //                #endregion
        //                //#region Left Table Data
        //                var getdt = GetBank();


        //                foreach (DataRow dr in getdt.AsEnumerable())
        //                {
        //                    Rangecol = 1;
        //                    ws.Cell(RangeCell, Rangecol).Value = SNo;

        //                    Rangecol++;
        //                    ws.Cell(RangeCell, Rangecol).Value = Convert.ToString(dr.ItemArray[0]).ToUpper();
        //                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
        //                    ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
        //                    ws.Cell(RangeCell, Rangecol).Style.Font.FontSize = 11;


        //                    RangeCell = RangeCell + 1;
        //                    ws.Cell(RangeCell, Rangecol).Value = "A/C No. " + dr.ItemArray[1];
        //                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
        //                    ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
        //                    ws.Cell(RangeCell, Rangecol).Style.Font.FontSize = 11;

        //                    RangeCell = RangeCell + 1;
        //                    ws.Cell(RangeCell, Rangecol).Value = "Balance as per our Books as at " + txtToDate.Text;

        //                    RangeCell = RangeCell + 1;
        //                    ws.Cell(RangeCell, Rangecol).Value = "Balance as per Bank Certificate as at " + txtToDate.Text;

        //                    RangeCell = RangeCell + 1;
        //                    ws.Cell(RangeCell, Rangecol).Value = "Total";
        //                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

        //                    RangeCell = RangeCell + 1;
        //                    ws.Cell(RangeCell, Rangecol).Value = "Difference";
        //                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);


        //                    Rangecol++;
        //                    if (Convert.ToDecimal(dr.ItemArray[2]) > 0)
        //                    {

        //                        ws.Cell(RangeCell, Rangecol).Value = dr.ItemArray[2];
        //                        ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "0.00";
        //                    }
        //                    else
        //                    {
        //                        Rangecol++;
        //                        ws.Cell(RangeCell, Rangecol).Value = dr.ItemArray[3];
        //                        ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "0.00";
        //                    }





        //                    getrow++;

        //                    SNo = SNo + 1;
        //                    RangeCell = RangeCell + 1;
        //                    var rangedbr5 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
        //                    rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                    var rangedbr6 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
        //                    rangedbr6.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


        //                    var rangedbr7 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
        //                    rangedbr7.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

        //                }
        //                var rangedbr1 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
        //                rangedbr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //            }
        //            else
        //            {
        //                if (rounded.Contains("."))
        //                {
        //                    //var keyNumber = (int)Console.ReadKey(true).KeyChar;
        //                    int rowscount = rounded1 + 1;
        //                    int rows = 4;
        //                    int cellcount1 = 0;
        //                    int firstTableRange = 0, secondTableRange = 0;
        //                    bool firstfilled = false;
        //                    var getdata = getdt1.Rows.Cast<DataRow>().Take(rowscount).CopyToDataTable();
        //                    for (int row = 0; row < 2; row++)
        //                    {
        //                        if (row == 1)
        //                        {
        //                            cellcount1 = 5;
        //                        }
        //                        #region First Head 
        //                        cellcount1++;
        //                        ws.Cell(rows, cellcount1).Value = "S.No.";
        //                        ws.Cell(rows, cellcount1).Style.Font.Bold = true;
        //                        ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

        //                        cellcount1++;
        //                        ws.Cell(rows, cellcount1).Value = "Name of the Banks & Place";
        //                        ws.Cell(rows, cellcount1).Style.Font.Bold = true;
        //                        ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

        //                        cellcount1++;
        //                        ws.Cell(rows, cellcount1).Value = "Credit";
        //                        ws.Cell(rows, cellcount1).Style.Font.Bold = true;
        //                        ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

        //                        cellcount1++;
        //                        ws.Cell(rows, cellcount1).Value = "Debit";
        //                        ws.Cell(rows, cellcount1).Style.Font.Bold = true;
        //                        ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

        //                        #endregion

        //                        //var getdt = GetBank();
        //                        if (row == 1)
        //                        {
        //                            RangeCell = 5;
        //                            Rangecol = 5;
        //                        }

        //                        foreach (DataRow dr in getdata.AsEnumerable())
        //                        {
        //                            Rangecol = 1;
        //                            if (row == 1)
        //                            {
        //                                Rangecol = 6;
        //                            }

        //                            getrow++;
        //                            // if (SNo > 8) break;
        //                            ws.Cell(RangeCell, Rangecol).Value = SNo;

        //                            Rangecol++;
        //                            ws.Cell(RangeCell, Rangecol).Value = Convert.ToString(dr.ItemArray[0]).ToUpper();
        //                            ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
        //                            ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
        //                            ws.Cell(RangeCell, Rangecol).Style.Font.FontSize = 11;


        //                            RangeCell = RangeCell + 1;
        //                            ws.Cell(RangeCell, Rangecol).Value = "A/C No. " + dr.ItemArray[1];
        //                            ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
        //                            ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
        //                            ws.Cell(RangeCell, Rangecol).Style.Font.FontSize = 11;

        //                            RangeCell = RangeCell + 1;
        //                            ws.Cell(RangeCell, Rangecol).Value = "Balance as per our Books as at " + txtToDate.Text;

        //                            RangeCell = RangeCell + 1;
        //                            ws.Cell(RangeCell, Rangecol).Value = "Balance as per Bank Certificate as at " + txtToDate.Text;

        //                            RangeCell = RangeCell + 1;
        //                            ws.Cell(RangeCell, Rangecol).Value = "Total";
        //                            ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);






        //                            Rangecol++;
        //                            if (Convert.ToDecimal(dr.ItemArray[2]) > 0)
        //                            {

        //                                ws.Cell(RangeCell, Rangecol).Value = dr.ItemArray[2];
        //                                ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "0.00";
        //                            }
        //                            else
        //                            {
        //                                Rangecol++;
        //                                ws.Cell(RangeCell, Rangecol).Value = dr.ItemArray[3];
        //                                ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "0.00";
        //                            }
        //                            RangeCell = RangeCell + 1;
        //                            ws.Cell(RangeCell, Rangecol).Value = "Difference";
        //                            ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

        //                            getrow++;


        //                            SNo = SNo + 1;
        //                            RangeCell = RangeCell + 1;

        //                        }
        //                        if (firstfilled == false)
        //                        {
        //                            firstTableRange = RangeCell;
        //                            firstfilled = true;
        //                        }

        //                        var rangedbr1 = ws.Range(ws.Cell(4, 1), ws.Cell(firstTableRange, Rangecol));
        //                        rangedbr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                        getdata.Clear();
        //                        getdata = getdt1.Rows.Cast<DataRow>().Skip(rowscount).Take(rowscount).CopyToDataTable();

        //                        var rangedbr8 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
        //                        rangedbr8.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //                    }

        //                }
        //                else
        //                {
        //                    //var keyNumber = (int)Console.ReadKey(true).KeyChar;
        //                    int rowscount = rounded1 + 1;
        //                    int rows = 4;
        //                    int cellcount1 = 0;
        //                    int firstTableRange = 0, secondTableRange = 0;
        //                    bool firstfilled = false;
        //                    var getdata = getdt1.Rows.Cast<DataRow>().Take(rowscount).CopyToDataTable();
        //                    for (int row = 0; row < 2; row++)
        //                    {
        //                        if (row == 1)
        //                        {
        //                            cellcount1 = 5;
        //                        }
        //                        #region First Head 
        //                        cellcount1++;
        //                        ws.Cell(rows, cellcount1).Value = "S.No.";
        //                        ws.Cell(rows, cellcount1).Style.Font.Bold = true;
        //                        ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

        //                        cellcount1++;
        //                        ws.Cell(rows, cellcount1).Value = "Name of the Banks & Place";
        //                        ws.Cell(rows, cellcount1).Style.Font.Bold = true;
        //                        ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

        //                        cellcount1++;
        //                        ws.Cell(rows, cellcount1).Value = "Credit";
        //                        ws.Cell(rows, cellcount1).Style.Font.Bold = true;
        //                        ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

        //                        cellcount1++;
        //                        ws.Cell(rows, cellcount1).Value = "Debit";
        //                        ws.Cell(rows, cellcount1).Style.Font.Bold = true;
        //                        ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

        //                        #endregion

        //                        //var getdt = GetBank();
        //                        if (row == 1)
        //                        {
        //                            RangeCell = 5;
        //                            Rangecol = 5;
        //                        }

        //                        foreach (DataRow dr in getdata.AsEnumerable())
        //                        {
        //                            Rangecol = 1;
        //                            if (row == 1)
        //                            {
        //                                Rangecol = 6;
        //                            }

        //                            getrow++;
        //                            // if (SNo > 8) break;
        //                            ws.Cell(RangeCell, Rangecol).Value = SNo;

        //                            Rangecol++;
        //                            ws.Cell(RangeCell, Rangecol).Value = Convert.ToString(dr.ItemArray[0]).ToUpper();
        //                            ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
        //                            ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
        //                            ws.Cell(RangeCell, Rangecol).Style.Font.FontSize = 11;


        //                            RangeCell = RangeCell + 1;
        //                            ws.Cell(RangeCell, Rangecol).Value = "A/C No. " + dr.ItemArray[1];
        //                            ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
        //                            ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
        //                            ws.Cell(RangeCell, Rangecol).Style.Font.FontSize = 11;

        //                            RangeCell = RangeCell + 1;
        //                            ws.Cell(RangeCell, Rangecol).Value = "Balance as per our Books as at " + txtToDate.Text;

        //                            RangeCell = RangeCell + 1;
        //                            ws.Cell(RangeCell, Rangecol).Value = "Balance as per Bank Certificate as at " + txtToDate.Text;

        //                            RangeCell = RangeCell + 1;
        //                            ws.Cell(RangeCell, Rangecol).Value = "Total";
        //                            ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);




        //                            Rangecol++;
        //                            if (Convert.ToDecimal(dr.ItemArray[2]) > 0)
        //                            {
        //                                ws.Cell(RangeCell, Rangecol).Value = dr.ItemArray[2];
        //                                ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "0.00";
        //                            }
        //                            else
        //                            {
        //                                Rangecol++;
        //                                ws.Cell(RangeCell, Rangecol).Value = dr.ItemArray[3];
        //                                ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "0.00";
        //                            }
        //                            RangeCell = RangeCell + 1;
        //                            ws.Cell(RangeCell, Rangecol).Value = "Difference";
        //                            ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
        //                            getrow++;


        //                            SNo = SNo + 1;
        //                            RangeCell = RangeCell + 1;

        //                        }
        //                        if (firstfilled == false)
        //                        {
        //                            firstTableRange = RangeCell;
        //                            firstfilled = true;
        //                        }

        //                        var rangedbr1 = ws.Range(ws.Cell(4, 1), ws.Cell(firstTableRange, Rangecol));
        //                        rangedbr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                        getdata.Clear();
        //                        getdata = getdt1.Rows.Cast<DataRow>().Skip(rowscount).Take(rowscount).CopyToDataTable();

        //                        var rangedbr9 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
        //                        rangedbr9.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //                    }
        //                }
        //            }

        //            var titlesStyle = wb.Style;
        //            titlesStyle.Font.Bold = true;
        //            titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

        //            wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
        //            ws.Columns().AdjustToContents();

        //            // wb.SaveAs(folderPath + filename + ".xlsx");
        //            Response.Clear();
        //            Response.Buffer = true;
        //            Response.Charset = "";
        //            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        //            Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
        //            using (MemoryStream MyMemoryStream = new MemoryStream())
        //            {
        //                wb.SaveAs(MyMemoryStream);
        //                MyMemoryStream.WriteTo(Response.OutputStream);
        //                Response.Flush();
        //                //Response.End();
        //                HttpContext.Current.Response.End();
        //            }

        //        }
        //    }
        //    catch (Exception err) { }
        //}

        public void Export_TrBlBankSt04()
        {
            try
            {

                List<string> banklist = new List<string>();
                string filename = "TrBlBankSt04" + DateTime.Now.Second.ToString();
                using (XLWorkbook wb = new XLWorkbook())
                {
                    var ws = wb.Worksheets.Add("Tr. Bl. Bank St-04");
                    AddImage(wb, "Tr. Bl. Bank St-04", 1, 1, "imglogo.png");

                    ws.Cell(1, 7).Value = "Statement  No. 04";
                    ws.Range(1, 7, 1, 8).Merge().AddToNamed("Titles");

                    ws.Cell(1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                    ws.Cell(1, 2).Style.Font.Bold = true;
                    ws.Cell(1, 2).Style.Font.FontSize = 14;

                    var branch = 2;
                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }


                    ws.Cell(3, 1).Value = "TRIAL BALANCE OF BANKS AS AT " + txtToDate.Text;
                    ws.Cell(3, 1).Style.Font.Bold = true;
                    ws.Cell(3, 1).Style.Font.FontSize = 13;
                    ws.Range(3, 1, 3, 10).Merge().AddToNamed("Titles");






                    ws.Cell(4, 1).Value = "S.No.";
                    ws.Cell(4, 1).Style.Font.Bold = true;
                    ws.Cell(4, 1).Style.Font.FontSize = 11;

                    ws.Cell(4, 2).Value = "Name of the Banks & Place";
                    ws.Cell(4, 2).Style.Font.Bold = true;
                    ws.Cell(4, 2).Style.Font.FontSize = 11;

                    ws.Cell(4, 3).Value = "Credit";
                    ws.Cell(4, 3).Style.Font.Bold = true;
                    ws.Cell(4, 3).Style.Font.FontSize = 11;

                    ws.Cell(4, 4).Value = "Debit";
                    ws.Cell(4, 4).Style.Font.Bold = true;
                    ws.Cell(4, 4).Style.Font.FontSize = 11;

                    ws.Cell(4, 6).Value = "S.No.";
                    ws.Cell(4, 6).Style.Font.Bold = true;
                    ws.Cell(4, 6).Style.Font.FontSize = 11;

                    ws.Cell(4, 7).Value = "Name of the Banks & Place";
                    ws.Cell(4, 7).Style.Font.Bold = true;
                    ws.Cell(4, 7).Style.Font.FontSize = 11;

                    ws.Cell(4, 8).Value = "Credit";
                    ws.Cell(4, 8).Style.Font.Bold = true;
                    ws.Cell(4, 8).Style.Font.FontSize = 11;

                    ws.Cell(4, 9).Value = "Debit";
                    ws.Cell(4, 9).Style.Font.Bold = true;
                    ws.Cell(4, 9).Style.Font.FontSize = 11;
                    int a = 1;
                    int b = 6;
                    for (int i = 7, j = 8, x = 9, y = 10, z = 5; i < 34;)
                    {

                        ws.Cell(i, 2).Value = "Balance as per our Books as at " + txtToDate.Text;
                        ws.Cell(j, 2).Value = "Balance as per Bank Certificate as at " + txtToDate.Text;
                        ws.Cell(x, 2).Value = "Total";
                        ws.Cell(x, 2).Style.Font.Bold = true;
                        ws.Cell(x, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(y, 2).Value = "Difference";
                        ws.Cell(y, 2).Style.Font.Bold = true;
                        ws.Cell(y, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(i, 7).Value = "Balance as per our Books as at " + txtToDate.Text;
                        ws.Cell(j, 7).Value = "Balance as per Bank Certificate as at " + txtToDate.Text;
                        ws.Cell(x, 7).Value = "Total";
                        ws.Cell(x, 7).Style.Font.Bold = true;
                        ws.Cell(x, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(y, 7).Value = "Difference";
                        ws.Cell(y, 7).Style.Font.Bold = true;
                        ws.Cell(y, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(z, 1).Value = a;
                        ws.Cell(z, 6).Value = b;
                        i = i + 6;
                        j = j + 6;
                        x = x + 6;
                        y = y + 6;
                        z = z + 6;
                        a = a + 1;
                        b = b + 1;
                        var rangedbr5 = ws.Range(ws.Cell(4, 1), ws.Cell(35, 9));
                        rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr6 = ws.Range(ws.Cell(4, 1), ws.Cell(35, 9));
                        rangedbr6.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                        var rangedbr7 = ws.Range(ws.Cell(4, 1), ws.Cell(35, 9));
                        rangedbr7.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    var getdt1 = GetBank();

                    int getrow = 0;

                    int RangeCell = 5;
                    int SNo = 1;

                    int Rangecol = 1;

                    int rowcount = getdt1.Rows.Count;
                    int rounded1 = rowcount / 2;
                    string rounded = Convert.ToString(Decimal.Divide(rowcount, 2));
                    if (rowcount <= 5)
                    {
                        #region First Head  
                        int cellcount = 1;
                        ws.Cell(4, 1).Value = "S.No.";
                        ws.Cell(4, 1).Style.Font.Bold = true;
                        ws.Cell(4, 1).Style.Font.FontSize = 11;

                        cellcount++;
                        ws.Cell(4, 2).Value = "Name of the Banks & Place";
                        ws.Cell(4, 2).Style.Font.Bold = true;
                        ws.Cell(4, 2).Style.Font.FontSize = 11;

                        cellcount++;
                        ws.Cell(4, 3).Value = "Credit";
                        ws.Cell(4, 3).Style.Font.Bold = true;
                        ws.Cell(4, 3).Style.Font.FontSize = 11;

                        cellcount++;
                        ws.Cell(4, 4).Value = "Debit";
                        ws.Cell(4, 4).Style.Font.Bold = true;
                        ws.Cell(4, 4).Style.Font.FontSize = 11;
                        #endregion
                        //#region Left Table Data
                        var getdt = GetBank();


                        foreach (DataRow dr in getdt.AsEnumerable())
                        {
                            Rangecol = 1;
                            ws.Cell(RangeCell, 1).Value = SNo;

                            Rangecol++;
                            ws.Cell(RangeCell, 2).Value = Convert.ToString(dr.ItemArray[0]).ToUpper();
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;


                            RangeCell = RangeCell + 1;
                            ws.Cell(RangeCell, 2).Value = "A/C No. " + dr.ItemArray[1];
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            RangeCell = RangeCell + 1;
                            ws.Cell(RangeCell, 2).Value = "Balance as per our Books as at " + txtToDate.Text;
                            if (Convert.ToDecimal(dr.ItemArray[2]) > 0)
                            {
                                ws.Cell(RangeCell, 3).Value = Convert.ToDecimal(dr.ItemArray[2]);
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            else
                            {
                                Rangecol++;
                                ws.Cell(RangeCell, 4).Value = Convert.ToDecimal(dr.ItemArray[3]);
                                ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            RangeCell = RangeCell + 1;
                            ws.Cell(RangeCell, 2).Value = "Balance as per Bank Certificate as at " + txtToDate.Text;


                            RangeCell = RangeCell + 1;
                            ws.Cell(RangeCell, 2).Value = "Total";
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            if (Convert.ToDecimal(dr.ItemArray[2]) > 0)
                            {

                                ws.Cell(RangeCell, 3).Value = Convert.ToDecimal(dr.ItemArray[2]);
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            else
                            {
                                Rangecol++;
                                ws.Cell(RangeCell, 4).Value = Convert.ToDecimal(dr.ItemArray[3]);
                                ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            RangeCell = RangeCell + 1;
                            ws.Cell(RangeCell, 2).Value = "Difference";
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);


                            //  Rangecol++;





                            getrow++;

                            SNo = SNo + 1;
                            RangeCell = RangeCell + 1;
                            var rangedbr5 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
                            rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr6 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
                            rangedbr6.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                            var rangedbr7 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
                            rangedbr7.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        }
                        var rangedbr1 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
                        rangedbr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    }
                    else
                    {
                        if (rounded.Contains("."))
                        {
                            //var keyNumber = (int)Console.ReadKey(true).KeyChar;
                            int rowscount = rounded1 + 1;
                            int rows = 4;
                            int cellcount1 = 0;
                            int firstTableRange = 0, secondTableRange = 0;
                            bool firstfilled = false;
                            var getdata = getdt1.Rows.Cast<DataRow>().Take(rowscount).CopyToDataTable();
                            for (int row = 0; row < 2; row++)
                            {
                                if (row == 1)
                                {
                                    cellcount1 = 5;
                                }
                                #region First Head 
                                cellcount1++;
                                ws.Cell(rows, cellcount1).Value = "S.No.";
                                ws.Cell(rows, cellcount1).Style.Font.Bold = true;
                                ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

                                cellcount1++;
                                ws.Cell(rows, cellcount1).Value = "Name of the Banks & Place";
                                ws.Cell(rows, cellcount1).Style.Font.Bold = true;
                                ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

                                cellcount1++;
                                ws.Cell(rows, cellcount1).Value = "Credit";
                                ws.Cell(rows, cellcount1).Style.Font.Bold = true;
                                ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

                                cellcount1++;
                                ws.Cell(rows, cellcount1).Value = "Debit";
                                ws.Cell(rows, cellcount1).Style.Font.Bold = true;
                                ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

                                #endregion

                                //var getdt = GetBank();
                                if (row == 1)
                                {
                                    RangeCell = 5;
                                    Rangecol = 5;
                                }

                                foreach (DataRow dr in getdata.AsEnumerable())
                                {
                                    Rangecol = 1;
                                    if (row == 1)
                                    {
                                        Rangecol = 6;
                                    }

                                    getrow++;
                                    // if (SNo > 8) break;
                                    ws.Cell(RangeCell, Rangecol).Value = SNo;

                                    Rangecol++;
                                    ws.Cell(RangeCell, Rangecol).Value = Convert.ToString(dr.ItemArray[0]).ToUpper();
                                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                    ws.Cell(RangeCell, Rangecol).Style.Font.FontSize = 11;


                                    RangeCell = RangeCell + 1;
                                    ws.Cell(RangeCell, Rangecol).Value = "A/C No. " + dr.ItemArray[1];
                                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                    ws.Cell(RangeCell, Rangecol).Style.Font.FontSize = 11;

                                    RangeCell = RangeCell + 1;
                                    ws.Cell(RangeCell, Rangecol).Value = "Balance as per our Books as at " + txtToDate.Text;
                                    Rangecol++;
                                    if (Convert.ToDecimal(dr.ItemArray[2]) > 0)
                                    {

                                        ws.Cell(RangeCell, Rangecol).Value = Convert.ToDecimal(dr.ItemArray[2]);
                                        ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        Rangecol++;
                                        ws.Cell(RangeCell, Rangecol).Value = Convert.ToDecimal(dr.ItemArray[3]);
                                        ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    Rangecol = 1;
                                    if (row == 1)
                                    {
                                        Rangecol = 6;
                                    }
                                    Rangecol++;
                                    RangeCell = RangeCell + 1;
                                    ws.Cell(RangeCell, Rangecol).Value = "Balance as per Bank Certificate as at " + txtToDate.Text;

                                    RangeCell = RangeCell + 1;
                                    ws.Cell(RangeCell, Rangecol).Value = "Total";
                                    ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    Rangecol++;
                                    if (Convert.ToDecimal(dr.ItemArray[2]) > 0)
                                    {

                                        ws.Cell(RangeCell, Rangecol).Value = Convert.ToDecimal(dr.ItemArray[2]);
                                        ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                        ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        Rangecol++;
                                        ws.Cell(RangeCell, Rangecol).Value = Convert.ToDecimal(dr.ItemArray[3]);
                                        ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                        ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    Rangecol = 1;
                                    if (row == 1)
                                    {
                                        Rangecol = 6;
                                    }
                                    Rangecol++;
                                    RangeCell = RangeCell + 1;
                                    ws.Cell(RangeCell, Rangecol).Value = "Difference";
                                    ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    getrow++;

                                    //   var rangedbr64 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
                                    //    rangedbr64.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;


                                    //     var rangedbr79 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
                                    //    rangedbr79.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                    //
                                    SNo = SNo + 1;
                                    RangeCell = RangeCell + 1;


                                }
                                if (firstfilled == false)
                                {
                                    firstTableRange = RangeCell;
                                    firstfilled = true;
                                }

                                //var rangedbr1 = ws.Range(ws.Cell(4, 1), ws.Cell(firstTableRange, Rangecol));
                                //rangedbr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                //var rangedbr2 = ws.Range(ws.Cell(4, 1), ws.Cell(firstTableRange, Rangecol));
                                //rangedbr2.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                                //var rangedbr66 = ws.Range(ws.Cell(4, 1), ws.Cell(firstTableRange, Rangecol));
                                //rangedbr66.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                //var rangedbr28 = ws.Range(ws.Cell(4, 1), ws.Cell(firstTableRange, Rangecol));
                                //rangedbr28.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                                //var rangedbr67 = ws.Range(ws.Cell(4, 1), ws.Cell(4,10));
                                //rangedbr67.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                //var rangedbr23 = ws.Range(ws.Cell(4, 1), ws.Cell(4,10));
                                //rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                                getdata.Clear();
                                getdata = getdt1.Rows.Cast<DataRow>().Skip(rowscount).Take(rowscount).CopyToDataTable();

                            }
                            //        var rangedbr1 = ws.Range(ws.Cell(4, 1), ws.Cell(4, 10));
                            //      rangedbr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            //    var rangedbr2 = ws.Range(ws.Cell(4, 1), ws.Cell(4, 10));
                            //   rangedbr2.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            // var rangedbr68 = ws.Range(ws.Cell(4, 1), ws.Cell(4, 10));
                            //  rangedbr68.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            // var rangedbr69 = ws.Range(ws.Cell(4, 1), ws.Cell(4, 10));
                            // rangedbr69.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        }
                        else
                        {
                            int rowscount = rounded1 + 1;
                            int rows = 4;
                            int cellcount1 = 0;
                            int firstTableRange = 0, secondTableRange = 0;
                            bool firstfilled = false;
                            var getdata = getdt1.Rows.Cast<DataRow>().Take(rowscount).CopyToDataTable();
                            for (int row = 0; row < 2; row++)
                            {
                                if (row == 1)
                                {
                                    cellcount1 = 5;
                                }
                                #region First Head 
                                cellcount1++;
                                ws.Cell(rows, cellcount1).Value = "S.No.";
                                ws.Cell(rows, cellcount1).Style.Font.Bold = true;
                                ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

                                cellcount1++;
                                ws.Cell(rows, cellcount1).Value = "Name of the Banks & Place";
                                ws.Cell(rows, cellcount1).Style.Font.Bold = true;
                                ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

                                cellcount1++;
                                ws.Cell(rows, cellcount1).Value = "Credit";
                                ws.Cell(rows, cellcount1).Style.Font.Bold = true;
                                ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

                                cellcount1++;
                                ws.Cell(rows, cellcount1).Value = "Debit";
                                ws.Cell(rows, cellcount1).Style.Font.Bold = true;
                                ws.Cell(rows, cellcount1).Style.Font.FontSize = 11;

                                #endregion

                                //var getdt = GetBank();
                                if (row == 1)
                                {
                                    RangeCell = 5;
                                    Rangecol = 5;
                                }

                                foreach (DataRow dr in getdata.AsEnumerable())
                                {
                                    Rangecol = 1;
                                    if (row == 1)
                                    {
                                        Rangecol = 6;
                                    }

                                    getrow++;
                                    // if (SNo > 8) break;
                                    ws.Cell(RangeCell, Rangecol).Value = SNo;

                                    Rangecol++;
                                    ws.Cell(RangeCell, Rangecol).Value = Convert.ToString(dr.ItemArray[0]).ToUpper();
                                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                    ws.Cell(RangeCell, Rangecol).Style.Font.FontSize = 11;


                                    RangeCell = RangeCell + 1;
                                    ws.Cell(RangeCell, Rangecol).Value = "A/C No. " + dr.ItemArray[1];
                                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                    ws.Cell(RangeCell, Rangecol).Style.Font.FontSize = 11;

                                    RangeCell = RangeCell + 1;
                                    ws.Cell(RangeCell, Rangecol).Value = "Balance as per our Books as at " + txtToDate.Text;

                                    RangeCell = RangeCell + 1;
                                    ws.Cell(RangeCell, Rangecol).Value = "Balance as per Bank Certificate as at " + txtToDate.Text;

                                    RangeCell = RangeCell + 1;
                                    ws.Cell(RangeCell, Rangecol).Value = "Total";
                                    ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);




                                    Rangecol++;
                                    if (Convert.ToDecimal(dr.ItemArray[2]) > 0)
                                    {
                                        ws.Cell(RangeCell, Rangecol).Value = Convert.ToDecimal(dr.ItemArray[2]);
                                        ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                        ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        Rangecol++;
                                        ws.Cell(RangeCell, Rangecol).Value = Convert.ToDecimal(dr.ItemArray[3]);
                                        ws.Cell(RangeCell, Rangecol).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                        ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    RangeCell = RangeCell + 1;
                                    ws.Cell(RangeCell, Rangecol).Value = "Difference";
                                    ws.Cell(RangeCell, Rangecol).Style.Font.Bold = true;
                                    ws.Cell(RangeCell, Rangecol).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    getrow++;

                                    //var rangedbr64 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
                                    //rangedbr64.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;


                                    //var rangedbr79 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
                                    //rangedbr79.Style.Border.InsideBorder = XLBorderStyleValues.Thin;




                                    SNo = SNo + 1;
                                    RangeCell = RangeCell + 1;

                                }
                                if (firstfilled == false)
                                {
                                    firstTableRange = RangeCell;
                                    firstfilled = true;
                                }

                                //var rangedbr1 = ws.Range(ws.Cell(4, 1), ws.Cell(firstTableRange, Rangecol));
                                //rangedbr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;


                                //var rangedbr81 = ws.Range(ws.Cell(4, 1), ws.Cell(firstTableRange, Rangecol));
                                //rangedbr81.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                                //getdata.Clear();
                                //getdata = getdt1.Rows.Cast<DataRow>().Skip(rowscount).Take(rowscount).CopyToDataTable();

                                //var rangedbr9 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell, Rangecol));
                                //rangedbr9.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            }
                        }
                    }

                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    // wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }

                }
            }
            catch (Exception err) { }
        }


        protected void BtnInterestPaidSt16_Click(object sender, EventArgs e)
        {
            try
            {
                // YearEndingObj.interest(txtFrmDate.Text, txtToDate.Text, Convert.ToString(drpdownBranchlist.SelectedItem.Text), filepath);
                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;


                //  BindGroupwarChitControlStatement();


                sheet.Name = "Interest paid St- 16";
                sheet.Pictures.Add(1, 1, filepath);
                //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");

                CellRange range = sheet.Range["A4:I5"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["C1"].RichText;
                richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + branchtext;
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }

                sheet.Range["I1"].Value = "Statement No. 16";
                RichText richText27 = sheet.Range["I1"].RichText;
                richText27.SetFont(0, richText27.Text.Length - 1, fontBold);

                sheet.Range["A3"].Value = "Particulars of Interest paid during the financial year  2016 - 2017";
                RichText richText03 = sheet.Range["A3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["A3:L3"].Merge();

                sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                sheet.Range["A4:A5"].Merge();
                sheet.Range["A4"].Value = "Sl.No.";
                sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["B4:B5"].Merge();
                sheet.Range["B4"].Value = "Date of Loan.";
                sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["C4:C5"].Merge();
                sheet.Range["C4"].Value = "Rate of Interest";
                sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["D4:E4"].Merge();
                sheet.Range["D4"].Value = "Period of Interest";
                sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["D4"].Style.WrapText = true;

                // sheet.Range["E4:E5"].Merge();
                sheet.Range["D5"].Value = "From";
                sheet.Range["D5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D5"].Style.VerticalAlignment = VerticalAlignType.Center;

                //   sheet.Range["F4:F5"].Merge();
                sheet.Range["E5"].Value = "To";
                sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["F4:F5"].Merge();
                sheet.Range["F4"].Value = "Principal";
                sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;


                sheet.Range["G4:G5"].Merge();
                sheet.Range["G4"].Value = "To whom Interest is paid";
                sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["H4:H5"].Merge();
                sheet.Range["H4"].Value = "Total Interest paid";
                sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["I4:I5"].Merge();
                sheet.Range["I4"].Value = "Remarks";
                sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;







                int rowcnt = 5;
                //    int rowcnt = 5;


                rowcnt = rowcnt + 2;

                CellRange range55 = sheet.Range["A6:" + "I" + rowcnt];
                range55.Borders.LineStyle = LineStyleType.Thin;
                range55.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range55.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;







                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(1, 9);
                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);



                workbook.SaveToHttpResponse("Interest Paid st-16 .xlsx", HttpContext.Current.Response);
            }
            catch (Exception) { }


        }



        protected void BtnChitcollectSt5D_Click(object sender, EventArgs e)
        {
            try
            {
                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.
                SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                //System.Data.DataTable deductionc = balayer.GetDataTable("SELECT s.chitnumber,s.Nameofsubscriber,s.amount,(select Node from headstree where NodeID=s.BranchID)as branch FROM svcf.chitcollection s join svcf.voucher a on s.VoucherHeadid=a.Head_Id where a.BranchID='" + drpdownBranchlist.SelectedItem.Value + "' and s.ChoosenDate between '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and a.Voucher_Type='C' and a.amount=s.amount ; ");
                System.Data.DataTable deductionc = balayer.GetDataTable("SELECT s.chitnumber,s.Nameofsubscriber,s.amount,(select Node from headstree where NodeID=s.BranchID)as branch FROM svcf.chitcollection s join svcf.voucher a on s.VoucherHeadid=a.Head_Id where a.BranchID='" + drpdownBranchlist.SelectedItem.Value + "' and s.ChoosenDate between '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and a.Voucher_Type='C' and a.amount=s.amount group by a.voucher_no ; ");
                sheet.Name = "Chit Collec St-5D";
                int aa = 1;
                int bb = 2;
                int cc = 3;
                int dd = 4;
                int ee = 5;

                double page = Math.Ceiling((float)deductionc.Rows.Count / 24);
                int i = 0;

                do
                {
                    sheet.Pictures.Add(aa, 1, filepath);
                    //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");

                    CellRange range = sheet.Range["A" + dd + ":E" + ee + ""];
                    range.Borders.LineStyle = LineStyleType.Double;
                    range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                    sheet.Range["C" + aa + ""].Value = "Sree Visalam Chit Fund Ltd.,";
                    RichText richText01 = sheet.Range["C" + aa + ""].RichText;
                    richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {

                        sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                        RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                        richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                        RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                        richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                    }
                    else
                    {
                        sheet.Range["C" + bb + ""].Value = "Branch: " + branchtext;
                        RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                        richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                    }

                    sheet.Range["K" + aa + ""].Value = "Statement No. 5D";
                    RichText richText27 = sheet.Range["K" + aa + ""].RichText;
                    richText27.SetFont(0, richText27.Text.Length - 1, fontBold);

                    sheet.Range["A" + cc + ""].Value = "Particulars of Chit Collection to be accounted as at " + txtToDate.Text;
                    RichText richText03 = sheet.Range["A" + cc + ""].RichText;
                    richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                    sheet.Range["A" + cc + ":K" + cc + ""].Merge();
                    sheet.Range["A" + cc + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;

                    sheet.Range["A" + dd + ":A" + ee + ""].Merge();
                    sheet.Range["A" + dd + ""].Value = "Sl.No.";
                    sheet.Range["A" + dd + ""].Style.Font.IsBold = true;
                    sheet.Range["A" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["A" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["B" + dd + ":B" + ee + ""].Merge();
                    sheet.Range["B" + dd + ""].Value = "Chit Number";
                    sheet.Range["B" + dd + ""].Style.Font.IsBold = true;
                    sheet.Range["B" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["B" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["C" + dd + ":C" + ee + ""].Merge();
                    sheet.Range["C" + dd + ""].Value = "Name of the Subscriber";
                    sheet.Range["C" + dd + ""].Style.Font.IsBold = true;
                    sheet.Range["C" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["C" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["D" + dd + ":D" + ee + ""].Merge();
                    sheet.Range["D" + dd + ""].Value = "Amount";
                    sheet.Range["D" + dd + ""].Style.Font.IsBold = true;
                    sheet.Range["D" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["D" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["E" + dd + ":E" + ee + ""].Merge();
                    sheet.Range["E" + dd + ""].Value = "If for Branch Chits, Name of the Branch";
                    sheet.Range["E" + dd + ""].Style.Font.IsBold = true;
                    sheet.Range["E" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["E" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;


                    CellRange range3 = sheet.Range["G" + dd + ":K" + ee + ""];
                    range3.Borders.LineStyle = LineStyleType.Double;
                    range3.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range3.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    sheet.Range["G" + dd + ":G" + ee + ""].Merge();
                    sheet.Range["G" + dd + ""].Value = "Sl.No.";
                    sheet.Range["G" + dd + ""].Style.Font.IsBold = true;
                    sheet.Range["G" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["H" + dd + ":H" + ee + ""].Merge();
                    sheet.Range["H" + dd + ""].Value = "Chit Number ";
                    sheet.Range["H" + dd + ""].Style.Font.IsBold = true;
                    sheet.Range["H" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["H" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["I" + dd + ":I" + ee + ""].Merge();
                    sheet.Range["I" + dd + ""].Value = "Name of the Subscriber";
                    sheet.Range["I" + dd + ""].Style.Font.IsBold = true;
                    sheet.Range["I" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["I" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["J" + dd + ":J" + ee + ""].Merge();
                    sheet.Range["J" + dd + ""].Value = "Amount";
                    sheet.Range["J" + dd + ""].Style.Font.IsBold = true;
                    sheet.Range["J" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["J" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["K" + dd + ":K" + ee + ""].Merge();
                    sheet.Range["K" + dd + ""].Value = "If for Branch Chits, Name of the Branch";
                    sheet.Range["K" + dd + ""].Style.Font.IsBold = true;
                    sheet.Range["K" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["K" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;
                    aa = aa + 31;
                    bb = bb + 31;
                    cc = cc + 31;
                    dd = dd + 31;
                    ee = ee + 31;
                    i++;
                } while (i < page);

                int rowcnt = 5;
                int sno = 1;
                int count = 0;
                int SS = 0;
                decimal aggergatesum = 0;
                for (int j = 0; j < deductionc.Rows.Count; j++)
                {

                    if (count < 24)
                    {
                        rowcnt = rowcnt + 1;
                        sheet.Range["A" + rowcnt].Value = sno.ToString();
                        sheet.Range["A" + rowcnt].HorizontalAlignment = HorizontalAlignType.Center;
                        sheet.Range["B" + rowcnt].Value = deductionc.Rows[j]["chitnumber"].ToString();
                        sheet.Range["B" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["C" + rowcnt].Value = deductionc.Rows[j]["Nameofsubscriber"].ToString();
                        sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[j]["amount"].ToString());
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        aggergatesum = aggergatesum + Convert.ToDecimal(deductionc.Rows[j]["amount"].ToString());
                        sheet.Range["E" + rowcnt].Value = deductionc.Rows[j]["branch"].ToString();
                        sheet.Range["E" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sno++;
                        count++;

                        CellRange range25 = sheet.Range["A6:" + "E" + rowcnt];
                        range25.Borders.LineStyle = LineStyleType.Thin;
                        range25.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range25.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    }
                    else
                    {
                        break;
                    }

                }
                if (deductionc.Rows.Count > 24)
                {
                    rowcnt = rowcnt + 1;
                    sheet.Range["C" + rowcnt].Value = "Total Carried Over";
                    sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                    sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                    CellRange range15 = sheet.Range["A6:" + "E" + rowcnt];
                    range15.Borders.LineStyle = LineStyleType.Thin;
                    range15.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range15.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    SS = rowcnt;
                    rowcnt = 6;

                    sheet.Range["I" + rowcnt].Value = "Brought Forward";
                    sheet.Range["I" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                    sheet.Range["I" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                    sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["J" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["J" + rowcnt].Style.Font.IsBold = true;
                    CellRange range551 = sheet.Range["G" + rowcnt + ":" + "K" + rowcnt];
                    range551.Borders.LineStyle = LineStyleType.Thin;
                    range551.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range551.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    for (; count < deductionc.Rows.Count; count++)
                    {

                        if (count < 48)
                        {
                            rowcnt = rowcnt + 1;

                            sheet.Range["G" + rowcnt].Value = sno.ToString();
                            sheet.Range["G" + rowcnt].HorizontalAlignment = HorizontalAlignType.Center;
                            sheet.Range["H" + rowcnt].Value = deductionc.Rows[count]["chitnumber"].ToString();
                            sheet.Range["H" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                            sheet.Range["I" + rowcnt].Value = deductionc.Rows[count]["Nameofsubscriber"].ToString();
                            sheet.Range["I" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                            sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["amount"].ToString());
                            sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                            sheet.Range["J" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                            aggergatesum = aggergatesum + Convert.ToDecimal(deductionc.Rows[count]["amount"].ToString());
                            sheet.Range["K" + rowcnt].Value = deductionc.Rows[count]["branch"].ToString();
                            sheet.Range["K" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                            sno++;

                            CellRange range555 = sheet.Range["G" + rowcnt + ":" + "K" + rowcnt];
                            range555.Borders.LineStyle = LineStyleType.Thin;
                            range555.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                            range555.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                        }
                        else
                        {
                            break;
                        }

                    }
                    if (deductionc.Rows.Count > 48)
                    {
                        rowcnt = rowcnt + 1;
                        sheet.Range["I" + rowcnt].Value = "Total Carried Over";
                        sheet.Range["I" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["I" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                        sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["J" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["J" + rowcnt].Style.Font.IsBold = true;
                        CellRange range150 = sheet.Range["G" + rowcnt + ":" + "K" + rowcnt];
                        range150.Borders.LineStyle = LineStyleType.Thin;
                        range150.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range150.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                        rowcnt = rowcnt + 6;

                        sheet.Range["C" + rowcnt].Value = "Brought Forward";
                        sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                        CellRange range5512 = sheet.Range["A" + rowcnt + ":" + "E" + rowcnt];
                        range5512.Borders.LineStyle = LineStyleType.Thin;
                        range5512.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5512.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                        for (; count < deductionc.Rows.Count; count++)
                        {

                            if (count < 72)
                            {
                                rowcnt = rowcnt + 1;
                                sheet.Range["A" + rowcnt].Value = sno.ToString();
                                sheet.Range["A" + rowcnt].HorizontalAlignment = HorizontalAlignType.Center;
                                sheet.Range["B" + rowcnt].Value = deductionc.Rows[count]["chitnumber"].ToString();
                                sheet.Range["B" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                                sheet.Range["C" + rowcnt].Value = deductionc.Rows[count]["Nameofsubscriber"].ToString();
                                sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["amount"].ToString());
                                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                                sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                                aggergatesum = aggergatesum + Convert.ToDecimal(deductionc.Rows[count]["amount"].ToString());
                                sheet.Range["E" + rowcnt].Value = deductionc.Rows[count]["branch"].ToString();
                                sheet.Range["E" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                                CellRange range555 = sheet.Range["A" + rowcnt + ":" + "E" + rowcnt];
                                range555.Borders.LineStyle = LineStyleType.Thin;
                                range555.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                                range555.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                                CellRange range5559 = sheet.Range["G" + rowcnt + ":" + "K" + rowcnt];
                                range5559.Borders.LineStyle = LineStyleType.Thin;
                                range5559.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                                range5559.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                                sno++;

                            }
                            else
                            {
                                break;
                            }

                        }
                        rowcnt = rowcnt + 1;
                        sheet.Range["C" + rowcnt].Value = "Total";
                        sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["D" + rowcnt].Style.Font.IsBold = true;

                        CellRange range5511 = sheet.Range["A" + rowcnt + ":" + "E" + rowcnt];
                        range5511.Borders.LineStyle = LineStyleType.Thin;
                        range5511.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5511.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                        CellRange range5554 = sheet.Range["G" + rowcnt + ":" + "K" + rowcnt];
                        range5554.Borders.LineStyle = LineStyleType.Thin;
                        range5554.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5554.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    }
                    else
                    {
                        rowcnt = SS;

                        sheet.Range["I" + rowcnt].Value = "Total";
                        sheet.Range["I" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["I" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                        sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["J" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["J" + rowcnt].Style.Font.IsBold = true;
                        CellRange range5510 = sheet.Range["G6:" + "K" + rowcnt];
                        range5510.Borders.LineStyle = LineStyleType.Thin;
                        range5510.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5510.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    }
                }
                else
                {
                    rowcnt = 30;
                    sheet.Range["C" + rowcnt].Value = "Total";
                    sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                    sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                    CellRange range551 = sheet.Range["A6:" + "K" + rowcnt];
                    range551.Borders.LineStyle = LineStyleType.Thin;
                    range551.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range551.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    CellRange range5511 = sheet.Range["G6:" + "K" + rowcnt];
                    range5511.Borders.LineStyle = LineStyleType.Thin;
                    range5511.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range5511.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }
                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(1, 9);
                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);

                workbook.SaveToHttpResponse("Chit Collection st-5D" + "_" + ".xlsx", HttpContext.Current.Response);

            }
            catch (Exception EX) { }


        }

        protected void BtnGroupwareSt5B_Click(object sender, EventArgs e)
        {
            try
            {  //YearEndingObj.grpware(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value), filepath);
                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                // var dtgrpware = bindgrpware(fromdate, todate, branchtext, branchid);
                var dtgrpware = YearEndingObj.grpwaresl8(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                var dtremove = YearEndingObj.BindAmountatCredit(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                //  var dtremove = bindremoved(fromdate, todate, branchtext, branchid);
                //  BindGroupwarChitControlStatement();


                sheet.Name = "chitsecdepositandaccured";

                //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");
                sheet.Pictures.Add(1, 1, filepath);
                CellRange range = sheet.Range["A4:F5"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                //sheet.SetColumnWidth(3, 15);
                //sheet.SetColumnWidth(4, 15);
                //sheet.SetColumnWidth(5, 15);
                //sheet.SetColumnWidth(10, 15);
                //sheet.SetColumnWidth(11, 15);
                sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["C1"].RichText;
                //       richText01.SetFont(0, richText01.Text.Length - 1, fontBold);
                sheet.Range["C1"].Style.Font.IsBold = true;

                sheet.Range["F1"].Value = "Statement No.5B";
                RichText richText012 = sheet.Range["F1"].RichText;
                richText012.SetFont(0, richText012.Text.Length - 1, fontBold);

                //sheet.Range["K1"].Value = "Statement No.5C";
                //RichText richText013 = sheet.Range["K1"].RichText;
                //richText013.SetFont(0, richText013.Text.Length - 1, fontBold);

                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + branchtext;
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }


                sheet.Range["B3"].Value = "Particulars of Groupwar Excess Remittance and Arrears as at " + txtToDate.Text;
                RichText richText03 = sheet.Range["B3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["B3:F3"].Merge();
                sheet.Range["B3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                //sheet.Cell(3, 1).Value = "Particulars of Chit Security Deposit with Banks and Accrued Interest there on as at " + txtToDate.Text;
                //sheet.Cell(3, 1).Style.Font.Bold = true;
                //sheet.Cell(3, 1).Style.Font.FontSize = 13;
                //sheet.Range(3, 1, 3, 6).Merge().AddToNamed("Titles");
                //sheet.Cell(date, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                sheet.Range["H3"].Value = "Particulars of Removed Chit Members as at " + txtToDate.Text;
                RichText richText04 = sheet.Range["H3"].RichText;
                richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                sheet.Range["H3:K3"].Merge();
                sheet.Range["H3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                //sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                sheet.Range["A4:A5"].Merge();
                sheet.Range["A4"].Value = "Sl No.";
                RichText richText5 = sheet.Range["A4"].RichText;
                richText5.SetFont(0, richText5.Text.Length - 1, fontBold);
                sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["B4:B5"].Merge();
                sheet.Range["B4"].Value = "Group Number.";
                RichText richText6 = sheet.Range["B4"].RichText;
                richText6.SetFont(0, richText6.Text.Length - 1, fontBold);
                sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["C4:C5"].Merge();
                sheet.Range["C4"].Value = "Excess Remittance";
                RichText richText7 = sheet.Range["C4"].RichText;
                richText7.SetFont(0, richText7.Text.Length - 1, fontBold);
                sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["E4:e5"].Merge();
                sheet.Range["E4"].Value = "Arrears from Prized Subscribers";
                RichText richText8 = sheet.Range["E4"].RichText;
                richText8.SetFont(0, richText8.Text.Length - 1, fontBold);
                sheet.Range["E4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["D4:D5"].Merge();
                sheet.Range["D4"].Value = "Arrears from Non Prized Subscribers";
                RichText richText9 = sheet.Range["D4"].RichText;
                richText9.SetFont(0, richText9.Text.Length - 1, fontBold);
                sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["F4:F5"].Merge();
                sheet.Range["F4"].Value = "Remarks";
                RichText richText10 = sheet.Range["F4"].RichText;
                richText10.SetFont(0, richText10.Text.Length - 1, fontBold);
                sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;



                CellRange range3 = sheet.Range["H4:K5"];
                range3.Borders.LineStyle = LineStyleType.Double;
                range3.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range3.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                sheet.Range["K1"].Value = "Statement No.5C";
                RichText richText013 = sheet.Range["K1"].RichText;
                richText013.SetFont(0, richText013.Text.Length - 1, fontBold);

                sheet.Range["H4:H5"].Merge();
                sheet.Range["H4"].Value = "Sl.No.";
                RichText richText11 = sheet.Range["H4"].RichText;
                richText11.SetFont(0, richText11.Text.Length - 1, fontBold);
                sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["I4:I5"].Merge();
                sheet.Range["I4"].Value = "Group Number.";
                RichText richText12 = sheet.Range["I4"].RichText;
                richText12.SetFont(0, richText12.Text.Length - 1, fontBold);
                sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["J4:J5"].Merge();
                sheet.Range["J4"].Value = "Name of the Removed Chit Member";
                RichText richText13 = sheet.Range["J4"].RichText;
                richText13.SetFont(0, richText13.Text.Length - 1, fontBold);
                sheet.Range["J4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["J4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["K4:K5"].Merge();
                sheet.Range["K4"].Value = "Removed Chit Members Account ";
                RichText richText14 = sheet.Range["K4"].RichText;
                richText14.SetFont(0, richText14.Text.Length - 1, fontBold);
                sheet.Range["K4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["K4"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["L4:L5"].Merge();
                //sheet.Range["L4"].Value = "Removed chit A/c No.II";
                //sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;




                int rowcnt = 5;
                int sno = 1;
                //    int rowcnt = 5;
                foreach (DataRow dr in dtgrpware.Rows)
                {
                    rowcnt = rowcnt + 1;

                    sheet.Range["A" + rowcnt].Value = sno.ToString();
                    sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                    sheet.Range["E" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                    prizedarrear = prizedarrear + Convert.ToDecimal(dr.ItemArray[2]);
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                    sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    nonprizedarrear = nonprizedarrear + Convert.ToDecimal(dr.ItemArray[3]);
                    sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                    sheet.Range["C" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                    excessremittance = excessremittance + Convert.ToDecimal(dr.ItemArray[4]);
                    CellRange range4 = sheet.Range["A6:" + "F" + rowcnt];
                    range4.Borders.LineStyle = LineStyleType.Thin;
                    range4.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range4.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    sno++;

                }
                rowcnt = rowcnt + 3;
                sheet.Range["B" + rowcnt].Value = "Total";
                sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(prizedarrear);
                sheet.Range["E" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                sheet.Range["E" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(nonprizedarrear);
                sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(excessremittance);
                sheet.Range["C" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                CellRange range41 = sheet.Range["A6:" + "F" + rowcnt];
                range41.Borders.LineStyle = LineStyleType.Thin;
                range41.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range41.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                var end = rowcnt;
                rowcnt = rowcnt + 2;
                //CellRange range1 = sheet.Range["A6:" + "F" + rowcnt];
                //range1.BorderAround(LineStyleType.Medium, Color.Black);

                int rowcnt1 = 5;

                decimal Totalvalue = 0;

                foreach (DataRow dr in dtremove.Rows)
                {
                    rowcnt1 = rowcnt1 + 1;

                    sheet.Range["H" + rowcnt1].Value = dr.ItemArray[0].ToString();
                    sheet.Range["I" + rowcnt1].Value = dr.ItemArray[1].ToString();
                    sheet.Range["J" + rowcnt1].Value = dr.ItemArray[2].ToString();
                    sheet.Range["K" + rowcnt1].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                    sheet.Range["K" + rowcnt1].NumberFormat = "#,##0.00";
                    //sheet.Range["L" + rowcnt1].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                    //sheet.Range["L" + rowcnt1].NumberFormat = "0.00";
                    Totalvalue = Totalvalue + Convert.ToDecimal(dr.ItemArray[3]);
                    CellRange range5 = sheet.Range["H6:" + "K" + rowcnt1];
                    range5.Borders.LineStyle = LineStyleType.Thin;
                    range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }
                rowcnt1 = rowcnt1 + 5;
                sheet.Range["J" + end].Value = "Total";
                sheet.Range["J" + end].Style.Font.IsBold = true;
                sheet.Range["K" + end].NumberValue = Convert.ToDouble(Totalvalue);
                sheet.Range["K" + end].Style.HorizontalAlignment = HorizontalAlignType.Right;
                sheet.Range["K" + end].Style.Font.IsBold = true;
                sheet.Range["K" + end].NumberFormat = "#,##0.00";
                //   end = end + 2;
                CellRange range51 = sheet.Range["H6:" + "K" + end];
                range51.Borders.LineStyle = LineStyleType.Thin;
                range51.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range51.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                //sheet.SetRowHeight(4, 29);
                //sheet.SetColumnWidth(1, 9);
                //sheet.SetRowHeight(5, 24);
                //sheet.SetRowHeight(1, 24);
                //sheet.SetRowHeight(2, 24);
                sheet.SetColumnWidth(3, 17);
                sheet.SetColumnWidth(4, 17);
                sheet.SetColumnWidth(5, 17);
                sheet.SetColumnWidth(11, 17);
                sheet.SetColumnWidth(2, 12.5);
                sheet.SetColumnWidth(9, 12.5);

                workbook.SaveToHttpResponse("groware ERA st-5B&5C.xlsx", HttpContext.Current.Response);
            }
            catch (Exception ex) { }

        }

        protected void BtnRecoverySt11_Click(object sender, EventArgs e)
        {
            try
            {
                //   YearEndingObj.recovery(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value), filepath);
                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                var dtBind = YearEndingObj.bindrecovery(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                //var dt1= bindrecovery2(fromdate, todate, branchtext, branchid);

                //var finalDt = bindrecovery3(fromdate, todate, branchtext, branchid);

                sheet.Name = "chitsecdepositandaccured";
                sheet.Pictures.Add(1, 1, filepath);
                //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");



                CellRange range = sheet.Range["A4:L5"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;



                sheet.Range["B1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["B1"].RichText;
                richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["B" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["B" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["B" + bb + ""].Value = "Branch: " + branchtext;
                    RichText richText02 = sheet.Range["b" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }


                sheet.Range["K1:L1"].Merge();
                sheet.Range["K1"].Value = "Statement Number-11";
                RichText richText04 = sheet.Range["K1"].RichText;
                richText04.SetFont(0, richText04.Text.Length - 1, fontBold);

                sheet.Range["A3"].Value = "Particulars of Recovery of Bad Debts during the year " + txtFrmDate.Text + "-" + txtToDate.Text;
                RichText richText03 = sheet.Range["A3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["A3:L3"].Merge();
                sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                sheet.Range["A4:A5"].Merge();
                sheet.Range["A4"].Value = "Sl.No.";
                sheet.Range["A4"].Style.Font.IsBold = true;
                sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["B4:B5"].Merge();
                sheet.Range["B4"].Value = "Chit Number";
                sheet.Range["B4"].Style.Font.IsBold = true;
                sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["C4:G4"].Merge();
                sheet.Range["C4"].Value = "CASE DETAILS";
                sheet.Range["C4"].Style.Font.IsBold = true;
                sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;


                sheet.Range["C5"].Value = "C.C No.";
                sheet.Range["C5"].Style.Font.IsBold = true;
                sheet.Range["C5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["D5"].Value = "ARC Number";
                sheet.Range["D5"].Style.Font.IsBold = true;
                sheet.Range["D5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D5"].Style.VerticalAlignment = VerticalAlignType.Center;


                sheet.Range["E5"].Value = "E.P. Number";
                sheet.Range["E5"].Style.Font.IsBold = true;
                sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["F5"].Value = "Court";
                sheet.Range["F5"].Style.Font.IsBold = true;
                sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["G5"].Value = "Place";
                sheet.Range["G5"].Style.Font.IsBold = true;
                sheet.Range["G5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["H4:H5"].Merge();
                sheet.Range["H4"].Value = "Name of the First Defendant";
                sheet.Range["H4"].Style.Font.IsBold = true;
                sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["I4:K4"].Merge();
                sheet.Range["I4"].Value = "REALISATION PARTICULARS";
                sheet.Range["I4"].Style.Font.IsBold = true;
                sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["I5"].Value = "Date of Written off as Bad debts";
                sheet.Range["I5"].Style.Font.IsBold = true;
                sheet.Range["I5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["J5"].Value = "Realisation during the year";
                sheet.Range["J5"].Style.Font.IsBold = true;
                sheet.Range["J5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["J5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["K5"].Value = "Realisation up to Previous year";
                sheet.Range["K5"].Style.Font.IsBold = true;
                sheet.Range["K5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["K5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["L4:L5"].Merge();
                sheet.Range["L4"].Value = "Remarks";
                sheet.Range["L4"].Style.Font.IsBold = true;
                sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;







                int rowcnt = 5;
                foreach (DataRow dr in dtBind.Rows)
                {
                    rowcnt = rowcnt + 1;
                    if (dr.ItemArray[8].ToString() != "Total")
                    {
                        sheet.Range["A" + rowcnt].Value = dr.ItemArray[0].ToString();
                        sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                        sheet.Range["C" + rowcnt].Value = dr.ItemArray[2].ToString();
                        sheet.Range["D" + rowcnt].Value = dr.ItemArray[3].ToString();
                        sheet.Range["E" + rowcnt].Value = dr.ItemArray[4].ToString();
                        sheet.Range["F" + rowcnt].Value = dr.ItemArray[5].ToString();
                        sheet.Range["G" + rowcnt].Value = dr.ItemArray[6].ToString();
                        sheet.Range["H" + rowcnt].Value = dr.ItemArray[7].ToString();
                        sheet.Range["I" + rowcnt].Value = dr.ItemArray[8].ToString();
                        sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[9].ToString());
                        sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                        //sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[10].ToString());
                        //sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                        CellRange range5 = sheet.Range["A6:" + "L" + rowcnt];
                        range5.Borders.LineStyle = LineStyleType.Thin;
                        range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    }
                    else
                    {
                        rowcnt = 30;
                        sheet.Range["I" + rowcnt].Value = dr.ItemArray[8].ToString();
                        sheet.Range["I" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["J" + rowcnt].Value = dr.ItemArray[9].ToString();
                        sheet.Range["J" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                        CellRange range5 = sheet.Range["A6:" + "L" + rowcnt];
                        range5.Borders.LineStyle = LineStyleType.Thin;
                        range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    }
                    // sheet.Range["H" + rowcnt].Value = dr.ItemArray[4].ToString();

                    //if (dr.ItemArray[5].ToString() != "")
                    //    sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);

                    //if (dr.ItemArray[6].ToString() != "")
                    //    sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[6]);

                    //sheet.Range["J" + rowcnt].NumberFormat = "0.00";

                }
                // foreach (DataRow dr in dtBind.Rows)
                // {
                //     rowcnt = rowcnt + 1;

                //     sheet.Range["A" + rowcnt].Value = dr.ItemArray[0].ToString();
                //     sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                //     sheet.Range["C" + rowcnt].Value = dr.ItemArray[2].ToString();
                //     sheet.Range["D" + rowcnt].Value = dr.ItemArray[3].ToString();

                //     sheet.Range["H" + rowcnt].Value = dr.ItemArray[4].ToString();


                //     sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
                //     sheet.Range["J" + rowcnt].NumberFormat = "0.00";

                // }
                //int rowcnt1 = 5;
                // foreach (DataRow dr in dt1.Rows)
                // {
                //     rowcnt1 = rowcnt1 + 1;

                //     sheet.Range["I" + rowcnt1].Value = dr.ItemArray[0].ToString();


                // }
                //int rowcnt2 = 5;
                // foreach (DataRow dr in finalDt.Rows)
                // {
                //     rowcnt2 = rowcnt2 + 1;

                //     sheet.Range["k" + rowcnt2].Value = dr.ItemArray[0].ToString();


                // }
                //if ((dtDistinct.Rows[i]["PreAmount"]) == DBNull.Value) //which is working properly
                //{
                //    dr["PreAmount"] = "0.00";

                //}
                //else
                //{
                //    dr["PreAmount"] = dtDistinct.Rows[i]["PreAmount"];
                //}

                //rowcnt = rowcnt + 1;
                //sheet.Range["H" + rowcnt].Value = "Total";
                //decimal Deecreeamount = Convert.ToDecimal(dtBind.Compute("sum(Amount)", ""));
                //sheet.Range["J" + rowcnt].Value = Convert.ToString(Deecreeamount);
                //sheet.Range["J" + rowcnt].NumberFormat = "0.00";
                //decimal Deecreeamount1 = Convert.ToDecimal(finalDt.Compute("sum(Amount)", ""));

                //sheet.Range["k" + rowcnt2].Value = Convert.ToString(Deecreeamount1);
                //sheet.Range["k" + rowcnt2].NumberFormat = "0.00";
                rowcnt = rowcnt + 2;

                //CellRange range1 = sheet.Range["A5:" + "M" + rowcnt];
                //range1.BorderAround(LineStyleType.Medium, Color.Black);



                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(1, 9);
                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);

                workbook.SaveToHttpResponse("Recovery12.xlsx", HttpContext.Current.Response);


            }
            catch (Exception ex) { }

        }

        protected void BtnAbstractChitSt19_Click(object sender, EventArgs e)

        {

            try
            {
                // YearEndingObj.AbstractChitDebtors(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value), filepath);
                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                System.Data.DataTable Chitdebt = GrpwarDebDT2();


                //string filepath = Server.MapPath("Logo1.png");
                sheet.Name = "chitsecdepositandaccured";

                //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");
                sheet.Pictures.Add(1, 1, filepath);
                CellRange range = sheet.Range["A4:J5"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["C1"].RichText;
                richText01.SetFont(0, richText01.Text.Length - 1, fontBold);
                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + branchtext;
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }


                sheet.Range["I1"].Value = "Statement No.  19";
                RichText richText23 = sheet.Range["I1"].RichText;
                richText23.SetFont(0, richText23.Text.Length - 1, fontBold);
                sheet.Range["I1:J1"].Merge();

                sheet.Range["A3"].Value = "ABSTRACT OF CHIT DEBTORS AS ON " + txtToDate.Text;
                RichText richText03 = sheet.Range["A3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["A3:L3"].Merge();

                sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                sheet.Range["A4:A5"].Merge();
                sheet.Range["A4"].Value = "Sl.No.";
                RichText richText24 = sheet.Range["A4"].RichText;
                richText24.SetFont(0, richText24.Text.Length - 1, fontBold);
                sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["B4:B5"].Merge();
                sheet.Range["B4"].Value = "CATEGORY";
                RichText richText25 = sheet.Range["B4"].RichText;
                richText25.SetFont(0, richText25.Text.Length - 1, fontBold);
                sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["C4:E4"].Merge();
                sheet.Range["C4"].Value = "Debts considered good for which the company hold personal security of the Debtors and with other persons";
                RichText richText26 = sheet.Range["C4"].RichText;
                richText26.SetFont(0, richText26.Text.Length - 1, fontBold);
                sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["D4:E4"].Merge();
                sheet.Range["C5"].Value = "Personal Security(Single)";
                RichText richText27 = sheet.Range["C5"].RichText;
                richText27.SetFont(0, richText27.Text.Length - 1, fontBold);
                sheet.Range["C5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C5"].Style.VerticalAlignment = VerticalAlignType.Center;

                // sheet.Range["E4:E5"].Merge();
                sheet.Range["D5"].Value = "Personal Security with others(Joint)";
                RichText richText28 = sheet.Range["D5"].RichText;
                richText28.SetFont(0, richText28.Text.Length - 1, fontBold);
                sheet.Range["D5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D5"].Style.VerticalAlignment = VerticalAlignType.Center;

                //   sheet.Range["F4:F5"].Merge();
                sheet.Range["E5"].Value = "Total";
                RichText richText29 = sheet.Range["E5"].RichText;
                richText29.SetFont(0, richText29.Text.Length - 1, fontBold);
                sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["F4:H4"].Merge();
                sheet.Range["F4"].Value = "Debts considered good and in the respect of which the company is fully secured by Equitable Mortgage or otherwise";
                RichText richText30 = sheet.Range["F4"].RichText;
                richText30.SetFont(0, richText30.Text.Length - 1, fontBold);
                sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;


                //       sheet.Range["G4:G5"].Merge();
                sheet.Range["F5"].Value = "E.M. With Personal Security(Single)";
                RichText richText31 = sheet.Range["F5"].RichText;
                richText31.SetFont(0, richText31.Text.Length - 1, fontBold);
                sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;

                // sheet.Range["H4:H5"].Merge();
                sheet.Range["G5"].Value = "E.M. With Personal Security & with Others(Joint)";
                RichText richText32 = sheet.Range["G5"].RichText;
                richText32.SetFont(0, richText32.Text.Length - 1, fontBold);
                sheet.Range["G5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G5"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["I4:I5"].Merge();
                sheet.Range["H5"].Value = "Total";
                RichText richText33 = sheet.Range["H5"].RichText;
                richText33.SetFont(0, richText33.Text.Length - 1, fontBold);
                sheet.Range["H5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["H5"].Style.VerticalAlignment = VerticalAlignType.Center;


                sheet.Range["I4:I5"].Merge();
                sheet.Range["I4"].Value = "Foreman and Foreman substituted chits";
                RichText richText34 = sheet.Range["I4"].RichText;
                richText34.SetFont(0, richText34.Text.Length - 1, fontBold);
                sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["J4:J5"].Merge();
                sheet.Range["J4"].Value = "Grand Total";
                RichText richText35 = sheet.Range["J4"].RichText;
                richText35.SetFont(0, richText35.Text.Length - 1, fontBold);
                sheet.Range["J4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["J4"].Style.VerticalAlignment = VerticalAlignType.Center;







                int rowcnt = 5;
                //    int rowcnt = 5;
                int slno = 1;
                int fortslno = 2;
                int trislno = 3;
                int Rangecell = 7;
                decimal totamnt = 0;
                decimal purepersonal = 0;
                decimal GuarontorNameOnly = 0;
                decimal FirstTotal = 0;
                decimal Documentonly = 0;
                decimal DocumentandGuarontor = 0;
                decimal SecondTotal = 0;
                decimal companycount = 0;
                decimal Total = 0;
                decimal GrandTotal = 0;
                decimal membercount = 0;

                decimal fortpurepersonal = 0;
                decimal fortGuarontorNameOnly = 0;
                decimal fortFirstTotal = 0;
                decimal fortDocumentonly = 0;
                decimal fortDocumentandGuarontor = 0;
                decimal fortSecondTotal = 0;
                decimal fortcompanycount = 0;
                decimal fortTotal = 0;
                decimal fortGrandTotal = 0;
                decimal fortmembercount = 0;


                decimal tripurepersonal = 0;
                decimal triGuarontorNameOnly = 0;
                decimal triFirstTotal = 0;
                decimal triDocumentonly = 0;
                decimal triDocumentandGuarontor = 0;
                decimal triSecondTotal = 0;
                decimal tricompanycount = 0;
                decimal triTotal = 0;
                decimal triGrandTotal = 0;
                decimal trimembercount = 0;

                decimal finalpurepersonal = 0;
                decimal finalGuarontorNameOnly = 0;
                decimal finalFirstTotal = 0;
                decimal finalDocumentonly = 0;
                decimal finalDocumentandGuarontor = 0;
                decimal finalSecondTotal = 0;
                decimal finalcompanycount = 0;
                decimal finalTotal = 0;
                decimal finalGrandTotal = 0;
                decimal finalmembercount = 0;

                foreach (DataRow dr in Chitdebt.AsEnumerable())
                {
                    if (dr.ItemArray[1].ToString().Trim() == "Monthly" || dr.ItemArray[1].ToString().Trim() == "monthly")
                    {
                        membercount = membercount + Convert.ToDecimal(dr.ItemArray[2]);
                        purepersonal = purepersonal + Convert.ToDecimal(dr.ItemArray[3]);
                        GuarontorNameOnly = GuarontorNameOnly + Convert.ToDecimal(dr.ItemArray[4]);
                        FirstTotal = FirstTotal + Convert.ToDecimal(dr.ItemArray[5]);
                        Documentonly = Documentonly + Convert.ToDecimal(dr.ItemArray[6]);
                        DocumentandGuarontor = DocumentandGuarontor + Convert.ToDecimal(dr.ItemArray[7]);
                        SecondTotal = SecondTotal + Convert.ToDecimal(dr.ItemArray[8]);
                        companycount = companycount + Convert.ToDecimal(dr.ItemArray[9]);
                        Total = Total + Convert.ToDecimal(dr.ItemArray[10]);
                        GrandTotal = GrandTotal + Convert.ToDecimal(dr.ItemArray[11]);

                    }
                }
                rowcnt = rowcnt + 1;
                sheet.Range["A" + rowcnt].Value = Convert.ToString(slno);
                sheet.Range["B" + rowcnt].Value = "Monthly";
                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(purepersonal);
                sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(GuarontorNameOnly);
                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(FirstTotal);
                sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(Documentonly);
                sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(DocumentandGuarontor);
                sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(SecondTotal);
                sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(Total);
                sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(GrandTotal);
                sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                CellRange range45 = sheet.Range["A6:" + "J" + rowcnt];
                range45.Borders.LineStyle = LineStyleType.Thin;
                range45.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range45.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;



                foreach (DataRow dr in Chitdebt.AsEnumerable())
                {
                    if (dr.ItemArray[1].ToString().Trim() == "fortnightly" || dr.ItemArray[1].ToString().Trim() == "Fortnightly")
                    {
                        fortmembercount = fortmembercount + Convert.ToDecimal(dr.ItemArray[2]);
                        fortpurepersonal = fortpurepersonal + Convert.ToDecimal(dr.ItemArray[3]);
                        fortGuarontorNameOnly = fortGuarontorNameOnly + Convert.ToDecimal(dr.ItemArray[4]);
                        fortFirstTotal = fortFirstTotal + Convert.ToDecimal(dr.ItemArray[5]);
                        fortDocumentonly = fortDocumentonly + Convert.ToDecimal(dr.ItemArray[6]);
                        fortDocumentandGuarontor = fortDocumentandGuarontor + Convert.ToDecimal(dr.ItemArray[7]);
                        fortSecondTotal = fortSecondTotal + Convert.ToDecimal(dr.ItemArray[8]);
                        fortcompanycount = fortcompanycount + Convert.ToDecimal(dr.ItemArray[9]);
                        fortTotal = fortTotal + Convert.ToDecimal(dr.ItemArray[10]);
                        fortGrandTotal = fortGrandTotal + Convert.ToDecimal(dr.ItemArray[11]);

                    }
                }
                rowcnt = rowcnt + 3;
                sheet.Range["A" + rowcnt].Value = Convert.ToString(fortslno);
                sheet.Range["B" + rowcnt].Value = "Fortnightly";
                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(fortpurepersonal);
                sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(fortGuarontorNameOnly);
                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(fortFirstTotal);
                sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(fortDocumentonly);
                sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(fortDocumentandGuarontor);
                sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(fortSecondTotal);
                sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(fortTotal);
                sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(fortGrandTotal);
                sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                CellRange range46 = sheet.Range["A6:" + "J" + rowcnt];
                range46.Borders.LineStyle = LineStyleType.Thin;
                range46.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range46.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                foreach (DataRow dr in Chitdebt.AsEnumerable())
                {
                    if (dr.ItemArray[1].ToString().Trim() == "TriMonthly" || dr.ItemArray[1].ToString().Trim() == "trimonthly")
                    {
                        trimembercount = trimembercount + Convert.ToDecimal(dr.ItemArray[2]);
                        tripurepersonal = tripurepersonal + Convert.ToDecimal(dr.ItemArray[3]);
                        triGuarontorNameOnly = triGuarontorNameOnly + Convert.ToDecimal(dr.ItemArray[4]);
                        triFirstTotal = triFirstTotal + Convert.ToDecimal(dr.ItemArray[5]);
                        triDocumentonly = triDocumentonly + Convert.ToDecimal(dr.ItemArray[6]);
                        triDocumentandGuarontor = triDocumentandGuarontor + Convert.ToDecimal(dr.ItemArray[7]);
                        triSecondTotal = triSecondTotal + Convert.ToDecimal(dr.ItemArray[8]);
                        tricompanycount = tricompanycount + Convert.ToDecimal(dr.ItemArray[9]);
                        triTotal = triTotal + Convert.ToDecimal(dr.ItemArray[10]);
                        triGrandTotal = triGrandTotal + Convert.ToDecimal(dr.ItemArray[11]);

                    }
                }
                rowcnt = rowcnt + 3;
                sheet.Range["A" + rowcnt].Value = Convert.ToString(trislno);
                sheet.Range["B" + rowcnt].Value = "TriMothly";
                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(tripurepersonal);
                sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(triGuarontorNameOnly);
                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(triFirstTotal);
                sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(triDocumentonly);
                sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(triDocumentandGuarontor);
                sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(triSecondTotal);
                sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(triTotal);
                sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(triGrandTotal);
                sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                CellRange range47 = sheet.Range["A6:" + "J" + rowcnt];
                range47.Borders.LineStyle = LineStyleType.Thin;
                range47.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range47.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                finalpurepersonal = Convert.ToDecimal(purepersonal + fortpurepersonal + tripurepersonal);
                finalGuarontorNameOnly = Convert.ToDecimal(GuarontorNameOnly + fortGuarontorNameOnly + triGuarontorNameOnly);
                finalFirstTotal = Convert.ToDecimal(FirstTotal + fortFirstTotal + triFirstTotal);
                finalDocumentonly = Convert.ToDecimal(Documentonly + fortDocumentonly + triDocumentonly);
                finalDocumentandGuarontor = Convert.ToDecimal(DocumentandGuarontor + fortDocumentandGuarontor + triDocumentandGuarontor);
                finalSecondTotal = Convert.ToDecimal(SecondTotal + fortSecondTotal + triSecondTotal);
                finalTotal = Convert.ToDecimal(Total + fortTotal + triTotal);
                finalGrandTotal = Convert.ToDecimal(GrandTotal + fortGrandTotal + triGrandTotal);
                rowcnt = rowcnt + 14;
                sheet.Range["B" + rowcnt].Value = "Total";
                sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(finalpurepersonal);
                sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(finalGuarontorNameOnly);
                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(finalFirstTotal);
                sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["E" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(finalDocumentonly);
                sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(finalDocumentandGuarontor);
                sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["G" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(finalSecondTotal);
                sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["H" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(finalTotal);
                sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["I" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(finalGrandTotal);
                sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["J" + rowcnt].Style.Font.IsBold = true;
                CellRange range48 = sheet.Range["A6:" + "J" + rowcnt];
                range48.Borders.LineStyle = LineStyleType.Thin;
                range48.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range48.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(10, 17);
                sheet.SetColumnWidth(2, 17);
                sheet.SetColumnWidth(3, 17);
                sheet.SetColumnWidth(4, 17);
                sheet.SetColumnWidth(5, 17);
                sheet.SetColumnWidth(6, 17);
                sheet.SetColumnWidth(7, 17);
                sheet.SetColumnWidth(8, 17);
                sheet.SetColumnWidth(9, 17);

                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);



                workbook.SaveToHttpResponse("Abstract ChitDebtors st-19.xlsx", HttpContext.Current.Response);
            }
            catch (Exception ex) { }


        }

        protected void BtnNewChitSt21_Click(object sender, EventArgs e)
        {
            try
            {
                //YearEndingObj.newchit(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value), filepath); 
                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                var dtnewchit = YearEndingObj.bindnewchit(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                sheet.Name = "chitsecdepositandaccured";

                //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");
                sheet.Pictures.Add(1, 1, filepath);
                CellRange range = sheet.Range["A4:H5"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["C1"].RichText;
                richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + branchtext;
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }


                sheet.Range["H1"].Value = "Statement No. 21";
                RichText richText12 = sheet.Range["H1"].RichText;
                richText12.SetFont(0, richText12.Text.Length - 1, fontBold);

                sheet.Range["A3"].Value = "Particulars of New Chit Groups Commenced during " + txtFrmDate.Text + " to " + txtToDate.Text;
                RichText richText03 = sheet.Range["A3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["A3:H3"].Merge();

                sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                sheet.Range["A4:A5"].Merge();
                sheet.Range["A4"].Value = "Sl.No";
                sheet.Range["A4"].Style.Font.IsBold = true;
                sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["A4"].Style.Font.IsBold.ToString();



                sheet.Range["B4:B5"].Merge();
                sheet.Range["B4"].Value = "Group No";
                sheet.Range["B4"].Style.Font.IsBold = true;
                sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["A4"].Style.Font.IsBold.ToString();

                sheet.Range["C4:C5"].Merge();
                sheet.Range["C4"].Value = "Category Like Monthly Fortnightly Trimonthly";
                sheet.Range["C4"].Style.Font.IsBold = true;
                sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["A4"].Style.Font.IsBold.ToString();

                sheet.Range["D4:D5"].Merge();
                sheet.Range["D4"].Value = "Total Number of Members";
                sheet.Range["D4"].Style.Font.IsBold = true;
                sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["A4"].Style.Font.IsBold.ToString();

                sheet.Range["E4:E5"].Merge();
                sheet.Range["E4"].Value = "Value of the Group";
                sheet.Range["E4"].Style.Font.IsBold = true;
                sheet.Range["E4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["A4"].Style.Font.IsBold.ToString();

                sheet.Range["F4:F5"].Merge();
                sheet.Range["F4"].Value = "Total Value of the Group";
                sheet.Range["F4"].Style.Font.IsBold = true;
                sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["A4"].Style.Font.IsBold.ToString();


                sheet.Range["G4:G5"].Merge();
                sheet.Range["G4"].Value = "Date of Commencement";
                sheet.Range["G4"].Style.Font.IsBold = true;
                sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["A4"].Style.Font.IsBold.ToString();


                sheet.Range["H4:H5"].Merge();
                sheet.Range["H4"].Value = "Number of Instalments paid up to March";
                sheet.Range["H4"].Style.Font.IsBold = true;
                sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["A4"].Style.Font.IsBold.ToString();


                int rowcnt = 5;
                int sno = 0;
                //   rowcnt = rowcnt + 2;
                decimal total = 0;
                foreach (DataRow dr in dtnewchit.Rows)
                {
                    rowcnt = rowcnt + 1;
                    sno = sno + 1;
                    sheet.Range["A" + rowcnt].Value = sno.ToString();
                    sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                    sheet.Range["C" + rowcnt].Value = dr.ItemArray[2].ToString();
                    sheet.Range["D" + rowcnt].Value = dr.ItemArray[3].ToString();
                    sheet.Range["E" + rowcnt].Value = dr.ItemArray[4].ToString();

                    //sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                    //sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
                    total += Convert.ToDecimal(dr.ItemArray[5]);
                    sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["G" + rowcnt].Value = dr.ItemArray[6].ToString();
                    sheet.Range["H" + rowcnt].Value = dr.ItemArray[7].ToString();
                    CellRange range5 = sheet.Range["A6:" + "H" + rowcnt];
                    range5.Borders.LineStyle = LineStyleType.Thin;
                    range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                }

                rowcnt = rowcnt + 1;
                sheet.Range["D" + rowcnt].Value = "Total";
                sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(total);
                sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                //foreach (DataRow dr in dtsum.Rows)
                //{
                //    rowcnt = rowcnt + 1;


                //    sheet.Range["B" + rowcnt].Value = dr.ItemArray[0].ToString();
                //    sheet.Range["C" + rowcnt].Value = dr.ItemArray[1].ToString();
                //    sheet.Range["D" + rowcnt].Value = dr.ItemArray[2].ToString();
                //    sheet.Range["E" + rowcnt].NumberValue = Convert.ToInt32(dr.ItemArray[3]);
                //    sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                //    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                //    sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                //    sheet.Range["G" + rowcnt].Value = dr.ItemArray[5].ToString();
                //    sheet.Range["H" + rowcnt].Value = dr.ItemArray[6].ToString();

                //}

                rowcnt = rowcnt + 2;

                CellRange range55 = sheet.Range["A6:" + "H" + rowcnt];
                range55.Borders.LineStyle = LineStyleType.Thin;
                range55.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range55.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(1, 9);
                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);



                workbook.SaveToHttpResponse("New chit group st-21.xlsx", HttpContext.Current.Response);

            }
            catch (Exception) { }

        }

        protected void BtnLiability23_Click(object sender, EventArgs e)
        {
            try
            {
                // YearEndingObj.liabillity(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value), filepath);
                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                var dtBind = YearEndingObj.bindliabillity(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));

                var Row3 = YearEndingObj.Getdata(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                var librow = YearEndingObj.Getdata2(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                var arrrow = YearEndingObj.Getdata1(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                //       YearEndingObj.removed(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                //      YearEndingObj.chitcollection(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                //       YearEndingObj.unpaid(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                var CreditDt1 = BindChitTrial();
                decimal NonPrized = 0;
                decimal Prized = 0;
                for (int i = 0; i < CreditDt1.Rows.Count; i++)
                {
                    NonPrized = Convert.ToDecimal(CreditDt1.Rows[i]["NonPrized"]) + NonPrized;

                    Prized = Convert.ToDecimal(CreditDt1.Rows[i]["Prized"]) + Prized;
                }

                var Outstunpaid = ClsYeb.BindOutstanding1(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);

                var page = Math.Ceiling((float)Row3.Rows.Count / 35);


                sheet.Name = "chitsecdepositandaccured";
                int aa = 1;
                int bb = 2;
                int cc = 3;
                int dd = 4;
                int ee = 5;
                int k = -1;
                do
                {
                    sheet.Pictures.Add(aa, 1, filepath);
                    //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");

                    CellRange range = sheet.Range["A" + dd + ":I" + ee + ""];
                    range.Borders.LineStyle = LineStyleType.Double;
                    range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                    sheet.Range["C" + aa + ""].Value = "Sree Visalam Chit Fund Ltd.,";
                    RichText richText01 = sheet.Range["C" + aa + ""].RichText;
                    richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {

                        sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                        RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                        richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                        RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                        richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                    }
                    else
                    {
                        sheet.Range["C" + bb + ""].Value = "Branch: " + branchtext;
                        RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                        richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                    }


                    sheet.Range["I" + aa + ""].Value = "Statement No.  23";
                    RichText richText33 = sheet.Range["I" + aa + ""].RichText;
                    richText33.SetFont(0, richText33.Text.Length - 1, fontBold);

                    sheet.Range["A" + cc + ""].Value = "LIABILITY IN CHIT ACCOUNT AS AT " + txtToDate.Text;
                    RichText richText03 = sheet.Range["A" + cc + ""].RichText;
                    richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                    sheet.Range["A" + cc + ":I" + cc + ""].Merge();


                    sheet.Range["A" + cc + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;

                    sheet.Range["A" + dd + ":A" + ee + ""].Merge();
                    sheet.Range["A" + dd + ""].Value = "Sl.No.";
                    RichText richText04 = sheet.Range["A" + dd + ""].RichText;
                    richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                    sheet.Range["A" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["A" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["B" + dd + ":B" + ee + ""].Merge();
                    sheet.Range["B" + dd + ""].Value = "Group Number";
                    RichText richText05 = sheet.Range["B" + dd + ""].RichText;
                    richText05.SetFont(0, richText05.Text.Length - 1, fontBold);
                    sheet.Range["B" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["B" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["C" + dd + ":C" + ee + ""].Merge();
                    sheet.Range["C" + dd + ""].Value = "Gross Credit excluding Dividend";
                    RichText richText06 = sheet.Range["C" + dd + ""].RichText;
                    richText06.SetFont(0, richText06.Text.Length - 1, fontBold);
                    sheet.Range["C" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["C" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["D" + dd + ":D" + ee + ""].Merge();
                    sheet.Range["D" + dd + ""].Value = "Non prized subscribers Dividend";
                    RichText richText07 = sheet.Range["D" + dd + ""].RichText;
                    richText07.SetFont(0, richText07.Text.Length - 1, fontBold);
                    sheet.Range["D" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["D" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["E" + dd + ":E" + ee + ""].Merge();
                    sheet.Range["E" + dd + ""].Value = "Arrears due from Non Prized Subscribers";
                    RichText richText08 = sheet.Range["E" + dd + ""].RichText;
                    richText08.SetFont(0, richText08.Text.Length - 1, fontBold);
                    sheet.Range["E" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["E" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;



                    sheet.Range["F" + dd + ":F" + ee + ""].Merge();
                    sheet.Range["F" + dd + ""].Value = "Liability in Foreman & Foreman substituted chits after deducting call amount";
                    RichText richText09 = sheet.Range["F" + dd + ""].RichText;
                    richText09.SetFont(0, richText09.Text.Length - 1, fontBold);
                    sheet.Range["F" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["F" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["G" + dd + ":G" + ee + ""].Merge();
                    sheet.Range["G" + dd + ""].Value = "Outstanding Prize Money Payable";
                    RichText richText10 = sheet.Range["G" + dd + ""].RichText;
                    richText10.SetFont(0, richText10.Text.Length - 1, fontBold);
                    sheet.Range["G" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["G" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["H" + dd + ":H" + ee + ""].Merge();
                    sheet.Range["H" + dd + ""].Value = "Total Amount of Foreman Chits prized";
                    RichText richText11 = sheet.Range["H" + dd + ""].RichText;
                    richText11.SetFont(0, richText11.Text.Length - 1, fontBold);
                    sheet.Range["H" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["H" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;


                    sheet.Range["I" + dd + ":I" + ee + ""].Merge();
                    sheet.Range["I" + dd + ""].Value = "Total Number of Non-Prized Subscribers";
                    RichText richText12 = sheet.Range["I" + dd + ""].RichText;
                    richText12.SetFont(0, richText12.Text.Length - 1, fontBold);
                    sheet.Range["I" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["I" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    aa = aa + 41;
                    bb = bb + 41;
                    cc = cc + 41;
                    dd = dd + 41;
                    ee = ee + 41;
                    k++;
                } while (k < page);


                int rowcnt1 = 5;
                int sno = 1;
                int count = 0;
                decimal ccsum = 0;
                decimal ddsum = 0;
                decimal eesum = 0;
                decimal ffsum = 0;
                decimal ggsum = 0;
                decimal hhsum = 0;
                decimal iisum = 0;
                //running
                var ss = dtBind.Rows.Count;
                var aaa = Row3.Rows.Count;
                var rr = arrrow.Rows.Count;
                var bbb = librow.Rows.Count;
                for (int j = 0; j < dtBind.Rows.Count; j++)
                {
                    if (count < 35)
                    {
                        rowcnt1 = rowcnt1 + 1;

                        sheet.Range["A" + rowcnt1].Value = sno.ToString();
                        sheet.Range["B" + rowcnt1].Value = Row3.Rows[j]["GroupNo"].ToString();
                        sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(Row3.Rows[j]["E_Credit"].ToString());
                        sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                        ccsum += Convert.ToDecimal(Row3.Rows[j]["E_Credit"]);
                        sheet.Range["C" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["D" + rowcnt1].NumberValue = Convert.ToDouble(Row3.Rows[j]["NonPrized"].ToString());
                        sheet.Range["D" + rowcnt1].NumberFormat = "#,##0.00";
                        ddsum += Convert.ToDecimal(Row3.Rows[j]["NonPrized"]);
                        sheet.Range["D" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["I" + rowcnt1].Value = Row3.Rows[j]["NP"].ToString();
                        sheet.Range["E" + rowcnt1].NumberValue = Convert.ToDouble(arrrow.Rows[j]["NP"].ToString());
                        sheet.Range["E" + rowcnt1].NumberFormat = "#,##0.00";
                        eesum += Convert.ToDecimal(arrrow.Rows[j]["NP"]);
                        iisum += Convert.ToDecimal(Row3.Rows[j]["NP"]);
                        sheet.Range["E" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["G" + rowcnt1].NumberValue = Convert.ToDouble(dtBind.Rows[j]["OutTotal"].ToString());
                        sheet.Range["G" + rowcnt1].NumberFormat = "#,##0.00";
                        ggsum += Convert.ToDecimal(dtBind.Rows[j]["OutTotal"]);
                        sheet.Range["G" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                        if (j < librow.Rows.Count)
                        {
                            if (librow.Rows[j]["ChitNumber"].ToString() == Row3.Rows[j]["GroupNo"].ToString())
                            {
                                sheet.Range["F" + rowcnt1].NumberValue = Convert.ToDouble(librow.Rows[j]["BalancePayable"].ToString());
                                sheet.Range["F" + rowcnt1].NumberFormat = "#,##0.00";
                                ffsum += Convert.ToDecimal(librow.Rows[j]["BalancePayable"]);
                                sheet.Range["F" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                            }
                            else
                            {
                                sheet.Range["F" + rowcnt1].NumberValue = Convert.ToDouble("0.00");
                                sheet.Range["F" + rowcnt1].NumberFormat = "#,##0.00";
                                ffsum += Convert.ToDecimal("0.00");
                                sheet.Range["F" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                            }
                        }
                        else
                        {
                            sheet.Range["F" + rowcnt1].NumberValue = 0;
                            sheet.Range["F" + rowcnt1].NumberFormat = "#,##0.00";
                        }
                        sheet.Range["H" + rowcnt1].NumberValue = Convert.ToDouble(dtBind.Rows[j]["PrizeMoney"].ToString());
                        sheet.Range["H" + rowcnt1].NumberFormat = "#,##0.00";
                        hhsum += Convert.ToDecimal(dtBind.Rows[j]["PrizeMoney"]);
                        sheet.Range["H" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                        CellRange range55 = sheet.Range["A6:" + "I" + rowcnt1];
                        range55.Borders.LineStyle = LineStyleType.Thin;
                        range55.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range55.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                        sno++;
                        count++;
                    }
                    else
                    {
                        break;
                    }
                }
                if (dtBind.Rows.Count > 35)
                {
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(ccsum);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["C" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["D" + rowcnt1].NumberValue = Convert.ToDouble(ddsum);
                    sheet.Range["D" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["E" + rowcnt1].NumberValue = Convert.ToDouble(eesum);
                    sheet.Range["E" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["E" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["E" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["F" + rowcnt1].NumberValue = Convert.ToDouble(ffsum);
                    sheet.Range["F" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["F" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["F" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["G" + rowcnt1].NumberValue = Convert.ToDouble(ggsum);
                    sheet.Range["G" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["G" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["G" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["H" + rowcnt1].NumberValue = Convert.ToDouble(hhsum);
                    sheet.Range["H" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["H" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["H" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["I" + rowcnt1].NumberValue = Convert.ToDouble(iisum);
                    //     sheet.Range["I" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["I" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["I" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["B" + rowcnt1].Value = "Carried Over";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    CellRange range55 = sheet.Range["A6:" + "I" + rowcnt1];
                    range55.Borders.LineStyle = LineStyleType.Thin;
                    range55.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range55.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    rowcnt1 = rowcnt1 + 6;

                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(ccsum);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["C" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["D" + rowcnt1].NumberValue = Convert.ToDouble(ddsum);
                    sheet.Range["D" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["E" + rowcnt1].NumberValue = Convert.ToDouble(eesum);
                    sheet.Range["E" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["E" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["E" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["F" + rowcnt1].NumberValue = Convert.ToDouble(ffsum);
                    sheet.Range["F" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["F" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["F" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["G" + rowcnt1].NumberValue = Convert.ToDouble(ggsum);
                    sheet.Range["G" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["G" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["G" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["H" + rowcnt1].NumberValue = Convert.ToDouble(hhsum);
                    sheet.Range["H" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["H" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["H" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["I" + rowcnt1].NumberValue = Convert.ToDouble(iisum);
                    //    sheet.Range["I" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["I" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["I" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["B" + rowcnt1].Value = "Brought Forward";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    CellRange range551 = sheet.Range["A" + rowcnt1 + ":" + "I" + rowcnt1];
                    range551.Borders.LineStyle = LineStyleType.Thin;
                    range551.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range551.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    for (; count < dtBind.Rows.Count; count++)
                    {
                        if (count < 70)
                        {
                            rowcnt1 = rowcnt1 + 1;

                            sheet.Range["A" + rowcnt1].Value = sno.ToString();
                            sheet.Range["B" + rowcnt1].Value = Row3.Rows[count]["GroupNo"].ToString();
                            sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(Row3.Rows[count]["E_Credit"].ToString());
                            sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                            ccsum += Convert.ToDecimal(Row3.Rows[count]["E_Credit"]);
                            sheet.Range["C" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                            sheet.Range["D" + rowcnt1].NumberValue = Convert.ToDouble(Row3.Rows[count]["NonPrized"].ToString());
                            sheet.Range["D" + rowcnt1].NumberFormat = "#,##0.00";
                            ddsum += Convert.ToDecimal(Row3.Rows[count]["NonPrized"]);
                            sheet.Range["D" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                            sheet.Range["I" + rowcnt1].Value = Row3.Rows[count]["NP"].ToString();
                            sheet.Range["E" + rowcnt1].NumberValue = Convert.ToDouble(arrrow.Rows[count]["NP"].ToString());
                            sheet.Range["E" + rowcnt1].NumberFormat = "#,##0.00";
                            eesum += Convert.ToDecimal(arrrow.Rows[count]["NP"]);
                            sheet.Range["E" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                            sheet.Range["G" + rowcnt1].NumberValue = Convert.ToDouble(dtBind.Rows[count]["OutTotal"].ToString());
                            sheet.Range["G" + rowcnt1].NumberFormat = "#,##0.00";
                            ggsum += Convert.ToDecimal(dtBind.Rows[count]["OutTotal"]);
                            sheet.Range["G" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                            if (librow.Rows[count]["ChitNumber"].ToString() == Row3.Rows[count]["GroupNo"].ToString())
                            {
                                sheet.Range["F" + rowcnt1].NumberValue = Convert.ToDouble(librow.Rows[count]["BalancePayable"].ToString());
                                sheet.Range["F" + rowcnt1].NumberFormat = "#,##0.00";
                                ffsum += Convert.ToDecimal(librow.Rows[count]["BalancePayable"]);
                                sheet.Range["F" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                            }
                            else
                            {
                                sheet.Range["F" + rowcnt1].NumberValue = Convert.ToDouble("0.00");
                                sheet.Range["F" + rowcnt1].NumberFormat = "#,##0.00";
                                ffsum += Convert.ToDecimal("0.00");
                                sheet.Range["F" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                            }
                            sheet.Range["H" + rowcnt1].NumberValue = Convert.ToDouble(dtBind.Rows[count]["PrizeMoney"].ToString());
                            sheet.Range["H" + rowcnt1].NumberFormat = "#,##0.00";
                            hhsum += Convert.ToDecimal(dtBind.Rows[count]["PrizeMoney"]);
                            sheet.Range["H" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                            CellRange range555 = sheet.Range["A" + rowcnt1 + ":" + "I" + rowcnt1];
                            range555.Borders.LineStyle = LineStyleType.Thin;
                            range555.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                            range555.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                            sno++;

                        }
                    }
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(ccsum);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["C" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["D" + rowcnt1].NumberValue = Convert.ToDouble(ddsum);
                    sheet.Range["D" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["E" + rowcnt1].NumberValue = Convert.ToDouble(eesum);
                    sheet.Range["E" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["E" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["E" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["F" + rowcnt1].NumberValue = Convert.ToDouble(ffsum);
                    sheet.Range["F" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["F" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["F" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["G" + rowcnt1].NumberValue = Convert.ToDouble(ggsum);
                    sheet.Range["G" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["G" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["G" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["H" + rowcnt1].NumberValue = Convert.ToDouble(hhsum);
                    sheet.Range["H" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["H" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["H" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["I" + rowcnt1].NumberValue = Convert.ToDouble(iisum);
                    //     sheet.Range["I" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["I" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["I" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["B" + rowcnt1].Value = "Total";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    CellRange range5511 = sheet.Range["A" + rowcnt1 + ":" + "I" + rowcnt1];
                    range5511.Borders.LineStyle = LineStyleType.Thin;
                    range5511.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range5511.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    rowcnt1 = rowcnt1 + 1;
                    decimal value11 = YearEndingObj.removed(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));

                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value11);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Removed Chit Members Credit";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    decimal value22 = Outstunpaid[0];
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value22);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Unpaid Prized money (Ledger Credit)";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    decimal value33 = YearEndingObj.chitcollection(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value33);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Chit Collection to be Accounted";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    decimal value88 = value11 + value22 + value33 + ccsum;
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value88);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Total";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;


                    decimal value44 = Outstunpaid[1];
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value44);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Less Amount actually paid by the Subscribers";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    decimal value66 = value88 - value44;
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value66);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Total";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    //DataRow lastRow1 = dtM.Rows[dtM.Rows.Count - 1];
                    //decimal value55 = Convert.ToDecimal(lastRow1.ItemArray[3].ToString());
                    decimal value55 = Prized + NonPrized;
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value55);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Add Total Dividend 5(A)";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    decimal value77 = value66 + value55;
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value77);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Balance";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    CellRange range565 = sheet.Range["A47:" + "I" + rowcnt1];
                    range565.Borders.LineStyle = LineStyleType.Thin;
                    range565.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range565.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }
                else
                {
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(ccsum);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["C" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["D" + rowcnt1].NumberValue = Convert.ToDouble(ddsum);
                    sheet.Range["D" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["E" + rowcnt1].NumberValue = Convert.ToDouble(eesum);
                    sheet.Range["E" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["E" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["E" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["F" + rowcnt1].NumberValue = Convert.ToDouble(ffsum);
                    sheet.Range["F" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["F" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["F" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["G" + rowcnt1].NumberValue = Convert.ToDouble(ggsum);
                    sheet.Range["G" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["G" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["G" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["H" + rowcnt1].NumberValue = Convert.ToDouble(hhsum);
                    sheet.Range["H" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["H" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["H" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["I" + rowcnt1].NumberValue = Convert.ToDouble(iisum);
                    //           sheet.Range["I" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["I" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["I" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["B" + rowcnt1].Value = "Carried Over";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    CellRange range55 = sheet.Range["A6:" + "I" + rowcnt1];
                    range55.Borders.LineStyle = LineStyleType.Thin;
                    range55.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range55.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    rowcnt1 = 47;

                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(ccsum);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["C" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["D" + rowcnt1].NumberValue = Convert.ToDouble(ddsum);
                    sheet.Range["D" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["E" + rowcnt1].NumberValue = Convert.ToDouble(eesum);
                    sheet.Range["E" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["E" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["E" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["F" + rowcnt1].NumberValue = Convert.ToDouble(ffsum);
                    sheet.Range["F" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["F" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["F" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["G" + rowcnt1].NumberValue = Convert.ToDouble(ggsum);
                    sheet.Range["G" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["G" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["G" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["H" + rowcnt1].NumberValue = Convert.ToDouble(hhsum);
                    sheet.Range["H" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["H" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["H" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["I" + rowcnt1].NumberValue = Convert.ToDouble(iisum);
                    //     sheet.Range["I" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["I" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["I" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["B" + rowcnt1].Value = "Brought forward";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    CellRange range5511 = sheet.Range["A" + rowcnt1 + ":" + "I" + rowcnt1];
                    range5511.Borders.LineStyle = LineStyleType.Thin;
                    range5511.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range5511.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    rowcnt1 = rowcnt1 + 1;
                    decimal value11 = YearEndingObj.removed(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));

                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value11);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Removed Chit Members Credit";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    decimal value22 = Outstunpaid[0];
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value22);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Unpaid Prized money (Ledger Credit)";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    decimal value33 = YearEndingObj.chitcollection(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value33);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Chit Collection to be Accounted";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    decimal value88 = value11 + value22 + value33 + ccsum;
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value88);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Total";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    decimal value44 = Outstunpaid[1];
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value44);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Less Amount actually paid by the Subscribers";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    decimal value66 = value88 - value44;
                    rowcnt1 = rowcnt1 + 1;
                    sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value66);
                    sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                    sheet.Range["B" + rowcnt1].Value = "Total";
                    sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                    sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                    if (CreditDt1.Rows.Count > 0)
                    {
                        // DataRow lastRow1 = dtM.Rows[dtM.Rows.Count - 1];
                        decimal value55 = Prized + NonPrized;
                        rowcnt1 = rowcnt1 + 1;
                        sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value55);
                        sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                        sheet.Range["B" + rowcnt1].Value = "Add Total Dividend 5(A)";
                        sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                        sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;

                        decimal value77 = value66 + value55;
                        rowcnt1 = rowcnt1 + 1;
                        sheet.Range["C" + rowcnt1].NumberValue = Convert.ToDouble(value77);
                        sheet.Range["C" + rowcnt1].NumberFormat = "#,##0.00";
                        sheet.Range["B" + rowcnt1].Value = "Balance";
                        sheet.Range["B" + rowcnt1].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["B" + rowcnt1].Style.Font.IsBold = true;
                        sheet.Range["C" + rowcnt1].Style.Font.IsBold = true;
                        CellRange range565 = sheet.Range["A47:" + "I" + rowcnt1];
                        range565.Borders.LineStyle = LineStyleType.Thin;
                        range565.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range565.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    }
                    //rowcnt1 = rowcnt1 + 2;
                    //CellRange range33 = sheet.Range["A" + rowcnt1 + ":I" + rowcnt1 + ""];
                    //range33.BorderAround(LineStyleType.Medium, Color.Black);
                }
                //DataRow lastRow = dtBind.Rows[dtBind.Rows.Count - 1];
                //decimal last1 = 0;
                //gcredit = Convert.ToDecimal(lastRow.ItemArray[2].ToString());
                //nonprized = Convert.ToDecimal(lastRow.ItemArray[3].ToString());
                //totalnonprized = Convert.ToDecimal(lastRow.ItemArray[4].ToString());
                //arrear = Convert.ToDecimal(lastRow.ItemArray[5].ToString());
                //outstanding = Convert.ToDecimal(lastRow.ItemArray[6].ToString());
                //foraman = Convert.ToDecimal(lastRow.ItemArray[7].ToString());
                //formanchit = Convert.ToDecimal(lastRow.ItemArray[8].ToString());


                //rowcnt1 = rowcnt1 + 2;
                //CellRange range1 = sheet.Range["A5:" + "I" + rowcnt1];
                //range1.BorderAround(LineStyleType.Medium, Color.Black);

                //    rowcnt1 = rowcnt1 + 6;

                //CellRange range2 = sheet.Range["A70:I71"];
                //range2.Borders.LineStyle = LineStyleType.Double;
                //range2.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                //range2.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                //sheet.Range["A70:A71"].Merge();
                //sheet.Range["A70"].Value = "Sl.No.";
                //RichText richText13 = sheet.Range["A70"].RichText;
                //richText13.SetFont(0, richText13.Text.Length - 1, fontBold);
                //sheet.Range["A70"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["A70"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["B70:B71"].Merge();
                //sheet.Range["B70"].Value = "Group Number";
                //RichText richText14 = sheet.Range["B70"].RichText;
                //richText14.SetFont(0, richText14.Text.Length - 1, fontBold);
                //sheet.Range["B70"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["B70"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["C70:C71"].Merge();
                //sheet.Range["C70"].Value = "Gross Credit excluding Divident";
                //RichText richText15 = sheet.Range["C70"].RichText;
                //richText15.SetFont(0, richText15.Text.Length - 1, fontBold);
                //sheet.Range["C70"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["C70"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["D70:D71"].Merge();
                //sheet.Range["D70"].Value = "Non prized subscribers Divident";
                //RichText richText16 = sheet.Range["D70"].RichText;
                //richText16.SetFont(0, richText16.Text.Length - 1, fontBold);
                //sheet.Range["D70"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["D70"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["E70:E71"].Merge();
                //sheet.Range["E70"].Value = "Arrears due from Non Prized Subscribers";
                //RichText richText17 = sheet.Range["E70"].RichText;
                //richText17.SetFont(0, richText17.Text.Length - 1, fontBold);
                //sheet.Range["E70"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["E70"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["F70:F71"].Merge();
                //sheet.Range["F70"].Value = "Liability in Foreman & Foreman substituted chits after deducting call amount";
                //RichText richText18 = sheet.Range["F70"].RichText;
                //richText18.SetFont(0, richText18.Text.Length - 1, fontBold);
                //sheet.Range["F70"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["F70"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["G70:G71"].Merge();
                //sheet.Range["G70"].Value = "Outstanding Prize Money Payable";
                //RichText richText19 = sheet.Range["G70"].RichText;
                //richText19.SetFont(0, richText19.Text.Length - 1, fontBold);
                //sheet.Range["G70"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["G70"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["H70:H71"].Merge();
                //sheet.Range["H70"].Value = "Total Amount of Foreman Chits prized";
                //RichText richText20 = sheet.Range["H70"].RichText;
                //richText20.SetFont(0, richText20.Text.Length - 1, fontBold);
                //sheet.Range["H70"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["H70"].Style.VerticalAlignment = VerticalAlignType.Center;


                //sheet.Range["I70:I71"].Merge();
                //sheet.Range["I70"].Value = "Total Number of Non-Prized Subscribers";
                //RichText richText21 = sheet.Range["I70"].RichText;
                //richText21.SetFont(0, richText21.Text.Length - 1, fontBold);
                //sheet.Range["I70"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["I70"].Style.VerticalAlignment = VerticalAlignType.Center;



                //int rowcnt2 = 71;
                //rowcnt2 = rowcnt2 + 1;
                //sheet.Range["C" + rowcnt2].NumberValue = Convert.ToDouble(gcredit);
                //sheet.Range["C" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["D" + rowcnt2].NumberValue = Convert.ToDouble(nonprized);
                //sheet.Range["D" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["I" + rowcnt2].NumberValue = Convert.ToDouble(totalnonprized);
                //sheet.Range["I" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["E" + rowcnt2].NumberValue = Convert.ToDouble(arrear);
                //sheet.Range["E" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["G" + rowcnt2].NumberValue = Convert.ToDouble(outstanding);
                //sheet.Range["G" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["F" + rowcnt2].NumberValue = Convert.ToDouble(foraman);
                //sheet.Range["F" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["H" + rowcnt2].NumberValue = Convert.ToDouble(formanchit);
                //sheet.Range["H" + rowcnt2].NumberFormat = "#,##0.00";


                //last1 = Convert.ToDecimal(lastRow.ItemArray[2].ToString());


                //decimal value = YearEndingObj.removed(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                //rowcnt2 = rowcnt2 + 1;
                //sheet.Range["C" + rowcnt2].Value = Convert.ToString(value);
                //sheet.Range["C" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["B" + rowcnt2].Value = "Removed Chit Members Credit";

                //decimal value2 = YearEndingObj.unpaid(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                //rowcnt2 = rowcnt2 + 1;
                //sheet.Range["C" + rowcnt2].Value = Convert.ToString(value2);
                //sheet.Range["C" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["B" + rowcnt2].Value = "Unpaid Prized money (Ledger Credit)";

                //decimal value1 = YearEndingObj.chitcollection(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                //rowcnt2 = rowcnt2 + 1;
                //sheet.Range["C" + rowcnt2].Value = Convert.ToString(value1);
                //sheet.Range["C" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["B" + rowcnt2].Value = "Chit Collection to be Accounted";

                //finaltotal = value + value2 + value1 + last1;
                //rowcnt2 = rowcnt2+ 1;
                //sheet.Range["C" + rowcnt2].Value = Convert.ToString(finaltotal);
                //sheet.Range["B" + rowcnt2].Value = "Total";


                //prizedAmount = Convert.ToDecimal(lastRow1.ItemArray[0].ToString());
                //rowcnt2 = rowcnt2 + 1;
                //sheet.Range["C" + rowcnt2].Value = Convert.ToString(prizedAmount);
                //sheet.Range["C" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["B" + rowcnt2].Value = "Less Amount actually paid by the Subscribers";


                //finaltotal2 = finaltotal - prizedAmount;
                //rowcnt2 = rowcnt2 + 1;
                //sheet.Range["C" + rowcnt2].Value = Convert.ToString(finaltotal2);
                //sheet.Range["C" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["B" + rowcnt2].Value = "Total";

                //totalamountofkaser = Convert.ToDecimal(lastRow1.ItemArray[1].ToString());
                //rowcnt1 = rowcnt1 + 1;
                //sheet.Range["C" + rowcnt2].Value = Convert.ToString(totalamountofkaser);
                //sheet.Range["C" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["B" + rowcnt2].Value = "Total Kasar 5(A)";

                //finaltotal3 = finaltotal2 + totalamountofkaser;
                //rowcnt2 = rowcnt2 + 1;
                //sheet.Range["C" + rowcnt2].Value = Convert.ToString(finaltotal3);
                //sheet.Range["C" + rowcnt2].NumberFormat = "#,##0.00";
                //sheet.Range["B" + rowcnt2].Value = "Balance";

                //rowcnt2 = rowcnt2 + 2;
                //CellRange range3 = sheet.Range["A71:" + "I" + rowcnt2];
                //range3.BorderAround(LineStyleType.Medium, Color.Black);

                //CellRange range5 = sheet.Range["A6:" + "I" + rowcnt1];
                //range5.Borders.LineStyle = LineStyleType.Thin;
                //range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                //range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                //sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(1, 9);
                sheet.SetColumnWidth(2, 15);
                sheet.SetColumnWidth(3, 15);
                sheet.SetColumnWidth(4, 15);
                sheet.SetColumnWidth(5, 15);
                sheet.SetColumnWidth(6, 15);
                sheet.SetColumnWidth(7, 15);
                sheet.SetColumnWidth(8, 15);
                sheet.SetColumnWidth(9, 18);
                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);


                workbook.SaveToHttpResponse("Liability in Chit st-23.xlsx", HttpContext.Current.Response);
            }
            catch (Exception ex)
            {
                LogCls.LogError(ex, "YearEndingBooklet-st-23");
            }
            //workbook.SaveToFile(@"C:\Excel\Lia.xlsx");
        }

        protected void BtnDecreeCourcostSt07_Click(object sender, EventArgs e)
        {
            try
            {
                //  YearEndingObj.degree(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value), filepath);
                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                var dtBind = YearEndingObj.binddegree(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));

                sheet.Name = "Decree & Court cost St-07";
                //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");
                sheet.Pictures.Add(1, 1, filepath);
                CellRange range = sheet.Range["A4:J5"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.Range["B1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["B1"].RichText;
                richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["B" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["B" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["B" + bb + ""].Value = "Branch: " + branchtext;
                    RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }



                sheet.Range["I1"].Value = "Statement No. 07";
                RichText richText27 = sheet.Range["I1"].RichText;
                richText27.SetFont(0, richText27.Text.Length - 1, fontBold);
                sheet.Range["I1:J1"].Merge();

                sheet.Range["A3"].Value = "Particulars of Decree and Court Cost paid as at" + txtToDate.Text;
                RichText richText03 = sheet.Range["A3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["A3:J3"].Merge();

                sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                sheet.Range["A4:A5"].Merge();
                sheet.Range["A4"].Value = "Sl.No.";
                RichText richText04 = sheet.Range["A4"].RichText;
                richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["B4:B5"].Merge();
                sheet.Range["B4"].Value = "Chit Number";
                RichText richText05 = sheet.Range["B4"].RichText;
                richText05.SetFont(0, richText05.Text.Length - 1, fontBold);
                sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["C4:C5"].Merge();
                sheet.Range["C4"].Value = "Company case Number";
                RichText richText06 = sheet.Range["C4"].RichText;
                richText06.SetFont(0, richText06.Text.Length - 1, fontBold);
                sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["D4:E4"].Merge();
                sheet.Range["D4"].Value = "CASE DETAILS";
                RichText richText07 = sheet.Range["D4"].RichText;
                richText07.SetFont(0, richText07.Text.Length - 1, fontBold);
                sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;


                sheet.Range["D5"].Value = "Suit No";
                RichText richText08 = sheet.Range["D5"].RichText;
                richText08.SetFont(0, richText08.Text.Length - 1, fontBold);
                sheet.Range["D5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D5"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["F4:F5"].Merge();
                sheet.Range["E5"].Value = "ARC Court/DRO";
                RichText richText09 = sheet.Range["E5"].RichText;
                richText09.SetFont(0, richText09.Text.Length - 1, fontBold);
                sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["F5"].Value = "Place";
                //RichText richText10 = sheet.Range["F5"].RichText;
                //richText10.SetFont(0, richText10.Text.Length - 1, fontBold);
                //sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                //sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["F4:F5"].Merge();
                sheet.Range["F4"].Value = "Name of the Defendent";
                RichText richText11 = sheet.Range["F4"].RichText;
                richText11.SetFont(0, richText11.Text.Length - 1, fontBold);
                sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["G4:H4"].Merge();
                sheet.Range["G4"].Value = "DECREE";
                RichText richText12 = sheet.Range["G4"].RichText;
                richText12.SetFont(0, richText12.Text.Length - 1, fontBold);
                sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["G5"].Value = "Credit";
                RichText richText13 = sheet.Range["G5"].RichText;
                richText13.SetFont(0, richText13.Text.Length - 1, fontBold);
                sheet.Range["G5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["H5"].Value = "Debit";
                RichText richText14 = sheet.Range["H5"].RichText;
                richText14.SetFont(0, richText14.Text.Length - 1, fontBold);
                sheet.Range["H5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["H5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["I4:J4"].Merge();
                sheet.Range["I4"].Value = "Court Cost paid";
                RichText richText15 = sheet.Range["I4"].RichText;
                richText15.SetFont(0, richText15.Text.Length - 1, fontBold);
                sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;


                sheet.Range["I5"].Value = "Credit";
                RichText richText16 = sheet.Range["I5"].RichText;
                richText16.SetFont(0, richText16.Text.Length - 1, fontBold);
                sheet.Range["I5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["J5"].Value = "Debit";
                RichText richText17 = sheet.Range["J5"].RichText;
                richText17.SetFont(0, richText17.Text.Length - 1, fontBold);
                sheet.Range["J5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["J5"].Style.VerticalAlignment = VerticalAlignType.Center;





                int rowcnt = 5;
                //    int rowcnt = 5;
                foreach (DataRow dr in dtBind.Rows)
                {
                    rowcnt = rowcnt + 1;
                    if (dr.ItemArray[4].ToString().Trim() == "Total")
                    {
                        rowcnt = 30;
                        sheet.Range["F" + rowcnt].Value = dr.ItemArray[4].ToString();
                        sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["G" + rowcnt].Value = dr.ItemArray[5].ToString();
                        sheet.Range["G" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["H" + rowcnt].Value = dr.ItemArray[6].ToString();
                        sheet.Range["H" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["H" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["I" + rowcnt].Value = dr.ItemArray[7].ToString();
                        sheet.Range["I" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[8]);
                        sheet.Range["J" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["J" + rowcnt].Style.Font.IsBold = true;
                        CellRange range5 = sheet.Range["A6:" + "J" + rowcnt];
                        range5.Borders.LineStyle = LineStyleType.Thin;
                        range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    }
                    else
                    {

                        sheet.Range["A" + rowcnt].Value = dr.ItemArray[0].ToString();
                        sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                        sheet.Range["C" + rowcnt].Value = dr.ItemArray[2].ToString();
                        sheet.Range["C" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["D" + rowcnt].Value = dr.ItemArray[3].ToString();
                        sheet.Range["F" + rowcnt].Value = dr.ItemArray[4].ToString();
                        sheet.Range["G" + rowcnt].Value = dr.ItemArray[5].ToString();
                        sheet.Range["H" + rowcnt].Value = dr.ItemArray[6].ToString();
                        sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["I" + rowcnt].Value = dr.ItemArray[7].ToString();
                        sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[8]);
                        sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["E" + rowcnt].Value = dr.ItemArray[9].ToString() + "//" + dr.ItemArray[11].ToString() + "//" + dr.ItemArray[10].ToString();
                        // sheet.Range["F" + rowcnt].Value = dr.ItemArray[10].ToString();

                        CellRange range5 = sheet.Range["A6:" + "J" + rowcnt];
                        range5.Borders.LineStyle = LineStyleType.Thin;
                        range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    }

                }
                rowcnt = rowcnt + 2;

                //CellRange range1 = sheet.Range["A5:" + "J" + rowcnt];
                //range1.BorderAround(LineStyleType.Medium, Color.Black);



                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(8, 13);
                sheet.SetColumnWidth(7, 13);
                sheet.SetColumnWidth(9, 13);
                sheet.SetColumnWidth(10, 13);
                sheet.SetColumnWidth(1, 9);
                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);



                workbook.SaveToHttpResponse("DegreeCourtcost st-07.xlsx", HttpContext.Current.Response);
            }
            catch (Exception ex) { }

        }

        protected void btnRentpaidSt15_Click(object sender, EventArgs e)
        {
            try
            {
                //ClsYeb.Rentpaid(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value,filepath);
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;


                sheet.Name = "Rent paid St- 15";

                rentpaid = ClsYeb.BindRentpaid(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);

                string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + drpdownBranchlist.SelectedItem.Value + ";");

                sheet.Pictures.Add(1, 1, filepath);


                CellRange range = sheet.Range["A4:I5"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["C1"].RichText;
                richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + branchname;
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }

                sheet.Range["I1"].Value = "Statement No. 15";
                RichText richText27 = sheet.Range["I1"].RichText;
                richText27.SetFont(0, richText27.Text.Length - 1, fontBold);
                //sheet.Range["H1:I1"].Merge();

                string[] values = txtToDate.Text.Split('/');

                int datelt = Convert.ToInt32(values[2]);
                string fstdt = (datelt - 1).ToString();
                string scnddt = datelt.ToString();

                sheet.Range["A3"].Value = "Particulars of Rent paid during the financial year " + fstdt + "-" + scnddt;
                RichText richText03 = sheet.Range["A3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["A3:I3"].Merge();

                sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                sheet.Range["A4:A5"].Merge();
                sheet.Range["A4"].Value = "Sl.No.";
                sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["A4"].Style.Font.IsBold = true;


                sheet.Range["B4:B5"].Merge();
                sheet.Range["B4"].Value = "Full Address of the Building Occupied";
                sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["B4"].Style.Font.IsBold = true;

                sheet.Range["C4:C5"].Merge();
                sheet.Range["C4"].Text = "Nature of occupation like office, Record Room, Staff Room and Car shed";
                sheet.Range["C4"].Style.WrapText = true;
                sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["C4"].Style.Font.IsBold = true;

                sheet.Range["D4:D5"].Merge();
                sheet.Range["D4"].Text = "Rate of Rent per Month";
                sheet.Range["D4"].Style.WrapText = true;
                sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["D4"].Style.Font.IsBold = true;

                sheet.Range["E4:F4"].Merge();
                sheet.Range["E4"].Value = "Period of Rent";
                sheet.Range["E4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["E4"].Style.Font.IsBold = true;
                sheet.Range["E4"].Style.WrapText = true;

                sheet.Range["E5"].Value = "From";
                sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["E5"].Style.Font.IsBold = true;

                sheet.Range["F5"].Value = "To";
                sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["F5"].Style.Font.IsBold = true;

                sheet.Range["G4:G5"].Merge();
                sheet.Range["G4"].Text = "Total Rent paid";
                sheet.Range["G4"].Style.WrapText = true;
                sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["G4"].Style.Font.IsBold = true;

                sheet.Range["H4:H5"].Merge();
                sheet.Range["H4"].Text = "Amount of Rent Advance paid";
                sheet.Range["H4"].Style.WrapText = true;
                sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["H4"].Style.Font.IsBold = true;

                sheet.Range["I4:I5"].Merge();
                sheet.Range["I4"].Value = "Full Residential address of the Building Owner";
                sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;
                sheet.Range["I4"].Style.Font.IsBold = true;

                int rowcnt = 5;
                int slno = 0;

                decimal Total = 0;

                foreach (DataRow dr in rentpaid.Rows)
                {
                    slno = slno + 1;
                    rowcnt = rowcnt + 2;
                    sheet.Range["A" + rowcnt].Value = slno.ToString();
                    sheet.Range["B" + rowcnt].Value = dr.ItemArray[3].ToString();
                    sheet.Range["C" + rowcnt].Value = dr.ItemArray[5].ToString();
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[6]);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["E" + rowcnt].Value = dr.ItemArray[1].ToString();
                    sheet.Range["F" + rowcnt].Value = dr.ItemArray[2].ToString();
                    sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[0]);
                    sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["H" + rowcnt].Value = "";
                    //         sheet.Range["I" + rowcnt].Value = dr.ItemArray[5].ToString();

                    Total = Total + Convert.ToDecimal(dr.ItemArray[0]);
                    CellRange range5 = sheet.Range["A6:" + "I" + rowcnt];
                    range5.Borders.LineStyle = LineStyleType.Thin;
                    range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                }

                rowcnt = rowcnt + 2;

                sheet.Range["F" + rowcnt].Value = "Total";
                RichText richText04 = sheet.Range["F" + rowcnt].RichText;
                richText04.SetFont(0, richText04.Text.Length - 1, fontBold);

                sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(Total);
                sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["G" + rowcnt].Style.Font.IsBold = true;

                CellRange range55 = sheet.Range["A6:" + "I" + rowcnt];
                range55.Borders.LineStyle = LineStyleType.Thin;
                range55.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range55.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(1, 9);
                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);

                string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

                //workbook.SaveToFile(outputlocation + "RentpaidSt-15" + "_" + timestamp + ".xlsx");
                //System.Diagnostics.Process.Start(outputlocation + "RentpaidSt-15" + "_" + timestamp + ".xlsx");
                workbook.SaveToHttpResponse("RentpaidSt-15.xlsx", HttpContext.Current.Response);
            }
            catch (Exception) { }


        }

        protected void btnBaddebtswrittenoffSt18_Click(object sender, EventArgs e)
        {
            // ClsYeb.Baddebts(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value,filepath);
            try
            {
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                sheet.Name = "Baddebts written off St- 18";

                string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + drpdownBranchlist.SelectedItem.Value + ";");

                sheet.Pictures.Add(1, 1, filepath);

                CellRange range = sheet.Range["A4:L5"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["C1"].RichText;
                richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + branchname;
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }


                sheet.Range["K1:L1"].Merge();
                sheet.Range["K1"].Value = "Statement No.  18";
                sheet.Range["K1"].HorizontalAlignment = HorizontalAlignType.Center;
                RichText richText05 = sheet.Range["K1"].RichText;
                richText05.SetFont(0, richText05.Text.Length - 1, fontBold);


                string[] values = txtToDate.Text.Split('/');

                int datelt = Convert.ToInt32(values[2]);
                string fstdt = (datelt - 1).ToString();
                string scnddt = datelt.ToString();

                sheet.Range["A3"].Value = "Particulars of Bad Debts written off during the financial year  " + fstdt + "-" + scnddt;
                RichText richText03 = sheet.Range["A3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["A3:L3"].Merge();

                sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                sheet.Range["A4:A5"].Merge();
                sheet.Range["A4"].Value = "Sl.No.";
                sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;


                sheet.Range["B4:G4"].Merge();
                sheet.Range["B4"].Value = "CASE DETAILS";
                sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["B5"].Value = "Chit Number";
                sheet.Range["B5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["C5"].Value = "C.C Number";
                sheet.Range["C5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["D5"].Value = "Case Number";
                sheet.Range["D5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["E5"].Value = "Year";
                sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["F5"].Value = "Court";
                sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["G5"].Value = "Place";
                sheet.Range["G5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G5"].Style.VerticalAlignment = VerticalAlignType.Center;


                sheet.Range["H4:H5"].Merge();
                sheet.Range["H4"].Value = "Name and Full address of the Defendants";
                sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["I4:K4"].Merge();
                sheet.Range["I4"].Value = "BAD DEBTS WRITTEN OFF";
                sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["I5"].Value = "Decree Amount";
                sheet.Range["I5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["J5"].Value = "Cost Amount";
                sheet.Range["J5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["J5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["K5"].Value = "Total amount written off";
                sheet.Range["K5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["K5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["L4:L5"].Merge();
                sheet.Range["L4"].Value = "Detailed Report for written off the amount";
                sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;



                int rowcnt = 5;
                decimal crsum = 0;
                decimal drsum = 0;
                decimal Totalsum = 0, totals = 0, costamount = 0, cstamt = 0;



                #region Baddebts

                string qry = @"select uuid_from_bin(DualTransactionKey) as Dukey from voucher where ChoosenDate between '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID=" + drpdownBranchlist.SelectedValue + " and Head_Id=135;";

                DataTable dttranskey = balayer.GetDataTable(qry);
                int ss = 0;
                foreach (DataRow ddr in dttranskey.Rows)
                {

                    string qryy = @"select v1.Amount as Amount,v1.Head_Id as Headid,tc.CC as CC,SUBSTRING_INDEX( tc.Number, '/', 1) as Number,SUBSTRING_INDEX( tc.Number, '/', -1) as year,(select SUBSTRING_INDEX( Node, ' ', 1 ) as node from headstree where NodeID = v1.Head_Id ) as node,(SELECT 
                               SUBSTRING_INDEX(Node, ' ', - 1) AS node
                                  FROM
                                  headstree
                                  WHERE
                              NodeID = v1.Head_Id) AS node1 from voucher as v1 join transcourt as tc on(tc.TransactionKey=v1.TransactionKey) where v1.DualTransactionKey = uuid_to_bin('" + ddr.ItemArray[0] + "')  and v1.BranchID = " + drpdownBranchlist.SelectedValue + " and v1.Voucher_Type='C' and tc.VoucherType='C';";


                    baddebts = balayer.GetDataTable(qryy);

                    var newDt = baddebts.AsEnumerable()
                   .GroupBy(r => r.Field<UInt32>("Headid"))
                   .Select(g =>
                   {
                       var row = baddebts.NewRow();

                       row["Headid"] = g.Key;
                       row["Amount"] = g.Sum(r => r.Field<Decimal>("Amount"));

                       return row;
                   }).CopyToDataTable();

                    newDt.Columns.Remove("CC");
                    newDt.Columns.Remove("Number");
                    newDt.Columns.Remove("Year");
                    newDt.Columns.Remove("node");
                    newDt.Columns.Remove("node1");

                    var unique = baddebts.AsEnumerable()
                           .GroupBy(x => x.Field<UInt32>("Headid"))
                           .Select(g => g.First()).CopyToDataTable();


                    var val1 = unique.Columns[4].DataType;

                    var JoinResult = (from p in newDt.AsEnumerable()
                                      join t in unique.AsEnumerable()
                                      on p.Field<UInt32>("Headid") equals t.Field<UInt32>("Headid")
                                      select new
                                      {
                                          Headid = p.Field<UInt32>("Headid"),
                                          Amount = p.Field<Decimal>("Amount"),
                                          CC = t.Field<string>("CC"),
                                          Number = t.Field<string>("Number"),
                                          Year = t.Field<string>("Year"),
                                          node = t.Field<string>("node"),
                                          node1 = t.Field<string>("node1")

                                      }).ToList();


                    //foreach (DataRow dr in newDt.Rows)

                    int inc = 0;
                    decimal total = 0;

                    foreach (var ddd in JoinResult)
                    {
                        ss = ss + 1;
                        string qrydecree = @"SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(TreeHint, ',', 2 ),',',-1) as id FROM svcf.headstree where NodeID='" + ddd.Headid + "';";

                        string val = balayer.GetSingleValue(qrydecree);

                        //DataRow[] dataPer = (from myRow in baddebts.AsEnumerable()
                        //                     where myRow.Field<UInt32>("Headid") == Convert.ToInt32(ddd.Headid)
                        //                     select myRow).ToArray();

                        List<ListItem> memgrp = new List<ListItem>();

                        if ((ddd.node.ToString()).Contains("/"))
                        {
                            memgrp = balayer.Getlistdata("SELECT MemberName,MemberAddress FROM svcf.membertogroupmaster where GrpMemberID='" + ddd.node.ToString() + "';");
                        }
                        else if ((ddd.node1.ToString()).Contains("/"))
                        {
                            memgrp = balayer.Getlistdata("SELECT MemberName,MemberAddress FROM svcf.membertogroupmaster where GrpMemberID='" + ddd.node1.ToString() + "';");
                        }

                        if (inc == 0)
                        {

                            rowcnt = rowcnt + 1;

                            if ((ddd.node.ToString()).Contains("/"))
                            {
                                sheet.Range["B" + rowcnt].Value = ddd.node.ToString();
                            }
                            else if ((ddd.node1.ToString()).Contains("/"))
                            {
                                sheet.Range["B" + rowcnt].Value = ddd.node1.ToString();
                            }
                            else
                            {
                                sheet.Range["B" + rowcnt].Value = ddd.node.ToString();
                            }
                            sheet.Range["A" + rowcnt].Value = ss.ToString();
                            sheet.Range["C" + rowcnt].Value = balayer.GetSingleValue("SELECT CC_Number FROM svcf.courtdetails where Head_ID=" + ddd.Headid + "");
                            sheet.Range["C" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
                            sheet.Range["D" + rowcnt].Value = balayer.GetSingleValue("SELECT Arc_Number FROM svcf.courtdetails where Head_ID=" + ddd.Headid + "");
                            sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
                            sheet.Range["E" + rowcnt].Value = balayer.GetSingleValue("SELECT ARCyear FROM svcf.courtdetails where Head_ID=" + ddd.Headid + "");
                            sheet.Range["E" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
                            sheet.Range["F" + rowcnt].Value = balayer.GetSingleValue("SELECT CourtComplex FROM svcf.courtdetails where Head_ID=" + ddd.Headid + "");
                            sheet.Range["F" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
                            sheet.Range["G" + rowcnt].Value = balayer.GetSingleValue("SELECT Court_Place FROM svcf.courtdetails where Head_ID=" + ddd.Headid + ""); ;
                            sheet.Range["G" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
                            if (memgrp.Count > 0)
                            {
                                sheet.Range["H" + rowcnt].Value = (memgrp[0].Value + ", " + memgrp[0].Text).ToString();
                            }

                            if (val == "51")
                            {
                                sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                                sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";

                                crsum = crsum + ddd.Amount;

                                total = total + ddd.Amount;

                            }
                            else if (val == "52")
                            {
                                //sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                                //sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                                costamount = ddd.Amount;
                                drsum = drsum + ddd.Amount;

                                total = total + ddd.Amount;


                            }
                            else if (val == "4638")
                            {
                                cstamt = ddd.Amount;
                                drsum = drsum + ddd.Amount;

                                total = total + ddd.Amount;
                            }
                            sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(costamount + cstamt);
                            sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                        }
                        else
                        {
                            if (JoinResult[inc - 1].node == JoinResult[inc].node)
                            {
                                if (val == "51")
                                {
                                    sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                                    sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";

                                    crsum = crsum + ddd.Amount;

                                    total = total + ddd.Amount;
                                }
                                else if (val == "52")
                                {
                                    //sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                                    //sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                                    costamount = ddd.Amount;

                                    drsum = drsum + ddd.Amount;

                                    total = total + ddd.Amount;
                                }
                                else if (val == "4638")
                                {
                                    cstamt = ddd.Amount;
                                    drsum = drsum + ddd.Amount;

                                    total = total + ddd.Amount;
                                }
                                sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(costamount + cstamt);
                                sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                                Totalsum = Totalsum + total;

                                sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(total);
                                sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                            }
                            else
                            {
                                rowcnt = rowcnt + 1;

                                if ((ddd.node.ToString()).Contains("/"))
                                {
                                    sheet.Range["B" + rowcnt].Value = ddd.node.ToString();
                                }
                                else if ((ddd.node1.ToString()).Contains("/"))
                                {
                                    sheet.Range["B" + rowcnt].Value = ddd.node1.ToString();
                                }
                                else
                                {
                                    sheet.Range["B" + rowcnt].Value = ddd.node.ToString();
                                }

                                sheet.Range["C" + rowcnt].Value = balayer.GetSingleValue("SELECT CC_Number FROM svcf.courtdetails where Head_ID=" + ddd.Headid + "");
                                sheet.Range["C" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
                                sheet.Range["D" + rowcnt].Value = balayer.GetSingleValue("SELECT Arc_Number FROM svcf.courtdetails where Head_ID=" + ddd.Headid + "");
                                sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
                                sheet.Range["E" + rowcnt].Value = balayer.GetSingleValue("SELECT ARCyear FROM svcf.courtdetails where Head_ID=" + ddd.Headid + "");
                                sheet.Range["E" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
                                sheet.Range["F" + rowcnt].Value = balayer.GetSingleValue("SELECT CourtComplex FROM svcf.courtdetails where Head_ID=" + ddd.Headid + "");
                                sheet.Range["F" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
                                sheet.Range["G" + rowcnt].Value = balayer.GetSingleValue("SELECT Court_Place FROM svcf.courtdetails where Head_ID=" + ddd.Headid + ""); ;
                                sheet.Range["G" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;

                                if (memgrp.Count > 0)
                                {
                                    sheet.Range["H" + rowcnt].Value = (memgrp[0].Value + ", " + memgrp[0].Text).ToString();
                                }

                                if (val == "51")
                                {
                                    sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                                    sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";

                                    crsum = crsum + ddd.Amount;

                                    total = total + ddd.Amount;


                                }
                                else if (val == "52")
                                {
                                    costamount = ddd.Amount;
                                    // cstamt = ddd.Amount;
                                    // sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(costamount+cstamt);
                                    // sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                                    drsum = drsum + ddd.Amount;
                                    total = total + ddd.Amount;
                                }
                                else if (val == "4638")
                                {
                                    cstamt = ddd.Amount;
                                    drsum = drsum + ddd.Amount;

                                    total = total + ddd.Amount;
                                }

                            }

                        }

                        inc = inc + 1;
                    }
                    sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(costamount + cstamt);
                    sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(total);
                    sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                    Totalsum = Totalsum + total;

                    total = 0;
                }
                #endregion


                rowcnt = 29;

                sheet.Range["H" + rowcnt].Value = "TOTAL";
                RichText richText04 = sheet.Range["H" + rowcnt].RichText;
                richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                sheet.Range["H" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

                sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(crsum);
                sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["I" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(drsum);
                sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["J" + rowcnt].Style.Font.IsBold = true;
                totals = crsum + drsum;
                sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(totals);
                sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
                CellRange range5 = sheet.Range["A6:" + "L" + rowcnt];
                range5.Borders.LineStyle = LineStyleType.Thin;
                range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                rowcnt = rowcnt + 2;

                //CellRange range1 = sheet.Range["A6:" + "L" + rowcnt];
                //range1.BorderAround(LineStyleType.Medium, Color.Black);


                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(1, 9);
                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);


                string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

                //workbook.SaveToFile(outputlocation + "BaddebtswrittenoffSt-18" + "_" + timestamp + ".xlsx");
                //System.Diagnostics.Process.Start(outputlocation + "BaddebtswrittenoffSt-18" + "_" + timestamp + ".xlsx");
                workbook.SaveToHttpResponse("BaddebtswrittenoffSt-18.xlsx", HttpContext.Current.Response);
            }
            catch (Exception) { }

        }

        protected void btnTrSt02_Click(object sender, EventArgs e)
        {
            try
            {
                //ClsYeb.TrialBalance(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value,filepath);
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                var dtbranch = ClsYeb.BindBranches(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                var dtinvest = ClsYeb.BindInvestments(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                var dtBank = ClsYeb.BindBanks(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                var Foreman = ClsYeb.BindForeman(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                var Decree = ClsYeb.BindDecree(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                var Loans = ClsYeb.BindLoans(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                var OtherItems = ClsYeb.BindOtherItems(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                var Stamps = ClsYeb.BindStamps(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                //BindChitTrial();
                var Chitheads = ClsYeb.BindChitAbstract(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                var Heads = ClsYeb.Bind12Heads(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                //BindOutstanding();

                firsttablerowcount = dtbranch.Rows.Count + 1;

                sheet.Name = "Tr. St-02";

                string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + drpdownBranchlist.SelectedItem.Value + ";");

                sheet.Pictures.Add(1, 1, filepath);

                CellRange range = sheet.Range["A4:D4"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                //dt.Clear();

                //List<DataRow> list = new List<DataRow>();
                sheet.Range["B1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["B1"].RichText;
                richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["B" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["B" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["B" + bb + ""].Value = "Branch: " + branchname;
                    RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }


                DateTime odate = DateTime.ParseExact(txtToDate.Text, @"d/M/yyyy",
    System.Globalization.CultureInfo.InvariantCulture);
                //string strDate = odate.ToString("MM/dd/yyyy");
                sheet.Range["H1"].Value = "Statement No.02";
                RichText richText77 = sheet.Range["H1"].RichText;
                richText77.SetFont(0, richText77.Text.Length - 1, fontBold);
                sheet.Range["H1:I1"].Merge();

                sheet.Range["A3"].Value = "TRIAL BALANCE AS AT " + balayer.Getstringdaymonth(txtToDate.Text) + "";
                RichText richText03 = sheet.Range["A3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["A3:I3"].Merge();

                sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;


                sheet.Range["A4"].Value = "Sl. No.";
                RichText richText = sheet.Range["A4"].RichText;
                richText.SetFont(0, richText.Text.Length - 1, fontBold);

                sheet.Range["B4"].Value = "HEADS";
                RichText richText1 = sheet.Range["B4"].RichText;
                richText1.SetFont(0, richText1.Text.Length - 1, fontBold);

                sheet.Range["C4"].Value = "CREDIT";
                RichText richText2 = sheet.Range["C4"].RichText;
                richText2.SetFont(0, richText2.Text.Length - 1, fontBold);

                sheet.Range["D4"].Value = "DEBIT";
                RichText richText3 = sheet.Range["D4"].RichText;
                richText3.SetFont(0, richText3.Text.Length - 1, fontBold);

                #region Branches

                //sheet.Range["A5"].Value = "I.";
                //RichText richText4 = sheet.Range["A5"].RichText;
                //richText4.SetFont(0, richText4.Text.Length - 1, fontBold);

                //sheet.Range["B5"].Value = "BRANCHES";
                //RichText richText5 = sheet.Range["B5"].RichText;
                //richText5.SetFont(0, richText5.Text.Length - 1, fontBold);

                ////sheet.Range["C5"].Value = "BRANCHES";
                ////sheet.Range["D5"].Value = "BRANCHES"; 


                //int rowcnt = 5;
                //if (Convert.ToInt32(drpdownBranchlist.SelectedItem.Value) == 161)
                //{
                //    rowcnt = rowcnt + 1;
                //    foreach (DataRow dr in dtbranch.Rows)
                //    {
                //        if (dr.ItemArray[1].ToString() == "Balance DR")
                //        {

                //            sheet.Range["B" + rowcnt].Value = "(After closing  DR." + Convert.ToDouble(dr.ItemArray[4]) + ")";
                //            // sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                //            //sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                //            //sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                //            //sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                //            // sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                //            // sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                //            // sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                //            CellRange range5 = sheet.Range["A5:" + "D" + rowcnt];
                //            range5.Borders.LineStyle = LineStyleType.Thin;
                //            range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                //            range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                //            rowcnt = rowcnt + 1;
                //        }
                //        else if (dr.ItemArray[1].ToString() == "Balance CR")
                //        {
                //            sheet.Range["B" + rowcnt].Value = "(After closing  CR." + Convert.ToDouble(dr.ItemArray[4]) + ")";
                //        }
                //    }
                //}
                //else
                //{

                //    foreach (DataRow dr in dtbranch.Rows)
                //    {
                //        rowcnt = rowcnt + 1;

                //        if (dr.ItemArray[1].ToString() == "Balance DR" || dr.ItemArray[1].ToString() == "Balance CR")
                //        {
                //            sheet.Range["B" + rowcnt].Value = "(After closing  DR.)";
                //            sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                //            sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                //            sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                //            sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                //            sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                //            sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                //            sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                //            CellRange range5 = sheet.Range["A5:" + "D" + rowcnt];
                //            range5.Borders.LineStyle = LineStyleType.Thin;
                //            range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                //            range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                //        }
                //        else
                //        {
                //            sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();

                //            sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                //            sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                //            sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                //            sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                //            CellRange range5 = sheet.Range["A5:" + "D" + rowcnt];
                //            range5.Borders.LineStyle = LineStyleType.Thin;
                //            range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                //            range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                //        }
                //    }
                //}

                var credir = "";
                decimal check1 = 0;
                decimal check2 = 0;
                decimal check3 = 0;
                decimal check4 = 0;
                decimal sp = 0;
                var creordeb = "";
                var dtbranch1 = ClsYeb.BindBranches2(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                //if (Convert.ToInt32(drpdownBranchlist.SelectedItem.Value) == 161)
                //{
                if (dtbranch1 == null || dtbranch1.Rows.Count == 0)
                {
                    check3 = Convert.ToDecimal("0.00");
                    check4 = Convert.ToDecimal("0.00");
                }
                foreach (DataRow dr in dtbranch1.Rows)
                {
                    if (dr.ItemArray[1].ToString() == "Balance CR")
                    {
                        creordeb = "CR";
                        check3 = Convert.ToDecimal(dr.ItemArray[3]);
                        check4 = Convert.ToDecimal(dr.ItemArray[4]);
                    }
                    else if (dr.ItemArray[1].ToString() == "Balance DR")
                    {
                        creordeb = "DR";
                        check3 = Convert.ToDecimal(dr.ItemArray[3]);
                        check4 = Convert.ToDecimal(dr.ItemArray[4]);
                    }
                }
                foreach (DataRow dr in dtbranch.Rows)
                {
                    if (dr.ItemArray[1].ToString() == "Balance CR")
                    {
                        creordeb = "CR";
                        check1 = Convert.ToDecimal(dr.ItemArray[3]);
                        check2 = Convert.ToDecimal(dr.ItemArray[4]);
                    }
                    else if (dr.ItemArray[1].ToString() == "Balance DR")
                    {
                        creordeb = "DR";
                        check1 = Convert.ToDecimal(dr.ItemArray[3]);
                        check2 = Convert.ToDecimal(dr.ItemArray[4]);
                    }
                }
                if (Convert.ToString(check1) == "0.00" && Convert.ToString(check3) == "0.00")
                {
                    sp = Math.Abs(check2 - check4);
                }
                else if (Convert.ToString(check2) == "0.00" && Convert.ToString(check4) == "0.00")
                {
                    sp = Math.Abs(check1 - check3);
                    if (check1 < check3)
                        creordeb = "DR";
                    else
                        creordeb = "CR";
                }
                else if (Convert.ToString(check1) == "0.00" && Convert.ToString(check4) == "0.00")
                {
                    sp = check2 + check3;

                }
                else if (Convert.ToString(check2) == "0.00" && Convert.ToString(check3) == "0.00")
                {
                    sp = check1 + check4;
                }
                //}
                //else
                //{
                // //   var dtbranch2 = ClsYeb.BindBranches2(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
                //    foreach (DataRow dr in dtbranch1.Rows)
                //    {
                //        if (dr.ItemArray[1].ToString() == "Balance CR")
                //        {
                //            creordeb = "CR";
                //            check3 = Convert.ToDecimal(dr.ItemArray[4]);
                //        }
                //        else if (dr.ItemArray[1].ToString() == "Balance DR")
                //        {
                //            creordeb = "DR";
                //            check4 = Convert.ToDecimal(dr.ItemArray[4]);
                //        }
                //    }
                //    foreach (DataRow dr in dtbranch.Rows)
                //    {
                //        if (dr.ItemArray[1].ToString() == "Balance CR")
                //        {

                //            check1 = Convert.ToDecimal(dr.ItemArray[4]);
                //        }
                //        else if (dr.ItemArray[1].ToString() == "Balance DR")
                //        {
                //            check2 = Convert.ToDecimal(dr.ItemArray[4]);
                //        }
                //    }
                //    if (Convert.ToString(check1) == "0.00" && Convert.ToString(check3) == "0.00")
                //    {
                //        sp = Math.Abs(check2 - check4);
                //    }
                //    else if (Convert.ToString(check2) == "0.00" && Convert.ToString(check4) == "0.00")
                //    {
                //        sp = Math.Abs(check1 - check3);
                //    }
                //    else if (Convert.ToString(check1) == "0.00" && Convert.ToString(check4) == "0.00")
                //    {
                //        sp = check2 + check3;

                //    }
                //    else if (Convert.ToString(check2) == "0.00" && Convert.ToString(check3) == "0.00")
                //    {
                //        sp = check1 + check4;
                //    }

                //}


                sheet.Range["A5"].Value = "I.";
                RichText richText4 = sheet.Range["A5"].RichText;
                richText4.SetFont(0, richText4.Text.Length - 1, fontBold);

                sheet.Range["B5"].Value = "BRANCHES";
                RichText richText5 = sheet.Range["B5"].RichText;
                richText5.SetFont(0, richText5.Text.Length - 1, fontBold);
                if (creordeb == "CR")
                {
                    sheet.Range["C5"].NumberValue = Convert.ToDouble(sp.ToString());
                    sheet.Range["C5"].NumberFormat = "#,##0.00";
                }
                else if (creordeb == "DR")
                {
                    sheet.Range["D5"].NumberValue = Convert.ToDouble(sp.ToString());
                    sheet.Range["D5"].NumberFormat = "#,##0.00";
                }

                int rowcnt = 5;
                if (Convert.ToInt32(drpdownBranchlist.SelectedItem.Value) == 161)
                {
                    rowcnt = rowcnt + 1;
                    foreach (DataRow dr in dtbranch.Rows)
                    {
                        if (dr.ItemArray[1].ToString() == "Balance DR")
                        {
                            // sheet.Range["B" + rowcnt].Value = "PALLATHUR";
                            //rowcnt = rowcnt + 1;
                            sheet.Range["B" + rowcnt].Value = "(After closing  DR." + Convert.ToDouble(dr.ItemArray[4]) + ")";
                            // sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                            //sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                            //sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                            //sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                            // sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                            // sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                            // sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                            CellRange range5 = sheet.Range["A5:" + "D" + rowcnt];
                            range5.Borders.LineStyle = LineStyleType.Thin;
                            range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                            range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                            rowcnt = rowcnt + 1;
                        }
                        else if (dr.ItemArray[1].ToString() == "Balance CR")
                        {
                            //sheet.Range["B" + rowcnt].Value = "PALLATHUR";
                            //rowcnt = rowcnt + 1;
                            sheet.Range["B" + rowcnt].Value = "(After closing  CR." + Convert.ToDouble(dr.ItemArray[3]) + ")";
                            CellRange range5 = sheet.Range["A5:" + "D" + rowcnt];
                            range5.Borders.LineStyle = LineStyleType.Thin;
                            range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                            range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                            rowcnt = rowcnt + 1;
                        }
                    }
                }
                else
                {
                    rowcnt = rowcnt + 1;
                    foreach (DataRow dr in dtbranch.Rows)
                    {
                        if (dr.ItemArray[1].ToString() == "Balance DR")
                        {
                            sheet.Range["B" + rowcnt].Value = "PALLATHUR";
                            rowcnt = rowcnt + 1;
                            sheet.Range["B" + rowcnt].Value = "(After closing  DR." + Convert.ToDouble(dr.ItemArray[4]) + ")";
                            // sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                            //sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                            //sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                            //sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                            // sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                            // sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                            // sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                            CellRange range5 = sheet.Range["A5:" + "D" + rowcnt];
                            range5.Borders.LineStyle = LineStyleType.Thin;
                            range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                            range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                            rowcnt = rowcnt + 1;
                        }
                        else if (dr.ItemArray[1].ToString() == "Balance CR")
                        {
                            sheet.Range["B" + rowcnt].Value = "PALLATHUR";
                            rowcnt = rowcnt + 1;
                            sheet.Range["B" + rowcnt].Value = "(After closing  CR." + Convert.ToDouble(dr.ItemArray[3]) + ")";
                            CellRange range5 = sheet.Range["A5:" + "D" + rowcnt];
                            range5.Borders.LineStyle = LineStyleType.Thin;
                            range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                            range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                            rowcnt = rowcnt + 1;
                        }
                    }
                    //if (creordeb == "CR")
                    //{

                    //    sheet.Range["B" + rowcnt].Value = "(After closing  CR." + sp + ")";
                    //    CellRange range5 = sheet.Range["A5:" + "D" + rowcnt];
                    //    range5.Borders.LineStyle = LineStyleType.Thin;
                    //    range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    //    range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    //}
                    //else if (creordeb == "DR")
                    //{
                    //    sheet.Range["B" + rowcnt].Value = "(After closing  DR." + sp + ")";
                    //    CellRange range5 = sheet.Range["A5:" + "D" + rowcnt];
                    //    range5.Borders.LineStyle = LineStyleType.Thin;
                    //    range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    //    range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    //}

                }
                if (creordeb == "CR")
                {
                    sheet.Range["B" + rowcnt].Value = "Balance CR";
                    sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(sp.ToString());
                    sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                }
                else if (creordeb == "DR")
                {
                    sheet.Range["B" + rowcnt].Value = "Balance DR";
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(sp.ToString());
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                }
                #endregion

                #region Investments

                rowcnt = rowcnt + 2;

                sheet.Range["A" + rowcnt].Value = "II.";
                RichText richText6 = sheet.Range["A" + rowcnt].RichText;
                richText6.SetFont(0, richText6.Text.Length - 1, fontBold);

                sheet.Range["B" + rowcnt].Value = "INVESTMENTS";
                RichText richText7 = sheet.Range["B" + rowcnt].RichText;
                richText7.SetFont(0, richText7.Text.Length - 1, fontBold);

                string prvcntstr = "";

                foreach (DataRow dr in dtinvest.Rows)
                {
                    rowcnt = rowcnt + 1;

                    if (dr.ItemArray[1].ToString() == "TOTAL" || dr.ItemArray[1].ToString() == "Balance DR")
                    {
                        sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                        sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                        sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].Style.Font.IsBold = true;

                        CellRange range16 = sheet.Range["A5:" + "D" + rowcnt];
                        range16.Borders.LineStyle = LineStyleType.Thin;
                        range16.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range16.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    }
                    else
                    {
                        sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                        sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                        sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";


                        CellRange range16 = sheet.Range["A5:" + "D" + rowcnt];
                        range16.Borders.LineStyle = LineStyleType.Thin;
                        range16.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range16.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    }
                }

                #endregion

                #region Banks

                rowcnt = rowcnt + 2;

                sheet.Range["A" + rowcnt].Value = "III.";
                RichText richText8 = sheet.Range["A" + rowcnt].RichText;
                richText8.SetFont(0, richText8.Text.Length - 1, fontBold);

                sheet.Range["B" + rowcnt].Value = "Banks";
                RichText richText9 = sheet.Range["B" + rowcnt].RichText;
                richText9.SetFont(0, richText9.Text.Length - 1, fontBold);


                foreach (DataRow dr in dtBank.Rows)
                {
                    rowcnt = rowcnt + 1;

                    if (dr.ItemArray[1].ToString() == "Scheduled Banks")
                    {
                        sheet.Range["A" + rowcnt].Value = "A.";
                        sheet.Range["A" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                        RichText richText10 = sheet.Range["A" + rowcnt].RichText;
                        richText10.SetFont(0, richText10.Text.Length - 1, fontBold);

                        sheet.Range["B" + rowcnt].Value = "Scheduled Banks";
                        RichText richText11 = sheet.Range["B" + rowcnt].RichText;
                        richText11.SetFont(0, richText11.Text.Length - 1, fontBold);

                        sheet.Range["C" + rowcnt].Value = "Balance DR";
                        RichText richText12 = sheet.Range["C" + rowcnt].RichText;
                        richText12.SetFont(0, richText12.Text.Length - 1, fontBold);

                        sheet.Range["D" + rowcnt].Value = "Total Amount";
                        RichText richText13 = sheet.Range["D" + rowcnt].RichText;
                        richText13.SetFont(0, richText13.Text.Length - 1, fontBold);

                    }
                    else if (dr.ItemArray[1].ToString() == "Fixed Deposit with Banks")
                    {
                        sheet.Range["A" + rowcnt].Value = "B.";
                        sheet.Range["A" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                        RichText richText14 = sheet.Range["A" + rowcnt].RichText;
                        richText14.SetFont(0, richText14.Text.Length - 1, fontBold);

                        sheet.Range["B" + rowcnt].Value = "Fixed Deposit with Banks";
                        RichText richText15 = sheet.Range["B" + rowcnt].RichText;
                        richText15.SetFont(0, richText15.Text.Length - 1, fontBold);

                    }
                    else
                    {
                        if (dr.ItemArray[1].ToString() == "TOTAL" || dr.ItemArray[1].ToString() == "Balance DR" || dr.ItemArray[1].ToString() == "Balance CR")
                        {
                            sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                            sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                            if(Convert.ToDouble(dr.ItemArray[4])>0)
                            {
                                if(Convert.ToDouble(dr.ItemArray[4])>Convert.ToDouble(dr.ItemArray[5]))
                                {
                                    sheet.Range["D" + rowcnt].NumberValue =(-1)*(Convert.ToDouble(dr.ItemArray[4])- Convert.ToDouble(dr.ItemArray[5]));
                                }
                                else
                                {
                                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5])-Convert.ToDouble(dr.ItemArray[4]);
                                }
                            }
                            else
                            {
                            sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
                            }
                            //sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
                            sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                            sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                        }
                        else
                        {
                            sheet.Range["A" + rowcnt].Value = dr.ItemArray[0].ToString();
                            sheet.Range["A" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                            sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString() + "..," + "A/C.No." + dr.ItemArray[3].ToString();
                            if (Convert.ToDouble(dr.ItemArray[4]) > Convert.ToDouble(dr.ItemArray[5]))
                            {
                                sheet.Range["C" + rowcnt].NumberValue =(-1)* Convert.ToDouble(dr.ItemArray[4]);
                                sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                            }
                            else
                            {
                            sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
                            sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                            }
                        }

                    }
                    CellRange range17 = sheet.Range["A5:" + "D" + rowcnt];
                    range17.Borders.LineStyle = LineStyleType.Thin;
                    range17.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range17.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }

                rowcnt = rowcnt + 2;

                comparefirst = rowcnt;

                //CellRange range1 = sheet.Range["A5:" + "D" + rowcnt];
                //range1.BorderAround(LineStyleType.Medium, Color.Black);


                #endregion


                #region Secound Table

                //Secound Vertical Table

                rowcnt = rowcnt + 3;

                CellRange range2 = sheet.Range["A" + rowcnt + ":D" + rowcnt];
                range2.Borders.LineStyle = LineStyleType.Double;
                range2.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range2.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                sheet.Range["A" + rowcnt].Value = "Sl. No.";
                RichText richText16 = sheet.Range["A" + rowcnt].RichText;
                richText16.SetFont(0, richText16.Text.Length - 1, fontBold);

                sheet.Range["B" + rowcnt].Value = "HEADS";
                RichText richText17 = sheet.Range["B" + rowcnt].RichText;
                richText17.SetFont(0, richText17.Text.Length - 1, fontBold);

                sheet.Range["C" + rowcnt].Value = "CREDIT";
                RichText richText18 = sheet.Range["C" + rowcnt].RichText;
                richText18.SetFont(0, richText18.Text.Length - 1, fontBold);

                sheet.Range["D" + rowcnt].Value = "DEBIT";
                RichText richText19 = sheet.Range["D" + rowcnt].RichText;
                richText19.SetFont(0, richText19.Text.Length - 1, fontBold);





                //****************


                #region FOREMAN CHITS

                rowcnt = rowcnt + 1;

                secondtablewidth = rowcnt;

                sheet.Range["A" + rowcnt].Value = "VI.";
                RichText richText20 = sheet.Range["A" + rowcnt].RichText;
                richText20.SetFont(0, richText20.Text.Length - 1, fontBold);

                sheet.Range["B" + rowcnt].Value = "FOREMAN CHITS";
                RichText richText21 = sheet.Range["B" + rowcnt].RichText;
                richText21.SetFont(0, richText21.Text.Length - 1, fontBold);

                sheet.Range["C" + rowcnt].Value = "Prize Money";
                RichText richText22 = sheet.Range["C" + rowcnt].RichText;
                richText22.SetFont(0, richText22.Text.Length - 1, fontBold);

                sheet.Range["D" + rowcnt].Value = "Call Amount";
                RichText richText23 = sheet.Range["D" + rowcnt].RichText;
                richText23.SetFont(0, richText23.Text.Length - 1, fontBold);

                CellRange range122281 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                range122281.Borders.LineStyle = LineStyleType.Thin;
                range122281.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range122281.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                DataTable tblforeman = new DataTable();

                if (Foreman.Rows.Count > 0)
                {

                    tblforeman = (from DataRow dr in Foreman.Rows
                                  where dr["SNo"].ToString() == "" && dr["SNo"].ToString() != "0"
                                  select dr).CopyToDataTable();
                }


                int sno = 0;

                foreach (DataRow dr in tblforeman.Rows)
                {
                    rowcnt = rowcnt + 1;
                    sno = sno + 1;

                    if (sno == 1)
                    {
                        sheet.Range["A" + rowcnt].Value = sno.ToString();
                        sheet.Range["B" + rowcnt].Value = "Foreman Chits";
                        sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                        sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        CellRange range12228 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                        range12228.Borders.LineStyle = LineStyleType.Thin;
                        range12228.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range12228.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    }
                    else if (sno == 2)
                    {
                        sheet.Range["A" + rowcnt].Value = sno.ToString();
                        sheet.Range["B" + rowcnt].Value = "Foreman Substituted Chits (Prized)";
                        sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                        sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        CellRange range181 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                        range181.Borders.LineStyle = LineStyleType.Thin;
                        range181.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range181.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    }
                    else if (sno == 3)
                    {
                        sheet.Range["A" + rowcnt].Value = sno.ToString();
                        sheet.Range["B" + rowcnt].Value = "Foreman Substituted Chits (Non Prized)";
                        sheet.Range["C" + rowcnt].Value = "";
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        CellRange range180 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                        range180.Borders.LineStyle = LineStyleType.Thin;
                        range180.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range180.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                        rowcnt = rowcnt + 1;

                        sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                        if (dr.ItemArray[1].ToString() == "TOTAL")
                        {
                            sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                        }
                        sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

                        sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                        sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(dr.ItemArray[3]) + Convert.ToDecimal(dr.ItemArray[5]));
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                        CellRange range118 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                        range118.Borders.LineStyle = LineStyleType.Thin;
                        range118.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range118.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                        var totDebit = Convert.ToDecimal(dr.ItemArray[3]) + Convert.ToDecimal(dr.ItemArray[5]);
                        if (Convert.ToDecimal(dr.ItemArray[2]) > totDebit)
                        {
                            rowcnt = rowcnt + 1;

                            sheet.Range["B" + rowcnt].Value = "Balance  Cr.";
                            RichText richText24 = sheet.Range["B" + rowcnt].RichText;
                            richText24.SetFont(0, richText24.Text.Length - 1, fontBold);
                            sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

                            //sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(dr.ItemArray[2]) - Convert.ToDecimal(dr.ItemArray[3]));
                            sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(dr.ItemArray[2]) - totDebit);
                            sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                            sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                            CellRange range2189 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                            range2189.Borders.LineStyle = LineStyleType.Thin;
                            range2189.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                            range2189.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                        }
                        else if (totDebit > Convert.ToDecimal(dr.ItemArray[2]))
                        {
                            rowcnt = rowcnt + 1;

                            sheet.Range["B" + rowcnt].Value = "Balance  Dr.";
                            RichText richText25 = sheet.Range["B" + rowcnt].RichText;
                            richText25.SetFont(0, richText25.Text.Length - 1, fontBold);
                            sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

                            sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(totDebit - Convert.ToDecimal(dr.ItemArray[2]));
                            sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                            sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                            CellRange range318 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                            range318.Borders.LineStyle = LineStyleType.Thin;
                            range318.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                            range318.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                        }

                    }


                    //CellRange range18 = sheet.Range["A5:" + "D" + rowcnt];
                    //range18.Borders.LineStyle = LineStyleType.Thin;
                    //range18.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    //range18.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }
                if (Foreman.Rows.Count == 0)
                {
                    rowcnt = rowcnt + 1;
                    sheet.Range["B" + rowcnt].Value = "TOTAL";
                    RichText richText25 = sheet.Range["B" + rowcnt].RichText;
                    richText25.SetFont(0, richText25.Text.Length - 1, fontBold);
                    sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

                    sheet.Range["D" + rowcnt].Value = "0.00";
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                    CellRange range318 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                    range318.Borders.LineStyle = LineStyleType.Thin;
                    range318.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range318.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    rowcnt = rowcnt + 1;
                    sheet.Range["B" + rowcnt].Value = "Balance  Dr.";
                    RichText richText125 = sheet.Range["B" + rowcnt].RichText;
                    richText125.SetFont(0, richText125.Text.Length - 1, fontBold);
                    sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

                    sheet.Range["D" + rowcnt].Value = "0.00";
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;

                    CellRange range1318 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                    range1318.Borders.LineStyle = LineStyleType.Thin;
                    range1318.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range1318.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                }

                #endregion


                #region Decree

                rowcnt = rowcnt + 1;

                sheet.Range["A" + rowcnt].Value = "VII.";
                RichText richText26 = sheet.Range["A" + rowcnt].RichText;
                richText26.SetFont(0, richText26.Text.Length - 1, fontBold);

                sheet.Range["B" + rowcnt].Value = "DECREE DEBTORS";
                RichText richText27 = sheet.Range["B" + rowcnt].RichText;
                richText27.SetFont(0, richText27.Text.Length - 1, fontBold);
                CellRange range18 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                range18.Borders.LineStyle = LineStyleType.Thin;
                range18.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range18.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                var listDecree = (from DataRow dr in Decree.Rows
                                  where dr["Name"].ToString() == "Total"
                                  select dr).ToList();


                decimal crtotalDecree = 0;
                decimal drtotalDecree = 0;
                decimal crtotalCourt = 0;
                decimal drtotalCourt = 0;
                decimal decreecourttotalcr = 0;
                decimal decreecourttotaldr = 0;
                decimal total_decreecourt = 0;
                decimal crcourt = 0;
                decimal drcourt = 0;

                foreach (var d in listDecree)
                {
                    rowcnt = rowcnt + 1;

                    sheet.Range["A" + rowcnt].Value = "1";
                    sheet.Range["B" + rowcnt].Value = "Balance in Decree A/c";
                    if (Convert.ToDecimal(d.ItemArray[8]) > Convert.ToDecimal(d.ItemArray[9]))
                    {
                        sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(d.ItemArray[8]) - Convert.ToDecimal(d.ItemArray[9]));
                        sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                        crtotalDecree = Convert.ToDecimal(d.ItemArray[8]) - Convert.ToDecimal(d.ItemArray[9]);
                    }
                    else if (Convert.ToDecimal(d.ItemArray[9]) > Convert.ToDecimal(d.ItemArray[8]))
                    {
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(d.ItemArray[9]) - Convert.ToDecimal(d.ItemArray[8]));
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        drtotalDecree = Convert.ToDecimal(d.ItemArray[9]) - Convert.ToDecimal(d.ItemArray[8]);
                    }
                    CellRange range2182 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                    range2182.Borders.LineStyle = LineStyleType.Thin;
                    range2182.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range2182.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                    rowcnt = rowcnt + 1;

                    sheet.Range["A" + rowcnt].Value = "2";
                    sheet.Range["B" + rowcnt].Value = "Arbitration and Court Cost paid";

                    crcourt = Convert.ToDecimal(d.ItemArray[10]) + Convert.ToDecimal(d.ItemArray[12]);
                    drcourt = Convert.ToDecimal(d.ItemArray[11]) + Convert.ToDecimal(d.ItemArray[13]);


                    if (crcourt > drcourt)
                    {
                        sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(crcourt - drcourt);
                        sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                        crtotalCourt = crcourt - drcourt;

                    }
                    else if (drcourt > crcourt)
                    {
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(drcourt - crcourt);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        drtotalCourt = drcourt - crcourt;
                    }
                    CellRange range1282 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                    range1282.Borders.LineStyle = LineStyleType.Thin;
                    range1282.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range1282.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                }

                rowcnt = rowcnt + 1;

                sheet.Range["B" + rowcnt].Value = "Total";
                sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                RichText richText28 = sheet.Range["B" + rowcnt].RichText;
                richText28.SetFont(0, richText28.Text.Length - 1, fontBold);

                CellRange range128 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                range128.Borders.LineStyle = LineStyleType.Thin;
                range128.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range128.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                decreecourttotalcr = crtotalDecree + crtotalCourt;
                decreecourttotaldr = drtotalDecree + drtotalCourt;

                if (decreecourttotalcr > decreecourttotaldr)
                {
                    sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(decreecourttotalcr - decreecourttotaldr);
                    sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                    rowcnt = rowcnt + 1;
                    sheet.Range["B" + rowcnt].Value = "Balance Cr.";
                    sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                    RichText richText29 = sheet.Range["B" + rowcnt].RichText;
                    richText29.SetFont(0, richText29.Text.Length - 1, fontBold);

                    sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(decreecourttotalcr - decreecourttotaldr);
                    sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["C" + rowcnt].Style.Font.IsBold = true;

                }
                else
                {
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(decreecourttotaldr - decreecourttotalcr);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                    rowcnt = rowcnt + 1;
                    sheet.Range["B" + rowcnt].Value = "Balance Dr.";
                    sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                    RichText richText30 = sheet.Range["B" + rowcnt].RichText;
                    richText30.SetFont(0, richText30.Text.Length - 1, fontBold);

                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(decreecourttotaldr - decreecourttotalcr);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                    //CellRange range20 = sheet.Range["A5:" + "F" + rowcnt];
                    //range20.Borders.LineStyle = LineStyleType.Thin;
                    //range20.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    //range20.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }

                CellRange range138 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                range138.Borders.LineStyle = LineStyleType.Thin;
                range138.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range138.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                #endregion


                #region Loans

                rowcnt = rowcnt + 1;

                sheet.Range["A" + rowcnt].Value = "VIII.";
                RichText richText31 = sheet.Range["A" + rowcnt].RichText;
                richText31.SetFont(0, richText31.Text.Length - 1, fontBold);

                sheet.Range["B" + rowcnt].Value = "LOANS";
                RichText richText32 = sheet.Range["B" + rowcnt].RichText;
                richText32.SetFont(0, richText32.Text.Length - 1, fontBold);
                CellRange range188 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                range188.Borders.LineStyle = LineStyleType.Thin;
                range188.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range188.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                List<string> listloan = new List<string>();

                listloan.Add("Chit Loan");
                listloan.Add("Staff Loan");
                listloan.Add("Accrued Interest on Loan");

                foreach (var dd in listloan)
                {

                    DataTable Chitloan = new DataTable();
                    int Count1 = (from DataRow row in Loans.Rows where (string)row["Name"] == dd select row).Count();

                    if (Count1 > 0)
                    {
                        Chitloan = (from DataRow dr in Loans.Rows
                                    where dr["Name"].ToString() == dd
                                    select dr).CopyToDataTable();
                    }

                    rowcnt = rowcnt + 1;
                    sheet.Range["B" + rowcnt].Value = dd;

                    if (Chitloan.Rows.Count > 0)
                    {
                        if (dd != "Accrued Interest on Loan")
                        {
                            decimal sumcr = Chitloan.AsEnumerable().Sum(dr => dr.Field<Decimal>("Credit"));
                            decimal sumdr = Chitloan.AsEnumerable().Sum(dr => dr.Field<Decimal>("Debit"));

                            if (sumcr > sumdr)
                            {
                                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(sumcr - sumdr);
                                sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                            }
                            else if (sumdr > sumcr)
                            {
                                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(sumdr - sumcr);
                                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                            }
                        }
                        else
                        {
                            //string datatype = Chitloan.Columns[7].DataType.Name.ToString();

                            decimal sumintrest = Chitloan.AsEnumerable().Sum(dr => dr.Field<decimal>("Interest"));
                            sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(sumintrest);
                            sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";

                        }

                    }
                    CellRange range1284 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                    range1284.Borders.LineStyle = LineStyleType.Thin;
                    range1284.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range1284.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                }
                rowcnt = rowcnt + 1;
                string loanbal = "";
                if (Loans.Rows.Count > 1)
                {
                    loanbal = Loans.Rows[Loans.Rows.Count - 1][1].ToString();
                }
                if (loanbal == "Balance CR")
                {
                    sheet.Range["B" + rowcnt].Value = "Total Cr.";
                    sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                    RichText richText33 = sheet.Range["B" + rowcnt].RichText;
                    richText33.SetFont(0, richText33.Text.Length - 1, fontBold);
                    sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(Loans.Rows[Loans.Rows.Count - 1][2]);
                    sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                }
                else if (loanbal == "Balance DR")
                {
                    sheet.Range["B" + rowcnt].Value = "Total Dr.";
                    sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                    RichText richText34 = sheet.Range["B" + rowcnt].RichText;
                    richText34.SetFont(0, richText34.Text.Length - 1, fontBold);
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(Loans.Rows[Loans.Rows.Count - 1][3]);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                }
                CellRange range148 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                range148.Borders.LineStyle = LineStyleType.Thin;
                range148.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range148.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                #endregion

                #region SUNDRIES


                rowcnt = rowcnt + 1;

                sheet.Range["A" + rowcnt].Value = "IX.";
                RichText richText3145 = sheet.Range["A" + rowcnt].RichText;
                richText3145.SetFont(0, richText3145.Text.Length - 1, fontBold);

                sheet.Range["B" + rowcnt].Value = "SUNDRIES AND ADVANCES";
                RichText richText3245 = sheet.Range["B" + rowcnt].RichText;
                richText3245.SetFont(0, richText3245.Text.Length - 1, fontBold);
                CellRange range18845 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                range18845.Borders.LineStyle = LineStyleType.Thin;
                range18845.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range18845.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                decimal decGrandTotalC;
                decimal decGrandTotalD;
                //   decimal decPrizeMoney1;
                //   decimal decCallAmount1;
                //   decimal decBalancePayable1;
                //  decimal decCallAmountPaid1;
                decimal decEBC = 0;
                //   decimal decCredit1;
                decimal decEBD = 0;
                decimal decSCC = 0;
                decimal decSCD = 0;
                decimal decSC = 0;
                decimal decSD = 0;
                decimal decDC = 0;
                decimal decDD = 0;
                decimal decAC = 0;
                decimal decAD = 0;
                decimal decSCDeb = 0;
                decimal decSDDeb = 0;
                decimal decVRAC = 0;
                decimal decVRAD = 0;
                decimal decRAC = 0;
                decimal decRAD = 0;
                decimal decTDC = 0;
                decimal decTDD = 0;
                decimal decACAC = 0;
                decimal decACAD = 0;
                decimal decPPAC = 0;
                decimal decPPAD = 0;
                decimal decPAC = 0;
                decimal decPAD = 0;
                decimal decVAC = 0;
                decimal decVAD = 0;

                decimal decCLAC = 0;
                decimal decCLAD = 0;
                decimal decCORC = 0;
                decimal decCORD = 0;

                decimal decstmpc = 0;
                decimal decstmpd = 0;
                string str = @"select t3.Node as Heads,t3.NodeID,t3.ParentID,t1.Narration , 
                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1119072%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `EB_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1119072%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `EB_Debit`,
                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,4739%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `TD_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,4739%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `TD_Debit`,
                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,5730%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `RA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,5730%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `RA_Debit`,
                               (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,167%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `S_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,167%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `S_Debit`,
                                                (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1060%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `PPA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1060%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `PPA_Debit`,
                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,172%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `VRA_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,172%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `VRA_Debit`,
                                   (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,58%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `SC_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,58%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `SC_Debit`
                            ,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1061%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `SDeb_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1061%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `SDeb_Debit` 
                            
                       from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + "  and `t1`.`RootID` = 9  and (t3.TreeHint like '9,1119072%' or t3.TreeHint like '9,4739%' or t3.TreeHint like '9,5730%' or t3.TreeHint like '9,167%' or t3.TreeHint like '9,1060%' or  t3.TreeHint like '9,58%' or  t3.TreeHint like '9,172%' or t3.TreeHint like '9,1061%') and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by `t1`.`Head_ID` order by t3.ParentID asc,t1.ChoosenDate asc;";

                DataTable dt1 = balayer.GetDataTable(str);
                DataTable dt = new DataTable();
                dt.Columns.Add("SNo");
                dt.Columns.Add("Heads");
                dt.Columns.Add("EB_Credit", typeof(decimal));
                dt.Columns.Add("EB_Debit", typeof(decimal));
                dt.Columns.Add("TD_Credit", typeof(decimal));
                dt.Columns.Add("TD_Debit", typeof(decimal));
                dt.Columns.Add("RA_Credit", typeof(decimal));
                dt.Columns.Add("RA_Debit", typeof(decimal));
                dt.Columns.Add("S_Credit", typeof(decimal));
                dt.Columns.Add("S_Debit", typeof(decimal));
                dt.Columns.Add("PPA_Credit", typeof(decimal));
                dt.Columns.Add("PPA_Debit", typeof(decimal));
                //dt.Columns.Add("VA_Credit", typeof(decimal));
                //dt.Columns.Add("VA_Debit", typeof(decimal));
                dt.Columns.Add("VRA_Credit", typeof(decimal));
                dt.Columns.Add("VRA_Debit", typeof(decimal));
                dt.Columns.Add("SC_Credit", typeof(decimal));
                dt.Columns.Add("SC_Debit", typeof(decimal));

                dt.Columns.Add("SDeb_Credit", typeof(decimal));
                dt.Columns.Add("SDeb_Debit", typeof(decimal));

                dt.Columns.Add("Remarks");
                DataRow drr = dt.NewRow();
                int icount = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    if (Convert.ToDecimal(dt1.Rows[i]["EB_Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["EB_Debit"]) > 0 ||
                        Convert.ToDecimal(dt1.Rows[i]["TD_Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["TD_Debit"]) > 0 ||
                        Convert.ToDecimal(dt1.Rows[i]["RA_Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["RA_Debit"]) > 0 ||
                        Convert.ToDecimal(dt1.Rows[i]["S_Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["S_Debit"]) > 0 ||
                        Convert.ToDecimal(dt1.Rows[i]["PPA_Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["PPA_Debit"]) > 0 ||
                        Convert.ToDecimal(dt1.Rows[i]["VRA_Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["VRA_Debit"]) > 0 ||
                        Convert.ToDecimal(dt1.Rows[i]["SC_Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["SC_Debit"]) > 0 ||
                        Convert.ToDecimal(dt1.Rows[i]["SDeb_Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["SDeb_Debit"]) > 0)
                    {
                        if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["ParentID"]) == "58")
                        {
                            drr["SNo"] = icount + 1;
                            drr["Heads"] = balayer.GetSingleValue("SELECT MemberName FROM svcf.chitheads where HeadId=" + dt1.Rows[i]["NodeID"]); ;
                            drr["EB_Credit"] = dt1.Rows[i]["EB_Credit"];
                            drr["EB_Debit"] = dt1.Rows[i]["EB_Debit"];
                            drr["TD_Credit"] = dt1.Rows[i]["TD_Credit"];
                            drr["TD_Debit"] = dt1.Rows[i]["TD_Debit"];
                            drr["RA_Credit"] = dt1.Rows[i]["RA_Credit"];
                            drr["RA_Debit"] = dt1.Rows[i]["RA_Debit"];
                            drr["S_Credit"] = dt1.Rows[i]["S_Credit"];
                            drr["S_Debit"] = dt1.Rows[i]["S_Debit"];
                            drr["PPA_Credit"] = dt1.Rows[i]["PPA_Credit"];
                            drr["PPA_Debit"] = dt1.Rows[i]["PPA_Debit"];
                            drr["SC_Credit"] = dt1.Rows[i]["SC_Credit"];
                            drr["SC_Debit"] = dt1.Rows[i]["SC_Debit"];
                            drr["VRA_Credit"] = dt1.Rows[i]["VRA_Credit"];
                            drr["VRA_Debit"] = dt1.Rows[i]["VRA_Debit"];
                            drr["SDeb_Credit"] = dt1.Rows[i]["SDeb_Credit"];
                            drr["SDeb_Debit"] = dt1.Rows[i]["SDeb_Debit"];

                            drr["Remarks"] = balayer.GetSingleValue("SELECT ChitName FROM svcf.chitheads where HeadId=" + dt1.Rows[i]["NodeID"]); ;
                            dt.Rows.Add(drr.ItemArray);
                        }
                        else if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["ParentID"]) == "59" || balayer.ToobjectstrEvenNull(dt1.Rows[i]["ParentID"]) == "60")
                        {
                            drr["SNo"] = icount + 1;
                            drr["Heads"] = balayer.GetSingleValue("SELECT MemberName FROM svcf.chitheads where HeadId=" + dt1.Rows[i]["NodeID"]); ;
                            drr["EB_Credit"] = dt1.Rows[i]["EB_Credit"];
                            drr["EB_Debit"] = dt1.Rows[i]["EB_Debit"];
                            drr["TD_Credit"] = dt1.Rows[i]["TD_Credit"];
                            drr["TD_Debit"] = dt1.Rows[i]["TD_Debit"];
                            drr["RA_Credit"] = dt1.Rows[i]["RA_Credit"];
                            drr["RA_Debit"] = dt1.Rows[i]["RA_Debit"];
                            drr["S_Credit"] = dt1.Rows[i]["S_Credit"];
                            drr["S_Debit"] = dt1.Rows[i]["S_Debit"];
                            drr["PPA_Credit"] = dt1.Rows[i]["PPA_Credit"];
                            drr["PPA_Debit"] = dt1.Rows[i]["PPA_Debit"];
                            drr["SC_Credit"] = dt1.Rows[i]["SC_Credit"];
                            drr["SC_Debit"] = dt1.Rows[i]["SC_Debit"];
                            drr["VRA_Credit"] = dt1.Rows[i]["VRA_Credit"];
                            drr["VRA_Debit"] = dt1.Rows[i]["VRA_Debit"];
                            drr["SDeb_Credit"] = dt1.Rows[i]["SDeb_Credit"];
                            drr["SDeb_Debit"] = dt1.Rows[i]["SDeb_Debit"];

                            drr["Remarks"] = dt1.Rows[i]["Narration"];
                            dt.Rows.Add(drr.ItemArray);
                        }
                        else
                        {
                            drr["SNo"] = icount + 1;
                            drr["Heads"] = dt1.Rows[i]["Heads"];
                            drr["EB_Credit"] = dt1.Rows[i]["EB_Credit"];
                            drr["EB_Debit"] = dt1.Rows[i]["EB_Debit"];
                            drr["TD_Credit"] = dt1.Rows[i]["TD_Credit"];
                            drr["TD_Debit"] = dt1.Rows[i]["TD_Debit"];
                            drr["RA_Credit"] = dt1.Rows[i]["RA_Credit"];
                            drr["RA_Debit"] = dt1.Rows[i]["RA_Debit"];
                            drr["S_Credit"] = dt1.Rows[i]["S_Credit"];
                            drr["S_Debit"] = dt1.Rows[i]["S_Debit"];
                            drr["PPA_Credit"] = dt1.Rows[i]["PPA_Credit"];
                            drr["PPA_Debit"] = dt1.Rows[i]["PPA_Debit"];
                            drr["SC_Credit"] = dt1.Rows[i]["SC_Credit"];
                            drr["SC_Debit"] = dt1.Rows[i]["SC_Debit"];
                            drr["VRA_Credit"] = dt1.Rows[i]["VRA_Credit"];
                            drr["VRA_Debit"] = dt1.Rows[i]["VRA_Debit"];
                            drr["SDeb_Credit"] = dt1.Rows[i]["SDeb_Credit"];
                            drr["SDeb_Debit"] = dt1.Rows[i]["SDeb_Debit"];


                            drr["Remarks"] = "";
                            dt.Rows.Add(drr.ItemArray);
                        }
                        icount++;
                    }
                }

                //Part 2

                string strPart2 = @"select t3.Node as Heads,t3.NodeID,t3.ParentID,t1.Narration ,
                                                 (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,59%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Degree_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,59%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Degree_Debit`,
                             (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,60%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Advocate_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,60%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Advocate_Debit`,
                                                 (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,5731%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `ACA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,5731%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `ACA_Debit`
, (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,5335%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Cort_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,5335%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Cort_Debit` 
,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,5733%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `VA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,5733%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `VA_Debit` 
,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,5732%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `PA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,5732%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `PA_Debit`
,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,5734%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `CAL_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,5734%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `CAL_Debit`
,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1115600%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `STMISS_Credit`,
  (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1115600%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `STMISS_Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where
`t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + "  and `t1`.`RootID` = 9  and (t3.TreeHint like '9,5335%' or t3.TreeHint like '9,59%' or t3.TreeHint like '9,5731%' or t3.TreeHint like '9,60%' or t3.TreeHint like '9,5733%' or t3.TreeHint like '9,5732%' or t3.TreeHint like '9,5734%' or t3.TreeHint like '9,1115600%' ) and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by `t1`.`Head_ID` order by t3.ParentID asc,t1.ChoosenDate asc;";

                DataTable dt1Part2 = balayer.GetDataTable(strPart2);
                DataTable dtPart2 = new DataTable();
                dtPart2.Columns.Add("SNo");
                dtPart2.Columns.Add("Heads");
                dtPart2.Columns.Add("Degree_Credit", typeof(decimal));
                dtPart2.Columns.Add("Degree_Debit", typeof(decimal));
                dtPart2.Columns.Add("Advocate_Credit", typeof(decimal));
                dtPart2.Columns.Add("Advocate_Debit", typeof(decimal));
                dtPart2.Columns.Add("ACA_Credit", typeof(decimal));
                dtPart2.Columns.Add("ACA_Debit", typeof(decimal));

                dtPart2.Columns.Add("CAL_Credit", typeof(decimal));
                dtPart2.Columns.Add("CAL_Debit", typeof(decimal));
                dtPart2.Columns.Add("Cort_Credit", typeof(decimal));
                dtPart2.Columns.Add("Cort_Debit", typeof(decimal));
                dtPart2.Columns.Add("VA_Credit", typeof(decimal));
                dtPart2.Columns.Add("VA_Debit", typeof(decimal));
                dtPart2.Columns.Add("PA_Credit", typeof(decimal));
                dtPart2.Columns.Add("PA_Debit", typeof(decimal));
                dtPart2.Columns.Add("STMISS_Credit", typeof(decimal));
                dtPart2.Columns.Add("STMISS_Debit", typeof(decimal));


                dtPart2.Columns.Add("Remarks");
                DataRow drPart2 = dtPart2.NewRow();
                int icountPart2 = 0;
                for (int i = 0; i < dt1Part2.Rows.Count; i++)
                {
                    if (Convert.ToDecimal(dt1Part2.Rows[i]["Degree_Credit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["Degree_Debit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["Advocate_Credit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["Advocate_Debit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["ACA_Credit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["ACA_Debit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["PA_Credit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["PA_Debit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["VA_Credit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["VA_Debit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["STMISS_Credit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["STMISS_Debit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["Cort_Credit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["Cort_Debit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["CAL_Credit"]) > 0 || Convert.ToDecimal(dt1Part2.Rows[i]["CAL_Debit"]) > 0)
                    {
                        if (balayer.ToobjectstrEvenNull(dt1Part2.Rows[i]["ParentID"]) == "58")
                        {
                            drPart2["SNo"] = "";
                            drPart2["Heads"] = balayer.GetSingleValue("SELECT MemberName FROM svcf.chitheads where HeadId=" + dt1Part2.Rows[i]["NodeID"]); ;
                            drPart2["Degree_Credit"] = dt1Part2.Rows[i]["Degree_Credit"];
                            drPart2["Degree_Debit"] = dt1Part2.Rows[i]["Degree_Debit"];
                            drPart2["Advocate_Credit"] = dt1Part2.Rows[i]["Advocate_Credit"];
                            drPart2["Advocate_Debit"] = dt1Part2.Rows[i]["Advocate_Debit"];
                            drPart2["ACA_Credit"] = dt1Part2.Rows[i]["ACA_Credit"];
                            drPart2["ACA_Debit"] = dt1Part2.Rows[i]["ACA_Debit"];

                            drPart2["PA_Credit"] = dt1Part2.Rows[i]["PA_Credit"];
                            drPart2["PA_Debit"] = dt1Part2.Rows[i]["PA_Debit"];
                            drPart2["VA_Credit"] = dt1Part2.Rows[i]["VA_Credit"];
                            drPart2["VA_Debit"] = dt1Part2.Rows[i]["VA_Debit"];
                            drPart2["CAL_Credit"] = dt1Part2.Rows[i]["CAL_Credit"];
                            drPart2["CAL_Debit"] = dt1Part2.Rows[i]["CAL_Debit"];
                            drPart2["Cort_Credit"] = dt1Part2.Rows[i]["Cort_Credit"];
                            drPart2["Cort_Debit"] = dt1Part2.Rows[i]["Cort_Debit"];
                            drPart2["STMISS_Credit"] = dt1Part2.Rows[i]["STMISS_Credit"];
                            drPart2["STMISS_Debit"] = dt1Part2.Rows[i]["STMISS_Debit"];

                            drPart2["Remarks"] = balayer.GetSingleValue("SELECT ChitName FROM svcf.chitheads where HeadId=" + dt1Part2.Rows[i]["NodeID"]); ;
                            dtPart2.Rows.Add(drPart2.ItemArray);
                        }
                        else if (balayer.ToobjectstrEvenNull(dt1Part2.Rows[i]["ParentID"]) == "59" || balayer.ToobjectstrEvenNull(dt1Part2.Rows[i]["ParentID"]) == "60")
                        {
                            drPart2["SNo"] = "";
                            drPart2["Heads"] = balayer.GetSingleValue("SELECT MemberName FROM svcf.chitheads where HeadId=" + dt1Part2.Rows[i]["NodeID"]); ;
                            drPart2["Degree_Credit"] = dt1Part2.Rows[i]["Degree_Credit"];
                            drPart2["Degree_Debit"] = dt1Part2.Rows[i]["Degree_Debit"];
                            drPart2["Advocate_Credit"] = dt1Part2.Rows[i]["Advocate_Credit"];
                            drPart2["Advocate_Debit"] = dt1Part2.Rows[i]["Advocate_Debit"];
                            drPart2["ACA_Credit"] = dt1Part2.Rows[i]["ACA_Credit"];
                            drPart2["ACA_Debit"] = dt1Part2.Rows[i]["ACA_Debit"];

                            drPart2["PA_Credit"] = dt1Part2.Rows[i]["PA_Credit"];
                            drPart2["PA_Debit"] = dt1Part2.Rows[i]["PA_Debit"];
                            drPart2["VA_Credit"] = dt1Part2.Rows[i]["VA_Credit"];
                            drPart2["VA_Debit"] = dt1Part2.Rows[i]["VA_Debit"];
                            drPart2["CAL_Credit"] = dt1Part2.Rows[i]["CAL_Credit"];
                            drPart2["CAL_Debit"] = dt1Part2.Rows[i]["CAL_Debit"];
                            drPart2["Cort_Credit"] = dt1Part2.Rows[i]["Cort_Credit"];
                            drPart2["Cort_Debit"] = dt1Part2.Rows[i]["Cort_Debit"];
                            drPart2["STMISS_Credit"] = dt1Part2.Rows[i]["STMISS_Credit"];
                            drPart2["STMISS_Debit"] = dt1Part2.Rows[i]["STMISS_Debit"];

                            drPart2["Remarks"] = dt1Part2.Rows[i]["Narration"];
                            dtPart2.Rows.Add(drPart2.ItemArray);
                        }
                        else
                        {

                            drPart2["SNo"] = "";
                            drPart2["Heads"] = dt1Part2.Rows[i]["Heads"];
                            drPart2["Degree_Credit"] = dt1Part2.Rows[i]["Degree_Credit"];
                            drPart2["Degree_Debit"] = dt1Part2.Rows[i]["Degree_Debit"];
                            drPart2["Advocate_Credit"] = dt1Part2.Rows[i]["Advocate_Credit"];
                            drPart2["Advocate_Debit"] = dt1Part2.Rows[i]["Advocate_Debit"];
                            drPart2["ACA_Credit"] = dt1Part2.Rows[i]["ACA_Credit"];
                            drPart2["ACA_Debit"] = dt1Part2.Rows[i]["ACA_Debit"];

                            drPart2["PA_Credit"] = dt1Part2.Rows[i]["PA_Credit"];
                            drPart2["PA_Debit"] = dt1Part2.Rows[i]["PA_Debit"];
                            drPart2["VA_Credit"] = dt1Part2.Rows[i]["VA_Credit"];
                            drPart2["VA_Debit"] = dt1Part2.Rows[i]["VA_Debit"];
                            drPart2["CAL_Credit"] = dt1Part2.Rows[i]["CAL_Credit"];
                            drPart2["CAL_Debit"] = dt1Part2.Rows[i]["CAL_Debit"];
                            drPart2["Cort_Credit"] = dt1Part2.Rows[i]["Cort_Credit"];
                            drPart2["Cort_Debit"] = dt1Part2.Rows[i]["Cort_Debit"];
                            drPart2["STMISS_Credit"] = dt1Part2.Rows[i]["STMISS_Credit"];
                            drPart2["STMISS_Debit"] = dt1Part2.Rows[i]["STMISS_Debit"];

                            drPart2["Remarks"] = "";
                            dtPart2.Rows.Add(drPart2.ItemArray);
                        }
                        icountPart2++;
                    }
                }




                if (dtPart2.Rows.Count > 0)
                {
                    decDC = Convert.ToDecimal(dtPart2.Compute("sum(Degree_Credit)", ""));
                    decDD = Convert.ToDecimal(dtPart2.Compute("sum(Degree_Debit)", ""));
                    decAC = Convert.ToDecimal(dtPart2.Compute("sum(Advocate_Credit)", ""));
                    decAD = Convert.ToDecimal(dtPart2.Compute("sum(Advocate_Debit)", ""));
                    decACAC = Convert.ToDecimal(dtPart2.Compute("sum(ACA_Credit)", ""));
                    decACAD = Convert.ToDecimal(dtPart2.Compute("sum(ACA_Debit)", ""));
                    decPAC = Convert.ToDecimal(dtPart2.Compute("sum(PA_Credit)", ""));
                    decPAD = Convert.ToDecimal(dtPart2.Compute("sum(PA_Debit)", ""));
                    decVAC = Convert.ToDecimal(dtPart2.Compute("sum(VA_Credit)", ""));
                    decVAD = Convert.ToDecimal(dtPart2.Compute("sum(VA_Debit)", ""));


                    decCLAC = Convert.ToDecimal(dtPart2.Compute("sum(CAL_Credit)", ""));
                    decCLAD = Convert.ToDecimal(dtPart2.Compute("sum(CAL_Debit)", ""));
                    decCORC = Convert.ToDecimal(dtPart2.Compute("sum(Cort_Credit)", ""));
                    decCORD = Convert.ToDecimal(dtPart2.Compute("sum(Cort_Debit)", ""));

                    decstmpc = Convert.ToDecimal(dtPart2.Compute("sum(STMISS_Credit)", ""));
                    decstmpd = Convert.ToDecimal(dtPart2.Compute("sum(STMISS_Debit)", ""));

                    drPart2["SNo"] = "";
                    drPart2["Heads"] = "Total";
                    drPart2["Degree_Credit"] = decDC;
                    drPart2["Degree_Debit"] = decDD;
                    drPart2["Advocate_Credit"] = decAC;
                    drPart2["Advocate_Debit"] = decAD;
                    drPart2["ACA_Credit"] = decACAC;
                    drPart2["ACA_Debit"] = decACAD;

                    drPart2["PA_Credit"] = decPAC;
                    drPart2["PA_Debit"] = decPAD;
                    drPart2["VA_Credit"] = decVAC;
                    drPart2["VA_Debit"] = decVAD;
                    drPart2["CAL_Credit"] = decCLAC;
                    drPart2["CAL_Debit"] = decCLAD;
                    drPart2["Cort_Credit"] = decCORC;
                    drPart2["Cort_Debit"] = decCORD;
                    drPart2["STMISS_Credit"] = decstmpc;
                    drPart2["STMISS_Debit"] = decstmpd;


                    drPart2["Remarks"] = "";
                    dtPart2.Rows.Add(drPart2.ItemArray);
                }
                if (dt.Rows.Count > 0)
                {
                    decEBC = Convert.ToDecimal(dt.Compute("sum(EB_Credit)", ""));
                    decEBD = Convert.ToDecimal(dt.Compute("sum(EB_Debit)", ""));
                    decTDC = Convert.ToDecimal(dt.Compute("sum(TD_Credit)", ""));
                    decTDD = Convert.ToDecimal(dt.Compute("sum(TD_Debit)", ""));
                    decRAC = Convert.ToDecimal(dt.Compute("sum(RA_Credit)", ""));
                    decRAD = Convert.ToDecimal(dt.Compute("sum(RA_Debit)", ""));
                    decSC = Convert.ToDecimal(dt.Compute("sum(S_Credit)", ""));
                    decSD = Convert.ToDecimal(dt.Compute("sum(S_Debit)", ""));
                    decPPAC = Convert.ToDecimal(dt.Compute("sum(PPA_Credit)", ""));
                    decPPAD = Convert.ToDecimal(dt.Compute("sum(PPA_Debit)", ""));
                    decSCC = Convert.ToDecimal(dt.Compute("sum(SC_Credit)", ""));
                    decSCD = Convert.ToDecimal(dt.Compute("sum(SC_Debit)", ""));
                    decSCDeb = Convert.ToDecimal(dt.Compute("sum(SDeb_Credit)", ""));
                    decSDDeb = Convert.ToDecimal(dt.Compute("sum(SDeb_Debit)", ""));
                    decVRAC = Convert.ToDecimal(dt.Compute("sum(VRA_Credit)", ""));
                    decVRAD = Convert.ToDecimal(dt.Compute("sum(VRA_Debit)", ""));
                    drr["SNo"] = "";
                    drr["Heads"] = "Total";
                    drr["EB_Credit"] = decEBC;
                    drr["EB_Debit"] = decEBD;
                    drr["TD_Credit"] = decTDC;
                    drr["TD_Debit"] = decTDD;
                    drr["RA_Credit"] = decRAC;
                    drr["RA_Debit"] = decRAD;
                    drr["S_Credit"] = decSC;
                    drr["S_Debit"] = decSD;
                    drr["PPA_Credit"] = decPPAC;
                    drr["PPA_Debit"] = decPPAD;
                    drr["SC_Credit"] = decSCC;
                    drr["SC_Debit"] = decSCD;
                    drr["SDeb_Credit"] = decSCDeb;
                    drr["SDeb_Debit"] = decSDDeb;
                    drr["VRA_Credit"] = decVRAC;
                    drr["VRA_Debit"] = decVRAD;
                    drr["Remarks"] = "";
                    dt.Rows.Add(drr.ItemArray);

                    DataRow dr1 = dtPart2.NewRow();

                    dr1["SNo"] = "";
                    dr1["Heads"] = "Abstract";
                    dr1["Degree_Credit"] = "0.0";
                    dr1["Degree_Debit"] = "0.0";
                    dtPart2.Rows.Add(dr1.ItemArray);

                    dr1["SNo"] = "1";
                    dr1["Heads"] = "EB Deposit";
                    dr1["Degree_Credit"] = decEBC;
                    dr1["Degree_Debit"] = decEBD;
                    dtPart2.Rows.Add(dr1.ItemArray);

                    dr1["SNo"] = "2";
                    dr1["Heads"] = "Sundry Creditors";
                    dr1["Degree_Credit"] = decSCC;
                    dr1["Degree_Debit"] = decSCD;
                    dtPart2.Rows.Add(dr1.ItemArray);

                    dr1["SNo"] = "3";
                    dr1["Heads"] = "Staff Advance";
                    dr1["Degree_Credit"] = decSC;
                    dr1["Degree_Debit"] = decSD;
                    dtPart2.Rows.Add(dr1.ItemArray);

                    dr1["SNo"] = "4";
                    dr1["Heads"] = "Degree Advance";
                    dr1["Degree_Credit"] = decDC;
                    dr1["Degree_Debit"] = decDD;
                    dtPart2.Rows.Add(dr1.ItemArray);

                    dr1["SNo"] = "5";
                    dr1["Heads"] = "Advocate Advance";
                    dr1["Degree_Credit"] = decAC;
                    dr1["Degree_Debit"] = decAD;
                    dtPart2.Rows.Add(dr1.ItemArray);

                    dr1["SNo"] = "6";
                    dr1["Heads"] = "Sundry Debtors";
                    dr1["Degree_Credit"] = decSCDeb;
                    dr1["Degree_Debit"] = decSDDeb;
                    dtPart2.Rows.Add(dr1.ItemArray);

                    dr1["SNo"] = "7";
                    dr1["Heads"] = "Vehicle Recovery Advance";
                    dr1["Degree_Credit"] = decVRAC;
                    dr1["Degree_Debit"] = decVRAD;
                    dtPart2.Rows.Add(dr1.ItemArray);

                    dr1["SNo"] = "8";
                    dr1["Heads"] = "Staff Misappropriation ";
                    dr1["Degree_Credit"] = decstmpc;
                    dr1["Degree_Debit"] = decstmpd;
                    dtPart2.Rows.Add(dr1.ItemArray);
                }


                if (dtPart2.Rows.Count > 0)
                {
                    DataRow dr1Part2 = dtPart2.NewRow();

                    dr1Part2["SNo"] = "9";
                    dr1Part2["Heads"] = "Rent Advance";
                    dr1Part2["Degree_Credit"] = decRAC;
                    dr1Part2["Degree_Debit"] = decRAD;
                    dtPart2.Rows.Add(dr1Part2.ItemArray);

                    dr1Part2["SNo"] = "10";
                    dr1Part2["Heads"] = "Telephone Deposit";
                    dr1Part2["Degree_Credit"] = decTDC;
                    dr1Part2["Degree_Debit"] = decTDD;
                    dtPart2.Rows.Add(dr1Part2.ItemArray);

                    dr1Part2["SNo"] = "11";
                    dr1Part2["Heads"] = "Air Conditioner Advance";
                    dr1Part2["Degree_Credit"] = decACAC;
                    dr1Part2["Degree_Debit"] = decACAD;
                    dtPart2.Rows.Add(dr1Part2.ItemArray);

                    dr1Part2["SNo"] = "12";
                    dr1Part2["Heads"] = "Pre-Paid Advance";
                    dr1Part2["Degree_Credit"] = decPPAC;
                    dr1Part2["Degree_Debit"] = decPPAD;
                    dtPart2.Rows.Add(dr1Part2.ItemArray);

                    dr1Part2["SNo"] = "13";
                    dr1Part2["Heads"] = "Press Advance";
                    dr1Part2["Degree_Credit"] = decPAC;
                    dr1Part2["Degree_Debit"] = decPAD;
                    dtPart2.Rows.Add(dr1Part2.ItemArray);

                    dr1Part2["SNo"] = "14";
                    dr1Part2["Heads"] = "Vehicle Advance";
                    dr1Part2["Degree_Credit"] = decVAC;
                    dr1Part2["Degree_Debit"] = decVAD;
                    dtPart2.Rows.Add(dr1Part2.ItemArray);

                    dr1Part2["SNo"] = "15";
                    dr1Part2["Heads"] = "Calendar Advance";
                    dr1Part2["Degree_Credit"] = decCLAC;
                    dr1Part2["Degree_Debit"] = decCLAD;
                    dtPart2.Rows.Add(dr1Part2.ItemArray);



                    dr1Part2["SNo"] = "16";
                    dr1Part2["Heads"] = "Court Advance";
                    dr1Part2["Degree_Credit"] = decCORC;
                    dr1Part2["Degree_Debit"] = decCORD;
                    dtPart2.Rows.Add(dr1Part2.ItemArray);
                    /// sum of Staff Misappropriation
                    /// change on 17/08/2018
                    decGrandTotalC = decRAC + decTDC + decACAC + decPPAC + decPAC + decVAC + decCLAC + decCORC + decEBC + decSCC + decSC + decDC + decAC + decSCDeb + decVRAC + decstmpc;
                    decGrandTotalD = decRAD + decTDD + decACAD + decPPAD + decPAD + decVAD + decCLAD + decCORD + decSCD + decSD + decEBD + decDD + decAD + decSDDeb + decVRAD + decstmpd;
                    /// sum of Staff Misappropriation
                    /// change on 17/08/2018

                    dr1Part2["SNo"] = "";
                    dr1Part2["Heads"] = "Grand Total";
                    dr1Part2["Degree_Credit"] = decGrandTotalC;
                    dr1Part2["Degree_Debit"] = decGrandTotalD;
                    dtPart2.Rows.Add(dr1Part2.ItemArray);

                    DataRow dr2Part2 = dtPart2.NewRow();
                    dr2Part2["SNo"] = "";

                    if ((decGrandTotalC) > (decGrandTotalD))
                    {
                        dr2Part2["Heads"] = "Net Balance CR";
                        dr2Part2["Degree_Credit"] = (decGrandTotalC) - (decGrandTotalD);
                        dr2Part2["Degree_Debit"] = "0.0";
                    }
                    else
                    {
                        dr2Part2["Heads"] = "Net Balance DR";
                        dr2Part2["Degree_Debit"] = (decGrandTotalD) - (decGrandTotalC);
                        dr2Part2["Degree_Credit"] = "0.0";
                    }

                    dtPart2.Rows.Add(dr2Part2.ItemArray);
                }
                int cn = 1;
                foreach (DataRow d in dtPart2.Rows)
                {


                    if (d.ItemArray[1].ToString() == "Net Balance DR" || d.ItemArray[1].ToString() == "Grand Total" || d.ItemArray[1].ToString() == "Net Balance CR")
                    {
                        rowcnt = rowcnt + 1;
                        sheet.Range["B" + rowcnt].Value = d.ItemArray[1].ToString();
                        sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(d.ItemArray[2]);
                        sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(d.ItemArray[3]);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                        CellRange range1118 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                        range1118.Borders.LineStyle = LineStyleType.Thin;
                        range1118.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range1118.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    }
                    else
                    {
                        if (d.ItemArray[0].ToString() != "")
                        {
                            rowcnt = rowcnt + 1;
                            sheet.Range["A" + rowcnt].Value = cn.ToString();
                            sheet.Range["B" + rowcnt].Value = d.ItemArray[1].ToString();
                            sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(d.ItemArray[2]);
                            sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";

                            sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(d.ItemArray[3]);
                            sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";

                            CellRange range1118 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                            range1118.Borders.LineStyle = LineStyleType.Thin;
                            range1118.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                            range1118.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                            cn = cn + 1;
                        }
                    }
                }


                CellRange range1228 = sheet.Range["A" + rowcnt + ":" + "D" + rowcnt];
                range1228.Borders.LineStyle = LineStyleType.Thin;
                range1228.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range1228.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                #endregion

                rowcnt = rowcnt + 1;

                //CellRange range3 = sheet.Range["A" + secondtablewidth + ":D" + rowcnt];
                //range3.BorderAround(LineStyleType.Medium, Color.Black);

                #endregion

                //Secound Vertical table end

                #region Third Table
                //Third Table

                CellRange range4 = sheet.Range["F4:I4"];
                range4.Borders.LineStyle = LineStyleType.Double;
                range4.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range4.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.Range["F4"].Value = "Sl. No.";
                RichText richText40 = sheet.Range["F4"].RichText;
                richText40.SetFont(0, richText40.Text.Length - 1, fontBold);

                sheet.Range["G4"].Value = "HEADS";
                RichText richText41 = sheet.Range["G4"].RichText;
                richText41.SetFont(0, richText41.Text.Length - 1, fontBold);

                sheet.Range["H4"].Value = "CREDIT";
                RichText richText42 = sheet.Range["H4"].RichText;
                richText42.SetFont(0, richText42.Text.Length - 1, fontBold);

                sheet.Range["I4"].Value = "DEBIT";
                RichText richText43 = sheet.Range["I4"].RichText;
                richText43.SetFont(0, richText43.Text.Length - 1, fontBold);


                int secrowcnt = 5;


                thirdtablewidth = secrowcnt;

                sheet.Range["F" + secrowcnt].Value = "IV.";
                RichText richText44 = sheet.Range["F" + secrowcnt].RichText;
                richText44.SetFont(0, richText44.Text.Length - 1, fontBold);

                sheet.Range["G" + secrowcnt].Value = "OTHER ITEMS";
                RichText richText45 = sheet.Range["G" + secrowcnt].RichText;
                richText45.SetFont(0, richText45.Text.Length - 1, fontBold);

                CellRange range21 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                range21.Borders.LineStyle = LineStyleType.Thin;
                range21.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range21.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                secrowcnt = secrowcnt + 1;

                sheet.Range["F" + secrowcnt].Value = "a.";
                RichText richText47 = sheet.Range["F" + secrowcnt].RichText;
                richText47.SetFont(0, richText47.Text.Length - 1, fontBold);

                sheet.Range["G" + secrowcnt].Value = "Outstanding Expenses payable";
                RichText richText48 = sheet.Range["G" + secrowcnt].RichText;
                richText48.SetFont(0, richText48.Text.Length - 1, fontBold);

                CellRange range212 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                range212.Borders.LineStyle = LineStyleType.Thin;
                range212.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range212.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                foreach (DataRow dr in OtherItems.Rows)
                {
                    secrowcnt = secrowcnt + 1;
                    if (dr.ItemArray[1].ToString() == "Total")
                    {

                        sheet.Range["G" + secrowcnt].Value = dr.ItemArray[1].ToString();
                        RichText richText49 = sheet.Range["G" + secrowcnt].RichText;
                        richText49.SetFont(0, richText49.Text.Length - 1, fontBold);

                        sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["H" + secrowcnt].Style.Font.IsBold = true;
                        sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["I" + secrowcnt].Style.Font.IsBold = true;
                    }
                    else if (dr.ItemArray[1].ToString() != "Total" && dr.ItemArray[0].ToString() == "")
                    {
                        sheet.Range["G" + secrowcnt].Value = dr.ItemArray[1].ToString();
                        RichText richText50 = sheet.Range["G" + secrowcnt].RichText;
                        richText50.SetFont(0, richText50.Text.Length - 1, fontBold);

                        sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                        otherCredit = Convert.ToDouble(dr.ItemArray[2]);
                        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["H" + secrowcnt].Style.Font.IsBold = true;
                        sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                        otherDebit = Convert.ToDouble(dr.ItemArray[3]);
                        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["I" + secrowcnt].Style.Font.IsBold = true;

                    }
                    else
                    {
                        sheet.Range["F" + secrowcnt].Value = dr.ItemArray[0].ToString();
                        sheet.Range["G" + secrowcnt].Value = dr.ItemArray[1].ToString();
                        sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";

                        sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";

                    }
                    CellRange range23 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                    range23.Borders.LineStyle = LineStyleType.Thin;
                    range23.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range23.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }

                #endregion

                secrowcnt = secrowcnt + 1;

                #region CHITS

                sheet.Range["F" + secrowcnt].Value = "V";
                RichText richText51 = sheet.Range["F" + secrowcnt].RichText;
                richText51.SetFont(0, richText51.Text.Length - 1, fontBold);

                sheet.Range["G" + secrowcnt].Value = "CHITS";
                RichText richText52 = sheet.Range["G" + secrowcnt].RichText;
                richText52.SetFont(0, richText52.Text.Length - 1, fontBold);

                CellRange range213 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                range213.Borders.LineStyle = LineStyleType.Thin;
                range213.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range213.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                decimal Chitheadcrsum = 0;
                decimal Chitheaddrsum = 0;
                //     int sssno = 1;
                foreach (DataRow dr in Chitheads.Rows)
                {
                    secrowcnt = secrowcnt + 1;
                    //if (dr.ItemArray[1].ToString() == "Chits")
                    //{
                    //    var chitTrialMonthly = BindChitTrial("Monthly");
                    //    var chitTrialFortnightly = BindChitTrial("Fortnightly");
                    //    var chitTrialTrimonthly = BindChitTrial("Trimonthly");
                    //    var ForemanDt = BindForemanOnly();
                    //    decimal I_Credit = 0, I_Debit = 0, E_Credit = 0, E_Debit = 0, N_Credit = 0, N_Debit = 0, NonPrized = 0, Prized = 0, TotalAmountofKasar = 0, NP = 0, P = 0;
                    //    decimal FI_Credit = 0, FI_Debit = 0, FE_Credit = 0, FE_Debit = 0, FN_Credit = 0, FN_Debit = 0, FNonPrized = 0, FPrized = 0, FTotalAmountofKasar = 0, FNP = 0, FP = 0;
                    //    decimal TI_Credit = 0, TI_Debit = 0, TE_Credit = 0, TE_Debit = 0, TN_Credit = 0, TN_Debit = 0, TNonPrized = 0, TPrized = 0, TTotalAmountofKasar = 0, TNP = 0, TP = 0;
                    //    if (ForemanDt.Rows.Count > 0)
                    //    {
                    //        I_Credit = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            I_Credit = I_Credit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(I_Credit)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FI_Credit = FI_Credit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(I_Credit)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TI_Credit = TI_Credit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(I_Credit)", ""));


                    //        I_Debit = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            I_Debit = I_Debit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(I_Debit)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FI_Debit = FI_Debit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(I_Debit)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TI_Debit = TI_Debit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(I_Debit)", ""));

                    //        E_Credit = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            E_Credit = E_Credit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(E_Credit)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FE_Credit = FE_Credit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(E_Credit)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TE_Credit = TE_Credit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(E_Credit)", ""));


                    //        E_Debit = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            E_Debit = E_Debit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(E_Debit)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FE_Debit = FE_Debit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(E_Debit)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TE_Debit = TE_Debit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(E_Debit)", ""));

                    //        N_Credit = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            N_Credit = N_Credit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(N_Credit)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FN_Credit = FN_Credit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(N_Credit)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TN_Credit = TN_Credit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(N_Credit)", ""));

                    //        N_Debit = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            N_Debit = N_Debit + Convert.ToDecimal(chitTrialMonthly.Compute("sum(N_Debit)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FN_Debit = FN_Debit + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(N_Debit)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TN_Debit = TN_Debit + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(N_Debit)", ""));


                    //        NonPrized = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            NonPrized = NonPrized + Convert.ToDecimal(chitTrialMonthly.Compute("sum(NonPrized)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FNonPrized = FNonPrized + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(NonPrized)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TNonPrized = TNonPrized + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(NonPrized)", ""));


                    //        Prized = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            Prized = Prized + Convert.ToDecimal(chitTrialMonthly.Compute("sum(Prized)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FPrized = FPrized + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(Prized)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TPrized = TPrized + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(Prized)", ""));

                    //        TotalAmountofKasar = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            TotalAmountofKasar = TotalAmountofKasar + Convert.ToDecimal(chitTrialMonthly.Compute("sum(TotalAmountofKasar)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FTotalAmountofKasar = FTotalAmountofKasar + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(TotalAmountofKasar)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TTotalAmountofKasar = TTotalAmountofKasar + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(TotalAmountofKasar)", ""));

                    //        NP = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            NP = NP + Convert.ToDecimal(chitTrialMonthly.Compute("sum(NP)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FNP = FNP + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(NP)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TNP = TNP + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(NP)", ""));

                    //        P = 0;
                    //        if (chitTrialMonthly.Rows.Count > 0)
                    //            P = P + Convert.ToDecimal(chitTrialMonthly.Compute("sum(P)", ""));
                    //        if (chitTrialFortnightly.Rows.Count > 1)
                    //            FP = FP + Convert.ToDecimal(chitTrialFortnightly.Compute("sum(P)", ""));
                    //        if (chitTrialTrimonthly.Rows.Count > 1)
                    //            TP = TP + Convert.ToDecimal(chitTrialTrimonthly.Compute("sum(P)", ""));
                    //    }
                    //    sheet.Range["F" + secrowcnt].Value = sssno.ToString();
                    //    sheet.Range["G" + secrowcnt].Value = "Monthly";
                    //    if (I_Credit > I_Debit)
                    //    {
                    //        sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(I_Credit- I_Debit);
                    //        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                    //        sheet.Range["I" + secrowcnt].Value = "0.00";
                    //        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                    //    }
                    //    else
                    //    {
                    //        sheet.Range["H" + secrowcnt].Value = "0.00";
                    //        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                    //        sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(I_Debit - I_Credit);
                    //        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                    //    }

                    //    Chitheadcrsum = Chitheadcrsum + Convert.ToDecimal(dr.ItemArray[2]);
                    //    Chitheaddrsum = Chitheaddrsum + Convert.ToDecimal(dr.ItemArray[3]);
                    //    CellRange range245 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                    //    range245.Borders.LineStyle = LineStyleType.Thin;
                    //    range245.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    //    range245.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    //     secrowcnt = secrowcnt + 1;
                    //    sssno = sssno + 1;
                    //    sheet.Range["F" + secrowcnt].Value = sssno.ToString();
                    //    sheet.Range["G" + secrowcnt].Value = "Fortnightly";
                    //    if (FI_Credit > FI_Debit)
                    //    {
                    //        sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(FI_Credit - FI_Debit);
                    //        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                    //        sheet.Range["I" + secrowcnt].Value = "0.00";
                    //        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                    //    }
                    //    else
                    //    {
                    //        sheet.Range["H" + secrowcnt].Value = "0.00";
                    //        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                    //        sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(FI_Debit - FI_Credit);
                    //        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                    //    }

                    //    Chitheadcrsum = Chitheadcrsum + Convert.ToDecimal(dr.ItemArray[2]);
                    //    Chitheaddrsum = Chitheaddrsum + Convert.ToDecimal(dr.ItemArray[3]);
                    //    CellRange range224 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                    //    range224.Borders.LineStyle = LineStyleType.Thin;
                    //    range224.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    //    range224.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    //    secrowcnt = secrowcnt + 1;
                    //    sssno = sssno + 1;
                    //    sheet.Range["F" + secrowcnt].Value = sssno.ToString();
                    //    sheet.Range["G" + secrowcnt].Value = "Trimonthly";
                    //    if (TI_Credit > TI_Debit)
                    //    {
                    //        sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(TI_Credit - TI_Debit);
                    //        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                    //        sheet.Range["I" + secrowcnt].Value = "0.00";
                    //        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                    //    }
                    //    else
                    //    {
                    //        sheet.Range["H" + secrowcnt].Value = "0.00";
                    //        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                    //        sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(TI_Debit - TI_Credit);
                    //        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                    //    }

                    //    Chitheadcrsum = Chitheadcrsum + Convert.ToDecimal(dr.ItemArray[2]);
                    //    Chitheaddrsum = Chitheaddrsum + Convert.ToDecimal(dr.ItemArray[3]);
                    //    CellRange range241 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                    //    range241.Borders.LineStyle = LineStyleType.Thin;
                    //    range241.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    //    range241.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    //}
                    //else
                    //{
                    sheet.Range["F" + secrowcnt].Value = dr.ItemArray[0].ToString();
                    sheet.Range["G" + secrowcnt].Value = dr.ItemArray[1].ToString();
                    sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                    sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                    sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";

                    Chitheadcrsum = Chitheadcrsum + Convert.ToDecimal(dr.ItemArray[2]);
                    Chitheaddrsum = Chitheaddrsum + Convert.ToDecimal(dr.ItemArray[3]);
                    CellRange range24 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                    range24.Borders.LineStyle = LineStyleType.Thin;
                    range24.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range24.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    //sssno = sssno + 1;
                    //}
                }
                secrowcnt = secrowcnt + 1;

                sheet.Range["G" + secrowcnt].Value = "Total";
                RichText richText53 = sheet.Range["G" + secrowcnt].RichText;
                richText53.SetFont(0, richText53.Text.Length - 1, fontBold);

                sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(Chitheadcrsum);
                sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                sheet.Range["H" + secrowcnt].Style.Font.IsBold = true;
                sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(Chitheaddrsum);
                sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                sheet.Range["I" + secrowcnt].Style.Font.IsBold = true;
                CellRange range215 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                range215.Borders.LineStyle = LineStyleType.Thin;
                range215.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range215.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                if (Chitheadcrsum > Chitheaddrsum)
                {
                    secrowcnt = secrowcnt + 1;

                    sheet.Range["G" + secrowcnt].Value = "Balance CR  ";
                    RichText richText54 = sheet.Range["G" + secrowcnt].RichText;
                    richText54.SetFont(0, richText54.Text.Length - 1, fontBold);
                    sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(Chitheadcrsum - Chitheaddrsum);
                    sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["H" + secrowcnt].Style.Font.IsBold = true;
                }
                else
                {
                    secrowcnt = secrowcnt + 1;

                    sheet.Range["G" + secrowcnt].Value = "Balance DR  ";
                    RichText richText55 = sheet.Range["G" + secrowcnt].RichText;
                    richText55.SetFont(0, richText55.Text.Length - 1, fontBold);
                    sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(Chitheaddrsum - Chitheadcrsum);
                    sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["I" + secrowcnt].Style.Font.IsBold = true;
                }
                CellRange range216 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                range216.Borders.LineStyle = LineStyleType.Thin;
                range216.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range216.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                secrowcnt = secrowcnt + 1;

                comparethird = secrowcnt;

                //if (comparefirst > comparethird)
                //{
                //    CellRange range5 = sheet.Range["F" + thirdtablewidth + ":I" + comparefirst];
                //    range5.BorderAround(LineStyleType.Medium, Color.Black);

                //    secrowcnt = comparefirst;
                //}
                //else if (comparethird > comparefirst)
                //{
                //    CellRange range5 = sheet.Range["F" + thirdtablewidth + ":I" + comparethird];
                //    range5.BorderAround(LineStyleType.Medium, Color.Black);
                //}


                #endregion


                #region Fourth table

                secrowcnt = secrowcnt + 3;

                fourthtablewidth = secrowcnt;


                CellRange range6 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                range6.Borders.LineStyle = LineStyleType.Double;
                range6.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range6.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.Range["F" + secrowcnt].Value = "Sl. No.";
                RichText richText56 = sheet.Range["F" + secrowcnt].RichText;
                richText56.SetFont(0, richText56.Text.Length - 1, fontBold);

                sheet.Range["G" + secrowcnt].Value = "HEADS";
                RichText richText57 = sheet.Range["G" + secrowcnt].RichText;
                richText57.SetFont(0, richText57.Text.Length - 1, fontBold);

                sheet.Range["H" + secrowcnt].Value = "CREDIT";
                RichText richText58 = sheet.Range["H" + secrowcnt].RichText;
                richText58.SetFont(0, richText58.Text.Length - 1, fontBold);

                sheet.Range["I" + secrowcnt].Value = "DEBIT";
                RichText richText59 = sheet.Range["I" + secrowcnt].RichText;
                richText59.SetFont(0, richText59.Text.Length - 1, fontBold);

                #region stamps

                secrowcnt = secrowcnt + 1;

                sheet.Range["F" + secrowcnt].Value = "X.";
                RichText richText60 = sheet.Range["F" + secrowcnt].RichText;
                richText60.SetFont(0, richText60.Text.Length - 1, fontBold);

                sheet.Range["G" + secrowcnt].Value = "STAMPS & STAMP PAPERS";
                RichText richText61 = sheet.Range["G" + secrowcnt].RichText;
                richText61.SetFont(0, richText61.Text.Length - 1, fontBold);

                CellRange range218 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                range218.Borders.LineStyle = LineStyleType.Thin;
                range218.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range218.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                foreach (DataRow dr in Stamps.Rows)
                {
                    secrowcnt = secrowcnt + 1;

                    if (dr.ItemArray[1].ToString() == "Total" || dr.ItemArray[1].ToString() == "Balance Cr" || dr.ItemArray[1].ToString() == "Balance Dr")
                    {
                        sheet.Range["G" + secrowcnt].Value = dr.ItemArray[1].ToString();
                        RichText richText62 = sheet.Range["G" + secrowcnt].RichText;
                        richText62.SetFont(0, richText62.Text.Length - 1, fontBold);

                        sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["H" + secrowcnt].Style.Font.IsBold = true;
                        sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["I" + secrowcnt].Style.Font.IsBold = true;
                    }
                    else
                    {
                        sheet.Range["F" + secrowcnt].Value = dr.ItemArray[0].ToString();
                        sheet.Range["G" + secrowcnt].Value = dr.ItemArray[1].ToString();

                        sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";

                        sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";

                    }

                    CellRange range25 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                    range25.Borders.LineStyle = LineStyleType.Thin;
                    range25.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range25.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }



                if (Stamps.Rows.Count == 0)
                {
                    secrowcnt = secrowcnt + 1;
                    sheet.Range["G" + secrowcnt].Value = "Postal Stamps";

                    CellRange range251 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                    range251.Borders.LineStyle = LineStyleType.Thin;
                    range251.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range251.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    secrowcnt = secrowcnt + 1;
                    sheet.Range["G" + secrowcnt].Value = "Revenue Stamps";

                    CellRange range25 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                    range25.Borders.LineStyle = LineStyleType.Thin;
                    range25.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range25.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    secrowcnt = secrowcnt + 1;
                    sheet.Range["G" + secrowcnt].Value = "Stamp Papers";

                    CellRange range252 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                    range252.Borders.LineStyle = LineStyleType.Thin;
                    range252.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range252.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                }
                int jjj = secrowcnt;
                secrowcnt = secrowcnt + 2;
                sheet.Range["F" + secrowcnt].Value = "XI.";
                RichText richText63 = sheet.Range["F" + secrowcnt].RichText;
                richText63.SetFont(0, richText63.Text.Length - 1, fontBold);

                sheet.Range["G" + secrowcnt].Value = "12 Heads";
                RichText richText64 = sheet.Range["G" + secrowcnt].RichText;
                richText64.SetFont(0, richText64.Text.Length - 1, fontBold);

                CellRange range219 = sheet.Range["F" + jjj + ":I" + secrowcnt];
                range219.Borders.LineStyle = LineStyleType.Thin;
                range219.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range219.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                decimal Headssumcr = 0;
                decimal Headssumdr = 0;
                var PFHeadDt = GetHeadPF("86,87,168,169,1508,91,90,1067,92,1113550,173,94,1132559,1132561,1953,1069,1132270,1132271,1132558,139,1132960,1132961,97,1132560,1132562,98,1131148,99,1111221,1113792,1113794,1113793,101,1126210,1113548,1113806,140,104,105,1132274,1132272,1132556,106,141,107,108,109,1120858,110,111,113,1132477,73,1131995,84,115,116,118,120,119,1126619,121,122,124,125,1132564,1132565,126,127,128,142,112,1132273,1132557,129,130,1132566,1120852,1132567,1130026,131,132,1113797,134,135,136,137,1062,4733,1113945,1132060,1132723,1131829,103,1131692,1134821,1134820,1114674");



                var summm1 = PFHeadDt.AsEnumerable().Sum(x => x.Field<decimal>("Debit"));

                System.Data.DataTable CreditDt1 = GetDataPandL_Credit("64,1128098,1123088,1131147,66,67,68,69,76,70,71,72,1119937,75,1129697,1120889,1130637,1120857,79,1114674,1126826,83");


                var summm2 = CreditDt1.AsEnumerable().Sum(x => x.Field<decimal>("Credit"));

                foreach (DataRow dr in Heads.Rows)
                {
                    secrowcnt = secrowcnt + 1;

                    sheet.Range["F" + secrowcnt].Value = dr.ItemArray[0].ToString();

                    if (dr.ItemArray[1].ToString() == "BRANCHES")
                    {
                        sheet.Range["G" + secrowcnt].Value = dr.ItemArray[1].ToString();
                        if (creordeb == "CR")
                        {
                            sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(sp);
                            sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                            Headssumcr = Headssumcr + Convert.ToDecimal(sp);
                        }
                        else if (creordeb == "DR")
                        {
                            sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(sp);
                            sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                            Headssumdr = Headssumdr + Convert.ToDecimal(sp);
                        }



                    }
                    else if (dr.ItemArray[1].ToString() == "PROFIT AND LOSS ACCOUNT")
                    {
                        sheet.Range["G" + secrowcnt].Value = dr.ItemArray[1].ToString();
                        decimal ss = 0;
                        if (summm2 > summm1)
                        {
                            ss = summm2 - summm1;
                            sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(ss);
                            sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                            Headssumcr = Headssumcr + Convert.ToDecimal(ss);
                        }
                        else if (summm2 < summm1)
                        {
                            ss = summm1 - summm2;
                            sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(ss);
                            sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                            Headssumdr = Headssumdr + Convert.ToDecimal(ss);
                        }

                    }
                    //else if(dr.ItemArray[1].ToString()=="OTHER ITEMS")
                    //{
                    //    sheet.Range["G" + secrowcnt].Value = dr.ItemArray[1].ToString();
                    //    sheet.Range["H" + secrowcnt].NumberValue =Convert.ToDouble( otherCredit);
                    //    sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                    //    sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                    //    sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                    //    Headssumcr = Headssumcr + Convert.ToDecimal(dr.ItemArray[2]);
                    //    Headssumdr = Headssumdr + Convert.ToDecimal(dr.ItemArray[3]);
                    //}
                    else
                    {
                        sheet.Range["G" + secrowcnt].Value = dr.ItemArray[1].ToString();

                        sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                        sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                        sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                        Headssumcr = Headssumcr + Convert.ToDecimal(dr.ItemArray[2]);
                        Headssumdr = Headssumdr + Convert.ToDecimal(dr.ItemArray[3]);
                    }
                    CellRange range26 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                    range26.Borders.LineStyle = LineStyleType.Thin;
                    range26.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range26.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }

                secrowcnt = secrowcnt + 1;

                sheet.Range["G" + secrowcnt].Value = "Total";
                RichText richText65 = sheet.Range["G" + secrowcnt].RichText;
                richText65.SetFont(0, richText65.Text.Length - 1, fontBold);
                sheet.Range["G" + secrowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

                sheet.Range["H" + secrowcnt].NumberValue = Convert.ToDouble(Headssumcr);
                sheet.Range["H" + secrowcnt].NumberFormat = "#,##0.00";
                sheet.Range["H" + secrowcnt].Style.Font.IsBold = true;
                sheet.Range["I" + secrowcnt].NumberValue = Convert.ToDouble(Headssumdr);
                sheet.Range["I" + secrowcnt].NumberFormat = "#,##0.00";
                sheet.Range["I" + secrowcnt].Style.Font.IsBold = true;

                CellRange range210 = sheet.Range["F" + secrowcnt + ":I" + secrowcnt];
                range210.Borders.LineStyle = LineStyleType.Thin;
                range210.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range210.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                #endregion

                secrowcnt = secrowcnt + 1;

                //CellRange range7 = sheet.Range["F" + fourthtablewidth + ":I" + secrowcnt];
                //range7.BorderAround(LineStyleType.Medium, Color.Black);

                #endregion


                //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");

                //Spire.Xls.Core.IPictures shape = sheet.Pictures.AddTextBox(1, 1, 15, 20);
                //shape.Fill.CustomPicture(@"E:\Visalam\Logo1.png");
                //shape.Fill.FillType = ShapeFillType.Picture;
                ;

                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(1, 24);
                sheet.SetColumnWidth(1, 9);
                sheet.SetRowHeight(2, 24);

                string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

                //workbook.SaveToFile(outputlocation + "TrSt-02" + "_" + timestamp + ".xlsx");
                //System.Diagnostics.Process.Start(outputlocation + "TrSt-02" + "_" + timestamp + ".xlsx");
                workbook.SaveToHttpResponse("TrSt-02.xlsx", HttpContext.Current.Response);
            }
            catch (Exception ex) { }

        }

        protected void btnOutPrize_Click(object sender, EventArgs e)
        {
            //ClsYeb.Outstanding(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value,filepath);
            Workbook workbook = new Workbook();
            workbook.CreateEmptySheets(1);
            Worksheet sheet = workbook.Worksheets[0];

            ExcelFont fontBold = workbook.CreateFont();
            fontBold.IsBold = true;

            var Outstunpaid = ClsYeb.BindOutstanding(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);

            sheet.Name = "Out.Prize & unprize St-5(E)";

            string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + drpdownBranchlist.SelectedItem.Value + ";");

            sheet.Pictures.Add(1, 1, filepath);

            CellRange range = sheet.Range["A4:M5"];
            range.Borders.LineStyle = LineStyleType.Double;
            range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


            sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
            RichText richText01 = sheet.Range["C1"].RichText;
            richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

            var bb = 2;
            if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
            {

                sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

            }
            else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
            {
                sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
            }
            else
            {
                sheet.Range["C" + bb + ""].Value = "Branch: " + branchname;
                RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
            }


            sheet.Range["L1"].Value = "Statement No. 5(E)";
            RichText richText77 = sheet.Range["L1"].RichText;
            richText77.SetFont(0, richText77.Text.Length - 1, fontBold);
            sheet.Range["L1:M1"].Merge();

            sheet.Range["A3"].Value = "Particulars of Outstanding Prizemoney and Unpaid Prizemoney as at " + balayer.Getstringdaymonth(txtToDate.Text) + "";
            RichText richText03 = sheet.Range["A3"].RichText;
            richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
            sheet.Range["A3:L3"].Merge();
            sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

            sheet.Range["A4:A5"].Merge();
            sheet.Range["A4"].Value = "Sl.No.";
            RichText richText04 = sheet.Range["A4"].RichText;
            richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
            sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["B4:E4"].Merge();
            sheet.Range["B4"].Value = "DRAWAL";
            RichText richText05 = sheet.Range["B4"].RichText;
            richText05.SetFont(0, richText05.Text.Length - 1, fontBold);
            sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["B5"].Value = "Chit Number";
            RichText richText06 = sheet.Range["B5"].RichText;
            richText06.SetFont(0, richText06.Text.Length - 1, fontBold);
            sheet.Range["B5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["B5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["C5"].Value = "Instal. No.";
            RichText richText07 = sheet.Range["C5"].RichText;
            richText07.SetFont(0, richText07.Text.Length - 1, fontBold);
            sheet.Range["C5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["C5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["D5"].Value = "Date";
            RichText richText08 = sheet.Range["D5"].RichText;
            richText08.SetFont(0, richText08.Text.Length - 1, fontBold);
            sheet.Range["D5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["D5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["E5"].Value = "Name of the Subscriber";
            RichText richText09 = sheet.Range["E5"].RichText;
            richText09.SetFont(0, richText09.Text.Length - 1, fontBold);
            sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["F4:I4"].Merge();

            sheet.Range["F4"].Value = "OUTSTANDING PRIZE MONEY";
            RichText richText10 = sheet.Range["F4"].RichText;
            richText10.SetFont(0, richText10.Text.Length - 1, fontBold);
            sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["F5"].Value = "Prize Money";
            RichText richText11 = sheet.Range["F5"].RichText;
            richText11.SetFont(0, richText11.Text.Length - 1, fontBold);
            sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["G5"].Value = "Dividend";
            RichText richText12 = sheet.Range["G5"].RichText;
            richText12.SetFont(0, richText12.Text.Length - 1, fontBold);
            sheet.Range["G5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["G5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["H5"].Value = "Total";
            RichText richText13 = sheet.Range["H5"].RichText;
            richText13.SetFont(0, richText13.Text.Length - 1, fontBold);
            sheet.Range["H5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["H5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["I5"].Value = "Commission";
            RichText richText14 = sheet.Range["I5"].RichText;
            richText14.SetFont(0, richText14.Text.Length - 1, fontBold);
            sheet.Range["I5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["I5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["J4"].Value = "Unpaid prize Money";
            RichText richText15 = sheet.Range["J4"].RichText;
            richText15.SetFont(0, richText15.Text.Length - 1, fontBold);
            sheet.Range["J4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["J4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["J5"].Value = "Total";
            RichText richText16 = sheet.Range["J5"].RichText;
            richText16.SetFont(0, richText16.Text.Length - 1, fontBold);
            sheet.Range["J5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["J5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["K4:K5"].Merge();
            sheet.Range["K4"].Value = "Amount actually remitted by the subscriber";
            RichText richText17 = sheet.Range["K4"].RichText;
            richText17.SetFont(0, richText17.Text.Length - 1, fontBold);
            sheet.Range["K4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["K4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["L4:L5"].Merge();
            sheet.Range["L4"].Value = "Balance payable by  the subscriber";
            RichText richText18 = sheet.Range["L4"].RichText;
            richText18.SetFont(0, richText18.Text.Length - 1, fontBold);
            sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["M4:M5"].Merge();
            sheet.Range["M4"].Value = "Unpaid Prize Money (Ledger Credit)";
            RichText richText19 = sheet.Range["M4"].RichText;
            richText19.SetFont(0, richText19.Text.Length - 1, fontBold);
            sheet.Range["M4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["M4"].Style.VerticalAlignment = VerticalAlignType.Center;


            decimal Balpay = 0;
            decimal Headssumdr = 0;
            int rowcnt = 5;
            int sno = 1;
            foreach (DataRow dr in Outstunpaid.Rows)
            {
                rowcnt = rowcnt + 1;

                // if (dr.ItemArray[6].ToString() != "Total")
                // {
                sheet.Range["A" + rowcnt].Value = sno.ToString();
                sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                sheet.Range["C" + rowcnt].Value = dr.ItemArray[4].ToString();
                sheet.Range["D" + rowcnt].Value = dr.ItemArray[5].ToString();
                sheet.Range["E" + rowcnt].Value = dr.ItemArray[6].ToString();
                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[7]);
                sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                PrizeMoney += Convert.ToDecimal(dr.ItemArray[7]);
                sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[8]);
                sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
                Kasar += Convert.ToDecimal(dr.ItemArray[8]);
                sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[9]);
                sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                OSTotal += Convert.ToDecimal(dr.ItemArray[9]);
                sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[10]);
                sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
                Commission += Convert.ToDecimal(dr.ItemArray[10]);
                sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[11]);
                sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                UPTotal += Convert.ToDecimal(dr.ItemArray[11]);
                sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[12]);
                sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                amtremit += Convert.ToDecimal(dr.ItemArray[12]);
                sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[13]);
                sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                Balpay += Convert.ToDecimal(dr.ItemArray[13]);
                sheet.Range["M" + rowcnt].Value = dr.ItemArray[14].ToString();
                sheet.Range["M" + rowcnt].NumberFormat = "#,##0.00";
                Headssumdr += Convert.ToDecimal(dr.ItemArray[14]);
                //sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(dr.ItemArray[11]) - Convert.ToDecimal(dr.ItemArray[12]));
                //sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";

                //Balpay = Balpay + (Convert.ToDecimal(dr.ItemArray[11]) - Convert.ToDecimal(dr.ItemArray[12]));
                // }
                //else
                //{
                //    rowcnt = rowcnt + 2;
                //    sheet.Range["E" + rowcnt].Value = dr.ItemArray[6].ToString();
                //    RichText richText04 = sheet.Range["E" + rowcnt].RichText;
                //    richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                //    sheet.Range["E" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

                //    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(PrizeMoney);
                //    sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                //    sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(Kasar);
                //    sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
                //    sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(OSTotal);
                //    sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                //    sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(Commission);
                //    sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
                //    sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(UPTotal);
                //    sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                //    sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(amtremit);
                //    sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                //    sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(Balpay);
                //    sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";

                //}
                sno++;
            }
            //rowcnt = rowcnt + 1;
            //sheet.Range["A" + rowcnt].Value = sno.ToString();
            //sheet.Range["F" + rowcnt].Value = "0.0";
            //sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
            //sheet.Range["G" + rowcnt].Value = "0.0";
            //sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
            //sheet.Range["H" + rowcnt].Value = "0.0";
            //sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
            //sheet.Range["I" + rowcnt].Value = "0.0";
            //sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
            //sheet.Range["J" + rowcnt].Value = "0.0";
            //sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
            //sheet.Range["K" + rowcnt].Value = "0.0";
            //sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
            //sheet.Range["L" + rowcnt].Value = "0.0";
            //sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
            //sheet.Range["M" + rowcnt].NumberValue = Convert.ToDouble(Headssumdr);
            //sheet.Range["M" + rowcnt].NumberFormat = "#,##0.00";
            rowcnt = rowcnt + 2;
            sheet.Range["E" + rowcnt].Value = "Total";
            RichText richText99 = sheet.Range["K" + rowcnt].RichText;
            //     richText99.SetFont(0, richText99.Text.Length - 1, fontBold);
            sheet.Range["E" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
            sheet.Range["E" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(PrizeMoney);
            sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(Kasar);
            sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["G" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(OSTotal);
            sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["H" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(Commission);
            sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["I" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(UPTotal);
            sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["J" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(amtremit);
            sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(Balpay);
            sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["M" + rowcnt].NumberValue = Convert.ToDouble(Headssumdr);
            sheet.Range["M" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["M" + rowcnt].Style.Font.IsBold = true;

            CellRange range21 = sheet.Range["A6:" + "M" + rowcnt];
            range21.Borders.LineStyle = LineStyleType.Thin;
            range21.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range21.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
            //  }


            rowcnt = rowcnt + 2;




            sheet.AllocatedRange.AutoFitColumns();
            sheet.AllocatedRange.AutoFitRows();


            //sheet.SetRowHeight(4, 29);
            //sheet.SetRowHeight(5, 24);
            //sheet.SetRowHeight(1, 24);
            //sheet.SetRowHeight(2, 24);
            sheet.SetColumnWidth(1, 6);
            sheet.SetColumnWidth(2, 10);
            sheet.SetColumnWidth(3, 10);
            sheet.SetColumnWidth(4, 10);
            sheet.SetColumnWidth(5, 20);
            sheet.SetColumnWidth(6, 15);
            sheet.SetColumnWidth(7, 15);
            sheet.SetColumnWidth(8, 15);
            sheet.SetColumnWidth(9, 15);
            sheet.SetColumnWidth(10, 15);
            sheet.SetColumnWidth(11, 15);
            sheet.SetColumnWidth(12, 15);
            sheet.SetColumnWidth(13, 15);
            string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

            //workbook.SaveToFile(outputlocation + "OutPrizeunprizeSt-5" + "_" + timestamp + ".xlsx");
            //System.Diagnostics.Process.Start(outputlocation + "OutPrizeunprizeSt-5" + "_" + timestamp + ".xlsx");
            workbook.SaveToHttpResponse("OutPrizeunprizeSt-5.xlsx", HttpContext.Current.Response);
        }

        protected void btnLoansOutAccrued_Click(object sender, EventArgs e)
        {
            //  ClsYeb.LoansOutAccruedint(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value,filepath);
            Workbook workbook = new Workbook();
            workbook.CreateEmptySheets(1);
            Worksheet sheet = workbook.Worksheets[0];

            ExcelFont fontBold = workbook.CreateFont();
            fontBold.IsBold = true;


            sheet.Name = "Loans Out & Accrued int. St-08";

            sheet.Pictures.Add(1, 1, filepath);


            var Loansout = ClsYeb.BindLoansout(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
            //        var dtbind = ClsYeb.loan(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
            string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + drpdownBranchlist.SelectedItem.Value + ";");

            CellRange range = sheet.Range["A4:O4"];
            range.Borders.LineStyle = LineStyleType.Double;
            range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


            sheet.Range["B1"].Value = "Sree Visalam Chit Fund Ltd.,";
            RichText richText01 = sheet.Range["B1"].RichText;
            richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

            var bb = 2;
            var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
            if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
            {

                sheet.Range["B" + bb + ""].Value = "Branch: " + "Mount Road";
                RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

            }
            else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
            {
                sheet.Range["B" + bb + ""].Value = "Branch: " + "Pallathur";
                RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
            }
            else
            {
                sheet.Range["B" + bb + ""].Value = "Branch: " + branchtext;
                RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
            }

            sheet.Range["N" + bb + ""].Value = "Statement No. 8";
            RichText richText33 = sheet.Range["N" + bb + ""].RichText;
            richText33.SetFont(0, richText33.Text.Length - 1, fontBold);
            sheet.Range["N" + bb + ":O" + bb + ""].Merge();
            sheet.Range["N" + bb + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;

            sheet.Range["A3"].Value = "Particulars of Loans outstanding and Accrued Interest on Loans as at " + balayer.Getstringdaymonth(txtToDate.Text) + "";
            RichText richText03 = sheet.Range["A3"].RichText;
            richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
            sheet.Range["A3:O3"].Merge();

            sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;


            sheet.Range["A4"].Value = "Sl.No.";
            sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["A4"].Style.Font.IsBold = true;

            sheet.Range["B4"].Value = "Chit Number";
            sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["B4"].Style.Font.IsBold = true;


            sheet.Range["C4"].Value = "Date of Loan";
            sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["C4"].Style.Font.IsBold = true;

            sheet.Range["D4"].Value = "Name of the SubscriBer";
            sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["D4"].Style.Font.IsBold = true;

            sheet.Range["E4"].Value = "Loan Amount";
            sheet.Range["E4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["E4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["E4"].Style.Font.IsBold = true;

            sheet.Range["F4"].Value = "Rate of Interest";
            sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["F4"].Style.Font.IsBold = true;

            sheet.Range["G4"].Value = "Period of Accrued Interest in Days";
            sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["G4"].Style.Font.IsBold = true;

            sheet.Range["H4"].Value = "Amount at Credit in Chit A/c for Chit Loan";
            sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["H4"].Style.Font.IsBold = true;


            sheet.Range["I4"].Value = "Sl.No.";
            sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["I4"].Style.Font.IsBold = true;

            sheet.Range["J4"].Value = "Date of Loan";
            sheet.Range["J4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["J4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["J4"].Style.Font.IsBold = true;

            sheet.Range["K4"].Value = "Name of the Staff";
            sheet.Range["K4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["K4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["K4"].Style.Font.IsBold = true;

            sheet.Range["L4"].Value = "Loan Amount";
            sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["L4"].Style.Font.IsBold = true;

            sheet.Range["M4"].Value = "Rate of Interest";
            sheet.Range["M4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["M4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["M4"].Style.Font.IsBold = true;

            sheet.Range["N4"].Value = "Period of Accrued Interest in Days";
            sheet.Range["N4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["N4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["N4"].Style.Font.IsBold = true;

            sheet.Range["O4"].Value = "Accrued Interest";
            sheet.Range["O4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["O4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["O4"].Style.Font.IsBold = true;


            sheet.Range["B5"].Value = "CHIT LOAN";
            RichText richText04 = sheet.Range["B5"].RichText;
            richText04.SetFont(0, richText04.Text.Length - 1, fontBold);

            sheet.Range["J5"].Value = "STAFF LOAN";
            RichText richText05 = sheet.Range["J5"].RichText;
            richText05.SetFont(0, richText05.Text.Length - 1, fontBold);

            decimal totamount = 0;
            decimal totamount1 = 0;

            decimal fulltotamount = 0;

            int rowcnt = 5;
            int rowcnt1 = 5;
            var sno = 0;
            var sno1 = 0;
            decimal accinterwst = 0;
            foreach (DataRow dr in Loansout.Rows)
            {


                if (dr.ItemArray[1].ToString() == "Chit Loan")
                {
                    rowcnt = rowcnt + 1;
                    sno++;
                    sheet.Range["A" + rowcnt].Value = sno.ToString();
                    sheet.Range["B" + rowcnt].Value = dr.ItemArray[9].ToString();
                    sheet.Range["C" + rowcnt].Value = dr.ItemArray[5].ToString();
                    sheet.Range["C" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["D" + rowcnt].Value = dr.ItemArray[2].ToString();
                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                    sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                    //    sheet.Range["F" + rowcnt].Value = dr.ItemArray[6].ToString();
                    //      sheet.Range["G" + rowcnt].Value = dr.ItemArray[7].ToString();
                    //      sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[8]);

                    //   sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                    //sheet.Range["H" + rowcnt].Value = dr.ItemArray[10].ToString();
                    totamount = totamount + Convert.ToDecimal(dr.ItemArray[4]);

                }
                else if (dr.ItemArray[1].ToString() == "Staff Loan")
                {
                    rowcnt1++;
                    sno1++;
                    sheet.Range["I" + rowcnt1].Value = sno1.ToString();
                    sheet.Range["J" + rowcnt1].Value = dr.ItemArray[5].ToString();
                    sheet.Range["J" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["K" + rowcnt1].Value = dr.ItemArray[2].ToString();
                    sheet.Range["L" + rowcnt1].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                    sheet.Range["L" + rowcnt1].NumberFormat = "#,##0.00";
                    //    sheet.Range["M" + rowcnt1].Value = dr.ItemArray[6].ToString();
                    //    sheet.Range["O" + rowcnt].Value = dr.ItemArray[7].ToString();
                    //sheet.Range["P" + rowcnt].Value = dr.ItemArray[8].ToString();
                    //sheet.Range["P" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[8]);
                    ////sheet.Range["P" + rowcnt].NumberFormat = "#,##0.00";
                    //accinterwst += Convert.ToDecimal(dr.ItemArray[8].ToString());

                    totamount1 = totamount1 + Convert.ToDecimal(dr.ItemArray[4]);
                }
                else if (dr.ItemArray[1].ToString() == "Accrued Interest on Loan")
                {
                    accinterwst += Convert.ToDecimal(dr.ItemArray[8].ToString());
                }

                //totamount = totamount + Convert.ToDecimal(dr.ItemArray[15]);
            }


            fulltotamount = totamount + totamount1 + accinterwst;
            rowcnt += 2;
            sheet.Range["D" + rowcnt].Value = "Accrued Interest On Loan";
            sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["O" + rowcnt].NumberValue = Convert.ToDouble(accinterwst);
            sheet.Range["O" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["O" + rowcnt].Style.Font.IsBold = true;

            rowcnt = rowcnt + 6;

            sheet.Range["K" + rowcnt].Value = "ABSTRACT";
            RichText richText06 = sheet.Range["K" + rowcnt].RichText;
            richText06.SetFont(0, richText06.Text.Length - 1, fontBold);

            rowcnt = rowcnt + 1;
            sheet.Range["K" + rowcnt].Value = "Chit Loan";
            sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["L" + rowcnt].Value = "Rs.";
            sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["O" + rowcnt].NumberValue = Convert.ToDouble(totamount);
            sheet.Range["O" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["O" + rowcnt].Style.Font.IsBold = true;


            rowcnt = rowcnt + 1;
            sheet.Range["K" + rowcnt].Value = "Staff Loan";
            sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["L" + rowcnt].Value = "Rs.";
            sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["O" + rowcnt].NumberValue = Convert.ToDouble(totamount1);
            sheet.Range["O" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["O" + rowcnt].Style.Font.IsBold = true;

            rowcnt = rowcnt + 1;
            sheet.Range["K" + rowcnt].Value = "Accrued Interest";
            sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["L" + rowcnt].Value = "Rs.";
            sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["O" + rowcnt].NumberValue = Convert.ToDouble(accinterwst);
            sheet.Range["O" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["O" + rowcnt].Style.Font.IsBold = true;

            rowcnt = rowcnt + 2;
            sheet.Range["K" + rowcnt].Value = "Total";
            sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["O" + rowcnt].NumberValue = Convert.ToDouble(fulltotamount);
            sheet.Range["O" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["O" + rowcnt].Style.Font.IsBold = true;

            rowcnt += 2;
            sheet.Range["D" + rowcnt].Value = "Total";
            sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(totamount);
            sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["E" + rowcnt].Style.Font.IsBold = true;

            sheet.Range["K" + rowcnt].Value = "Total";
            sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
            sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(totamount1);
            sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
            sheet.Range["L" + rowcnt].Style.Font.IsBold = true;

            CellRange range25 = sheet.Range["A5:" + "O" + rowcnt];
            range25.Borders.LineStyle = LineStyleType.Thin;
            range25.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range25.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

            sheet.AllocatedRange.AutoFitColumns();
            sheet.AllocatedRange.AutoFitRows();

            sheet.SetColumnWidth(2, 26);
            sheet.SetColumnWidth(3, 13);
            sheet.SetColumnWidth(4, 25);
            sheet.SetColumnWidth(5, 14);
            sheet.SetColumnWidth(6, 7);
            sheet.SetColumnWidth(7, 7);
            sheet.SetColumnWidth(8, 19);
            sheet.SetColumnWidth(9, 5);
            sheet.SetColumnWidth(10, 13);
            sheet.SetColumnWidth(11, 22);
            sheet.SetColumnWidth(12, 14);
            sheet.SetColumnWidth(13, 7);
            sheet.SetColumnWidth(14, 7);
            sheet.SetColumnWidth(15, 16);


            string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

            //workbook.SaveToFile(outputlocation + "LoansOutAccruedintSt-08" + "_" + timestamp + ".xlsx");
            //System.Diagnostics.Process.Start(outputlocation + "LoansOutAccruedintSt-08" + "_" + timestamp + ".xlsx");
            workbook.SaveToHttpResponse("LoansOutAccruedintSt.xlsx", HttpContext.Current.Response);
        }

        protected void btnChitDebit_Click(object sender, EventArgs e)
        {
            ST24XLwrite1();
        }
        protected void btnSundriesAdvance_Click(object sender, EventArgs e)
        {
            //ClsYeb.SundriesandAdvances(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value,filepath);
            Workbook workbook = new Workbook();
            workbook.CreateEmptySheets(1);
            Worksheet sheet = workbook.Worksheets[0];

            ExcelFont fontBold = workbook.CreateFont();
            fontBold.IsBold = true;

            //add courcost 
            //changes on date 18/08/2016
            var sundries = ClsYeb.Bindsundriesandadvance(txtFrmDate.Text, txtToDate.Text, drpdownBranchlist.SelectedItem.Value);
            //add courcost 
            //changes on date 18/08/2016

            sheet.Name = "Sundries & Advance St-09";

            sheet.Pictures.Add(1, 1, filepath);


            string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + drpdownBranchlist.SelectedItem.Value + ";");

            CellRange range = sheet.Range["A4:F4"];
            range.Borders.LineStyle = LineStyleType.Double;
            range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


            sheet.Range["B1"].Value = "Sree Visalam Chit Fund Ltd.,";
            RichText richText01 = sheet.Range["B1"].RichText;
            richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

            var bb = 2;
            if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
            {

                sheet.Range["B" + bb + ""].Value = "Branch: " + "Mount Road";
                RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

            }
            else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
            {
                sheet.Range["B" + bb + ""].Value = "Branch: " + "Pallathur";
                RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
            }
            else
            {
                sheet.Range["B" + bb + ""].Value = "Branch: " + branchname;
                RichText richText02 = sheet.Range["B" + bb + ""].RichText;
                richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
            }
            //17/08/2018
            sheet.Range["K1"].Value = "Statement No. 09";
            RichText richText82 = sheet.Range["K1"].RichText;
            richText82.SetFont(0, richText82.Text.Length - 1, fontBold);
            sheet.Range["K1:L1"].Merge();
            //17/08/2018
            sheet.Range["A3"].Value = "Particulars of Sundries and Advances as at " + balayer.Getstringdaymonth(txtToDate.Text) + "";
            RichText richText03 = sheet.Range["A3"].RichText;
            richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
            sheet.Range["A3:L3"].Merge();

            sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;


            sheet.Range["A4"].Value = "Sl.No.";
            sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["A4"].Style.Font.IsBold = true;

            sheet.Range["B4"].Value = "Particulars";
            sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["B4"].Style.Font.IsBold = true;


            sheet.Range["C4"].Value = "Amount";
            sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["C4"].Style.Font.IsBold = true;


            sheet.Range["D4"].Value = "Gross Credit";
            sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["D4"].Style.Font.IsBold = true;


            sheet.Range["E4"].Value = "Gross Debit";
            sheet.Range["E4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["E4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["E4"].Style.Font.IsBold = true;

            sheet.Range["F4"].Value = "on account of";
            sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["F4"].Style.Font.IsBold = true;

            CellRange range2 = sheet.Range["G4:L4"];
            range2.Borders.LineStyle = LineStyleType.Double;
            range2.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range2.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

            sheet.Range["G4"].Value = "Sl.No.";
            sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["G4"].Style.Font.IsBold = true;

            sheet.Range["H4"].Value = "Particulars";
            sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["H4"].Style.Font.IsBold = true;

            sheet.Range["I4"].Value = "Amount";
            sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["I4"].Style.Font.IsBold = true;

            sheet.Range["J4"].Value = "Gross Credit";
            sheet.Range["J4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["J4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["J4"].Style.Font.IsBold = true;

            sheet.Range["K4"].Value = "Gross Debit";
            sheet.Range["K4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["K4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["K4"].Style.Font.IsBold = true;

            sheet.Range["L4"].Value = "on account of";
            sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;
            sheet.Range["L4"].Style.Font.IsBold = true;

            int rowcnt = 5;
            int rowcnt2 = 5;

            decimal Totalcreditsum = 0;
            decimal Totaldebitsum = 0;

            decimal Total = 0;


            List<UInt32> parentid = (from row in sundries.AsEnumerable()
                                     select row.Field<UInt32>("ParentID")).ToList<UInt32>();

            var result = (from d in parentid select d).Distinct().ToList();

            DataTable totaldt = new DataTable();
            totaldt.Columns.Add("Name");
            totaldt.Columns.Add("value");
            totaldt.Columns.Add("amount");

            string innercolname = "";
            int slno = 0;

            foreach (var dd in result)
            {
                totaldt.Clear();
                DataTable selectedTable = sundries.AsEnumerable()
            .Where(r => r.Field<UInt32>("ParentID") == dd)
            .CopyToDataTable();
                string qry = "";
                if (dd == 9)
                {
                    qry = selectedTable.Rows[0]["Heads"].ToString();
                }
                else
                {
                    qry = balayer.GetSingleValue("SELECT Node FROM svcf.headstree where NodeID=" + dd + ";");
                }




                string[] columnNames = selectedTable.Columns.Cast<DataColumn>()
                                 .Select(x => x.ColumnName)
                                 .ToArray();

                int excludecol = 0;

                foreach (var ddd in columnNames)
                {
                    excludecol = excludecol + 1;
                    DataRow ds = totaldt.NewRow();
                    if (excludecol > 4)
                    {
                        int count = selectedTable.AsEnumerable().Where(r => r.Field<decimal>(ddd) != 0).Count();

                        DataTable totaldtnew = new DataTable();

                        if (count > 0)
                        {
                            totaldtnew = selectedTable.AsEnumerable().Where(r => r.Field<decimal>(ddd) != 0).CopyToDataTable();
                            innercolname = ddd.Split('_')[1];
                        }
                        if (totaldtnew.Rows.Count > 0)
                        {
                            foreach (DataRow sss in totaldtnew.Rows)
                            {
                                ds["Name"] = sss.ItemArray[0].ToString();
                                ds["value"] = innercolname;
                                ds["amount"] = sss.ItemArray[excludecol - 1].ToString();
                                totaldt.Rows.Add(ds.ItemArray);
                            }
                            totaldtnew.Clear();
                        }
                    }
                }

                int arrval = excludecol - 1;

                int heading = 0;

                int comparecnt = 0;

                if (rowcnt <= 40)
                {
                    foreach (DataRow dr in totaldt.Rows)
                    {


                        if (rowcnt >= 40)
                        {
                            break;
                        }

                        if (heading == 0)
                        {
                            slno = slno + 1;
                            rowcnt = rowcnt + 1;
                            sheet.Range["A" + rowcnt].Value = slno.ToString();
                            sheet.Range["B" + rowcnt].Value = qry.ToString();
                            RichText richText04 = sheet.Range["B" + rowcnt].RichText;
                            richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                        }

                        heading = heading + 1;


                        var ss = "";
                        if (dd == 9)
                        {

                        }
                        else
                        {
                            comparecnt = comparecnt + 1;
                            rowcnt = rowcnt + 1;
                            ss = dr.ItemArray[0].ToString();
                            sheet.Range["B" + rowcnt].Value = ss;
                        }


                        if (dr.ItemArray[1].ToString() == "Debit")
                        {
                            sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                            sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                            //sheet.Range["D" + rowcnt].NumberValue = 0;
                            //sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                            sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                            sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";

                            Totaldebitsum = Totaldebitsum + Convert.ToDecimal(dr.ItemArray[2]);


                        }
                        else if (dr.ItemArray[1].ToString() == "Credit")
                        {

                            sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                            sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                            sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                            sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                            //sheet.Range["E" + rowcnt].NumberValue = 0;
                            //sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";

                            Totalcreditsum = Totalcreditsum + Convert.ToDecimal(dr.ItemArray[2]);
                        }
                    }
                    CellRange range666 = sheet.Range["A5:" + "F" + rowcnt];
                    range666.Borders.LineStyle = LineStyleType.Thin;
                    range666.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range666.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }

                if (rowcnt >= 40)
                {
                    rowcnt = rowcnt + 1;
                    if (rowcnt2 == 5)
                    {
                        sheet.Range["B" + rowcnt].Value = "Total Carried Over";
                        sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(Totalcreditsum);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(Totaldebitsum);
                        sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["E" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["H" + rowcnt2].Value = "Brought Forward";
                        sheet.Range["H" + rowcnt2].Style.HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["H" + rowcnt2].Style.Font.IsBold = true;
                        sheet.Range["K" + rowcnt2].NumberValue = Convert.ToDouble(Totaldebitsum);
                        sheet.Range["K" + rowcnt2].NumberFormat = "#,##0.00";
                        sheet.Range["K" + rowcnt2].Style.Font.IsBold = true;
                        sheet.Range["J" + rowcnt2].NumberValue = Convert.ToDouble(Totalcreditsum);
                        sheet.Range["J" + rowcnt2].NumberFormat = "#,##0.00";
                        sheet.Range["J" + rowcnt2].Style.Font.IsBold = true;
                    }
                    if (comparecnt > 0)
                    {

                        for (int r1 = 0; r1 <= comparecnt - 1; r1++)
                        {
                            totaldt.Rows.RemoveAt(0);
                        }

                    }

                    foreach (DataRow dr in totaldt.Rows)
                    {
                        if (heading == 0)
                        {
                            slno = slno + 1;
                            rowcnt2 = rowcnt2 + 1;
                            sheet.Range["G" + rowcnt2].Value = slno.ToString();
                            sheet.Range["H" + rowcnt2].Value = qry.ToString();
                            RichText richText04 = sheet.Range["H" + rowcnt2].RichText;
                            richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                        }


                        heading = heading + 1;

                        var ss = "";
                        if (dd == 9)
                        {

                        }
                        else
                        {
                            rowcnt2 = rowcnt2 + 1;
                            ss = dr.ItemArray[0].ToString();
                            sheet.Range["H" + rowcnt2].Value = ss;
                        }

                        if (dr.ItemArray[1].ToString() == "Debit")
                        {

                            sheet.Range["I" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                            sheet.Range["I" + rowcnt2].NumberFormat = "#,##0.00";
                            //sheet.Range["J" + rowcnt2].NumberValue = 0;
                            //sheet.Range["J" + rowcnt2].NumberFormat = "#,##0.00";
                            sheet.Range["K" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                            sheet.Range["K" + rowcnt2].NumberFormat = "#,##0.00";

                            Totaldebitsum = Totaldebitsum + Convert.ToDecimal(dr.ItemArray[2]);

                        }
                        else if (dr.ItemArray[1].ToString() == "Credit")
                        {

                            sheet.Range["I" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                            sheet.Range["I" + rowcnt2].NumberFormat = "#,##0.00";
                            sheet.Range["J" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                            sheet.Range["J" + rowcnt2].NumberFormat = "#,##0.00";
                            //sheet.Range["K" + rowcnt2].NumberValue = 0;
                            //sheet.Range["K" + rowcnt2].NumberFormat = "#,##0.00";

                            Totalcreditsum = Totalcreditsum + Convert.ToDecimal(dr.ItemArray[2]);

                        }
                    }
                    rowcnt2 = rowcnt2 + 1;
                }
                CellRange range5 = sheet.Range["G5:" + "L" + rowcnt];
                range5.Borders.LineStyle = LineStyleType.Thin;
                range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                // 17/08/2018
                //if (rowcnt < 40)
                //{
                //    rowcnt = rowcnt + 1;
                //}
            }

            if (rowcnt > 40)
            {
                rowcnt2 = rowcnt2 + 1;
                sheet.Range["H" + rowcnt2].Value = "Total";
                sheet.Range["H" + rowcnt2].Style.HorizontalAlignment = HorizontalAlignType.Right;
                sheet.Range["H" + rowcnt2].Style.Font.IsBold = true;
                sheet.Range["K" + rowcnt2].NumberValue = Convert.ToDouble(Totaldebitsum);
                sheet.Range["K" + rowcnt2].NumberFormat = "#,##0.00";
                sheet.Range["K" + rowcnt2].Style.Font.IsBold = true;
                sheet.Range["J" + rowcnt2].NumberValue = Convert.ToDouble(Totalcreditsum);
                sheet.Range["J" + rowcnt2].NumberFormat = "#,##0.00";
                sheet.Range["J" + rowcnt2].Style.Font.IsBold = true;
                rowcnt2 = rowcnt2 + 2;


                if (Totalcreditsum > Totaldebitsum)
                {
                    Total = Totalcreditsum - Totaldebitsum;
                    sheet.Range["I" + rowcnt2].Value = "Net Balance Credit";
                    RichText richText04 = sheet.Range["I" + rowcnt2].RichText;
                    richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                    sheet.Range["J" + rowcnt2].NumberValue = Convert.ToDouble(Total);
                    sheet.Range["J" + rowcnt2].Style.Font.IsBold = true;
                    sheet.Range["J" + rowcnt2].NumberFormat = "#,##0.00";
                    sheet.Range["J" + rowcnt2].Style.Font.IsBold = true;
                }
                else if (Totaldebitsum > Totalcreditsum)
                {
                    Total = Totaldebitsum - Totalcreditsum;
                    sheet.Range["I" + rowcnt2].Value = "Net Balance Debit";
                    RichText richText04 = sheet.Range["I" + rowcnt2].RichText;
                    richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                    sheet.Range["K" + rowcnt2].NumberValue = Convert.ToDouble(Total);
                    sheet.Range["K" + rowcnt2].Style.Font.IsBold = true;
                    sheet.Range["K" + rowcnt2].NumberFormat = "#,##0.00";
                    sheet.Range["K" + rowcnt2].Style.Font.IsBold = true;
                }

                rowcnt2 = rowcnt2 + 3;

            }
            else
            {
                rowcnt = rowcnt + 1;
                sheet.Range["B" + rowcnt].Value = "Total";
                sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(Totalcreditsum);
                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(Totaldebitsum);
                sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["E" + rowcnt].Style.Font.IsBold = true;
                rowcnt = rowcnt + 2;


                if (Totalcreditsum > Totaldebitsum)
                {
                    Total = Totalcreditsum - Totaldebitsum;
                    sheet.Range["B" + rowcnt].Value = "Net Balance Credit";
                    RichText richText04 = sheet.Range["B" + rowcnt].RichText;
                    richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(Total);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                }
                else if (Totaldebitsum > Totalcreditsum)
                {
                    Total = Totaldebitsum - Totalcreditsum;
                    sheet.Range["B" + rowcnt].Value = "Net Balance Debit";
                    RichText richText04 = sheet.Range["B" + rowcnt].RichText;
                    richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(Total);
                    sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["E" + rowcnt].Style.Font.IsBold = true;
                }

                rowcnt = rowcnt + 3;


            }
            CellRange range6 = sheet.Range["A5:" + "F" + rowcnt];
            range6.Borders.LineStyle = LineStyleType.Thin;
            range6.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range6.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

            CellRange range66 = sheet.Range["G5:" + "L" + rowcnt];
            range66.Borders.LineStyle = LineStyleType.Thin;
            range66.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range66.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

            sheet.AllocatedRange.AutoFitColumns();
            sheet.AllocatedRange.AutoFitRows();

            sheet.SetRowHeight(4, 29);
            sheet.SetColumnWidth(1, 9);
            sheet.SetRowHeight(5, 24);
            sheet.SetRowHeight(1, 24);
            sheet.SetRowHeight(2, 24);



            string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

            //workbook.SaveToFile(outputlocation + "SundriesAdvanceSt-09" + "_" + timestamp + ".xlsx");
            //System.Diagnostics.Process.Start(outputlocation + "SundriesAdvanceSt-09" + "_" + timestamp + ".xlsx");
            workbook.SaveToHttpResponse("SundriesAdvanceSt.xlsx", HttpContext.Current.Response);
        }



        protected void AbstractST05A_Click(object sender, EventArgs e)
        {
            ExportxlGroupwarChit();
        }
        public void ExportxlGroupwarChit()
        {
            try
            {

                System.Data.DataTable CreditDt1 = BindChitTrial();

                string filename = "Abstract Tr. Bal St-05 (A)" + DateTime.Now.Millisecond.ToString();


                using (XLWorkbook wb = new XLWorkbook())
                {

                    var ws = wb.Worksheets.Add("Abstract Tr. Bal St-05 (A)");

                    AddImage(wb, "Abstract Tr. Bal St-05 (A)", 1, 1, "imglogo.png");

                    int logo = 1;
                    int branch = 2;
                    int date = 3;
                    int CREDIT = 4;
                    int SNo1 = 5;

                    double page = Math.Ceiling((float)CreditDt1.Rows.Count / 35);
                    int i = 0;
                    do
                    {
                        AddImage(wb, "Abstract Tr. Bal St-05 (A)", 1, logo, "imglogo.png");
                        ws.Cell(logo, 11).Value = "Statement No. 05 (A)";
                        ws.Range(logo, 11, logo, 12).Merge().AddToNamed("Titles");


                        ws.Cell(logo, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(logo, 2).Style.Font.Bold = true;
                        ws.Cell(logo, 2).Style.Font.FontSize = 14;


                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(branch, 2).Value = "Mount Road";
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(branch, 2).Value = "Pallathur";
                        }
                        else
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        }
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;

                        ws.Cell(date, 1).Value = "ABSTRACT OF TRIAL BALANCE OF CHIT GROUPS AS AT " + txtToDate.Text;
                        ws.Cell(date, 1).Style.Font.Bold = true;
                        ws.Cell(date, 1).Style.Font.FontSize = 13;
                        ws.Range(date, 1, date, 12).Merge().AddToNamed("Titles");




                        ws.Cell(CREDIT, 1).Value = "Sl. No.";
                        ws.Cell(CREDIT, 1).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 1).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 1, SNo1, 1).Merge();

                        ws.Cell(CREDIT, 2).Value = "Group No.";
                        ws.Cell(CREDIT, 2).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 2).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 2, SNo1, 2).Merge();

                        ws.Cell(CREDIT, 3).Value = "Gross Amount including Dividend";
                        ws.Cell(CREDIT, 3).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 3).Style.Font.FontSize = 13;
                        ws.Cell(CREDIT, 3).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 3, CREDIT, 4).Merge();



                        ws.Cell(SNo1, 3).Value = "Credit";
                        ws.Cell(SNo1, 3).Style.Font.Bold = true;
                        ws.Cell(SNo1, 3).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 4).Value = "Debit";
                        ws.Cell(SNo1, 4).Style.Font.Bold = true;
                        ws.Cell(SNo1, 4).Style.Font.FontSize = 11;


                        ws.Cell(CREDIT, 5).Value = "Gross Amount excluding Dividend";
                        ws.Cell(CREDIT, 5).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 5).Style.Font.FontSize = 13;
                        ws.Range(CREDIT, 5, CREDIT, 6).Merge();
                        ws.Cell(CREDIT, 5).Style.Alignment.WrapText = true;



                        ws.Cell(SNo1, 5).Value = "Credit";
                        ws.Cell(SNo1, 5).Style.Font.Bold = true;
                        ws.Cell(SNo1, 5).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 6).Value = "Debit";
                        ws.Cell(SNo1, 6).Style.Font.Bold = true;
                        ws.Cell(SNo1, 6).Style.Font.FontSize = 11;


                        ws.Cell(CREDIT, 7).Value = "Net Balance";
                        ws.Cell(CREDIT, 7).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 7).Style.Font.FontSize = 13;
                        ws.Range(CREDIT, 7, CREDIT, 8).Merge();
                        ws.Cell(CREDIT, 7).Style.Alignment.WrapText = true;

                        ws.Cell(SNo1, 7).Value = "Credit";
                        ws.Cell(SNo1, 7).Style.Font.Bold = true;
                        ws.Cell(SNo1, 7).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 8).Value = "Debit";
                        ws.Cell(SNo1, 8).Style.Font.Bold = true;
                        ws.Cell(SNo1, 8).Style.Font.FontSize = 11;

                        ws.Cell(CREDIT, 9).Value = "Non Prized Members Dividend";
                        ws.Cell(CREDIT, 9).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 9).Style.Font.FontSize = 13;
                        ws.Range(CREDIT, 9, CREDIT, 10).Merge();
                        ws.Cell(CREDIT, 9).Style.Alignment.WrapText = true;


                        ws.Cell(SNo1, 9).Value = "Total Memb.";
                        ws.Cell(SNo1, 9).Style.Font.Bold = true;
                        ws.Cell(SNo1, 9).Style.Font.FontSize = 11;
                        ws.Cell(SNo1, 9).Style.Alignment.WrapText = true;

                        ws.Cell(SNo1, 10).Value = "Amount";
                        ws.Cell(SNo1, 10).Style.Font.Bold = true;
                        ws.Cell(SNo1, 10).Style.Font.FontSize = 11;
                        ws.Cell(SNo1, 10).Style.Alignment.WrapText = true;

                        ws.Cell(CREDIT, 11).Value = "Prized Members Dividend";
                        ws.Cell(CREDIT, 11).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 11).Style.Font.FontSize = 13;
                        ws.Cell(CREDIT, 11).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 11, CREDIT, 12).Merge();


                        ws.Cell(SNo1, 11).Value = "Total Memb.";
                        ws.Cell(SNo1, 11).Style.Font.Bold = true;
                        ws.Cell(SNo1, 11).Style.Font.FontSize = 11;
                        ws.Cell(SNo1, 11).Style.Alignment.WrapText = true;

                        ws.Cell(SNo1, 12).Value = "Amount";
                        ws.Cell(SNo1, 12).Style.Font.Bold = true;
                        ws.Cell(SNo1, 12).Style.Font.FontSize = 11;
                        ws.Cell(SNo1, 12).Style.Alignment.WrapText = true;

                        logo = logo + 43;
                        branch = branch + 43;
                        date = date + 43;
                        CREDIT = CREDIT + 43;
                        SNo1 = SNo1 + 43;
                        i++;
                    } while (i < page);


                    int RangeCell = 6;
                    int SNo = 1;
                    decimal SumAmount = 1;
                    bool FlagSummaryFilled = false;
                    int CreditPortion1Cell = 0;
                    int CreditMiscCell = 0;

                    decimal GAincludeCredit = 0;
                    decimal GAincludeDebit = 0;
                    decimal NetbalCredit = 0;
                    decimal NetbalDebit = 0;
                    decimal E_Credit = 0;
                    decimal E_Debit = 0;
                    decimal Np = 0;
                    decimal NonPrized = 0;
                    decimal P = 0;
                    decimal Prized = 0;

                    int debitrows = 0;



                    for (int j = 0; j < CreditDt1.Rows.Count; j++)
                    {
                        if (j < 35)
                        {
                            debitrows = debitrows + 1;
                            ws.Cell(RangeCell, 1).Value = SNo;
                            var data = CreditDt1.Rows[j]["GroupNo"];
                            //             var data1 = data;
                            ws.Cell(RangeCell, 2).Value = CreditDt1.Rows[j]["GroupNo"];
                            ws.Cell(RangeCell, 3).Value = Convert.ToDecimal(CreditDt1.Rows[j]["I_Credit"]);
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 4).Value = Convert.ToDecimal(CreditDt1.Rows[j]["I_Debit"]);
                            ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Value = Convert.ToDecimal(CreditDt1.Rows[j]["E_Credit"]);
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Value = Convert.ToDecimal(CreditDt1.Rows[j]["E_Debit"]);
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Value = Convert.ToDecimal(CreditDt1.Rows[j]["N_Credit"]);
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Value = Convert.ToDecimal(CreditDt1.Rows[j]["N_Debit"]);
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Value = Convert.ToDecimal(CreditDt1.Rows[j]["Np"]);
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            //  ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Value = Convert.ToDecimal(CreditDt1.Rows[j]["NonPrized"]);
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Value = Convert.ToDecimal(CreditDt1.Rows[j]["P"]);
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            // ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Value = Convert.ToDecimal(CreditDt1.Rows[j]["Prized"]);
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";

                            GAincludeCredit = Convert.ToDecimal(CreditDt1.Rows[j]["I_Credit"]) + GAincludeCredit;
                            GAincludeDebit = Convert.ToDecimal(CreditDt1.Rows[j]["I_Debit"]) + GAincludeDebit;
                            NetbalCredit = Convert.ToDecimal(CreditDt1.Rows[j]["N_Credit"]) + NetbalCredit;
                            NetbalDebit = Convert.ToDecimal(CreditDt1.Rows[j]["N_Debit"]) + NetbalDebit;
                            E_Credit = Convert.ToDecimal(CreditDt1.Rows[j]["E_Credit"]) + E_Credit;

                            E_Debit = Convert.ToDecimal(CreditDt1.Rows[j]["E_Debit"]) + E_Debit;
                            Np = Convert.ToDecimal(CreditDt1.Rows[j]["Np"]) + Np;
                            NonPrized = Convert.ToDecimal(CreditDt1.Rows[j]["NonPrized"]) + NonPrized;
                            P = Convert.ToDecimal(CreditDt1.Rows[j]["P"]) + P;
                            Prized = Convert.ToDecimal(CreditDt1.Rows[j]["Prized"]) + Prized;
                            RangeCell = RangeCell + 1;
                            SNo = SNo + 1;
                            var rangecr29 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 12));
                            rangecr29.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            var rangecr291 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 12));
                            rangecr291.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        }
                    }

                    if (CreditDt1.Rows.Count > 35)
                    {
                        ws.Cell(RangeCell, 2).Value = "Total Carried Over";
                        ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 3).Value = GAincludeCredit;
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 4).Value = GAincludeDebit;
                        ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Value = E_Credit;
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Value = E_Debit;
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Value = NetbalCredit;
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Value = NetbalDebit;
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Value = Np;
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        //    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Value = NonPrized;
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Value = P;
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        //    ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Value = Prized;
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        var rangecr28 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangecr28.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecr281 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangecr281.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangecr30 = ws.Range(ws.Cell(RangeCell + 1, 1), ws.Cell(RangeCell + 1, 12));
                        rangecr30.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecr310 = ws.Range(ws.Cell(RangeCell + 1, 1), ws.Cell(RangeCell + 1, 12));
                        rangecr310.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangecr31 = ws.Range(ws.Cell(RangeCell + 2, 1), ws.Cell(RangeCell + 2, 12));
                        rangecr31.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecr311 = ws.Range(ws.Cell(RangeCell + 2, 1), ws.Cell(RangeCell + 2, 12));
                        rangecr311.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        RangeCell = RangeCell + 6;
                        ws.Cell(RangeCell, 3).Value = GAincludeCredit;
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 4).Value = GAincludeDebit;
                        ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Value = E_Credit;
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Value = E_Debit;
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Value = NetbalCredit;
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Value = NetbalDebit;
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Value = Np;
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        //        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Value = NonPrized;
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Value = P;
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        //        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Value = Prized;
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";

                        RangeCell = RangeCell + 1;

                        var rangecr218 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangecr218.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecr2181 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangecr2181.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangecr3101 = ws.Range(ws.Cell(RangeCell + 1, 1), ws.Cell(RangeCell + 1, 12));
                        rangecr3101.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecr31011 = ws.Range(ws.Cell(RangeCell + 1, 1), ws.Cell(RangeCell + 1, 12));
                        rangecr31011.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangecr3112 = ws.Range(ws.Cell(RangeCell + 2, 1), ws.Cell(RangeCell + 2, 12));
                        rangecr3112.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecr3113 = ws.Range(ws.Cell(RangeCell + 2, 1), ws.Cell(RangeCell + 2, 12));
                        rangecr3113.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        for (; debitrows < CreditDt1.Rows.Count;)
                        {
                            if (debitrows < 70)
                            {
                                ws.Cell(RangeCell, 1).Value = SNo;
                                ws.Cell(RangeCell, 2).Value = CreditDt1.Rows[debitrows]["GroupNo"];
                                ws.Cell(RangeCell, 3).Value = Convert.ToDecimal(CreditDt1.Rows[debitrows]["I_Credit"]);
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 4).Value = Convert.ToDecimal(CreditDt1.Rows[debitrows]["I_Debit"]);
                                ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 5).Value = Convert.ToDecimal(CreditDt1.Rows[debitrows]["E_Credit"]);
                                ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 6).Value = Convert.ToDecimal(CreditDt1.Rows[debitrows]["E_Debit"]);
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 7).Value = Convert.ToDecimal(CreditDt1.Rows[debitrows]["N_Credit"]);
                                ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 8).Value = Convert.ToDecimal(CreditDt1.Rows[debitrows]["N_Debit"]);
                                ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 9).Value = Convert.ToDecimal(CreditDt1.Rows[debitrows]["Np"]);
                                ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                //            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 10).Value = Convert.ToDecimal(CreditDt1.Rows[debitrows]["NonPrized"]);
                                ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 11).Value = Convert.ToDecimal(CreditDt1.Rows[debitrows]["P"]);
                                ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                //            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 12).Value = Convert.ToDecimal(CreditDt1.Rows[debitrows]["Prized"]);
                                ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                                GAincludeCredit = Convert.ToDecimal(CreditDt1.Rows[debitrows]["I_Credit"]) + GAincludeCredit;
                                GAincludeDebit = Convert.ToDecimal(CreditDt1.Rows[debitrows]["I_Debit"]) + GAincludeDebit;
                                NetbalCredit = Convert.ToDecimal(CreditDt1.Rows[debitrows]["N_Credit"]) + NetbalCredit;
                                NetbalDebit = Convert.ToDecimal(CreditDt1.Rows[debitrows]["N_Debit"]) + NetbalDebit;

                                RangeCell = RangeCell + 1;
                                SNo = SNo + 1;
                                var rangecr29 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 12));
                                rangecr29.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                var rangecr291 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 12));
                                rangecr291.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                debitrows = debitrows + 1;
                            }
                        }

                        ws.Cell(RangeCell, 2).Value = "Total";
                        ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                        if (CreditDt1.Rows.Count != 0)
                        {
                            ws.Cell(RangeCell, 3).Value = GAincludeCredit;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 4).Value = GAincludeDebit;
                            ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Value = E_Credit;
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Value = E_Debit;
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Value = NetbalCredit;
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Value = NetbalDebit;
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Value = Np;
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            //   ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Value = NonPrized;
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Value = P;
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            //    ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Value = Prized;
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";

                            var rangecr2811 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangecr2811.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            var rangecr2812 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangecr2812.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr301 = ws.Range(ws.Cell(RangeCell + 1, 1), ws.Cell(RangeCell + 1, 12));
                            rangecr301.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            var rangecr30111 = ws.Range(ws.Cell(RangeCell + 1, 1), ws.Cell(RangeCell + 1, 12));
                            rangecr30111.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr3110 = ws.Range(ws.Cell(RangeCell + 2, 1), ws.Cell(RangeCell + 2, 12));
                            rangecr3110.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            var rangecr31103 = ws.Range(ws.Cell(RangeCell + 2, 1), ws.Cell(RangeCell + 2, 12));
                            rangecr31103.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            RangeCell = RangeCell + 1;
                            //ws.Cell(RangeCell, 2).Value = "Balance";
                            //ws.Cell(RangeCell, 2).Style.Font.Bold = true;

                            if (GAincludeCredit > GAincludeDebit)
                            {
                                ws.Cell(RangeCell, 2).Value = "Balance Cr";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Value = (GAincludeCredit - GAincludeDebit);
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            }
                            else if (GAincludeDebit > GAincludeCredit)
                            {
                                ws.Cell(RangeCell, 2).Value = "Balance Dr";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 4).Value = (GAincludeDebit - GAincludeCredit);
                                ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                            }

                            if (NetbalCredit > NetbalDebit)
                            {
                                ws.Cell(RangeCell, 6).Value = "Balance Cr";
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 7).Value = (NetbalCredit - NetbalDebit);
                                ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            }
                            else if (NetbalDebit > NetbalCredit)
                            {
                                ws.Cell(RangeCell, 6).Value = "Balance Dr";
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 8).Value = (NetbalDebit - NetbalCredit);
                                ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            }


                        }
                    }
                    else
                    {
                        ws.Cell(RangeCell, 2).Value = "Total";
                        ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                        if (CreditDt1.Rows.Count != 0)
                        {
                            ws.Cell(RangeCell, 3).Value = GAincludeCredit;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 4).Value = GAincludeDebit;
                            ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Value = E_Credit;
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Value = E_Debit;
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Value = NetbalCredit;
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Value = NetbalDebit;
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Value = Np;
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            //    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Value = NonPrized;
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Value = P;
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            //    ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Value = Prized;
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";

                            var rangecr28 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangecr28.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            var rangecr228 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangecr228.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr30 = ws.Range(ws.Cell(RangeCell + 1, 1), ws.Cell(RangeCell + 1, 12));
                            rangecr30.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            var rangecr320 = ws.Range(ws.Cell(RangeCell + 1, 1), ws.Cell(RangeCell + 1, 12));
                            rangecr320.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr31 = ws.Range(ws.Cell(RangeCell + 2, 1), ws.Cell(RangeCell + 2, 12));
                            rangecr31.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            var rangecr321 = ws.Range(ws.Cell(RangeCell + 2, 1), ws.Cell(RangeCell + 2, 12));
                            rangecr321.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            RangeCell = RangeCell + 1;
                            //ws.Cell(RangeCell, 2).Value = "Balance";
                            //ws.Cell(RangeCell, 2).Style.Font.Bold = true;

                            if (GAincludeCredit > GAincludeDebit)
                            {
                                ws.Cell(RangeCell, 2).Value = "Balance Cr";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Value = (GAincludeCredit - GAincludeDebit);
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            }
                            else if (GAincludeDebit > GAincludeCredit)
                            {
                                ws.Cell(RangeCell, 2).Value = "Balance Dr";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 4).Value = (GAincludeDebit - GAincludeCredit);
                                ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                            }

                            if (NetbalCredit > NetbalDebit)
                            {
                                ws.Cell(RangeCell, 6).Value = "Balance Cr";
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 7).Value = (NetbalCredit - NetbalDebit);
                                ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            }
                            else if (NetbalDebit > NetbalCredit)
                            {
                                ws.Cell(RangeCell, 6).Value = "Balance Dr";
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 8).Value = (NetbalDebit - NetbalCredit);
                                ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            }
                        }
                    }

                    var rangecr1 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell + 2, 12));
                    rangecr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    var rangecr26 = ws.Range(ws.Cell(4, 1), ws.Cell(RangeCell + 2, 12));
                    rangecr26.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    //var rangecr2 = ws.Range(ws.Cell(5, 1), ws.Cell(5, 12));
                    //rangecr2.Style.Border.BottomBorder = XLBorderStyleValues.Double;


                    var rangecr3 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                    rangecr3.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                    var rangecr23 = ws.Range(ws.Cell(RangeCell + 1, 1), ws.Cell(RangeCell + 1, 12));
                    rangecr23.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;






                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;


                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }

                    //  wb.SaveAs(folderPath + filename + ".xlsx");
                }
            }
            catch (Exception err)
            {

            }
        }


        public System.Data.DataTable BindChitTrial1()
        {
            //     gridChitTrialRun.SettingsText.Title = "GROUPWAR CHIT TRIAL STATEMENT AS ON " + txtToDate.Text + "";
            //    gridChitTrialRun.Visible = true;
            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') group by `auctiondetails`.`GroupID`");
            DataTable dt = balayer.GetDataTable("select * from groupmaster where `ChitStartDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID=" + drpdownBranchlist.SelectedValue + "");

            DataTable dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            DataRow drB = dtB.NewRow();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                //DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where IsPrized='I' and GroupID=" + dt.Rows[i]["Head_Id"]);
                DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);
                //if (dtTerminated.Rows.Count == 0)
                if (drawno == Noofmem)
                {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }

            DataTable dtBind = new DataTable();
            dtBind.Columns.Add("SNo");
            dtBind.Columns.Add("GroupNo");
            dtBind.Columns.Add("I_Credit", typeof(decimal));
            dtBind.Columns.Add("I_Debit", typeof(decimal));
            dtBind.Columns.Add("E_Credit", typeof(decimal));
            dtBind.Columns.Add("E_Debit", typeof(decimal));
            dtBind.Columns.Add("N_Credit", typeof(decimal));
            dtBind.Columns.Add("N_Debit", typeof(decimal));
            dtBind.Columns.Add("NonPrized", typeof(decimal));
            dtBind.Columns.Add("Prized", typeof(decimal));
            dtBind.Columns.Add("TotalAmountofKasar", typeof(decimal));
            dtBind.Columns.Add("NP", typeof(int));
            dtBind.Columns.Add("P", typeof(int));
            dtBind.Columns.Add("Remarks");
            DataRow drBind = dtBind.NewRow();
            //drBind["SNo"] = "";
            //drBind["GroupNo"] = "Terminated";
            //drBind["Remarks"] = "";
            //      dtBind.Rows.Add(drBind.ItemArray);
            int iCount = 0;
            for (int i = 0; i < dtB.Rows.Count; i++)
            {

                DataTable dt1 = balayer.GetDataTable(@"select mg1.Head_Id,cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");
                if (dt1.Rows.Count > 0)
                {
                    #region start
                    if (((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M) && Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", "")) == 0.00M)
                    {

                    }
                    else
                    {
                        //* Total Number Calculation Start
                        //List<string> lstExcess = new List<string>();
                        List<string> lstPArr = new List<string>();
                        int iPCount = 0;
                        int ip1 = 0;

                        //DataTable dtExcess = balayer.GetDataTable(@"select v1.Head_Id, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        //if (dtExcess.Rows.Count > 0)
                        //{
                        //    for (int iRow = 0; iRow < dtExcess.Rows.Count; iRow++)
                        //    {
                        //        if (Convert.ToDecimal(dtExcess.Rows[iRow]["ExcessRemittance"]) > 0)
                        //        {
                        //            lstExcess.Add(Convert.ToString(dtExcess.Rows[iRow]["Head_Id"]));
                        //            iPCount++;
                        //        }
                        //    }
                        //}
                        //DataTable dtNPkasar = balayer.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'2017/10/30') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        DataTable dtNPkasar = balayer.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (dtNPkasar.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtNPkasar.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtNPkasar.Rows[iRow]["NPKasar"]) > 0)
                                {
                                    lstPArr.Add(Convert.ToString(dtNPkasar.Rows[iRow]["Head_Id"]));
                                    ip1++;
                                }
                                //if (!lstExcess.Contains(Convert.ToString(dtPArr.Rows[iRow]["Head_Id"])))
                            }
                        }

                        DataTable dtPArr = balayer.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (dtPArr.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtPArr.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtPArr.Rows[iRow]["PArrier"]) > 0)
                                {
                                    lstPArr.Add(Convert.ToString(dtPArr.Rows[iRow]["Head_Id"]));
                                    iPCount++;
                                }
                                //if (!lstExcess.Contains(Convert.ToString(dtPArr.Rows[iRow]["Head_Id"])))
                            }
                        }

                        // Total Number Calculation End
                        if (Convert.ToInt32(dtB.Rows[i]["Head_Id"]) == 01193)
                        {
                            DataTable dtS = balayer.GetDataTable("SELECT sum((case when (Voucher_Type='C') then Amount else 0.00 end)) as Credit,sum((case when (Voucher_Type='D') then Amount else 0.00 end)) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id=1194");
                            if (dtS.Rows.Count > 0)
                            {
                                if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) < Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["I_Credit"] = 0.00;
                                    drBind["I_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["E_Credit"] = 0.00;
                                    drBind["E_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["N_Credit"] = 0.00;
                                    drBind["N_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["NonPrized"] = "0.00";
                                    drBind["Prized"] = "0.00";
                                    drBind["TotalAmountofKasar"] = "0.00";
                                    drBind["NP"] = "0";
                                    drBind["P"] = "0";
                                    drBind["Remarks"] = "";
                                    iCount++;
                                    dtBind.Rows.Add(drBind.ItemArray);
                                }
                                else if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) > Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["I_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["I_Debit"] = 0.00;
                                    drBind["E_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["E_Debit"] = 0.00;
                                    drBind["N_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["N_Debit"] = 0.00;
                                    drBind["NonPrized"] = "0.00";
                                    drBind["Prized"] = "0.00";
                                    drBind["TotalAmountofKasar"] = "0.00";
                                    drBind["NP"] = "0";
                                    drBind["P"] = "0";
                                    drBind["Remarks"] = "";
                                    iCount++;
                                    dtBind.Rows.Add(drBind.ItemArray);
                                }
                            }
                        }
                        else
                        {
                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                            //Decimal ExcessRem = Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", ""));
                            //Decimal PArrier = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", ""));
                            //Decimal NPArrier = Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", ""));
                            //Decimal Credit =Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) ;
                            //Decimal Debit = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                            //Decimal PKasar =Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            //Decimal NPKasar = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) ;

                            //drBind["I_Credit"] = ExcessRem;
                            //drBind["I_Debit"] = PArrier;
                            //drBind["E_Credit"] = ExcessRem;
                            //drBind["E_Debit"] = PArrier - NPArrier;


                            decimal SumExcess_WithoutCreditIncluding = dt1.AsEnumerable().Where(a => a.Field<decimal>("Credit") == 0).Sum(a => a.Field<decimal>("ExcessRemittance"));
                            //drBind["I_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) + Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["I_Credit"] = SumExcess_WithoutCreditIncluding + Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["I_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", ""));
                            decimal SumExcess_WithoutCreditExcluding = dt1.AsEnumerable().Where(a => a.Field<decimal>("Credit") == 0).Sum(a => a.Field<decimal>("ExcessRemittance"));
                            //drBind["E_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) + Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                            drBind["E_Credit"] = SumExcess_WithoutCreditExcluding + Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                            drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) - Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", ""));

                            if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) > Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                                drBind["N_Debit"] = "0.00";
                                // drBind["N_Credit"] = (Credit + PKasar + NPKasar) - (Debit);

                            }
                            else if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) < Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")));
                                //drBind["N_Debit"] = (Debit) - (Credit + PKasar + NPKasar);
                            }
                            ///////////////////////=====================///////////////////////
                            else
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = "0.00";
                            }
                            ////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
                            //drBind["NonPrized"] = "0.00";
                            drBind["NonPrized"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["Prized"] = "0.00";
                            drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            //drBind["NP"] = "0";
                            drBind["NP"] = ip1;
                            drBind["P"] = iPCount; // "0";
                            drBind["Remarks"] = "";
                            iCount++;
                            dtBind.Rows.Add(drBind.ItemArray);
                        }
                    }
                    #endregion
                }

            }
            var ddd = "0/00/0000";
            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') group by `auctiondetails`.`GroupID`");
            dt = balayer.GetDataTable("select * from groupmaster where `PSOOrderDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and `PSOOrderDate`!='" + ddd + "' and BranchID=" + drpdownBranchlist.SelectedValue + "");

            if (dt.Rows.Count != 0)
            {

                dtB = new DataTable();
                dtB.Columns.Add("Head_Id");
                dtB.Columns.Add("GROUPNO");
                drB = dtB.NewRow();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    //DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where IsPrized='I' and GroupID=" + dt.Rows[i]["Head_Id"]);
                    //if (dtTerminated.Rows.Count > 0)
                    DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                    string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);

                    if (drawno != Noofmem)
                    {
                        drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                        drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                        dtB.Rows.Add(drB.ItemArray);
                    }
                }
                //DataRow drBind1 = dtBind.NewRow();
                //drBind1["SNo"] = "";
                //drBind1["GroupNo"] = "Running";
                //drBind1["Remarks"] = "";
                //dtBind.Rows.Add(drBind1.ItemArray);

                iCount = 0;
                for (int i = 0; i < dtB.Rows.Count; i++)
                {
                    //DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where IsPrized='Y' and AuctionDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                    //if (dtInit.Rows.Count > 0)
                    var dd = "0/00/0000";
                    DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where AuctionDate!='" + dd + "' and AuctionDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                    //jeya --------------
                    string prizecount = balayer.GetSingleValue("select count(*) from trans_payment where ChitGroupID = " + dtB.Rows[i]["Head_Id"] + " and PaymentDate!='" + dd + "' and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "';");
                    string Totalcount = balayer.GetSingleValue("select count(*) from auctiondetails where GroupID=" + dtB.Rows[i]["Head_Id"] + ";");
                    //jeya -----------------
                    string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate!='" + dd + "' and AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dtB.Rows[i]["Head_Id"]);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dtB.Rows[i]["Head_Id"]);
                    DataTable dt1 = balayer.GetDataTable(@"select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate!='" + dd + "' and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");

                    if (drawno != Noofmem && dt1.Rows.Count > 0)
                    {
                        //if (dt1.Rows.Count > 0)
                        //{
                        if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M)
                        {

                        }
                        else
                        {
                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                            drBind["I_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["I_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                            drBind["E_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                            drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) > Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - (Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")));
                                drBind["N_Debit"] = "0.00";
                            }
                            else if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) < Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")));
                            }
                            ///////////////////////////-------------------------////////////////
                            else
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = "0.00";
                            }
                            /////////////////////////--------==================//////////////////
                            drBind["NonPrized"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));

                            //jeya
                            if (prizecount == "1")
                            {
                                drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["P"] = (prizecount);
                                drBind["NP"] = Convert.ToInt16(Totalcount) - Convert.ToInt16(prizecount);
                            }
                            else if (prizecount != "1")
                            {
                                drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["NP"] = dt1.AsEnumerable()
                                        .Where(r => (decimal)r["NPKasar"] != 0.00m)
                                        .Count();
                                drBind["P"] = dt1.AsEnumerable()
                                            .Where(r => (decimal)r["PKasar"] != 0.00m)
                                            .Count();
                            }
                            else if (prizecount == "0")
                            {
                                drBind["NP"] = Convert.ToInt16(Totalcount);
                            }
                            //jeya


                            drBind["Remarks"] = "";
                            iCount++;
                            dtBind.Rows.Add(drBind.ItemArray);
                        }
                        //}
                    }
                    else
                    {
                        decimal credit1 = 0;
                        decimal debit1 = 0;
                        decimal decCredit = 0;
                        decimal decDebit = 0;
                        strChits = "";
                        dtC = new DataTable();
                        dtC = balayer.GetDataTable("SELECT concat(Cast(NodeID as char(10)),',') FROM svcf.headstree where ParentID=" + dtB.Rows[i]["Head_Id"]);
                        for (int k = 0; k < dtC.Rows.Count; k++)
                        {
                            strChits = strChits + dtC.Rows[k][0];
                        }
                        if (string.IsNullOrEmpty(strChits))
                        {
                            strChits = "0";
                        }
                        else
                        {
                            strChits = strChits.TrimEnd(',');
                        }
                        credit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='C') then Amount else 0.00 end) as Credit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                        debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                        credit1 = Convert.ToDecimal(credit);
                        debit1 = Convert.ToDecimal(debit);
                        if (string.IsNullOrEmpty(credit))
                            credit = "0.00";
                        if (string.IsNullOrEmpty(debit))
                            debit = "0.00";

                        if (prizecount == "0")
                        {
                            debit = "0.00";
                        }
                        else
                        {
                            debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                        }
                        if (credit1 > debit1)
                        {
                            decCredit = Convert.ToDecimal(credit1) - Convert.ToDecimal(debit1);
                        }
                        else
                        {
                            decCredit = Convert.ToDecimal(debit1) - Convert.ToDecimal(credit1);
                        }

                        //decCredit = Convert.ToDecimal(credit);
                        decDebit = Convert.ToDecimal(debit);
                        string npkas = "";
                        string pkas = "";
                        int NPcount = 0;
                        int Pcount = 0;
                        //(case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit 
                        //DataTable dtNPKas = balayer.GetDataTable(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (" + strChits + ") and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id having NPKasar>0 order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC;");
                        DataTable dtDetails = balayer.GetDataTable(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar                              from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (" + strChits + ") and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC;");
                        //npkas = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from voucher as v1 left join trans_payment as tp1 on v1.Head_Id = tp1.TokenNumber where v1.ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and v1.Head_id in (" + strChits + ")");

                        if (dtDetails.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtDetails.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtDetails.Rows[iRow]["NPKasar"]) > 0)
                                    NPcount++;
                                if (Convert.ToDecimal(dtDetails.Rows[iRow]["PKasar"]) > 0)
                                    Pcount++;
                            }
                            pkas = Convert.ToString(dtDetails.Compute("sum(PKasar)", ""));
                            npkas = Convert.ToString(dtDetails.Compute("sum(NPKasar)", ""));
                            credit = Convert.ToString(dtDetails.Compute("sum(Credit)", ""));
                            debit = Convert.ToString(dtDetails.Compute("sum(Debit)", ""));
                        }

                        if (string.IsNullOrEmpty(npkas))
                            npkas = "0.00";
                        if (string.IsNullOrEmpty(pkas))
                            pkas = "0.00";

                        string netCredit = "0.00";
                        string netDebit = "0.00";

                        if ((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) > Convert.ToDecimal(debit))
                            //netCredit = Convert.ToString((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) - Convert.ToDecimal(debit));
                            netCredit = Convert.ToString((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) - Convert.ToDecimal(debit1));
                        else
                            //netDebit = Convert.ToString(Convert.ToDecimal(debit) - (Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)));
                            netDebit = Convert.ToString(Convert.ToDecimal(debit1) - (Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)));

                        drBind["SNo"] = iCount + 1;
                        drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                        //drBind["I_Credit"] = Convert.ToString(Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas));
                        drBind["I_Credit"] = decCredit;
                        drBind["I_Debit"] = debit; //0.00M;
                        /*drBind["E_Credit"] = credit;*/
                        //decCredit - decDebit;
                        drBind["E_Credit"] = decCredit;
                        drBind["E_Debit"] = Convert.ToString(Convert.ToDecimal(debit) - Convert.ToDecimal(pkas)); //0.00M;
                        drBind["N_Credit"] = netCredit;
                        drBind["N_Debit"] = netDebit;
                        drBind["NonPrized"] = npkas;
                        drBind["Prized"] = pkas;
                        drBind["TotalAmountofKasar"] = Convert.ToString(Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas));
                        //drBind["NP"] = NPcount;
                        //drBind["P"] = Pcount;
                        if (prizecount == "1")
                        {
                            //drBind["Prized"] = (prizecount);
                            //drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            drBind["P"] = (prizecount);
                            drBind["NP"] = Convert.ToInt16(Totalcount) - Convert.ToInt16(prizecount);
                        }
                        else if (prizecount != "1" && prizecount != "0")
                        {
                            //drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            //drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            drBind["NP"] = dt1.AsEnumerable()
                                    .Where(r => (decimal)r["NPKasar"] != 0.00m)
                                    .Count();
                            drBind["P"] = dt1.AsEnumerable()
                                        .Where(r => (decimal)r["PKasar"] != 0.00m)
                                        .Count(); ;
                        }
                        else if (prizecount == "0")
                        {
                            drBind["NP"] = Convert.ToInt16(Totalcount);
                            drBind["P"] = (prizecount);
                        }
                        drBind["Remarks"] = "";
                        iCount++;
                        //  i = 25;
                        dtBind.Rows.Add(drBind.ItemArray);
                    }
                }

                decimal I_Credit = Convert.ToDecimal(dtBind.Compute("sum(I_Credit)", ""));
                decimal I_Debit = Convert.ToDecimal(dtBind.Compute("sum(I_Debit)", ""));
                decimal E_Credit = Convert.ToDecimal(dtBind.Compute("sum(E_Credit)", ""));
                decimal E_Debit = Convert.ToDecimal(dtBind.Compute("sum(E_Debit)", ""));
                decimal N_Credit = Convert.ToDecimal(dtBind.Compute("sum(N_Credit)", ""));
                decimal N_Debit = Convert.ToDecimal(dtBind.Compute("sum(N_Debit)", ""));
                decimal NonPrized = Convert.ToDecimal(dtBind.Compute("sum(NonPrized)", ""));
                decimal Prized = Convert.ToDecimal(dtBind.Compute("sum(Prized)", ""));
                decimal TotalAmountofKasar = Convert.ToDecimal(dtBind.Compute("sum(TotalAmountofKasar)", ""));
                decimal NP = Convert.ToDecimal(dtBind.Compute("sum(NP)", ""));
                decimal P = Convert.ToDecimal(dtBind.Compute("sum(P)", ""));

                drBind["SNo"] = "";
                drBind["GroupNo"] = "TOTAL";
                drBind["I_Credit"] = I_Credit;
                drBind["I_Debit"] = I_Debit;
                drBind["E_Credit"] = E_Credit;
                drBind["E_Debit"] = E_Debit;
                drBind["N_Credit"] = N_Credit;
                drBind["N_Debit"] = N_Debit;
                drBind["NonPrized"] = NonPrized;
                drBind["Prized"] = Prized;
                drBind["TotalAmountofKasar"] = TotalAmountofKasar;
                drBind["NP"] = NP;
                drBind["P"] = P;
                drBind["Remarks"] = "";
                dtBind.Rows.Add(drBind.ItemArray);

                //DataRow drBind2 = dtBind.NewRow();
                //if (I_Credit > I_Debit)
                //{
                //    drBind2["GroupNo"] = "Balance CR";
                //    drBind2["I_Credit"] = I_Credit - I_Debit;
                //    // drBind2["N_Credit"] = I_Credit - I_Debit;
                //}
                //else if (I_Credit < I_Debit)
                //{
                //    drBind2["GroupNo"] = "Balance DR";
                //    drBind2["I_Debit"] = I_Debit - I_Credit;
                //    //drBind2["N_Debit"] = I_Debit - I_Credit;
                //}
                //else
                //{
                //    drBind2["GroupNo"] = "Balance";
                //    drBind2["I_Credit"] = I_Debit - I_Credit;
                //    drBind2["I_Debit"] = I_Debit - I_Credit;
                //    //  drBind2["N_Credit"] = I_Credit - I_Debit;
                //    //  drBind2["N_Debit"] = I_Debit - I_Credit;
                //}
                //if (N_Credit > N_Debit)
                //{
                //    drBind2["N_Credit"] = N_Credit - N_Debit;


                //}
                //else if (N_Credit < N_Debit)
                //{
                //    drBind2["N_Debit"] = N_Debit - N_Credit;
                //}
                //else
                //{
                //    drBind2["GroupNo"] = "Balance";
                //    drBind2["N_Credit"] = N_Credit - N_Debit;
                //    drBind2["N_Debit"] = N_Debit - N_Credit;
                //}
                //dtBind.Rows.Add(drBind2.ItemArray);

            }
            return dtBind;
        }








        public System.Data.DataTable BindChitTrial()
        {
            //     gridChitTrialRun.SettingsText.Title = "GROUPWAR CHIT TRIAL STATEMENT AS ON " + txtToDate.Text + "";
            //    gridChitTrialRun.Visible = true;
            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') group by `auctiondetails`.`GroupID`");
            DataTable dt = balayer.GetDataTable("select * from groupmaster where `ChitStartDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID=" + drpdownBranchlist.SelectedValue + "");

            DataTable dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            DataRow drB = dtB.NewRow();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                //DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where IsPrized='I' and GroupID=" + dt.Rows[i]["Head_Id"]);
                DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);
                //if (dtTerminated.Rows.Count == 0)
                if (drawno == Noofmem)
                {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }

            DataTable dtBind = new DataTable();
            dtBind.Columns.Add("SNo");
            dtBind.Columns.Add("GroupNo");
            dtBind.Columns.Add("I_Credit", typeof(decimal));
            dtBind.Columns.Add("I_Debit", typeof(decimal));
            dtBind.Columns.Add("E_Credit", typeof(decimal));
            dtBind.Columns.Add("E_Debit", typeof(decimal));
            dtBind.Columns.Add("N_Credit", typeof(decimal));
            dtBind.Columns.Add("N_Debit", typeof(decimal));
            dtBind.Columns.Add("NonPrized", typeof(decimal));
            dtBind.Columns.Add("Prized", typeof(decimal));
            dtBind.Columns.Add("TotalAmountofKasar", typeof(decimal));
            dtBind.Columns.Add("NP", typeof(int));
            dtBind.Columns.Add("P", typeof(int));
            dtBind.Columns.Add("Remarks");
            DataRow drBind = dtBind.NewRow();
            //drBind["SNo"] = "";
            //drBind["GroupNo"] = "Terminated";
            //drBind["Remarks"] = "";
            //      dtBind.Rows.Add(drBind.ItemArray);
            int iCount = 0;
            for (int i = 0; i < dtB.Rows.Count; i++)
            {

                DataTable dt1 = balayer.GetDataTable(@"select mg1.Head_Id,cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");
                if (dt1.Rows.Count > 0)
                {
                    #region start
                    if (((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M) && Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", "")) == 0.00M)
                    {

                    }
                    else
                    {
                        //* Total Number Calculation Start
                        //List<string> lstExcess = new List<string>();
                        List<string> lstPArr = new List<string>();
                        int iPCount = 0;
                        int ip1 = 0;

                        //DataTable dtExcess = balayer.GetDataTable(@"select v1.Head_Id, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        //if (dtExcess.Rows.Count > 0)
                        //{
                        //    for (int iRow = 0; iRow < dtExcess.Rows.Count; iRow++)
                        //    {
                        //        if (Convert.ToDecimal(dtExcess.Rows[iRow]["ExcessRemittance"]) > 0)
                        //        {
                        //            lstExcess.Add(Convert.ToString(dtExcess.Rows[iRow]["Head_Id"]));
                        //            iPCount++;
                        //        }
                        //    }
                        //}
                        //DataTable dtNPkasar = balayer.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'2017/10/30') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        DataTable dtNPkasar = balayer.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (dtNPkasar.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtNPkasar.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtNPkasar.Rows[iRow]["NPKasar"]) > 0)
                                {
                                    lstPArr.Add(Convert.ToString(dtNPkasar.Rows[iRow]["Head_Id"]));
                                    ip1++;
                                }
                                //if (!lstExcess.Contains(Convert.ToString(dtPArr.Rows[iRow]["Head_Id"])))
                            }
                        }

                        DataTable dtPArr = balayer.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (dtPArr.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtPArr.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtPArr.Rows[iRow]["PArrier"]) > 0)
                                {
                                    lstPArr.Add(Convert.ToString(dtPArr.Rows[iRow]["Head_Id"]));
                                    iPCount++;
                                }
                                //if (!lstExcess.Contains(Convert.ToString(dtPArr.Rows[iRow]["Head_Id"])))
                            }
                        }

                        // Total Number Calculation End
                        if (Convert.ToInt32(dtB.Rows[i]["Head_Id"]) == 01193)
                        {
                            DataTable dtS = balayer.GetDataTable("SELECT sum((case when (Voucher_Type='C') then Amount else 0.00 end)) as Credit,sum((case when (Voucher_Type='D') then Amount else 0.00 end)) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id=1194");
                            if (dtS.Rows.Count > 0)
                            {
                                if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) < Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["I_Credit"] = 0.00;
                                    drBind["I_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["E_Credit"] = 0.00;
                                    drBind["E_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["N_Credit"] = 0.00;
                                    drBind["N_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["NonPrized"] = "0.00";
                                    drBind["Prized"] = "0.00";
                                    drBind["TotalAmountofKasar"] = "0.00";
                                    drBind["NP"] = "0";
                                    drBind["P"] = "0";
                                    drBind["Remarks"] = "";
                                    iCount++;
                                    dtBind.Rows.Add(drBind.ItemArray);
                                }
                                else if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) > Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["I_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["I_Debit"] = 0.00;
                                    drBind["E_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["E_Debit"] = 0.00;
                                    drBind["N_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["N_Debit"] = 0.00;
                                    drBind["NonPrized"] = "0.00";
                                    drBind["Prized"] = "0.00";
                                    drBind["TotalAmountofKasar"] = "0.00";
                                    drBind["NP"] = "0";
                                    drBind["P"] = "0";
                                    drBind["Remarks"] = "";
                                    iCount++;
                                    dtBind.Rows.Add(drBind.ItemArray);
                                }
                            }
                        }
                        else
                        {
                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                            //Decimal ExcessRem = Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", ""));
                            //Decimal PArrier = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", ""));
                            //Decimal NPArrier = Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", ""));
                            //Decimal Credit =Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) ;
                            //Decimal Debit = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                            //Decimal PKasar =Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            //Decimal NPKasar = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) ;

                            //drBind["I_Credit"] = ExcessRem;
                            //drBind["I_Debit"] = PArrier;
                            //drBind["E_Credit"] = ExcessRem;
                            //drBind["E_Debit"] = PArrier - NPArrier;


                            decimal SumExcess_WithoutCreditIncluding = dt1.AsEnumerable().Where(a => a.Field<decimal>("Credit") == 0).Sum(a => a.Field<decimal>("ExcessRemittance"));
                            //drBind["I_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) + Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["I_Credit"] = SumExcess_WithoutCreditIncluding + Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["I_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", ""));
                            decimal SumExcess_WithoutCreditExcluding = dt1.AsEnumerable().Where(a => a.Field<decimal>("Credit") == 0).Sum(a => a.Field<decimal>("ExcessRemittance"));
                            //drBind["E_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) + Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                            drBind["E_Credit"] = SumExcess_WithoutCreditExcluding + Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                            drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) - Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", ""));

                            if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) > Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                                drBind["N_Debit"] = "0.00";
                                // drBind["N_Credit"] = (Credit + PKasar + NPKasar) - (Debit);

                            }
                            else if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) < Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")));
                                //drBind["N_Debit"] = (Debit) - (Credit + PKasar + NPKasar);
                            }
                            ///////////////////////=====================///////////////////////
                            else
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = "0.00";
                            }
                            ////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
                            //drBind["NonPrized"] = "0.00";
                            drBind["NonPrized"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["Prized"] = "0.00";
                            drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            //drBind["NP"] = "0";
                            drBind["NP"] = ip1;
                            drBind["P"] = iPCount; // "0";
                            drBind["Remarks"] = "";
                            iCount++;
                            dtBind.Rows.Add(drBind.ItemArray);
                        }
                    }
                    #endregion
                }

            }
            var ddd = "0/00/0000";
            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') group by `auctiondetails`.`GroupID`");
            dt = balayer.GetDataTable("select * from groupmaster where `PSOOrderDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and `PSOOrderDate`!='" + ddd + "' and BranchID=" + drpdownBranchlist.SelectedValue + "");

            if (dt.Rows.Count != 0)
            {

                dtB = new DataTable();
                dtB.Columns.Add("Head_Id");
                dtB.Columns.Add("GROUPNO");
                drB = dtB.NewRow();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    //DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where IsPrized='I' and GroupID=" + dt.Rows[i]["Head_Id"]);
                    //if (dtTerminated.Rows.Count > 0)
                    DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                    string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);

                    if (drawno != Noofmem)
                    {
                        drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                        drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                        dtB.Rows.Add(drB.ItemArray);
                    }
                }
                //DataRow drBind1 = dtBind.NewRow();
                //drBind1["SNo"] = "";
                //drBind1["GroupNo"] = "Running";
                //drBind1["Remarks"] = "";
                //dtBind.Rows.Add(drBind1.ItemArray);

                iCount = 0;
                for (int i = 0; i < dtB.Rows.Count; i++)
                {
                    //DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where IsPrized='Y' and AuctionDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                    //if (dtInit.Rows.Count > 0)
                    var dd = "0/00/0000";
                    DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where AuctionDate!='" + dd + "' and AuctionDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                    //jeya --------------
                    string prizecount = balayer.GetSingleValue("select count(*) from trans_payment where ChitGroupID = " + dtB.Rows[i]["Head_Id"] + " and PaymentDate!='" + dd + "' and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "';");
                    string Totalcount = balayer.GetSingleValue("select count(*) from auctiondetails where GroupID=" + dtB.Rows[i]["Head_Id"] + ";");
                    //jeya -----------------
                    string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate!='" + dd + "' and AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dtB.Rows[i]["Head_Id"]);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dtB.Rows[i]["Head_Id"]);
                    DataTable dt1 = balayer.GetDataTable(@"select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate!='" + dd + "' and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");

                    if (drawno != Noofmem && dt1.Rows.Count > 0)
                    {
                        //if (dt1.Rows.Count > 0)
                        //{
                        //if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M)
                        //{

                        //}
                        //else
                        //{
                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                            drBind["I_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["I_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                            drBind["E_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                            drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) > Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - (Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")));
                                drBind["N_Debit"] = "0.00";
                            }
                            else if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) < Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")));
                            }
                            ///////////////////////////-------------------------////////////////
                            else
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = "0.00";
                            }
                            /////////////////////////--------==================//////////////////
                            drBind["NonPrized"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));

                            //jeya
                            if (prizecount == "1")
                            {
                                drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["P"] = (prizecount);
                                drBind["NP"] = Convert.ToInt16(Totalcount) - Convert.ToInt16(prizecount);
                            }
                            else if (prizecount != "1")
                            {
                                drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["NP"] = dt1.AsEnumerable()
                                        .Where(r => (decimal)r["NPKasar"] != 0.00m)
                                        .Count();
                                drBind["P"] = dt1.AsEnumerable()
                                            .Where(r => (decimal)r["PKasar"] != 0.00m)
                                            .Count();
                            }
                            else if (prizecount == "0")
                            {
                                drBind["NP"] = Convert.ToInt16(Totalcount);
                            }
                            //jeya


                            drBind["Remarks"] = "";
                            iCount++;
                            dtBind.Rows.Add(drBind.ItemArray);
                        //}
                        //}
                    }
                    else
                    {
                        decimal credit1 = 0;
                        decimal debit1 = 0;
                        decimal decCredit = 0;
                        decimal decDebit = 0;
                        strChits = "";
                        dtC = new DataTable();
                        dtC = balayer.GetDataTable("SELECT concat(Cast(NodeID as char(10)),',') FROM svcf.headstree where ParentID=" + dtB.Rows[i]["Head_Id"]);
                        for (int k = 0; k < dtC.Rows.Count; k++)
                        {
                            strChits = strChits + dtC.Rows[k][0];
                        }
                        if (string.IsNullOrEmpty(strChits))
                        {
                            strChits = "0";
                        }
                        else
                        {
                            strChits = strChits.TrimEnd(',');
                        }
                        credit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='C') then Amount else 0.00 end) as Credit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                        debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                        //credit1 = Convert.ToDecimal(credit);
                        //debit1 = Convert.ToDecimal(debit);
                        if (string.IsNullOrEmpty(credit))
                            credit = "0.00";
                        else
                            credit1 = Convert.ToDecimal(credit);
                        if (string.IsNullOrEmpty(debit))
                            debit = "0.00";
                        else
                            debit1 = Convert.ToDecimal(debit);

                        if (prizecount == "0")
                        {
                            debit = "0.00";
                        }
                        else
                        {
                            debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                        }
                        if (credit1 > debit1)
                        {
                            decCredit = Convert.ToDecimal(credit1) - Convert.ToDecimal(debit1);
                        }
                        else
                        {
                            decCredit = Convert.ToDecimal(debit1) - Convert.ToDecimal(credit1);
                        }

                        //decCredit = Convert.ToDecimal(credit);
                        decDebit = Convert.ToDecimal(debit);
                        string npkas = "";
                        string pkas = "";
                        int NPcount = 0;
                        int Pcount = 0;
                        //(case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit 
                        //DataTable dtNPKas = balayer.GetDataTable(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (" + strChits + ") and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id having NPKasar>0 order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC;");
                        DataTable dtDetails = balayer.GetDataTable(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar                              from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (" + strChits + ") and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC;");
                        //npkas = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from voucher as v1 left join trans_payment as tp1 on v1.Head_Id = tp1.TokenNumber where v1.ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and v1.Head_id in (" + strChits + ")");

                        if (dtDetails.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtDetails.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtDetails.Rows[iRow]["NPKasar"]) > 0)
                                    NPcount++;
                                if (Convert.ToDecimal(dtDetails.Rows[iRow]["PKasar"]) > 0)
                                    Pcount++;
                            }
                            pkas = Convert.ToString(dtDetails.Compute("sum(PKasar)", ""));
                            npkas = Convert.ToString(dtDetails.Compute("sum(NPKasar)", ""));
                            credit = Convert.ToString(dtDetails.Compute("sum(Credit)", ""));
                            debit = Convert.ToString(dtDetails.Compute("sum(Debit)", ""));
                        }

                        if (string.IsNullOrEmpty(npkas))
                            npkas = "0.00";
                        if (string.IsNullOrEmpty(pkas))
                            pkas = "0.00";

                        string netCredit = "0.00";
                        string netDebit = "0.00";

                        if ((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) > Convert.ToDecimal(debit))
                            //netCredit = Convert.ToString((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) - Convert.ToDecimal(debit));
                            netCredit = Convert.ToString((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) - Convert.ToDecimal(debit1));
                        else
                            //netDebit = Convert.ToString(Convert.ToDecimal(debit) - (Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)));
                            netDebit = Convert.ToString(Convert.ToDecimal(debit1) - (Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)));

                        drBind["SNo"] = iCount + 1;
                        drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                        //drBind["I_Credit"] = Convert.ToString(Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas));
                        drBind["I_Credit"] = decCredit;
                        drBind["I_Debit"] = debit; //0.00M;
                        /*drBind["E_Credit"] = credit;*/
                        //decCredit - decDebit;
                        drBind["E_Credit"] = decCredit;
                        drBind["E_Debit"] = Convert.ToString(Convert.ToDecimal(debit) - Convert.ToDecimal(pkas)); //0.00M;
                        drBind["N_Credit"] = netCredit;
                        drBind["N_Debit"] = netDebit;
                        drBind["NonPrized"] = npkas;
                        drBind["Prized"] = pkas;
                        drBind["TotalAmountofKasar"] = Convert.ToString(Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas));
                        //drBind["NP"] = NPcount;
                        //drBind["P"] = Pcount;
                        if (prizecount == "1")
                        {
                            //drBind["Prized"] = (prizecount);
                            //drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            drBind["P"] = (prizecount);
                            drBind["NP"] = Convert.ToInt16(Totalcount) - Convert.ToInt16(prizecount);
                        }
                        else if (prizecount != "1" && prizecount != "0")
                        {
                            //drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            //drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            drBind["NP"] = dt1.AsEnumerable()
                                    .Where(r => (decimal)r["NPKasar"] != 0.00m)
                                    .Count();
                            drBind["P"] = dt1.AsEnumerable()
                                        .Where(r => (decimal)r["PKasar"] != 0.00m)
                                        .Count(); ;
                        }
                        else if (prizecount == "0")
                        {
                            drBind["NP"] = Convert.ToInt16(Totalcount);
                            drBind["P"] = (prizecount);
                        }
                        drBind["Remarks"] = "";
                        iCount++;
                        //  i = 25;
                        dtBind.Rows.Add(drBind.ItemArray);
                    }
                }

                if (dtBind.Rows.Count != 0)
                {
                    decimal I_Credit = Convert.ToDecimal(dtBind.Compute("sum(I_Credit)", ""));
                    decimal I_Debit = Convert.ToDecimal(dtBind.Compute("sum(I_Debit)", ""));
                    decimal E_Credit = Convert.ToDecimal(dtBind.Compute("sum(E_Credit)", ""));
                    decimal E_Debit = Convert.ToDecimal(dtBind.Compute("sum(E_Debit)", ""));
                    decimal N_Credit = Convert.ToDecimal(dtBind.Compute("sum(N_Credit)", ""));
                    decimal N_Debit = Convert.ToDecimal(dtBind.Compute("sum(N_Debit)", ""));
                    decimal NonPrized = Convert.ToDecimal(dtBind.Compute("sum(NonPrized)", ""));
                    decimal Prized = Convert.ToDecimal(dtBind.Compute("sum(Prized)", ""));
                    decimal TotalAmountofKasar = Convert.ToDecimal(dtBind.Compute("sum(TotalAmountofKasar)", ""));
                    decimal NP = Convert.ToDecimal(dtBind.Compute("sum(NP)", ""));
                    decimal P = Convert.ToDecimal(dtBind.Compute("sum(P)", ""));
                }
                //drBind["SNo"] = "";
                //drBind["GroupNo"] = "TOTAL";
                //drBind["I_Credit"] = I_Credit;
                //drBind["I_Debit"] = I_Debit;
                //drBind["E_Credit"] = E_Credit;
                //drBind["E_Debit"] = E_Debit;
                //drBind["N_Credit"] = N_Credit;
                //drBind["N_Debit"] = N_Debit;
                //drBind["NonPrized"] = NonPrized;
                //drBind["Prized"] = Prized;
                //drBind["TotalAmountofKasar"] = TotalAmountofKasar;
                //drBind["NP"] = NP;
                //drBind["P"] = P;
                //drBind["Remarks"] = "";
                //dtBind.Rows.Add(drBind.ItemArray);

                //DataRow drBind2 = dtBind.NewRow();
                //if (I_Credit > I_Debit)
                //{
                //    drBind2["GroupNo"] = "Balance CR";
                //    drBind2["I_Credit"] = I_Credit - I_Debit;
                //    // drBind2["N_Credit"] = I_Credit - I_Debit;
                //}
                //else if (I_Credit < I_Debit)
                //{
                //    drBind2["GroupNo"] = "Balance DR";
                //    drBind2["I_Debit"] = I_Debit - I_Credit;
                //    //drBind2["N_Debit"] = I_Debit - I_Credit;
                //}
                //else
                //{
                //    drBind2["GroupNo"] = "Balance";
                //    drBind2["I_Credit"] = I_Debit - I_Credit;
                //    drBind2["I_Debit"] = I_Debit - I_Credit;
                //    //  drBind2["N_Credit"] = I_Credit - I_Debit;
                //    //  drBind2["N_Debit"] = I_Debit - I_Credit;
                //}
                //if (N_Credit > N_Debit)
                //{
                //    drBind2["N_Credit"] = N_Credit - N_Debit;


                //}
                //else if (N_Credit < N_Debit)
                //{
                //    drBind2["N_Debit"] = N_Debit - N_Credit;
                //}
                //else
                //{
                //    drBind2["GroupNo"] = "Balance";
                //    drBind2["N_Credit"] = N_Credit - N_Debit;
                //    drBind2["N_Debit"] = N_Debit - N_Credit;
                //}
                //dtBind.Rows.Add(drBind2.ItemArray);

            }
            return dtBind;
        }


        protected void ST03_Click(object sender, EventArgs e)
        {
            System.Data.DataTable comp = COMPUTERS();
            System.Data.DataTable mob = MOBILES();
            System.Data.DataTable Furn = FURNITURE();
            System.Data.DataTable elec = Electrical();
            System.Data.DataTable mach = Machineries();
            System.Data.DataTable buil = Buildings();
            System.Data.DataTable land = lands();
            System.Data.DataTable frwheel = Car();
            System.Data.DataTable twowhe = Bike();
            System.Data.DataTable bicyc = BiCycle();
            System.Data.DataTable shre = Shares();



            string folderPath = "C:\\Exceltest\\";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            string filename = "AbsInv" + DateTime.Now.Second.ToString();

            try
            {

                using (XLWorkbook wb = new XLWorkbook())
                {
                    //var ws = wb.Worksheets.Add(CreditDt, "Tr. P&L St-02");
                    var ws = wb.Worksheets.Add("AbsInv St-03");

                    AddImage(wb, "AbsInv St-03", 1, 1, "imglogo.png");

                    ws.Cell(1, 09).Value = "Statement No. 03";
                    ws.Range(1, 09, 1, 10).Merge().AddToNamed("Titles");

                    ws.Cell(1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                    ws.Cell(1, 2).Style.Font.Bold = true;
                    ws.Cell(1, 2).Style.Font.FontSize = 14;

                    var branch = 2;
                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }


                    ws.Cell(3, 1).Value = "ABSTRACT FOR INVESTMENTS AS " + txtToDate.Text;
                    ws.Cell(3, 1).Style.Font.Bold = true;
                    ws.Cell(3, 1).Style.Font.FontSize = 13;
                    ws.Range(3, 1, 3, 10).Merge().AddToNamed("Titles");



                    #region row creation

                    ws.Cell(5, 1).Value = "Sl. No.";
                    ws.Cell(5, 1).Style.Font.Bold = true;
                    ws.Cell(5, 1).Style.Font.FontSize = 11;
                    ws.Range(5, 1, 6, 1).Merge();

                    ws.Cell(5, 2).Value = "INVESTMENT HEAD";
                    ws.Cell(5, 2).Style.Font.Bold = true;
                    ws.Cell(5, 2).Style.Font.FontSize = 11;
                    ws.Range(5, 2, 6, 2).Merge();

                    ws.Cell(5, 3).Value = "Value as on " + txtFrmDate.Text;
                    ws.Cell(5, 3).Style.Font.Bold = true;
                    ws.Cell(5, 3).Style.Font.FontSize = 11;
                    ws.Range(5, 3, 6, 3).Merge();

                    ws.Cell(5, 4).Value = "Additions(Purchases)";
                    ws.Cell(5, 4).Style.Font.Bold = true;
                    ws.Cell(5, 4).Style.Font.FontSize = 11;
                    ws.Cell(5, 4).Style.Alignment.WrapText = true;
                    ws.Range(5, 4, 6, 4).Merge();

                    ws.Cell(5, 5).Value = "Deductions (Sold)Book Value";
                    ws.Cell(5, 5).Style.Font.Bold = true;
                    ws.Cell(5, 5).Style.Font.FontSize = 11;
                    ws.Cell(5, 5).Style.Alignment.WrapText = true;
                    ws.Range(5, 5, 6, 5).Merge();


                    ws.Cell(5, 6).Value = "Depreciation";
                    ws.Cell(5, 6).Style.Font.Bold = true;
                    ws.Cell(5, 6).Style.Font.FontSize = 11;
                    ws.Range(5, 6, 5, 7).Merge();


                    ws.Cell(6, 6).Value = "For the year";
                    ws.Cell(6, 6).Style.Font.Bold = true;
                    ws.Cell(6, 6).Style.Font.FontSize = 11;


                    ws.Cell(6, 7).Value = "On sold items";
                    ws.Cell(6, 7).Style.Font.Bold = true;
                    ws.Cell(6, 7).Style.Font.FontSize = 11;

                    ws.Cell(5, 8).Value = "Sale Price";
                    ws.Cell(5, 8).Style.Font.Bold = true;
                    ws.Cell(5, 8).Style.Font.FontSize = 11;
                    ws.Range(5, 8, 6, 8).Merge();


                    ws.Cell(5, 9).Value = "Cost as on " + txtToDate.Text;
                    ws.Cell(5, 9).Style.Font.Bold = true;
                    ws.Cell(5, 9).Style.Font.FontSize = 11;
                    ws.Range(5, 9, 6, 9).Merge();

                    ws.Cell(5, 10).Value = "Remarks";
                    ws.Cell(5, 10).Style.Font.Bold = true;
                    ws.Cell(5, 10).Style.Font.FontSize = 11;
                    ws.Range(5, 10, 6, 10).Merge();

                    var rangecr1112 = ws.Range(ws.Cell(5, 1), ws.Cell(6, 10));
                    rangecr1112.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                    rangecr1112.Style.Border.InsideBorder = XLBorderStyleValues.Double;


                    #endregion

                    int slno = 1;
                    int Rangecell = 7;
                    decimal totamnt = 0;
                    //int CopyRangeColl = 5;
                    //#region Land
                    //if (land.Rows.Count != 0)
                    //{
                    //    slno = 1;
                    //    foreach (DataRow dr in land.AsEnumerable())
                    //    {

                    //        slno++;


                    //    }

                    //}
                    //else
                    //{
                    //    ws.Cell(Rangecell, 1).Value = "1";
                    //    ws.Cell(Rangecell, 2).Value = "LANDS";

                    //}

                    //#endregion



                    if (land.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;

                        foreach (DataRow dr in land.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }
                            string stsv = dr.ItemArray[8].ToString();
                            if (stsv != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }

                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;

                        }
                        ws.Cell(Rangecell, 1).Value = "1";
                        ws.Cell(Rangecell, 2).Value = "LANDS";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";


                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "1";
                        ws.Cell(Rangecell, 2).Value = "LANDS";

                    }













                    Rangecell = Rangecell + 2;
                    #region buildings
                    if (buil.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;

                        foreach (DataRow dr in buil.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }
                            string stsv = dr.ItemArray[8].ToString();
                            if (stsv != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }

                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;

                        }
                        ws.Cell(Rangecell, 1).Value = "2";
                        ws.Cell(Rangecell, 2).Value = "BUILDINGS";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";


                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "2";
                        ws.Cell(Rangecell, 2).Value = "BUILDINGS";

                    }
                    #endregion
                    Rangecell = Rangecell + 2;
                    #region furniture
                    if (Furn.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;

                        foreach (DataRow dr in Furn.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }
                            string stsvn = dr.ItemArray[8].ToString();
                            if (stsvn != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }

                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;

                        }
                        ws.Cell(Rangecell, 1).Value = "3";
                        ws.Cell(Rangecell, 2).Value = "FURNITURE AND FITTINGS";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";

                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "3";
                        ws.Cell(Rangecell, 2).Value = "FURNITURE AND FITTINGS";
                    }
                    #endregion
                    Rangecell = Rangecell + 2;
                    #region Electricals
                    if (elec.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;

                        foreach (DataRow dr in elec.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }

                            string stsvn = dr.ItemArray[8].ToString();
                            if (stsvn != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }

                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;

                            slno++;

                        }
                        ws.Cell(Rangecell, 1).Value = "4";
                        ws.Cell(Rangecell, 2).Value = "ELECTRICALS";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";





                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "4";
                        ws.Cell(Rangecell, 2).Value = "ELECTRICALS";
                    }


                    #endregion
                    Rangecell = Rangecell + 2;
                    #region Machineries
                    if (mach.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;

                        foreach (DataRow dr in mach.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }
                            string stsvn = dr.ItemArray[8].ToString();
                            if (stsvn != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }
                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;


                        }
                        ws.Cell(Rangecell, 1).Value = "5";
                        ws.Cell(Rangecell, 2).Value = "TYPE WRITER & OTHER MACHINERY";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";

                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "5";
                        ws.Cell(Rangecell, 2).Value = "TYPE WRITER & OTHER MACHINERY";
                    }
                    #endregion
                    Rangecell = Rangecell + 2;
                    #region FourWheeler
                    if (frwheel.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;

                        foreach (DataRow dr in frwheel.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }
                            string stsvn = dr.ItemArray[8].ToString();
                            if (stsvn != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }
                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;



                        }
                        ws.Cell(Rangecell, 1).Value = "6";
                        ws.Cell(Rangecell, 2).Value = "MOTOR CARS";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";

                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "6";
                        ws.Cell(Rangecell, 2).Value = "MOTOR CARS";
                    }
                    #endregion
                    Rangecell = Rangecell + 2;
                    #region twowheeler
                    if (twowhe.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;

                        foreach (DataRow dr in twowhe.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }
                            string stsvn = dr.ItemArray[8].ToString();
                            if (stsvn != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }
                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;



                        }
                        ws.Cell(Rangecell, 1).Value = "7";
                        ws.Cell(Rangecell, 2).Value = "MOTOR CYCLES, SCOOTERS AND MOPEDS";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";

                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "7";
                        ws.Cell(Rangecell, 2).Value = "MOTOR CYCLES, SCOOTERS AND MOPEDS";
                    }
                    #endregion
                    Rangecell = Rangecell + 2;
                    #region Bicycle
                    if (bicyc.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;


                        foreach (DataRow dr in bicyc.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }
                            string stsvn = dr.ItemArray[8].ToString();
                            if (stsvn != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }
                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;




                        }
                        ws.Cell(Rangecell, 1).Value = "8";
                        ws.Cell(Rangecell, 2).Value = "BI-CYCLES";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";

                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "8";
                        ws.Cell(Rangecell, 2).Value = "BI-CYCLES";
                    }
                    #endregion
                    Rangecell = Rangecell + 2;

                    #region Shares
                    if (shre.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;

                        foreach (DataRow dr in shre.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }
                            string stsv = dr.ItemArray[8].ToString();
                            if (stsv != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }

                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;

                        }
                        ws.Cell(Rangecell, 1).Value = "9";
                        ws.Cell(Rangecell, 2).Value = "SHARES";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";

                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "9";
                        ws.Cell(Rangecell, 2).Value = "SHARES";
                    }




                    #endregion
                    Rangecell = Rangecell + 2;



                    #region Computer
                    if (comp.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;

                        foreach (DataRow dr in comp.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }
                            string stsvn = dr.ItemArray[8].ToString();
                            if (stsvn != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }
                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;


                        }
                        ws.Cell(Rangecell, 1).Value = "10";
                        ws.Cell(Rangecell, 2).Value = "COMPUTERS";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";

                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "10";
                        ws.Cell(Rangecell, 2).Value = "COMPUTERS";
                    }
                    #endregion

                    Rangecell = Rangecell + 2;
                    if (comp.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;

                        foreach (DataRow dr in mob.AsEnumerable())
                        {

                            decimal totone = 0;
                            decimal tottwo = 0;
                            decimal totthree = 0;
                            decimal totfour = 0;
                            decimal totfive = 0;
                            decimal totsix = 0;
                            decimal totsev = 0;
                            string stone = dr.ItemArray[4].ToString();
                            if (stone != "")
                            {
                                totone = Convert.ToDecimal(dr.ItemArray[4]);
                            }
                            string sttwo = dr.ItemArray[11].ToString();
                            if (sttwo != "")
                            {
                                tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                            }
                            string stthr = dr.ItemArray[14].ToString();
                            if (stthr != "")
                            {
                                totthree = Convert.ToDecimal(dr.ItemArray[14]);
                            }
                            string stfr = dr.ItemArray[6].ToString();
                            if (stfr != "")
                            {
                                totfour = Convert.ToDecimal(dr.ItemArray[6]);
                            }
                            string stfv = dr.ItemArray[12].ToString();
                            if (stfv != "")
                            {
                                totfive = Convert.ToDecimal(dr.ItemArray[12]);
                            }
                            string stsx = dr.ItemArray[13].ToString();
                            if (stsx != "")
                            {
                                totsix = Convert.ToDecimal(dr.ItemArray[13]);
                            }
                            string stsvn = dr.ItemArray[8].ToString();
                            if (stsvn != "")
                            {
                                totsev = Convert.ToDecimal(dr.ItemArray[8]);
                            }
                            grtotone = grtotone + totone;
                            grtottwo = grtottwo + tottwo;
                            grtotthree = grtotthree + totthree;
                            grtotfour = grtotfour + totfour;
                            grtotfive = grtotfive + totfive;
                            grtotsix = grtotsix + totsix;
                            grtotsev = grtotsev + totsev;


                        }
                        ws.Cell(Rangecell, 1).Value = "11";
                        ws.Cell(Rangecell, 2).Value = "MOBILES";
                        ws.Cell(Rangecell, 3).Value = grtotone;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = grtotfour;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = grtotsev;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = grtottwo;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = grtotfive;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = grtotsix;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 9).Value = grtotthree;
                        ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";

                    }
                    else
                    {
                        ws.Cell(Rangecell, 1).Value = "11";
                        ws.Cell(Rangecell, 2).Value = "MOBILES";
                    }




                    Rangecell = Rangecell + 2;
                    int rng = Rangecell - 1;

                    ws.Cell(Rangecell, 2).Value = "Total";
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 3).FormulaA1 = "{=SUM(C7:C" + rng + ")}";
                    ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(Rangecell, 4).FormulaA1 = "{=SUM(D7:D" + rng + ")}";
                    ws.Cell(Rangecell, 4).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(Rangecell, 5).FormulaA1 = "{=SUM(E7:E" + rng + ")}";
                    ws.Cell(Rangecell, 5).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(Rangecell, 6).FormulaA1 = "{=SUM(F7:F" + rng + ")}";
                    ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(Rangecell, 7).FormulaA1 = "{=SUM(G7:G" + rng + ")}";
                    ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(Rangecell, 8).FormulaA1 = "{=SUM(H7:H" + rng + ")}";
                    ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(Rangecell, 9).FormulaA1 = "{=SUM(I7:I" + rng + ")}";
                    ws.Cell(Rangecell, 9).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 9).Style.NumberFormat.Format = "#,##0.00";



                    var rangecr12 = ws.Range(ws.Cell(7, 1), ws.Cell(Rangecell, 10));
                    rangecr12.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecr12.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    ws.ColumnWidth = 18;

                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    //  wb.SaveAs(folderPath + filename + ".xlsx");

                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }











                }
            }
            catch (Exception ex)
            {

            }



        }
        public System.Data.DataTable lands()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=13;");
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + "  ;");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '" + duatran + "'=uuid_from_bin(dualtransactionkey)" + " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                        if (VFDates.Rows.Count != 0)
                        {
                            for (int x = 0; x < VFDates.Rows.Count; x++)
                            {
                                string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                                string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                                DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                                entry = true;


                                string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                                if (frto.Rows.Count != 0)
                                {
                                    for (int ko = 0; ko < frto.Rows.Count; ko++)
                                    {
                                        string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                        string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                        string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                        string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                        string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                        decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                        if (fromdate != "" && todate != "")
                                        {
                                            depri = true;
                                            frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                            Frmdate = frmdts.ToString("dd-MM-yyyy");
                                            Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                            Todate = Todts.ToString("dd-MM-yyyy");
                                            depriamnt = depriamnt + amnt;
                                        }
                                        else if (purcdt != "")
                                        {
                                            DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                            if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                            {
                                                purchase = true;
                                                purchasedate = prdt.ToString("dd-MM-yyyy");
                                                addamnt = amnt;
                                            }

                                        }
                                        else if (saledt != "")
                                        {
                                            sale = true;
                                            DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                            saledate = sldt.ToString("dd-MM-yyyy");
                                            salprice = amnt;
                                        }

                                    }
                                }
                            }

                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Purchasedate"] = oldpurchasedate;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }






                }
            }



            return Fur;
        }
        public System.Data.DataTable Buildings()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=1057;");
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + "  ;");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '" + duatran + "'=uuid_from_bin(dualtransactionkey)" + " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                        if (VFDates.Rows.Count != 0)
                        {
                            for (int x = 0; x < VFDates.Rows.Count; x++)
                            {
                                string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                                string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                                DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                                entry = true;


                                string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                                if (frto.Rows.Count != 0)
                                {
                                    for (int ko = 0; ko < frto.Rows.Count; ko++)
                                    {
                                        string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                        string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                        string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                        string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                        string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                        decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                        if (fromdate != "" && todate != "")
                                        {
                                            depri = true;
                                            frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                            Frmdate = frmdts.ToString("dd-MM-yyyy");
                                            Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                            Todate = Todts.ToString("dd-MM-yyyy");
                                            depriamnt = depriamnt + amnt;
                                        }
                                        else if (purcdt != "")
                                        {
                                            DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                            if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                            {
                                                purchase = true;
                                                purchasedate = prdt.ToString("dd-MM-yyyy");
                                                addamnt = amnt;
                                            }

                                        }
                                        else if (saledt != "")
                                        {
                                            sale = true;
                                            DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                            saledate = sldt.ToString("dd-MM-yyyy");
                                            salprice = amnt;
                                        }

                                    }
                                }
                            }

                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Purchasedate"] = oldpurchasedate;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }






                }
            }



            return Fur;
        }
        public System.Data.DataTable FURNITURE()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=14;");
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + "  ;");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '" + duatran + "'=uuid_from_bin(dualtransactionkey)" + " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                        if (VFDates.Rows.Count != 0)
                        {
                            for (int x = 0; x < VFDates.Rows.Count; x++)
                            {
                                string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                                string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                                DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                                entry = true;


                                string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                                if (frto.Rows.Count != 0)
                                {
                                    for (int ko = 0; ko < frto.Rows.Count; ko++)
                                    {
                                        string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                        string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                        string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                        string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                        string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                        decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                        if (fromdate != "" && todate != "")
                                        {
                                            depri = true;
                                            frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                            Frmdate = frmdts.ToString("dd-MM-yyyy");
                                            Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                            Todate = Todts.ToString("dd-MM-yyyy");
                                            depriamnt = depriamnt + amnt;
                                        }
                                        else if (purcdt != "")
                                        {
                                            DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                            if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                            {
                                                purchase = true;
                                                purchasedate = prdt.ToString("dd-MM-yyyy");
                                                addamnt = amnt;
                                            }

                                        }
                                        else if (saledt != "")
                                        {
                                            sale = true;
                                            DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                            saledate = sldt.ToString("dd-MM-yyyy");
                                            salprice = amnt;
                                        }

                                    }
                                }
                            }
                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Purchasedate"] = oldpurchasedate;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }

                }
            }



            return Fur;
        }
        public System.Data.DataTable Electrical()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=15;");
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + "  ;");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '"+ duatran + "'=uuid_from_bin(dualtransactionkey)" +  " and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '"+ duatran + "'=uuid_from_bin(dualtransactionkey)" +  " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");
                        for (int x = 0; x < VFDates.Rows.Count; x++)
                        {



                            string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '"+ duatran + "'=uuid_from_bin(dualtransactionkey)" +  " and Head_id='" + NdID + "' ;");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) +"' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            entry = true;


                            string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                            if (frto.Rows.Count != 0)
                            {
                                for (int ko = 0; ko < frto.Rows.Count; ko++)
                                {
                                    string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                    string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                    string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                    string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                    string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                    decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                    if (fromdate != "" && todate != "")
                                    {
                                        depri = true;
                                        frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                        Frmdate = frmdts.ToString("dd-MM-yyyy");
                                        Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                        Todate = Todts.ToString("dd-MM-yyyy");
                                        depriamnt = depriamnt + amnt;
                                    }
                                    else if (purcdt != "")
                                    {
                                        DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                        if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                        {
                                            purchase = true;
                                            purchasedate = prdt.ToString("dd-MM-yyyy");
                                            addamnt = amnt;
                                        }

                                    }
                                    else if (saledt != "")
                                    {
                                        sale = true;
                                        DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                        saledate = sldt.ToString("dd-MM-yyyy");
                                        salprice = amnt;
                                    }

                                }
                            }


                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }






                }
            }



            return Fur;
        }
        public System.Data.DataTable Machineries()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=1113635;");
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + "  ;");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '" + duatran + "'=uuid_from_bin(dualtransactionkey)" + " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                        if (VFDates.Rows.Count != 0)
                        {
                            for (int x = 0; x < VFDates.Rows.Count; x++)
                            {
                                string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                                string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                                DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                                entry = true;


                                string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                                if (frto.Rows.Count != 0)
                                {
                                    for (int ko = 0; ko < frto.Rows.Count; ko++)
                                    {
                                        string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                        string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                        string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                        string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                        string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                        decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                        if (fromdate != "" && todate != "")
                                        {
                                            depri = true;
                                            frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                            Frmdate = frmdts.ToString("dd-MM-yyyy");
                                            Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                            Todate = Todts.ToString("dd-MM-yyyy");
                                            depriamnt = depriamnt + amnt;
                                        }
                                        else if (purcdt != "")
                                        {
                                            DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                            if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                            {
                                                purchase = true;
                                                purchasedate = prdt.ToString("dd-MM-yyyy");
                                                addamnt = amnt;
                                            }

                                        }
                                        else if (saledt != "")
                                        {
                                            sale = true;
                                            DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                            saledate = sldt.ToString("dd-MM-yyyy");
                                            salprice = amnt;
                                        }

                                    }
                                }
                            }

                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Purchasedate"] = oldpurchasedate;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }






                }
            }



            return Fur;
        }

        public System.Data.DataTable MOBILES()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            //DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=1140831;");//forlocal
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=1141055;");  //        DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=1141055;"); //forlive
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + ";");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId = " + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '" + duatran + "'=uuid_from_bin(dualtransactionkey)" + " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                        if (VFDates.Rows.Count != 0)
                        {
                            for (int x = 0; x < VFDates.Rows.Count; x++)
                            {
                                string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                                string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                                DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                                entry = true;


                                string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                                if (frto.Rows.Count != 0)
                                {
                                    for (int ko = 0; ko < frto.Rows.Count; ko++)
                                    {
                                        string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                        string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                        string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                        string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                        string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                        decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                        if (fromdate != "" && todate != "")
                                        {
                                            depri = true;
                                            frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                            Frmdate = frmdts.ToString("dd-MM-yyyy");
                                            Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                            Todate = Todts.ToString("dd-MM-yyyy");
                                            depriamnt = depriamnt + amnt;
                                        }
                                        else if (purcdt != "")
                                        {
                                            DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                            if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                            {
                                                purchase = true;
                                                purchasedate = prdt.ToString("dd-MM-yyyy");
                                                addamnt = amnt;
                                            }

                                        }
                                        else if (saledt != "")
                                        {
                                            sale = true;
                                            DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                            saledate = sldt.ToString("dd-MM-yyyy");
                                            salprice = amnt;
                                        }

                                    }
                                }
                            }

                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Purchasedate"] = oldpurchasedate;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }






                }
            }



            return Fur;
        }

        public System.Data.DataTable COMPUTERS()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=1113639;");
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + ";");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId = " + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' And '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '" + duatran + "'=uuid_from_bin(dualtransactionkey)" + " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                        if (VFDates.Rows.Count != 0)
                        {
                            for (int x = 0; x < VFDates.Rows.Count; x++)
                            {
                                string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                                string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                                DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                                entry = true;


                                string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                                if (frto.Rows.Count != 0)
                                {
                                    for (int ko = 0; ko < frto.Rows.Count; ko++)
                                    {
                                        string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                        string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                        string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                        string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                        string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                        decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                        if (fromdate != "" && todate != "")
                                        {
                                            depri = true;
                                            frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                            Frmdate = frmdts.ToString("dd-MM-yyyy");
                                            Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                            Todate = Todts.ToString("dd-MM-yyyy");
                                            depriamnt = depriamnt + amnt;
                                        }
                                        else if (purcdt != "")
                                        {
                                            DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                            if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                            {
                                                purchase = true;
                                                purchasedate = prdt.ToString("dd-MM-yyyy");
                                                addamnt = amnt;
                                            }

                                        }
                                        else if (saledt != "")
                                        {
                                            sale = true;
                                            DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                            saledate = sldt.ToString("dd-MM-yyyy");
                                            salprice = amnt;
                                        }

                                    }
                                }
                            }

                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Purchasedate"] = oldpurchasedate;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }






                }
            }



            return Fur;
        }
        public System.Data.DataTable Car()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=17;");
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + "  ;");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '" + duatran + "'=uuid_from_bin(dualtransactionkey)" + " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                        if (VFDates.Rows.Count != 0)
                        {
                            for (int x = 0; x < VFDates.Rows.Count; x++)
                            {
                                string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                                string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                                DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                                entry = true;


                                string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                                if (frto.Rows.Count != 0)
                                {
                                    for (int ko = 0; ko < frto.Rows.Count; ko++)
                                    {
                                        string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                        string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                        string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                        string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                        string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                        decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                        if (fromdate != "" && todate != "")
                                        {
                                            depri = true;
                                            frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                            Frmdate = frmdts.ToString("dd-MM-yyyy");
                                            Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                            Todate = Todts.ToString("dd-MM-yyyy");
                                            depriamnt = depriamnt + amnt;
                                        }
                                        else if (purcdt != "")
                                        {
                                            DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                            if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                            {
                                                purchase = true;
                                                purchasedate = prdt.ToString("dd-MM-yyyy");
                                                addamnt = amnt;
                                            }

                                        }
                                        else if (saledt != "")
                                        {
                                            sale = true;
                                            DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                            saledate = sldt.ToString("dd-MM-yyyy");
                                            salprice = amnt;
                                        }

                                    }
                                }
                            }
                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Purchasedate"] = oldpurchasedate;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }






                }
            }



            return Fur;
        }
        public System.Data.DataTable Bike()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=18;");
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + "  ;");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '" + duatran + "'=uuid_from_bin(dualtransactionkey)" + " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                        if (VFDates.Rows.Count != 0)
                        {
                            for (int x = 0; x < VFDates.Rows.Count; x++)
                            {
                                string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                                string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                                DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                                entry = true;


                                string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                                if (frto.Rows.Count != 0)
                                {
                                    for (int ko = 0; ko < frto.Rows.Count; ko++)
                                    {
                                        string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                        string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                        string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                        string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                        string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                        decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                        if (fromdate != "" && todate != "")
                                        {
                                            depri = true;
                                            frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                            Frmdate = frmdts.ToString("dd-MM-yyyy");
                                            Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                            Todate = Todts.ToString("dd-MM-yyyy");
                                            depriamnt = depriamnt + amnt;
                                        }
                                        else if (purcdt != "")
                                        {
                                            DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                            if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                            {
                                                purchase = true;
                                                purchasedate = prdt.ToString("dd-MM-yyyy");
                                                addamnt = amnt;
                                            }

                                        }
                                        else if (saledt != "")
                                        {
                                            sale = true;
                                            DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                            saledate = sldt.ToString("dd-MM-yyyy");
                                            salprice = amnt;
                                        }

                                    }
                                }
                            }
                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Purchasedate"] = oldpurchasedate;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }






                }
            }



            return Fur;
        }
        public System.Data.DataTable BiCycle()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=19  ;");
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + "  ;");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '" + duatran + "'=uuid_from_bin(dualtransactionkey)" + " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                        if (VFDates.Rows.Count != 0)
                        {
                            for (int x = 0; x < VFDates.Rows.Count; x++)
                            {
                                string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                                string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                                DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                                entry = true;


                                string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                                if (frto.Rows.Count != 0)
                                {
                                    for (int ko = 0; ko < frto.Rows.Count; ko++)
                                    {
                                        string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                        string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                        string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                        string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                        string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                        decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                        if (fromdate != "" && todate != "")
                                        {
                                            depri = true;
                                            frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                            Frmdate = frmdts.ToString("dd-MM-yyyy");
                                            Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                            Todate = Todts.ToString("dd-MM-yyyy");
                                            depriamnt = depriamnt + amnt;
                                        }
                                        else if (purcdt != "")
                                        {
                                            DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                            if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                            {
                                                purchase = true;
                                                purchasedate = prdt.ToString("dd-MM-yyyy");
                                                addamnt = amnt;
                                            }

                                        }
                                        else if (saledt != "")
                                        {
                                            sale = true;
                                            DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                            saledate = sldt.ToString("dd-MM-yyyy");
                                            salprice = amnt;
                                        }

                                    }
                                }
                            }
                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Purchasedate"] = oldpurchasedate;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }






                }
            }



            return Fur;
        }
        public System.Data.DataTable Shares()
        {
            DataTable Fur = new DataTable();
            Fur.Columns.Add("description");
            Fur.Columns.Add("Quantity");
            Fur.Columns.Add("Purchasedate");
            Fur.Columns.Add("PurchaseAmount");
            Fur.Columns.Add("Valueason");
            Fur.Columns.Add("addpurdat");
            Fur.Columns.Add("addpuramnt");
            Fur.Columns.Add("detpurdat");
            Fur.Columns.Add("detpuramnt");
            Fur.Columns.Add("From");
            Fur.Columns.Add("To");
            Fur.Columns.Add("Amount");
            Fur.Columns.Add("onslditm");
            Fur.Columns.Add("slprice");
            Fur.Columns.Add("Costason");
            DataRow drfur = Fur.NewRow();
            bool sale = false;
            bool depri = false;
            bool purchase = false;
            bool oldpdate = false;
            string Todate = "";
            string Frmdate = "";
            decimal depriamnt = 0;
            decimal addamnt = 0;
            decimal detamnt = 0;
            decimal salprice = 0;
            string saledate = "";
            string purchasedate = "";
            string oldpurchasedate = "";
            string oldamnt = "";
            //decimal addamnt = 0;
            DateTime frmdts = new DateTime();
            DateTime Todts = new DateTime();
            bool entry = false;
            DataTable contenthead_id = objBAL.GetDataTable("SELECT * FROM svcf.headstree where ParentID=1113657 ;");
            if (contenthead_id.Rows.Count != 0)
            {
                for (int i = 0; i < contenthead_id.Rows.Count; i++)
                {
                    string HeadNode = Convert.ToString(contenthead_id.Rows[i]["Node"]);
                    string NdID = Convert.ToString(contenthead_id.Rows[i]["NodeID"]);
                    if (NdID == "1134009")
                    {

                    }
                    DataTable vougt = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + "  ;");
                    if (vougt.Rows.Count != 0)
                    {

                        decimal valueason = 0;
                        decimal TotValasamnt = 0;
                        decimal lessamnt = 0;
                        DataTable VDateas = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "';");

                        if (VDateas.Rows.Count != 0)
                        {

                            entry = true;
                            for (int hg = 0; hg < VDateas.Rows.Count; hg++)
                            {
                                string type = Convert.ToString(VDateas.Rows[hg]["Voucher_Type"]);
                                if (type.ToUpper() == "D")
                                {
                                    decimal amnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    TotValasamnt = TotValasamnt + amnt;
                                }
                                else if (type.ToUpper() == "C")
                                {
                                    decimal cramnt = Convert.ToDecimal(VDateas.Rows[hg]["Amount"]);
                                    lessamnt = lessamnt + cramnt;
                                }

                            }
                            valueason = TotValasamnt - lessamnt;
                            string transactionkey = Convert.ToString(VDateas.Rows[0]["TransactionKey"]);
                            string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                            //DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                            DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate < '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and '" + duatran + "'=uuid_from_bin(dualtransactionkey)" + " and Head_id='" + NdID + "' ;");
                            if (frto.Rows.Count != 0)
                            {
                                for (int ig = 0; ig < frto.Rows.Count; ig++)
                                {
                                    oldpurchasedate = Convert.ToString(frto.Rows[ig]["purchasedate"]);
                                    if (oldpurchasedate != "")
                                    {
                                        oldpdate = true;
                                        DateTime opd = Convert.ToDateTime(frto.Rows[ig]["purchasedate"]);
                                        oldpurchasedate = opd.ToString("dd-MM-yyyy");
                                        oldamnt = Convert.ToString(VDateas.Rows[0]["Amount"]);
                                    }
                                }
                            }
                        }
                        DataTable VFDates = objBAL.GetDataTable("SELECT * FROM svcf.voucher where Head_id ='" + NdID + "' and BranchId =" + drpdownBranchlist.SelectedValue + " and ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                        if (VFDates.Rows.Count != 0)
                        {
                            for (int x = 0; x < VFDates.Rows.Count; x++)
                            {
                                string transactionkey = Convert.ToString(VFDates.Rows[x]["TransactionKey"]);
                                string duatran = objBAL.GetSingleValue("select uuid_from_bin(DualTransactionKey) FROM svcf.voucher where TransactionKey ='" + transactionkey + "'");
                                DataTable frto = objBAL.GetDataTable("select * FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and uuid_from_bin(dualtransactionkey)='" + duatran + "' and Head_id='" + NdID + "' ;");
                                entry = true;


                                string dutr = objBAL.GetSingleValue("select uuid_from_bin(dualtransactionkey) FROM svcf.accruedloanfd_details where ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchId=" + drpdownBranchlist.SelectedValue + " and Head_id='" + NdID + "';");

                                if (frto.Rows.Count != 0)
                                {
                                    for (int ko = 0; ko < frto.Rows.Count; ko++)
                                    {
                                        string fromdate = Convert.ToString(frto.Rows[ko]["frmdate"]);
                                        string todate = Convert.ToString(frto.Rows[ko]["todate"]);
                                        string purcdt = Convert.ToString(frto.Rows[ko]["purchasedate"]);
                                        string saledt = Convert.ToString(frto.Rows[ko]["saledate"]);
                                        string amntval = Convert.ToString(frto.Rows[ko]["amount"]);
                                        decimal amnt = Convert.ToDecimal(VFDates.Rows[x]["Amount"]);
                                        if (fromdate != "" && todate != "")
                                        {
                                            depri = true;
                                            frmdts = Convert.ToDateTime(frto.Rows[ko]["frmdate"]);
                                            Frmdate = frmdts.ToString("dd-MM-yyyy");
                                            Todts = Convert.ToDateTime(frto.Rows[ko]["todate"]);
                                            Todate = Todts.ToString("dd-MM-yyyy");
                                            depriamnt = depriamnt + amnt;
                                        }
                                        else if (purcdt != "")
                                        {
                                            DateTime prdt = Convert.ToDateTime(frto.Rows[ko]["purchasedate"]);
                                            if (prdt >= Convert.ToDateTime(txtFrmDate.Text))
                                            {
                                                purchase = true;
                                                purchasedate = prdt.ToString("dd-MM-yyyy");
                                                addamnt = amnt;
                                            }

                                        }
                                        else if (saledt != "")
                                        {
                                            sale = true;
                                            DateTime sldt = Convert.ToDateTime(frto.Rows[ko]["saledate"]);
                                            saledate = sldt.ToString("dd-MM-yyyy");
                                            salprice = amnt;
                                        }

                                    }
                                }
                            }
                        }
                        if (entry == true)
                        {
                            drfur["description"] = HeadNode;
                            drfur["PurchaseAmount"] = 0;
                            drfur["Purchasedate"] = oldpurchasedate;
                            drfur["Valueason"] = valueason;
                            drfur["From"] = Frmdate;
                            drfur["To"] = Todate;
                            if (depri == true && sale == false)
                            {

                                drfur["Amount"] = depriamnt;
                                drfur["Costason"] = valueason - depriamnt;
                                if (purchase == true)
                                {
                                    drfur["Costason"] = valueason + addamnt - depriamnt;
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }

                            if (sale == true)
                            {
                                drfur["Valueason"] = 0;
                                drfur["detpuramnt"] = valueason;
                                drfur["detpurdat"] = saledate;
                                drfur["slprice"] = salprice;
                                drfur["Costason"] = 0;
                                drfur["onslditm"] = depriamnt;
                                if (purchase == true)
                                {
                                    drfur["addpuramnt"] = addamnt;
                                    drfur["addpurdat"] = purchasedate;
                                }
                            }
                            if (purchase == true && sale == false && depri == false)
                            {
                                drfur["Purchasedate"] = purchasedate;
                                drfur["addpuramnt"] = addamnt;
                                drfur["addpurdat"] = purchasedate;
                                drfur["Costason"] = addamnt;
                            }
                            if (purchase == false && sale == false && depri == false)
                            {
                                drfur["Costason"] = valueason;
                            }

                            if (oldpdate == true)
                            {
                                drfur["Purchasedate"] = oldpurchasedate;
                                drfur["PurchaseAmount"] = oldamnt;
                            }

                            Fur.Rows.Add(drfur.ItemArray);
                            drfur.ItemArray = new object[] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" };
                            Frmdate = "";
                            valueason = 0;
                            depriamnt = 0;
                            Todate = "";
                            salprice = 0;
                            saledate = "";


                            purchase = false;
                            entry = false;
                            sale = false;
                            depri = false;
                        }

                    }
                    else
                    {

                    }






                }
            }



            return Fur;
        }


        protected void ST03A_Click(object sender, EventArgs e)
        {
            System.Data.DataTable comp = COMPUTERS();
            System.Data.DataTable mob = MOBILES();
            System.Data.DataTable Furn = FURNITURE();
            System.Data.DataTable elec = Electrical();
            System.Data.DataTable mach = Machineries();
            System.Data.DataTable buil = Buildings();
            System.Data.DataTable land = lands();
            System.Data.DataTable frwheel = Car();
            System.Data.DataTable twowhe = Bike();
            System.Data.DataTable bicyc = BiCycle();
            System.Data.DataTable shre = Shares();

            string folderPath = "C:\\Exceltest\\";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            string filename = "InvestST03A" + DateTime.Now.Second.ToString();

            try
            {

                using (XLWorkbook wb = new XLWorkbook())
                {
                    //var ws = wb.Worksheets.Add(CreditDt, "Tr. P&L St-02");
                    var ws = wb.Worksheets.Add("EPF St-03A");

                    AddImage(wb, "EPF St-03A", 1, 1, "imglogo.png");

                    ws.Cell(1, 14).Value = "Statement No.03 A to I";
                    ws.Range(1, 14, 1, 16).Merge().AddToNamed("Titles");

                    ws.Cell(1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                    ws.Cell(1, 2).Style.Font.Bold = true;
                    ws.Cell(1, 2).Style.Font.FontSize = 14;


                    var branch = 2;
                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }
                    else
                    {
                        ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;
                    }

                    ws.Cell(3, 1).Value = "Particulars of Investments as at " + txtToDate.Text + " and Depreciation Particulars as at " + txtToDate.Text;
                    ws.Cell(3, 1).Style.Font.Bold = true;
                    ws.Cell(3, 1).Style.Font.FontSize = 13;
                    ws.Range(3, 1, 4, 16).Merge().AddToNamed("Titles");



                    #region row creation

                    ws.Cell(5, 1).Value = "Sl. No.";
                    ws.Cell(5, 1).Style.Font.Bold = true;
                    ws.Cell(5, 1).Style.Font.FontSize = 11;
                    ws.Range(5, 1, 6, 1).Merge();

                    ws.Cell(5, 2).Value = "Description";
                    ws.Cell(5, 2).Style.Font.Bold = true;
                    ws.Cell(5, 2).Style.Font.FontSize = 11;
                    ws.Range(5, 2, 6, 2).Merge();

                    ws.Cell(5, 3).Value = "Extent in Acres";
                    ws.Cell(5, 3).Style.Font.Bold = true;
                    ws.Cell(5, 3).Style.Font.FontSize = 11;
                    ws.Range(5, 3, 6, 3).Merge();

                    ws.Cell(5, 4).Value = "Date of Purchase";
                    ws.Cell(5, 4).Style.Font.Bold = true;
                    ws.Cell(5, 4).Style.Font.FontSize = 11;
                    ws.Cell(5, 4).Style.Alignment.WrapText = true;
                    ws.Range(5, 4, 6, 4).Merge();

                    ws.Cell(5, 5).Value = "Purchase Amount";
                    ws.Cell(5, 5).Style.Font.Bold = true;
                    ws.Cell(5, 5).Style.Font.FontSize = 11;
                    ws.Cell(5, 5).Style.Alignment.WrapText = true;
                    ws.Range(5, 5, 6, 5).Merge();

                    ws.Cell(5, 6).Value = "Value as on " + txtFrmDate.Text;
                    ws.Cell(5, 6).Style.Font.Bold = true;
                    ws.Cell(5, 6).Style.Font.FontSize = 11;
                    ws.Cell(5, 6).Style.Alignment.WrapText = true;
                    ws.Range(5, 6, 6, 6).Merge();

                    ws.Cell(5, 7).Value = "ADDITIONS";
                    ws.Cell(5, 7).Style.Font.Bold = true;
                    ws.Cell(5, 7).Style.Font.FontSize = 11;
                    ws.Cell(5, 7).Style.Alignment.WrapText = true;
                    ws.Range(5, 7, 5, 8).Merge();

                    ws.Cell(6, 7).Value = "Date of Purchase";
                    ws.Cell(6, 7).Style.Font.Bold = true;
                    ws.Cell(6, 7).Style.Font.FontSize = 11;
                    ws.Cell(6, 7).Style.Alignment.WrapText = true;

                    ws.Cell(6, 8).Value = "Amount";
                    ws.Cell(6, 8).Style.Font.Bold = true;
                    ws.Cell(6, 8).Style.Font.FontSize = 11;
                    ws.Cell(6, 8).Style.Alignment.WrapText = true;

                    ws.Cell(5, 9).Value = "DEDUCTIONS";
                    ws.Cell(5, 9).Style.Font.Bold = true;
                    ws.Cell(5, 9).Style.Font.FontSize = 11;
                    ws.Cell(5, 9).Style.Alignment.WrapText = true;
                    ws.Range(5, 9, 5, 10).Merge();

                    ws.Cell(6, 9).Value = "Date of Sale";
                    ws.Cell(6, 9).Style.Font.Bold = true;
                    ws.Cell(6, 9).Style.Font.FontSize = 11;
                    ws.Cell(6, 9).Style.Alignment.WrapText = true;

                    ws.Cell(6, 10).Value = "Amount(Book Value)";
                    ws.Cell(6, 10).Style.Font.Bold = true;
                    ws.Cell(6, 10).Style.Font.FontSize = 11;
                    ws.Cell(6, 10).Style.Alignment.WrapText = true;

                    ws.Cell(5, 11).Value = "DEPRECIATION";
                    ws.Cell(5, 11).Style.Font.Bold = true;
                    ws.Cell(5, 11).Style.Font.FontSize = 11;
                    ws.Cell(5, 11).Style.Alignment.WrapText = true;
                    ws.Range(5, 11, 5, 14).Merge();

                    ws.Cell(6, 11).Value = "From";
                    ws.Cell(6, 11).Style.Font.Bold = true;
                    ws.Cell(6, 11).Style.Font.FontSize = 11;
                    ws.Cell(6, 11).Style.Alignment.WrapText = true;

                    ws.Cell(6, 12).Value = "To";
                    ws.Cell(6, 12).Style.Font.Bold = true;
                    ws.Cell(6, 12).Style.Font.FontSize = 11;
                    ws.Cell(6, 12).Style.Alignment.WrapText = true;

                    ws.Cell(6, 13).Value = "Amount";
                    ws.Cell(6, 13).Style.Font.Bold = true;
                    ws.Cell(6, 13).Style.Font.FontSize = 11;
                    ws.Cell(6, 13).Style.Alignment.WrapText = true;

                    ws.Cell(6, 14).Value = "On sold Items";
                    ws.Cell(6, 14).Style.Font.Bold = true;
                    ws.Cell(6, 14).Style.Font.FontSize = 11;
                    ws.Cell(6, 14).Style.Alignment.WrapText = true;


                    ws.Cell(5, 15).Value = "Sale Price";
                    ws.Cell(5, 15).Style.Font.Bold = true;
                    ws.Cell(5, 15).Style.Font.FontSize = 11;
                    ws.Range(5, 15, 6, 15).Merge();

                    ws.Cell(5, 16).Value = "Cost as on " + txtToDate.Text;
                    ws.Cell(5, 16).Style.Font.Bold = true;
                    ws.Cell(5, 16).Style.Font.FontSize = 11;
                    ws.Range(5, 16, 6, 16).Merge();
                    var rangecrone1 = ws.Range(ws.Cell(5, 1), ws.Cell(6, 16));
                    rangecrone1.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                    rangecrone1.Style.Border.InsideBorder = XLBorderStyleValues.Double;



                    #endregion

                    int slno = 1;
                    int Rangecell = 7;


                    //ws.Cell(Rangecell, 1).Value = "A.";
                    //ws.Cell(Rangecell, 2).Value = "Lands";
                    //ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    //ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    //if (land.Rows.Count != 0)
                    //{
                    //    slno = 1;
                    //    foreach (DataRow dr in land.AsEnumerable())
                    //    {

                    //        slno++;
                    //        Rangecell++;

                    //    }

                    //}
                    //else
                    //{
                    //    Rangecell = Rangecell + 6;
                    //    ws.Cell(Rangecell, 2).Value = "Total";
                    //    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    //    var rangecrone = ws.Range(ws.Cell(Rangecell, 3), ws.Cell(Rangecell, 16));
                    //    rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                    //}


                    ws.Cell(Rangecell, 1).Value = "A.";
                    ws.Cell(Rangecell, 2).Value = "Lands";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    var rangecrone101 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                    rangecrone101.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone101.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    if (land.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in land.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }










                    Rangecell = Rangecell + 1;
                    ws.Cell(Rangecell, 1).Value = "B.";
                    ws.Cell(Rangecell, 2).Value = "BUILDINGS";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    var rangecrone121 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                    rangecrone121.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone121.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    if (buil.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in buil.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }

                    Rangecell = Rangecell + 1;
                    ws.Cell(Rangecell, 1).Value = "C.";
                    ws.Cell(Rangecell, 2).Value = "FURNITURE & FITTINGS";
                    ws.Cell(Rangecell, 3).Value = "Quantity";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                    var rangecrone131 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                    rangecrone131.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone131.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    if (Furn.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in Furn.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    Rangecell = Rangecell + 2;
                    ws.Cell(Rangecell, 1).Value = "D.";
                    ws.Cell(Rangecell, 2).Value = "ELECTRICAL AND MACHINARIES";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    var rangecrone141 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                    rangecrone141.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone141.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    if (elec.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in elec.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }

                    int Rangecellone = Rangecell + 2;
                    int copyRangecellone = Rangecellone;

                    #region row creation

                    ws.Cell(Rangecellone, 1).Value = "Sl. No.";
                    ws.Cell(Rangecellone, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 1).Style.Font.FontSize = 11;
                    ws.Range(Rangecellone, 1, Rangecellone + 1, 1).Merge();

                    ws.Cell(Rangecellone, 2).Value = "Description";
                    ws.Cell(Rangecellone, 2).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 2).Style.Font.FontSize = 11;
                    ws.Range(Rangecellone, 2, Rangecellone + 1, 2).Merge();

                    ws.Cell(Rangecellone, 3).Value = "Quantity";
                    ws.Cell(Rangecellone, 3).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 3).Style.Font.FontSize = 11;
                    ws.Range(Rangecellone, 3, Rangecellone + 1, 3).Merge();

                    ws.Cell(Rangecellone, 4).Value = "Date of Purchase";
                    ws.Cell(Rangecellone, 4).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 4).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone, 4).Style.Alignment.WrapText = true;
                    ws.Range(Rangecellone, 4, Rangecellone + 1, 4).Merge();

                    ws.Cell(Rangecellone, 5).Value = "Purchase Amount";
                    ws.Cell(Rangecellone, 5).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 5).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone, 5).Style.Alignment.WrapText = true;
                    ws.Range(Rangecellone, 5, Rangecellone + 1, 5).Merge();

                    ws.Cell(Rangecellone, 6).Value = "Value as on " + txtFrmDate.Text;
                    ws.Cell(Rangecellone, 6).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 6).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone, 6).Style.Alignment.WrapText = true;
                    ws.Range(Rangecellone, 6, Rangecellone + 1, 6).Merge();

                    ws.Cell(Rangecellone, 7).Value = "ADDITIONS";
                    ws.Cell(Rangecellone, 7).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 7).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone, 7).Style.Alignment.WrapText = true;
                    ws.Range(Rangecellone, 7, Rangecellone, 8).Merge();

                    ws.Cell(Rangecellone + 1, 7).Value = "Date of Purchase";
                    ws.Cell(Rangecellone + 1, 7).Style.Font.Bold = true;
                    ws.Cell(Rangecellone + 1, 7).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone + 1, 7).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecellone + 1, 8).Value = "Amount";
                    ws.Cell(Rangecellone + 1, 8).Style.Font.Bold = true;
                    ws.Cell(Rangecellone + 1, 8).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone + 1, 8).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecellone, 9).Value = "DEDUCTIONS";
                    ws.Cell(Rangecellone, 9).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 9).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone, 9).Style.Alignment.WrapText = true;
                    ws.Range(Rangecellone, 9, Rangecellone, 10).Merge();

                    ws.Cell(Rangecellone + 1, 9).Value = "Date of Sale";
                    ws.Cell(Rangecellone + 1, 9).Style.Font.Bold = true;
                    ws.Cell(Rangecellone + 1, 9).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone + 1, 9).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecellone + 1, 10).Value = "Amount(Book Value)";
                    ws.Cell(Rangecellone + 1, 10).Style.Font.Bold = true;
                    ws.Cell(Rangecellone + 1, 10).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone + 1, 10).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecellone, 11).Value = "DEPRECIATION";
                    ws.Cell(Rangecellone, 11).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 11).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone, 11).Style.Alignment.WrapText = true;
                    ws.Range(Rangecellone, 11, Rangecellone, 14).Merge();

                    ws.Cell(Rangecellone + 1, 11).Value = "From";
                    ws.Cell(Rangecellone + 1, 11).Style.Font.Bold = true;
                    ws.Cell(Rangecellone + 1, 11).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone + 1, 11).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecellone + 1, 12).Value = "To";
                    ws.Cell(Rangecellone + 1, 12).Style.Font.Bold = true;
                    ws.Cell(Rangecellone + 1, 12).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone + 1, 12).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecellone + 1, 13).Value = "Amount";
                    ws.Cell(Rangecellone + 1, 13).Style.Font.Bold = true;
                    ws.Cell(Rangecellone + 1, 13).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone + 1, 13).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecellone + 1, 14).Value = "On sold Items";
                    ws.Cell(Rangecellone + 1, 14).Style.Font.Bold = true;
                    ws.Cell(Rangecellone + 1, 14).Style.Font.FontSize = 11;
                    ws.Cell(Rangecellone + 1, 14).Style.Alignment.WrapText = true;


                    ws.Cell(Rangecellone, 15).Value = "Sale Price";
                    ws.Cell(Rangecellone, 15).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 15).Style.Font.FontSize = 11;
                    ws.Range(Rangecellone, 15, Rangecellone + 1, 15).Merge();

                    ws.Cell(Rangecellone, 16).Value = "Cost as on " + txtToDate.Text;
                    ws.Cell(Rangecellone, 16).Style.Font.Bold = true;
                    ws.Cell(Rangecellone, 16).Style.Font.FontSize = 11;
                    ws.Range(Rangecellone, 16, Rangecellone + 1, 16).Merge();

                    var rangecrone112 = ws.Range(ws.Cell(Rangecellone, 1), ws.Cell(Rangecellone + 1, 16));
                    rangecrone112.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                    rangecrone112.Style.Border.InsideBorder = XLBorderStyleValues.Double;


                    #endregion

                    Rangecell = Rangecellone + 2;

                    ws.Cell(Rangecell, 1).Value = "E.";
                    ws.Cell(Rangecell, 2).Value = "VALUE OF TYPE WRITTERS &";
                    ws.Cell(Rangecell + 1, 2).Value = "OTHER MACHINERIES";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    ws.Cell(Rangecell + 1, 3).Style.Font.Bold = true;
                    var rangecrone151 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell + 1, 16));
                    rangecrone151.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone151.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    Rangecell = Rangecell + 1;
                    if (mach.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in mach.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }

                    Rangecell = Rangecell + 1;
                    ws.Cell(Rangecell, 1).Value = "F.";
                    ws.Cell(Rangecell, 2).Value = "COMPUTERS";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    var rangecrone161 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                    rangecrone161.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone161.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    //ws.Cell(Rangecellone + 1, 2).Value = "OTHER MACHINERIES";
                    //Rangecellone = Rangecellone + 1;
                    if (comp.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in comp.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }



                    int Rangecelltwo = Rangecell + 2;
                    int copyRangecelltwo = Rangecelltwo;

                    #region row creation

                    ws.Cell(Rangecelltwo, 1).Value = "Sl. No.";
                    ws.Cell(Rangecelltwo, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 1).Style.Font.FontSize = 11;
                    ws.Range(Rangecelltwo, 1, Rangecelltwo + 1, 1).Merge();

                    ws.Cell(Rangecelltwo, 2).Value = "Description";
                    ws.Cell(Rangecelltwo, 2).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 2).Style.Font.FontSize = 11;
                    ws.Range(Rangecelltwo, 2, Rangecelltwo + 1, 2).Merge();

                    ws.Cell(Rangecelltwo, 3).Value = "Quantity";
                    ws.Cell(Rangecelltwo, 3).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 3).Style.Font.FontSize = 11;
                    ws.Range(Rangecelltwo, 3, Rangecelltwo + 1, 3).Merge();

                    ws.Cell(Rangecelltwo, 4).Value = "Date of Purchase";
                    ws.Cell(Rangecelltwo, 4).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 4).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo, 4).Style.Alignment.WrapText = true;
                    ws.Range(Rangecelltwo, 4, Rangecelltwo + 1, 4).Merge();

                    ws.Cell(Rangecelltwo, 5).Value = "Purchase Amount";
                    ws.Cell(Rangecelltwo, 5).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 5).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo, 5).Style.Alignment.WrapText = true;
                    ws.Range(Rangecelltwo, 5, Rangecelltwo + 1, 5).Merge();

                    ws.Cell(Rangecelltwo, 6).Value = "Value as on " + txtFrmDate.Text;
                    ws.Cell(Rangecelltwo, 6).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 6).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo, 6).Style.Alignment.WrapText = true;
                    ws.Range(Rangecelltwo, 6, Rangecelltwo + 1, 6).Merge();

                    ws.Cell(Rangecelltwo, 7).Value = "ADDITIONS";
                    ws.Cell(Rangecelltwo, 7).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 7).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo, 7).Style.Alignment.WrapText = true;
                    ws.Range(Rangecelltwo, 7, Rangecelltwo, 8).Merge();

                    ws.Cell(Rangecelltwo + 1, 7).Value = "Date of Purchase";
                    ws.Cell(Rangecelltwo + 1, 7).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo + 1, 7).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo + 1, 7).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecelltwo + 1, 8).Value = "Amount";
                    ws.Cell(Rangecelltwo + 1, 8).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo + 1, 8).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo + 1, 8).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecelltwo, 9).Value = "DEDUCTIONS";
                    ws.Cell(Rangecelltwo, 9).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 9).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo, 9).Style.Alignment.WrapText = true;
                    ws.Range(Rangecelltwo, 9, Rangecelltwo, 10).Merge();

                    ws.Cell(Rangecelltwo + 1, 9).Value = "Date of Sale";
                    ws.Cell(Rangecelltwo + 1, 9).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo + 1, 9).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo + 1, 9).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecelltwo + 1, 10).Value = "Amount(Book Value)";
                    ws.Cell(Rangecelltwo + 1, 10).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo + 1, 10).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo + 1, 10).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecelltwo, 11).Value = "DEPRECIATION";
                    ws.Cell(Rangecelltwo, 11).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 11).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo, 11).Style.Alignment.WrapText = true;
                    ws.Range(Rangecelltwo, 11, Rangecelltwo, 14).Merge();

                    ws.Cell(Rangecelltwo + 1, 11).Value = "From";
                    ws.Cell(Rangecelltwo + 1, 11).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo + 1, 11).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo + 1, 11).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecelltwo + 1, 12).Value = "To";
                    ws.Cell(Rangecelltwo + 1, 12).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo + 1, 12).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo + 1, 12).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecelltwo + 1, 13).Value = "Amount";
                    ws.Cell(Rangecelltwo + 1, 13).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo + 1, 13).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo + 1, 13).Style.Alignment.WrapText = true;

                    ws.Cell(Rangecelltwo + 1, 14).Value = "On sold Items";
                    ws.Cell(Rangecelltwo + 1, 14).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo + 1, 14).Style.Font.FontSize = 11;
                    ws.Cell(Rangecelltwo + 1, 14).Style.Alignment.WrapText = true;


                    ws.Cell(Rangecelltwo, 15).Value = "Sale Price";
                    ws.Cell(Rangecellone, 15).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 15).Style.Font.FontSize = 11;
                    ws.Range(Rangecelltwo, 15, Rangecelltwo + 1, 15).Merge();

                    ws.Cell(Rangecelltwo, 16).Value = "Cost as on " + txtToDate.Text;
                    ws.Cell(Rangecelltwo, 16).Style.Font.Bold = true;
                    ws.Cell(Rangecelltwo, 16).Style.Font.FontSize = 11;
                    ws.Range(Rangecelltwo, 16, Rangecelltwo + 1, 16).Merge();

                    var rangecrone1123 = ws.Range(ws.Cell(Rangecelltwo, 1), ws.Cell(Rangecelltwo + 1, 16));
                    rangecrone1123.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                    rangecrone1123.Style.Border.InsideBorder = XLBorderStyleValues.Double;


                    #endregion

                    Rangecell = Rangecelltwo + 2;

                    ws.Cell(Rangecell, 1).Value = "G.";
                    ws.Cell(Rangecell, 2).Value = "MOTOR CARS with Registration No. & Year";
                    ws.Cell(Rangecell + 1, 2).Value = "Registration No. & Year";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    ws.Cell(Rangecell + 1, 3).Style.Font.Bold = true;
                    var rangecrone171 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell + 1, 16));
                    rangecrone171.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone171.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    Rangecell = Rangecell + 1;
                    if (frwheel.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in frwheel.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }

                    Rangecell = Rangecell + 1;
                    ws.Cell(Rangecell, 1).Value = "H.";
                    ws.Cell(Rangecell, 2).Value = "MOTOR CYCLES, SCOOTERS ";
                    ws.Cell(Rangecell + 1, 2).Value = "MOPEDS with Registration Number & year";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    ws.Cell(Rangecell + 1, 3).Style.Font.Bold = true;
                    var rangecrone181 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell + 1, 16));
                    rangecrone181.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone181.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    Rangecell = Rangecell + 1;
                    if (twowhe.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in twowhe.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }

                    Rangecell = Rangecell + 1;
                    ws.Cell(Rangecell, 1).Value = "I.";
                    ws.Cell(Rangecell, 2).Value = "BI- CYCLES";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    var rangecrone191 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                    rangecrone191.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone191.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    //ws.Cell(Rangecellone + 1, 2).Value = "OTHER MACHINERIES";
                    //Rangecellone = Rangecellone + 1;
                    if (bicyc.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in bicyc.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }



                    Rangecell = Rangecell + 1;
                    ws.Cell(Rangecell, 1).Value = "J.";
                    ws.Cell(Rangecell, 2).Value = "MOBILES";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    var rangecrone1001 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                    rangecrone1001.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone1001.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    //ws.Cell(Rangecellone + 1, 2).Value = "OTHER MACHINERIES";
                    //Rangecellone = Rangecellone + 1;
                    if (mob.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in mob.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }

                    Rangecell = Rangecell + 1;
                    ws.Cell(Rangecell, 1).Value = "K.";
                    ws.Cell(Rangecell, 2).Value = "SHARES";
                    ws.Cell(Rangecell, 1).Style.Font.Bold = true;
                    ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                    var rangecrone1011 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                    rangecrone1011.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangecrone1011.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    //ws.Cell(Rangecellone + 1, 2).Value = "OTHER MACHINERIES";
                    //Rangecellone = Rangecellone + 1;
                    if (shre.Rows.Count != 0)
                    {
                        decimal grtotone = 0;
                        decimal grtottwo = 0;
                        decimal grtotthree = 0;
                        decimal grtotfour = 0;
                        decimal grtotfive = 0;
                        decimal grtotsix = 0;
                        decimal grtotsev = 0;
                        slno = 1;
                        Rangecell = Rangecell + 1;
                        foreach (DataRow dr in shre.AsEnumerable())
                        {
                            if (dr.ItemArray[4].ToString() != "0.00" || dr.ItemArray[14].ToString() != "0.00")
                            {
                                ws.Cell(Rangecell, 1).Value = slno;
                                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];

                                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
                                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
                                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
                                ws.Cell(Rangecell, 6).Value = dr.ItemArray[4];
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Value = dr.ItemArray[5];
                                ws.Cell(Rangecell, 8).Value = dr.ItemArray[6];
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 9).Value = dr.ItemArray[7];
                                ws.Cell(Rangecell, 10).Value = dr.ItemArray[8];
                                ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 11).Value = dr.ItemArray[9];
                                ws.Cell(Rangecell, 12).Value = dr.ItemArray[10];
                                ws.Cell(Rangecell, 13).Value = dr.ItemArray[11];
                                ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 14).Value = dr.ItemArray[12];
                                ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 15).Value = dr.ItemArray[13];
                                ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 16).Value = dr.ItemArray[14];
                                ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                                var rangecrone11 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                                rangecrone11.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                rangecrone11.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                decimal totone = 0;
                                decimal tottwo = 0;
                                decimal totthree = 0;
                                decimal totfour = 0;
                                decimal totfive = 0;
                                decimal totsix = 0;
                                decimal totsev = 0;
                                string stone = dr.ItemArray[4].ToString();
                                if (stone != "")
                                {
                                    totone = Convert.ToDecimal(dr.ItemArray[4]);
                                }
                                string sttwo = dr.ItemArray[11].ToString();
                                if (sttwo != "")
                                {
                                    tottwo = Convert.ToDecimal(dr.ItemArray[11]);
                                }
                                string stthr = dr.ItemArray[14].ToString();
                                if (stthr != "")
                                {
                                    totthree = Convert.ToDecimal(dr.ItemArray[14]);
                                }
                                string stfr = dr.ItemArray[6].ToString();
                                if (stfr != "")
                                {
                                    totfour = Convert.ToDecimal(dr.ItemArray[6]);
                                }
                                string stfv = dr.ItemArray[12].ToString();
                                if (stfv != "")
                                {
                                    totfive = Convert.ToDecimal(dr.ItemArray[12]);
                                }
                                string stsx = dr.ItemArray[13].ToString();
                                if (stsx != "")
                                {
                                    totsix = Convert.ToDecimal(dr.ItemArray[13]);
                                }
                                string stsv = dr.ItemArray[8].ToString();
                                if (stsv != "")
                                {
                                    totsev = Convert.ToDecimal(dr.ItemArray[8]);
                                }

                                grtotone = grtotone + totone;
                                grtottwo = grtottwo + tottwo;
                                grtotthree = grtotthree + totthree;
                                grtotfour = grtotfour + totfour;
                                grtotfive = grtotfive + totfive;
                                grtotsix = grtotsix + totsix;
                                grtotsev = grtotsev + totsev;
                                slno++;
                                Rangecell++;
                            }
                        }
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Value = grtotone;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 13).Value = grtottwo;
                        ws.Cell(Rangecell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 13).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 16).Value = grtotthree;
                        ws.Cell(Rangecell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 16).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = grtotfour;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 14).Value = grtotfive;
                        ws.Cell(Rangecell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 14).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 15).Value = grtotsix;
                        ws.Cell(Rangecell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 15).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 10).Value = grtotsev;
                        ws.Cell(Rangecell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 10).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        Rangecell = Rangecell + 3;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        var rangecrone0 = ws.Range(ws.Cell(Rangecell - 3, 1), ws.Cell(Rangecell, 16));
                        rangecrone0.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangecrone0.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        var rangecrone = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 16));
                        rangecrone.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangecrone.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }



                    //var rangecr12r1 = ws.Range(ws.Cell(copyRangecelltwo, 1), ws.Cell(Rangecelltwo, 16));
                    //rangecr12r1.Style.Border.OutsideBorder = XLBorderStyleValues.Double;

                    //var rangecr12k1 = ws.Range(ws.Cell(copyRangecelltwo + 1, 1), ws.Cell(copyRangecelltwo + 1, 16));
                    //rangecr12k1.Style.Border.BottomBorder = XLBorderStyleValues.Double;




                    //var rangecr12r = ws.Range(ws.Cell(copyRangecellone, 1), ws.Cell(Rangecellone, 16));
                    //rangecr12r.Style.Border.OutsideBorder = XLBorderStyleValues.Double;

                    //var rangecr12k = ws.Range(ws.Cell(copyRangecellone + 1, 1), ws.Cell(copyRangecellone + 1, 16));
                    //rangecr12k.Style.Border.BottomBorder = XLBorderStyleValues.Double;



                    //var rangecr12 = ws.Range(ws.Cell(5, 1), ws.Cell(Rangecell, 16));
                    //rangecr12.Style.Border.OutsideBorder = XLBorderStyleValues.Double;

                    //var rangecr123 = ws.Range(ws.Cell(7 - 1, 1), ws.Cell(7 - 1, 16));
                    //rangecr123.Style.Border.BottomBorder = XLBorderStyleValues.Double;



                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    // wb.SaveAs(folderPath + filename + ".xlsx");

                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }
                }

            }
            catch (Exception ex)
            {

            }













        }


        protected void ST1314_Click(object sender, EventArgs e)
        {
            try
            {
                DateTime FromDate = DateTime.ParseExact(txtFrmDate.Text, "dd/MM/yyyy", null);
                DateTime ToDate = DateTime.ParseExact(txtToDate.Text, "dd/MM/yyyy", null);


                //DateTime FromDate = Convert.ToDateTime(txtFrmDate.Text);
                //DateTime ToDate = Convert.ToDateTime(txtToDate.Text);

                System.Data.DataTable EmpnmLi = empnamelistdtwithoutHRA();
                List<string> months = new List<string>() { "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec", "jan", "feb", "mar", };
                DataTable NameCon = new DataTable();
                DataTable NameCon1 = new DataTable();
                NameCon.Columns.Add("Name");
                NameCon.Columns.Add("total");
                NameCon1.Columns.Add("Name");
                NameCon1.Columns.Add("total");
                foreach (var ss in months)
                {
                    NameCon.Columns.Add(ss);
                    NameCon1.Columns.Add(ss);
                }
                int month = Convert.ToInt32(FromDate.Month);
                int year4 = Convert.ToInt32(FromDate.Year);
                decimal sum = 0;
                if (EmpnmLi.Rows.Count != 0)
                {
                    for (int i = 0; i < EmpnmLi.Rows.Count; i++)
                    {
                        DataRow NameRon = NameCon.NewRow();
                        for (int j = 0; j < months.Count; j++)
                        {

                            string amnt = balayer.GetSingleValue("SELECT Amount FROM svcf.voucher where Head_id ='92' and BranchId =" + drpdownBranchlist.SelectedValue + " and T_Month ='" + month + "' and T_Year ='" + year4 + "' and series ='SALARY' and M_id ='" + EmpnmLi.Rows[i]["Employeeid"] + "';");
                            if (month != 12)
                            {
                                month++;
                            }
                            else if (month == 12)
                            {
                                year4++;
                                month = 1;
                            }
                            var acc = months[j];
                            NameRon[acc] = amnt;
                            if (amnt != "")
                                sum += Convert.ToDecimal(amnt);
                        }
                        NameRon["Name"] = EmpnmLi.Rows[i]["Emoloyeename"];
                        NameRon["total"] = sum;
                        NameCon.Rows.Add(NameRon.ItemArray);
                        month = Convert.ToInt32(FromDate.Month);
                        year4 = Convert.ToInt32(FromDate.Year);
                        sum = 0;
                    }
                }
                if (EmpnmLi.Rows.Count != 0)
                {
                    for (int i = 0; i < EmpnmLi.Rows.Count; i++)
                    {
                        DataRow NameRon1 = NameCon1.NewRow();
                        for (int j = 0; j < months.Count; j++)
                        {

                            string amnt = balayer.GetSingleValue("SELECT Amount FROM svcf.voucher where Head_id ='1113550' and BranchId =" + drpdownBranchlist.SelectedValue + " and T_Month ='" + month + "' and T_Year ='" + year4 + "' and series ='SALARY' and M_id ='" + EmpnmLi.Rows[i]["Employeeid"] + "';");
                            if (month != 12)
                            {
                                month++;
                            }
                            else if (month == 12)
                            {
                                year4++;
                                month = 1;
                            }
                            var acc = months[j];
                            NameRon1[acc] = amnt;
                            if (amnt != "")
                                sum += Convert.ToDecimal(amnt);
                        }
                        NameRon1["Name"] = EmpnmLi.Rows[i]["Emoloyeename"];
                        NameRon1["total"] = sum;
                        NameCon1.Rows.Add(NameRon1.ItemArray);
                        month = Convert.ToInt32(FromDate.Month);
                        year4 = Convert.ToInt32(FromDate.Year);
                        sum = 0;
                    }
                }
                string filename = "EPF" + DateTime.Now.Second.ToString();
                var year1 = FromDate.Year;
                var year2 = ToDate.Year;
                var ss2 = "January -" + year2;
                var ss1 = "April -" + year1;
                using (XLWorkbook wb = new XLWorkbook())
                {
                    var ws = wb.Worksheets.Add("EPF St-14");
                    int logo = 1;
                    int branch = 2;
                    int date = 3;
                    int CREDIT = 4;
                    int SNo1 = 5;
                    double page = Math.Ceiling((float)NameCon.Rows.Count / 24);
                    for (int i = 0; i < page; i++)
                    {
                        AddImage(wb, "EPF St-14", 1, logo, "imglogo.png");

                        ws.Cell(logo, 16).Value = "Statement No. 13";
                        ws.Range(logo, 16, logo, 18).Merge().AddToNamed("Titles");


                        ws.Cell(logo, 3).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(logo, 3).Style.Font.Bold = true;
                        ws.Cell(logo, 3).Style.Font.FontSize = 14;


                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(branch, 3).Value = "Branch:  " + "Mount Road";
                            ws.Cell(branch, 3).Style.Font.Bold = true;
                            ws.Cell(branch, 3).Style.Font.FontSize = 13;
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(branch, 3).Value = "Branch:  " + "Pallathur";
                            ws.Cell(branch, 3).Style.Font.Bold = true;
                            ws.Cell(branch, 3).Style.Font.FontSize = 13;
                        }
                        else
                        {
                            ws.Cell(branch, 3).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                            ws.Cell(branch, 3).Style.Font.Bold = true;
                            ws.Cell(branch, 3).Style.Font.FontSize = 13;
                        }

                        ws.Cell(date, 1).Value = "Particulars of Company's Contribution paid to Employees provident Fund as on " + txtToDate.Text;
                        ws.Cell(date, 1).Style.Font.Bold = true;
                        ws.Cell(date, 1).Style.Font.FontSize = 13;
                        ws.Range(date, 1, date, 18).Merge().AddToNamed("Titles");

                        ws.Cell(CREDIT, 1).Value = "Sl. No.";
                        ws.Cell(CREDIT, 1).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 1).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 1, SNo1, 1).Merge();

                        ws.Cell(CREDIT, 2).Value = "P.F.A/c Number";
                        ws.Cell(CREDIT, 2).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 2).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 2, SNo1, 2).Merge();

                        ws.Cell(CREDIT, 3).Value = "Name of the Employees";
                        ws.Cell(CREDIT, 3).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 3).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 3, SNo1, 3).Merge();

                        ws.Cell(CREDIT, 4).Value = "Monthly Salary including D.A";
                        ws.Cell(CREDIT, 4).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 4).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 4).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 4, SNo1, 4).Merge();

                        ws.Cell(CREDIT, 5).Value = "CONTRIBUTION MADE FOR";
                        ws.Cell(CREDIT, 5).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 5).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 5).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 5, CREDIT, 16);
                        var range123 = ws.Range(CREDIT, 5, CREDIT, 16);
                        range123.Merge();
                        range123.Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                        ws.Cell(SNo1, 5).Value = "Apr_ " + year1;
                        ws.Cell(SNo1, 5).Style.Font.Bold = true;
                        ws.Cell(SNo1, 5).Style.Font.FontSize = 11;
                        var ss = "April -" + year1;

                        ws.Cell(SNo1, 6).Value = "May";
                        ws.Cell(SNo1, 6).Style.Font.Bold = true;
                        ws.Cell(SNo1, 6).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 7).Value = "Jun";
                        ws.Cell(SNo1, 7).Style.Font.Bold = true;
                        ws.Cell(SNo1, 7).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 8).Value = "Jul";
                        ws.Cell(SNo1, 8).Style.Font.Bold = true;
                        ws.Cell(SNo1, 8).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 9).Value = "Aug";
                        ws.Cell(SNo1, 9).Style.Font.Bold = true;
                        ws.Cell(SNo1, 9).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 10).Value = "Sep";
                        ws.Cell(SNo1, 10).Style.Font.Bold = true;
                        ws.Cell(SNo1, 10).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 11).Value = "Oct";
                        ws.Cell(SNo1, 11).Style.Font.Bold = true;
                        ws.Cell(SNo1, 11).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 12).Value = "Nov";
                        ws.Cell(SNo1, 12).Style.Font.Bold = true;
                        ws.Cell(SNo1, 12).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 13).Value = "Dec";
                        ws.Cell(SNo1, 13).Style.Font.Bold = true;
                        ws.Cell(SNo1, 13).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 14).Value = "Jan_ " + year2;
                        ws.Cell(SNo1, 14).Style.Font.Bold = true;
                        ws.Cell(SNo1, 14).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 15).Value = "Feb";
                        ws.Cell(SNo1, 15).Style.Font.Bold = true;
                        ws.Cell(SNo1, 15).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 16).Value = "Mar";
                        ws.Cell(SNo1, 16).Style.Font.Bold = true;
                        ws.Cell(SNo1, 16).Style.Font.FontSize = 11;


                        ws.Cell(CREDIT, 17).Value = "Total Contribution Made";
                        ws.Cell(CREDIT, 17).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 17).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 17, SNo1, 17).Merge();

                        ws.Cell(CREDIT, 18).Value = "Remarks";
                        ws.Cell(CREDIT, 18).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 18).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 18, SNo1, 18).Merge();

                        var rangedbr7 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 18));
                        rangedbr7.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        var rangedbr8 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 18));
                        rangedbr8.Style.Border.InsideBorder = XLBorderStyleValues.Double;






                        AddImage(wb, "EPF St-14", 21, logo, "imglogo.png");

                        ws.Cell(logo, 36).Value = "Statement No. 14";
                        ws.Range(logo, 36, logo, 38).Merge().AddToNamed("Titles");


                        ws.Cell(logo, 23).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(logo, 23).Style.Font.Bold = true;
                        ws.Cell(logo, 23).Style.Font.FontSize = 14;


                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(branch, 23).Value = "Branch:  " + "Mount Road";
                            ws.Cell(branch, 23).Style.Font.Bold = true;
                            ws.Cell(branch, 23).Style.Font.FontSize = 13;
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(branch, 23).Value = "Branch:  " + "Pallathur";
                            ws.Cell(branch, 23).Style.Font.Bold = true;
                            ws.Cell(branch, 23).Style.Font.FontSize = 13;
                        }
                        else
                        {
                            ws.Cell(branch, 23).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                            ws.Cell(branch, 23).Style.Font.Bold = true;
                            ws.Cell(branch, 23).Style.Font.FontSize = 13;
                        }

                        ws.Cell(date, 21).Value = "Particulars of Company's Contribution paid to Employees Pension Scheme as on " + txtToDate.Text;
                        ws.Cell(date, 21).Style.Font.Bold = true;
                        ws.Cell(date, 21).Style.Font.FontSize = 13;
                        ws.Range(date, 21, date, 38).Merge().AddToNamed("Titles");

                        ws.Cell(CREDIT, 21).Value = "Sl. No.";
                        ws.Cell(CREDIT, 21).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 21).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 21, SNo1, 21).Merge();

                        ws.Cell(CREDIT, 22).Value = "P.F.A/c Number";
                        ws.Cell(CREDIT, 22).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 22).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 22, SNo1, 22).Merge();

                        ws.Cell(CREDIT, 23).Value = "Name of the Employees";
                        ws.Cell(CREDIT, 23).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 23).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 23, SNo1, 23).Merge();

                        ws.Cell(CREDIT, 24).Value = "Monthly Salary including D.A";
                        ws.Cell(CREDIT, 24).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 24).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 24).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 24, SNo1, 24).Merge();

                        ws.Cell(CREDIT, 25).Value = "Family Pension Contribution Made For";
                        ws.Cell(CREDIT, 25).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 25).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 25).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 25, CREDIT, 36);
                        var range1234 = ws.Range(CREDIT, 25, CREDIT, 36);
                        range1234.Merge();
                        range1234.Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                        ws.Cell(SNo1, 25).Value = "Apr_ " + year2;
                        ws.Cell(SNo1, 25).Style.Font.Bold = true;
                        ws.Cell(SNo1, 25).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 26).Value = "May";
                        ws.Cell(SNo1, 26).Style.Font.Bold = true;
                        ws.Cell(SNo1, 26).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 27).Value = "Jun";
                        ws.Cell(SNo1, 27).Style.Font.Bold = true;
                        ws.Cell(SNo1, 27).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 28).Value = "Jul";
                        ws.Cell(SNo1, 28).Style.Font.Bold = true;
                        ws.Cell(SNo1, 28).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 29).Value = "Aug";
                        ws.Cell(SNo1, 29).Style.Font.Bold = true;
                        ws.Cell(SNo1, 29).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 30).Value = "Sep";
                        ws.Cell(SNo1, 30).Style.Font.Bold = true;
                        ws.Cell(SNo1, 30).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 31).Value = "Oct";
                        ws.Cell(SNo1, 31).Style.Font.Bold = true;
                        ws.Cell(SNo1, 31).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 32).Value = "Nov";
                        ws.Cell(SNo1, 32).Style.Font.Bold = true;
                        ws.Cell(SNo1, 32).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 33).Value = "Dec";
                        ws.Cell(SNo1, 33).Style.Font.Bold = true;
                        ws.Cell(SNo1, 33).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 34).Value = "Jan_ " + year2;
                        ws.Cell(SNo1, 34).Style.Font.Bold = true;
                        ws.Cell(SNo1, 34).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 35).Value = "Feb";
                        ws.Cell(SNo1, 35).Style.Font.Bold = true;
                        ws.Cell(SNo1, 35).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 36).Value = "Mar";
                        ws.Cell(SNo1, 36).Style.Font.Bold = true;
                        ws.Cell(SNo1, 36).Style.Font.FontSize = 11;


                        ws.Cell(CREDIT, 37).Value = "Total Contribution Made";
                        ws.Cell(CREDIT, 37).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 37).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 37, SNo1, 37).Merge();

                        ws.Cell(CREDIT, 38).Value = "Remarks";
                        ws.Cell(CREDIT, 38).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 38).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 38, SNo1, 38).Merge();

                        var rangedbr77 = ws.Range(ws.Cell(CREDIT, 21), ws.Cell(SNo1, 38));
                        rangedbr77.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        var rangedbr87 = ws.Range(ws.Cell(CREDIT, 21), ws.Cell(SNo1, 38));
                        rangedbr87.Style.Border.InsideBorder = XLBorderStyleValues.Double;

                        logo = logo + 31;
                        branch = branch + 31;
                        date = date + 31;
                        CREDIT = CREDIT + 31;
                        SNo1 = SNo1 + 31;
                    }

                    int slno = 0;
                    int RangeCell = 6;
                    decimal SumAmount1 = 0;
                    decimal SumAmount2 = 0;
                    decimal SumAmount3 = 0;
                    decimal SumAmount4 = 0;
                    decimal SumAmount5 = 0;
                    decimal SumAmount6 = 0;
                    decimal SumAmount7 = 0;
                    decimal SumAmount8 = 0;
                    decimal SumAmount9 = 0;
                    decimal SumAmount10 = 0;
                    decimal SumAmount11 = 0;
                    decimal SumAmount12 = 0;
                    decimal SumAmount13 = 0;
                    int debitrows = 0;
                    for (int j = 0; j < NameCon.Rows.Count; j++)
                    {
                        if (j < 24)
                        {
                            var s1 = NameCon.Rows[j]["apr"].ToString();
                            var s2 = NameCon.Rows[j]["may"].ToString();
                            var s3 = NameCon.Rows[j]["jun"].ToString();
                            var s4 = NameCon.Rows[j]["jul"].ToString();
                            var s5 = NameCon.Rows[j]["aug"].ToString();
                            var s6 = NameCon.Rows[j]["sep"].ToString();
                            var s7 = NameCon.Rows[j]["oct"].ToString();
                            var s8 = NameCon.Rows[j]["nov"].ToString();
                            var s9 = NameCon.Rows[j]["dec"].ToString();
                            var s10 = NameCon.Rows[j]["jan"].ToString();
                            var s11 = NameCon.Rows[j]["feb"].ToString();
                            var s12 = NameCon.Rows[j]["mar"].ToString();
                            if (s1 != "" || s2 != "" || s3 != "" || s4 != "" || s5 != "" || s6 != "" || s7 != "" || s8 != "" || s9 != "" || s10 != "" || s11 != "" || s12 != "")
                            {
                                slno += 1;
                                debitrows = debitrows + 1;
                                ws.Cell(RangeCell, 1).Value = slno;
                                ws.Cell(RangeCell, 3).Value = NameCon.Rows[j]["Name"].ToString();

                                ws.Cell(RangeCell, 5).Value = s1;
                                if (s1 != "")
                                {
                                    SumAmount1 += Convert.ToDecimal(s1);
                                }

                                ws.Cell(RangeCell, 6).Value = s2;
                                if (s2 != "")
                                {
                                    SumAmount2 += Convert.ToDecimal(s2);
                                }
                                ws.Cell(RangeCell, 7).Value = s3;
                                if (s3 != "")
                                {
                                    SumAmount3 += Convert.ToDecimal(s3);
                                }
                                ws.Cell(RangeCell, 8).Value = s4;
                                if (s4 != "")
                                {
                                    SumAmount4 += Convert.ToDecimal(s4);
                                }
                                ws.Cell(RangeCell, 9).Value = s5;
                                if (s5 != "")
                                {
                                    SumAmount5 += Convert.ToDecimal(s5);
                                }
                                ws.Cell(RangeCell, 10).Value = s6;
                                if (s6 != "")
                                {
                                    SumAmount6 += Convert.ToDecimal(s6);
                                }
                                ws.Cell(RangeCell, 11).Value = s7;
                                if (s7 != "")
                                {
                                    SumAmount7 += Convert.ToDecimal(s7);
                                }
                                ws.Cell(RangeCell, 12).Value = s8;
                                if (s8 != "")
                                {
                                    SumAmount8 += Convert.ToDecimal(s8);
                                }
                                ws.Cell(RangeCell, 13).Value = s9;
                                if (s9 != "")
                                {
                                    SumAmount9 += Convert.ToDecimal(s9);
                                }
                                ws.Cell(RangeCell, 14).Value = s10;
                                if (s10 != "")
                                {
                                    SumAmount10 += Convert.ToDecimal(s10);
                                }
                                ws.Cell(RangeCell, 15).Value = s11;
                                if (s11 != "")
                                {
                                    SumAmount11 += Convert.ToDecimal(s11);
                                }
                                ws.Cell(RangeCell, 16).Value = s12;
                                if (s12 != "")
                                {
                                    SumAmount12 += Convert.ToDecimal(s12);
                                }

                                ws.Cell(RangeCell, 17).Value = NameCon.Rows[j]["total"].ToString();
                                SumAmount13 += Convert.ToDecimal(NameCon.Rows[j]["total"].ToString());
                                var rangedbr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                var rangedbr29 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                rangedbr29.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                RangeCell++;
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (NameCon.Rows.Count > 24)
                    {
                        ws.Cell(RangeCell, 3).Value = "Total Carried Over";
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 5).Value = SumAmount1;
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 6).Value = SumAmount2;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = SumAmount3;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = SumAmount4;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SumAmount5;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = SumAmount6;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = SumAmount7;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = SumAmount8;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 13).Value = SumAmount9;
                        ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 14).Value = SumAmount10;
                        ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 15).Value = SumAmount11;
                        ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 16).Value = SumAmount12;
                        ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 17).Value = SumAmount13;
                        ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        //   LastRRow = (RangeCell - 1);
                        var rangedbr2 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell = RangeCell + 7;
                        ws.Cell(RangeCell, 3).Value = "Brought Forward";
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 5).Value = SumAmount1;
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 6).Value = SumAmount2;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = SumAmount3;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = SumAmount4;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SumAmount5;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = SumAmount6;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = SumAmount7;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = SumAmount8;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 13).Value = SumAmount9;
                        ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 14).Value = SumAmount10;
                        ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 15).Value = SumAmount11;
                        ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 16).Value = SumAmount12;
                        ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 17).Value = SumAmount13;
                        ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        //   LastRRow = (RangeCell - 1);
                        var rangedbr55 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                        rangedbr55.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr56 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                        rangedbr56.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell = RangeCell + 1;
                        for (; debitrows < NameCon.Rows.Count;)
                        {
                            if (debitrows < 48)
                            {
                                var s1 = NameCon.Rows[debitrows]["apr"].ToString();
                                var s2 = NameCon.Rows[debitrows]["may"].ToString();
                                var s3 = NameCon.Rows[debitrows]["jun"].ToString();
                                var s4 = NameCon.Rows[debitrows]["jul"].ToString();
                                var s5 = NameCon.Rows[debitrows]["aug"].ToString();
                                var s6 = NameCon.Rows[debitrows]["sep"].ToString();
                                var s7 = NameCon.Rows[debitrows]["oct"].ToString();
                                var s8 = NameCon.Rows[debitrows]["nov"].ToString();
                                var s9 = NameCon.Rows[debitrows]["dec"].ToString();
                                var s10 = NameCon.Rows[debitrows]["jan"].ToString();
                                var s11 = NameCon.Rows[debitrows]["feb"].ToString();
                                var s12 = NameCon.Rows[debitrows]["mar"].ToString();
                                if (s1 != "" || s2 != "" || s3 != "" || s4 != "" || s5 != "" || s6 != "" || s7 != "" || s8 != "" || s9 != "" || s10 != "" || s11 != "" || s12 != "")
                                {
                                    slno += 1;
                                    debitrows = debitrows + 1;
                                    ws.Cell(RangeCell, 1).Value = slno;
                                    ws.Cell(RangeCell, 3).Value = NameCon.Rows[debitrows]["Name"].ToString();

                                    ws.Cell(RangeCell, 5).Value = s1;
                                    if (s1 != "")
                                    {
                                        SumAmount1 += Convert.ToDecimal(s1);
                                    }

                                    ws.Cell(RangeCell, 6).Value = s2;
                                    if (s2 != "")
                                    {
                                        SumAmount2 += Convert.ToDecimal(s2);
                                    }
                                    ws.Cell(RangeCell, 7).Value = s3;
                                    if (s3 != "")
                                    {
                                        SumAmount3 += Convert.ToDecimal(s3);
                                    }
                                    ws.Cell(RangeCell, 8).Value = s4;
                                    if (s4 != "")
                                    {
                                        SumAmount4 += Convert.ToDecimal(s4);
                                    }
                                    ws.Cell(RangeCell, 9).Value = s5;
                                    if (s5 != "")
                                    {
                                        SumAmount5 += Convert.ToDecimal(s5);
                                    }
                                    ws.Cell(RangeCell, 10).Value = s6;
                                    if (s6 != "")
                                    {
                                        SumAmount6 += Convert.ToDecimal(s6);
                                    }
                                    ws.Cell(RangeCell, 11).Value = s7;
                                    if (s7 != "")
                                    {
                                        SumAmount7 += Convert.ToDecimal(s7);
                                    }
                                    ws.Cell(RangeCell, 12).Value = s8;
                                    if (s8 != "")
                                    {
                                        SumAmount8 += Convert.ToDecimal(s8);
                                    }
                                    ws.Cell(RangeCell, 13).Value = s9;
                                    if (s9 != "")
                                    {
                                        SumAmount9 += Convert.ToDecimal(s9);
                                    }
                                    ws.Cell(RangeCell, 14).Value = s10;
                                    if (s10 != "")
                                    {
                                        SumAmount10 += Convert.ToDecimal(s10);
                                    }
                                    ws.Cell(RangeCell, 15).Value = s11;
                                    if (s11 != "")
                                    {
                                        SumAmount11 += Convert.ToDecimal(s11);
                                    }
                                    ws.Cell(RangeCell, 16).Value = s12;
                                    if (s12 != "")
                                    {
                                        SumAmount12 += Convert.ToDecimal(s12);
                                    }

                                    ws.Cell(RangeCell, 17).Value = NameCon.Rows[debitrows]["total"].ToString();
                                    SumAmount13 += Convert.ToDecimal(NameCon.Rows[debitrows]["total"].ToString());
                                    var rangedbr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                    rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                    var rangedbr29 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                    rangedbr29.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                    RangeCell++;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (NameCon.Rows.Count > 48)
                        {
                            ws.Cell(RangeCell, 3).Value = "Total Carried Over";
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 5).Value = SumAmount1;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = SumAmount2;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount3;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount4;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount5;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount6;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount7;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount8;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount9;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 14).Value = SumAmount10;
                            ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 15).Value = SumAmount11;
                            ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 16).Value = SumAmount12;
                            ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 17).Value = SumAmount13;
                            ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //         LastRRow = (RangeCell - 1);
                            var rangedbr22 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr22.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr33 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr33.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            RangeCell = RangeCell + 6;

                            ws.Cell(RangeCell, 3).Value = "Brought Forward";
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 5).Value = SumAmount1;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = SumAmount2;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount3;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount4;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount5;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount6;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount7;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount8;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount9;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 14).Value = SumAmount10;
                            ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 15).Value = SumAmount11;
                            ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 16).Value = SumAmount12;
                            ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 17).Value = SumAmount13;
                            ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            var rangedbr555 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr555.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr566 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr566.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            RangeCell = RangeCell + 1;

                            for (; debitrows < NameCon.Rows.Count;)
                            {
                                if (debitrows < 72)
                                {
                                    var s1 = NameCon.Rows[debitrows]["apr"].ToString();
                                    var s2 = NameCon.Rows[debitrows]["may"].ToString();
                                    var s3 = NameCon.Rows[debitrows]["jun"].ToString();
                                    var s4 = NameCon.Rows[debitrows]["jul"].ToString();
                                    var s5 = NameCon.Rows[debitrows]["aug"].ToString();
                                    var s6 = NameCon.Rows[debitrows]["sep"].ToString();
                                    var s7 = NameCon.Rows[debitrows]["oct"].ToString();
                                    var s8 = NameCon.Rows[debitrows]["nov"].ToString();
                                    var s9 = NameCon.Rows[debitrows]["dec"].ToString();
                                    var s10 = NameCon.Rows[debitrows]["jan"].ToString();
                                    var s11 = NameCon.Rows[debitrows]["feb"].ToString();
                                    var s12 = NameCon.Rows[debitrows]["mar"].ToString();
                                    if (s1 != "" || s2 != "" || s3 != "" || s4 != "" || s5 != "" || s6 != "" || s7 != "" || s8 != "" || s9 != "" || s10 != "" || s11 != "" || s12 != "")
                                    {
                                        slno += 1;
                                        debitrows = debitrows + 1;
                                        ws.Cell(RangeCell, 1).Value = slno;
                                        ws.Cell(RangeCell, 3).Value = NameCon.Rows[debitrows]["Name"].ToString();

                                        ws.Cell(RangeCell, 5).Value = s1;
                                        if (s1 != "")
                                        {
                                            SumAmount1 += Convert.ToDecimal(s1);
                                        }

                                        ws.Cell(RangeCell, 6).Value = s2;
                                        if (s2 != "")
                                        {
                                            SumAmount2 += Convert.ToDecimal(s2);
                                        }
                                        ws.Cell(RangeCell, 7).Value = s3;
                                        if (s3 != "")
                                        {
                                            SumAmount3 += Convert.ToDecimal(s3);
                                        }
                                        ws.Cell(RangeCell, 8).Value = s4;
                                        if (s4 != "")
                                        {
                                            SumAmount4 += Convert.ToDecimal(s4);
                                        }
                                        ws.Cell(RangeCell, 9).Value = s5;
                                        if (s5 != "")
                                        {
                                            SumAmount5 += Convert.ToDecimal(s5);
                                        }
                                        ws.Cell(RangeCell, 10).Value = s6;
                                        if (s6 != "")
                                        {
                                            SumAmount6 += Convert.ToDecimal(s6);
                                        }
                                        ws.Cell(RangeCell, 11).Value = s7;
                                        if (s7 != "")
                                        {
                                            SumAmount7 += Convert.ToDecimal(s7);
                                        }
                                        ws.Cell(RangeCell, 12).Value = s8;
                                        if (s8 != "")
                                        {
                                            SumAmount8 += Convert.ToDecimal(s8);
                                        }
                                        ws.Cell(RangeCell, 13).Value = s9;
                                        if (s9 != "")
                                        {
                                            SumAmount9 += Convert.ToDecimal(s9);
                                        }
                                        ws.Cell(RangeCell, 14).Value = s10;
                                        if (s10 != "")
                                        {
                                            SumAmount10 += Convert.ToDecimal(s10);
                                        }
                                        ws.Cell(RangeCell, 15).Value = s11;
                                        if (s11 != "")
                                        {
                                            SumAmount11 += Convert.ToDecimal(s11);
                                        }
                                        ws.Cell(RangeCell, 16).Value = s12;
                                        if (s12 != "")
                                        {
                                            SumAmount12 += Convert.ToDecimal(s12);
                                        }

                                        ws.Cell(RangeCell, 17).Value = NameCon.Rows[debitrows]["total"].ToString();
                                        SumAmount13 += Convert.ToDecimal(NameCon.Rows[debitrows]["total"].ToString());
                                        var rangedbr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                        rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                        var rangedbr29 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                        rangedbr29.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                        RangeCell++;
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                            RangeCell++;
                            ws.Cell(RangeCell, 3).Value = "Total";
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 5).Value = SumAmount1;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = SumAmount2;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount3;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount4;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount5;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount6;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount7;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount8;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount9;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 14).Value = SumAmount10;
                            ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 15).Value = SumAmount11;
                            ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 16).Value = SumAmount12;
                            ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 17).Value = SumAmount13;
                            ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //   LastRRow = (RangeCell - 1);
                            var rangedbr234 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr334 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        }
                        else
                        {

                            RangeCell++;
                            ws.Cell(RangeCell, 3).Value = "Total";
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 5).Value = SumAmount1;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = SumAmount2;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount3;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount4;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount5;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount6;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount7;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount8;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount9;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 14).Value = SumAmount10;
                            ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 15).Value = SumAmount11;
                            ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 16).Value = SumAmount12;
                            ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 17).Value = SumAmount13;
                            ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);


                            //    LastRRow = (RangeCell - 1);
                            var rangedbr234 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr334 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        }
                    }
                    else
                    {
                        RangeCell = 30;

                        ws.Cell(RangeCell, 3).Value = "Total";
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 5).Value = SumAmount1;
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 6).Value = SumAmount2;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = SumAmount3;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = SumAmount4;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SumAmount5;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = SumAmount6;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = SumAmount7;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = SumAmount8;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 13).Value = SumAmount9;
                        ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 14).Value = SumAmount10;
                        ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 15).Value = SumAmount11;
                        ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 16).Value = SumAmount12;
                        ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 17).Value = SumAmount13;
                        ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        //      LastRRow = (RangeCell - 1);
                        var rangedbr2 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 18));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 18));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    }

                    int slno1 = 0;
                    int RangeCell1 = 6;
                    decimal Sum1 = 0;
                    decimal Sum2 = 0;
                    decimal Sum3 = 0;
                    decimal Sum4 = 0;
                    decimal Sum5 = 0;
                    decimal Sum6 = 0;
                    decimal Sum7 = 0;
                    decimal Sum8 = 0;
                    decimal Sum9 = 0;
                    decimal Sum10 = 0;
                    decimal Sum11 = 0;
                    decimal Sum12 = 0;
                    decimal Sum13 = 0;
                    int debitrows1 = 0;
                    for (int jj = 0; jj < NameCon1.Rows.Count; jj++)
                    {
                        if (jj < 24)
                        {
                            var s1 = NameCon1.Rows[jj]["apr"].ToString();
                            var s2 = NameCon1.Rows[jj]["may"].ToString();
                            var s3 = NameCon1.Rows[jj]["jun"].ToString();
                            var s4 = NameCon1.Rows[jj]["jul"].ToString();
                            var s5 = NameCon1.Rows[jj]["aug"].ToString();
                            var s6 = NameCon1.Rows[jj]["sep"].ToString();
                            var s7 = NameCon1.Rows[jj]["oct"].ToString();
                            var s8 = NameCon1.Rows[jj]["nov"].ToString();
                            var s9 = NameCon1.Rows[jj]["dec"].ToString();
                            var s10 = NameCon1.Rows[jj]["jan"].ToString();
                            var s11 = NameCon1.Rows[jj]["feb"].ToString();
                            var s12 = NameCon1.Rows[jj]["mar"].ToString();
                            if (s1 != "" || s2 != "" || s3 != "" || s4 != "" || s5 != "" || s6 != "" || s7 != "" || s8 != "" || s9 != "" || s10 != "" || s11 != "" || s12 != "")
                            {
                                slno1 += 1;
                                debitrows1 = debitrows1 + 1;
                                ws.Cell(RangeCell1, 21).Value = slno1;
                                ws.Cell(RangeCell1, 23).Value = NameCon1.Rows[jj]["Name"].ToString();

                                ws.Cell(RangeCell1, 25).Value = s1;
                                if (s1 != "")
                                {
                                    Sum1 += Convert.ToDecimal(s1);
                                }

                                ws.Cell(RangeCell1, 26).Value = s2;
                                if (s2 != "")
                                {
                                    Sum2 += Convert.ToDecimal(s2);
                                }
                                ws.Cell(RangeCell1, 27).Value = s3;
                                if (s3 != "")
                                {
                                    Sum3 += Convert.ToDecimal(s3);
                                }
                                ws.Cell(RangeCell1, 28).Value = s4;
                                if (s4 != "")
                                {
                                    Sum4 += Convert.ToDecimal(s4);
                                }
                                ws.Cell(RangeCell1, 29).Value = s5;
                                if (s5 != "")
                                {
                                    Sum5 += Convert.ToDecimal(s5);
                                }
                                ws.Cell(RangeCell1, 30).Value = s6;
                                if (s6 != "")
                                {
                                    Sum6 += Convert.ToDecimal(s6);
                                }
                                ws.Cell(RangeCell1, 31).Value = s7;
                                if (s7 != "")
                                {
                                    Sum7 += Convert.ToDecimal(s7);
                                }
                                ws.Cell(RangeCell1, 32).Value = s8;
                                if (s8 != "")
                                {
                                    Sum8 += Convert.ToDecimal(s8);
                                }
                                ws.Cell(RangeCell1, 33).Value = s9;
                                if (s9 != "")
                                {
                                    Sum9 += Convert.ToDecimal(s9);
                                }
                                ws.Cell(RangeCell1, 34).Value = s10;
                                if (s10 != "")
                                {
                                    Sum10 += Convert.ToDecimal(s10);
                                }
                                ws.Cell(RangeCell1, 35).Value = s11;
                                if (s11 != "")
                                {
                                    Sum11 += Convert.ToDecimal(s11);
                                }
                                ws.Cell(RangeCell1, 36).Value = s12;
                                if (s12 != "")
                                {
                                    Sum12 += Convert.ToDecimal(s12);
                                }

                                ws.Cell(RangeCell1, 37).Value = NameCon1.Rows[jj]["total"].ToString();
                                Sum13 += Convert.ToDecimal(NameCon1.Rows[jj]["total"].ToString());
                                RangeCell1++;
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (NameCon1.Rows.Count > 24)
                    {
                        ws.Cell(RangeCell1, 23).Value = "Total Carried Over";
                        ws.Cell(RangeCell1, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell1, 23).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 23).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell1, 25).Value = Sum1;
                        ws.Cell(RangeCell1, 25).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 25).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 25).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 26).Value = Sum2;
                        ws.Cell(RangeCell1, 26).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 26).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 26).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 27).Value = Sum3;
                        ws.Cell(RangeCell1, 27).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 27).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 27).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 28).Value = Sum4;
                        ws.Cell(RangeCell1, 28).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 28).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 28).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 29).Value = Sum5;
                        ws.Cell(RangeCell1, 29).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 29).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 29).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 30).Value = Sum6;
                        ws.Cell(RangeCell1, 30).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 30).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 30).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 31).Value = Sum7;
                        ws.Cell(RangeCell1, 31).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 31).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 31).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 32).Value = Sum8;
                        ws.Cell(RangeCell1, 32).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 32).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 32).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 33).Value = Sum9;
                        ws.Cell(RangeCell1, 33).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 33).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 33).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 34).Value = Sum10;
                        ws.Cell(RangeCell1, 34).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 34).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 34).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 35).Value = Sum11;
                        ws.Cell(RangeCell1, 35).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 35).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 35).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell1, 36).Value = Sum12;
                        ws.Cell(RangeCell1, 36).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 36).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 36).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 37).Value = Sum13;
                        ws.Cell(RangeCell1, 37).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 37).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 37).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        //      LastRRow = (RangeCell1 - 1);
                        var rangedbr2 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(RangeCell1, 1), ws.Cell(RangeCell1, 18));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell1 = RangeCell1 + 7;
                        ws.Cell(RangeCell1, 23).Value = "Brought Forward";
                        ws.Cell(RangeCell1, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell1, 23).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 23).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell1, 25).Value = Sum1;
                        ws.Cell(RangeCell1, 25).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 25).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 25).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 26).Value = Sum2;
                        ws.Cell(RangeCell1, 26).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 26).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 26).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 27).Value = Sum3;
                        ws.Cell(RangeCell1, 27).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 27).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 27).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 28).Value = Sum4;
                        ws.Cell(RangeCell1, 28).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 28).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 28).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 29).Value = Sum5;
                        ws.Cell(RangeCell1, 29).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 29).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 29).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 30).Value = Sum6;
                        ws.Cell(RangeCell1, 30).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 30).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 30).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 31).Value = Sum7;
                        ws.Cell(RangeCell1, 31).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 31).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 31).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 32).Value = Sum8;
                        ws.Cell(RangeCell1, 32).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 32).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 32).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 33).Value = Sum9;
                        ws.Cell(RangeCell1, 33).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 33).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 33).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 34).Value = Sum10;
                        ws.Cell(RangeCell1, 34).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 34).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 34).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 35).Value = Sum11;
                        ws.Cell(RangeCell1, 35).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 35).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 35).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell1, 36).Value = Sum12;
                        ws.Cell(RangeCell1, 36).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 36).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 36).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 37).Value = Sum13;
                        ws.Cell(RangeCell1, 37).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 37).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 37).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        //      LastRRow = (RangeCell1 - 1);
                        var rangedbr55 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                        rangedbr55.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr56 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                        rangedbr56.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell1 = RangeCell1 + 1;
                        for (; debitrows1 < NameCon1.Rows.Count;)
                        {
                            if (debitrows1 < 48)
                            {
                                var s1 = NameCon1.Rows[debitrows1]["apr"].ToString();
                                var s2 = NameCon1.Rows[debitrows1]["may"].ToString();
                                var s3 = NameCon1.Rows[debitrows1]["jun"].ToString();
                                var s4 = NameCon1.Rows[debitrows1]["jul"].ToString();
                                var s5 = NameCon1.Rows[debitrows1]["aug"].ToString();
                                var s6 = NameCon1.Rows[debitrows1]["sep"].ToString();
                                var s7 = NameCon1.Rows[debitrows1]["oct"].ToString();
                                var s8 = NameCon1.Rows[debitrows1]["nov"].ToString();
                                var s9 = NameCon1.Rows[debitrows1]["dec"].ToString();
                                var s10 = NameCon1.Rows[debitrows1]["jan"].ToString();
                                var s11 = NameCon1.Rows[debitrows1]["feb"].ToString();
                                var s12 = NameCon1.Rows[debitrows1]["mar"].ToString();
                                if (s1 != "" || s2 != "" || s3 != "" || s4 != "" || s5 != "" || s6 != "" || s7 != "" || s8 != "" || s9 != "" || s10 != "" || s11 != "" || s12 != "")
                                {
                                    slno1 += 1;
                                    debitrows1 = debitrows1 + 1;
                                    ws.Cell(RangeCell1, 21).Value = slno1;
                                    ws.Cell(RangeCell1, 23).Value = NameCon1.Rows[debitrows1]["Name"].ToString();
                                    ws.Cell(RangeCell1, 25).Value = s1;
                                    if (s1 != "")
                                    {
                                        Sum1 += Convert.ToDecimal(s1);
                                    }

                                    ws.Cell(RangeCell1, 26).Value = s2;
                                    if (s2 != "")
                                    {
                                        Sum2 += Convert.ToDecimal(s2);
                                    }
                                    ws.Cell(RangeCell1, 27).Value = s3;
                                    if (s3 != "")
                                    {
                                        Sum3 += Convert.ToDecimal(s3);
                                    }
                                    ws.Cell(RangeCell1, 28).Value = s4;
                                    if (s4 != "")
                                    {
                                        Sum4 += Convert.ToDecimal(s4);
                                    }
                                    ws.Cell(RangeCell1, 29).Value = s5;
                                    if (s5 != "")
                                    {
                                        Sum5 += Convert.ToDecimal(s5);
                                    }
                                    ws.Cell(RangeCell1, 30).Value = s6;
                                    if (s6 != "")
                                    {
                                        Sum6 += Convert.ToDecimal(s6);
                                    }
                                    ws.Cell(RangeCell1, 31).Value = s7;
                                    if (s7 != "")
                                    {
                                        Sum7 += Convert.ToDecimal(s7);
                                    }
                                    ws.Cell(RangeCell1, 32).Value = s8;
                                    if (s8 != "")
                                    {
                                        Sum8 += Convert.ToDecimal(s8);
                                    }
                                    ws.Cell(RangeCell1, 33).Value = s9;
                                    if (s9 != "")
                                    {
                                        Sum9 += Convert.ToDecimal(s9);
                                    }
                                    ws.Cell(RangeCell1, 34).Value = s10;
                                    if (s10 != "")
                                    {
                                        Sum10 += Convert.ToDecimal(s10);
                                    }
                                    ws.Cell(RangeCell1, 35).Value = s11;
                                    if (s11 != "")
                                    {
                                        Sum11 += Convert.ToDecimal(s11);
                                    }
                                    ws.Cell(RangeCell1, 36).Value = s12;
                                    if (s12 != "")
                                    {
                                        Sum12 += Convert.ToDecimal(s12);
                                    }

                                    ws.Cell(RangeCell1, 37).Value = NameCon1.Rows[debitrows1]["total"].ToString();
                                    Sum13 += Convert.ToDecimal(NameCon1.Rows[debitrows1]["total"].ToString());
                                    var rangedbr23 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                                    rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                    var rangedbr29 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                                    rangedbr29.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                    RangeCell1++;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (NameCon1.Rows.Count > 48)
                        {
                            ws.Cell(RangeCell1, 23).Value = "Total Carried Over";
                            ws.Cell(RangeCell1, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell1, 23).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 23).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell1, 25).Value = Sum1;
                            ws.Cell(RangeCell1, 25).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 25).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 25).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 26).Value = Sum2;
                            ws.Cell(RangeCell1, 26).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 26).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 26).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 27).Value = Sum3;
                            ws.Cell(RangeCell1, 27).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 27).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 27).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 28).Value = Sum4;
                            ws.Cell(RangeCell1, 28).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 28).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 28).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 29).Value = Sum5;
                            ws.Cell(RangeCell1, 29).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 29).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 29).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 30).Value = Sum6;
                            ws.Cell(RangeCell1, 30).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 30).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 30).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 31).Value = Sum7;
                            ws.Cell(RangeCell1, 31).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 31).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 31).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 32).Value = Sum8;
                            ws.Cell(RangeCell1, 32).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 32).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 32).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 33).Value = Sum9;
                            ws.Cell(RangeCell1, 33).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 33).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 33).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 34).Value = Sum10;
                            ws.Cell(RangeCell1, 34).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 34).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 34).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 35).Value = Sum11;
                            ws.Cell(RangeCell1, 35).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 35).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 35).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell1, 36).Value = Sum12;
                            ws.Cell(RangeCell1, 36).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 36).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 36).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 37).Value = Sum13;
                            ws.Cell(RangeCell1, 37).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 37).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 37).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //       LastRRow = (RangeCell1 - 1);
                            var rangedbr22 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                            rangedbr22.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr33 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                            rangedbr33.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            RangeCell1 = RangeCell1 + 6;

                            ws.Cell(RangeCell1, 23).Value = "Brought Forward";
                            ws.Cell(RangeCell1, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell1, 23).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 23).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell1, 25).Value = Sum1;
                            ws.Cell(RangeCell1, 25).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 25).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 25).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 26).Value = Sum2;
                            ws.Cell(RangeCell1, 26).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 26).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 26).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 27).Value = Sum3;
                            ws.Cell(RangeCell1, 27).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 27).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 27).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 28).Value = Sum4;
                            ws.Cell(RangeCell1, 28).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 28).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 28).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 29).Value = Sum5;
                            ws.Cell(RangeCell1, 29).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 29).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 29).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 30).Value = Sum6;
                            ws.Cell(RangeCell1, 30).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 30).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 30).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 31).Value = Sum7;
                            ws.Cell(RangeCell1, 31).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 31).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 31).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 32).Value = Sum8;
                            ws.Cell(RangeCell1, 32).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 32).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 32).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 33).Value = Sum9;
                            ws.Cell(RangeCell1, 33).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 33).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 33).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 34).Value = Sum10;
                            ws.Cell(RangeCell1, 34).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 34).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 34).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 35).Value = Sum11;
                            ws.Cell(RangeCell1, 35).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 35).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 35).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell1, 36).Value = Sum12;
                            ws.Cell(RangeCell1, 36).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 36).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 36).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 37).Value = Sum13;
                            ws.Cell(RangeCell1, 37).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 37).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 37).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            var rangedbr555 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                            rangedbr555.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr566 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                            rangedbr566.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            RangeCell1 = RangeCell1 + 1;

                            for (; debitrows1 < NameCon1.Rows.Count;)
                            {
                                if (debitrows1 < 72)
                                {
                                    var s1 = NameCon1.Rows[debitrows1]["apr"].ToString();
                                    var s2 = NameCon1.Rows[debitrows1]["may"].ToString();
                                    var s3 = NameCon1.Rows[debitrows1]["jun"].ToString();
                                    var s4 = NameCon1.Rows[debitrows1]["jul"].ToString();
                                    var s5 = NameCon1.Rows[debitrows1]["aug"].ToString();
                                    var s6 = NameCon1.Rows[debitrows1]["sep"].ToString();
                                    var s7 = NameCon1.Rows[debitrows1]["oct"].ToString();
                                    var s8 = NameCon1.Rows[debitrows1]["nov"].ToString();
                                    var s9 = NameCon1.Rows[debitrows1]["dec"].ToString();
                                    var s10 = NameCon1.Rows[debitrows1]["jan"].ToString();
                                    var s11 = NameCon1.Rows[debitrows1]["feb"].ToString();
                                    var s12 = NameCon1.Rows[debitrows1]["mar"].ToString();
                                    if (s1 != "" || s2 != "" || s3 != "" || s4 != "" || s5 != "" || s6 != "" || s7 != "" || s8 != "" || s9 != "" || s10 != "" || s11 != "" || s12 != "")
                                    {
                                        slno1 += 1;
                                        debitrows1 = debitrows1 + 1;
                                        ws.Cell(RangeCell1, 21).Value = slno1;
                                        ws.Cell(RangeCell1, 23).Value = NameCon1.Rows[debitrows1]["Name"].ToString();

                                        ws.Cell(RangeCell1, 25).Value = s1;
                                        if (s1 != "")
                                        {
                                            Sum1 += Convert.ToDecimal(s1);
                                        }

                                        ws.Cell(RangeCell1, 26).Value = s2;
                                        if (s2 != "")
                                        {
                                            Sum2 += Convert.ToDecimal(s2);
                                        }
                                        ws.Cell(RangeCell1, 27).Value = s3;
                                        if (s3 != "")
                                        {
                                            Sum3 += Convert.ToDecimal(s3);
                                        }
                                        ws.Cell(RangeCell1, 28).Value = s4;
                                        if (s4 != "")
                                        {
                                            Sum4 += Convert.ToDecimal(s4);
                                        }
                                        ws.Cell(RangeCell1, 29).Value = s5;
                                        if (s5 != "")
                                        {
                                            Sum5 += Convert.ToDecimal(s5);
                                        }
                                        ws.Cell(RangeCell1, 30).Value = s6;
                                        if (s6 != "")
                                        {
                                            Sum6 += Convert.ToDecimal(s6);
                                        }
                                        ws.Cell(RangeCell1, 31).Value = s7;
                                        if (s7 != "")
                                        {
                                            Sum7 += Convert.ToDecimal(s7);
                                        }
                                        ws.Cell(RangeCell1, 32).Value = s8;
                                        if (s8 != "")
                                        {
                                            Sum8 += Convert.ToDecimal(s8);
                                        }
                                        ws.Cell(RangeCell1, 33).Value = s9;
                                        if (s9 != "")
                                        {
                                            Sum9 += Convert.ToDecimal(s9);
                                        }
                                        ws.Cell(RangeCell1, 34).Value = s10;
                                        if (s10 != "")
                                        {
                                            Sum10 += Convert.ToDecimal(s10);
                                        }
                                        ws.Cell(RangeCell1, 35).Value = s11;
                                        if (s11 != "")
                                        {
                                            Sum11 += Convert.ToDecimal(s11);
                                        }
                                        ws.Cell(RangeCell1, 36).Value = s12;
                                        if (s12 != "")
                                        {
                                            Sum12 += Convert.ToDecimal(s12);
                                        }

                                        ws.Cell(RangeCell1, 37).Value = NameCon1.Rows[debitrows1]["total"].ToString();
                                        Sum13 += Convert.ToDecimal(NameCon1.Rows[debitrows1]["total"].ToString());
                                        var rangedbr23 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                                        rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                        var rangedbr29 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                                        rangedbr29.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                        RangeCell1++;
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                            RangeCell1++;
                            ws.Cell(RangeCell1, 23).Value = "Total";
                            ws.Cell(RangeCell1, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell1, 23).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 23).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell1, 25).Value = Sum1;
                            ws.Cell(RangeCell1, 25).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 25).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 25).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 26).Value = Sum2;
                            ws.Cell(RangeCell1, 26).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 26).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 26).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 27).Value = Sum3;
                            ws.Cell(RangeCell1, 27).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 27).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 27).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 28).Value = Sum4;
                            ws.Cell(RangeCell1, 28).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 28).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 28).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 29).Value = Sum5;
                            ws.Cell(RangeCell1, 29).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 29).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 29).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 30).Value = Sum6;
                            ws.Cell(RangeCell1, 30).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 30).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 30).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 31).Value = Sum7;
                            ws.Cell(RangeCell1, 31).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 31).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 31).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 32).Value = Sum8;
                            ws.Cell(RangeCell1, 32).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 32).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 32).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 33).Value = Sum9;
                            ws.Cell(RangeCell1, 33).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 33).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 33).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 34).Value = Sum10;
                            ws.Cell(RangeCell1, 34).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 34).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 34).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 35).Value = Sum11;
                            ws.Cell(RangeCell1, 35).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 35).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 35).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell1, 36).Value = Sum12;
                            ws.Cell(RangeCell1, 36).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 36).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 36).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 37).Value = Sum13;
                            ws.Cell(RangeCell1, 37).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 37).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 37).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //      LastRRow = (RangeCell1 - 1);
                            var rangedbr234 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr334 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                            rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        }
                        else
                        {

                            RangeCell1++;
                            ws.Cell(RangeCell1, 23).Value = "Total";
                            ws.Cell(RangeCell1, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell1, 23).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 23).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell1, 25).Value = Sum1;
                            ws.Cell(RangeCell1, 25).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 25).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 25).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 26).Value = Sum2;
                            ws.Cell(RangeCell1, 26).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 26).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 26).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 27).Value = Sum3;
                            ws.Cell(RangeCell1, 27).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 27).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 27).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 28).Value = Sum4;
                            ws.Cell(RangeCell1, 28).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 28).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 28).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 29).Value = Sum5;
                            ws.Cell(RangeCell1, 29).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 29).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 29).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 30).Value = Sum6;
                            ws.Cell(RangeCell1, 30).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 30).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 30).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 31).Value = Sum7;
                            ws.Cell(RangeCell1, 31).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 31).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 31).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 32).Value = Sum8;
                            ws.Cell(RangeCell1, 32).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 32).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 32).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 33).Value = Sum9;
                            ws.Cell(RangeCell1, 33).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 33).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 33).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 34).Value = Sum10;
                            ws.Cell(RangeCell1, 34).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 34).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 34).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 35).Value = Sum11;
                            ws.Cell(RangeCell1, 35).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 35).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 35).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell1, 36).Value = Sum12;
                            ws.Cell(RangeCell1, 36).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 36).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 36).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell1, 37).Value = Sum13;
                            ws.Cell(RangeCell1, 37).Style.Font.Bold = true;
                            ws.Cell(RangeCell1, 37).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell1, 37).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);


                            //            LastRRow = (RangeCell1 - 1);
                            var rangedbr234 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr334 = ws.Range(ws.Cell(RangeCell1, 21), ws.Cell(RangeCell1, 38));
                            rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        }
                    }
                    else
                    {
                        RangeCell1 = 30;

                        ws.Cell(RangeCell1, 23).Value = "Total";
                        ws.Cell(RangeCell1, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell1, 23).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 23).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell1, 25).Value = Sum1;
                        ws.Cell(RangeCell1, 25).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 25).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 25).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 26).Value = Sum2;
                        ws.Cell(RangeCell1, 26).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 26).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 26).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 27).Value = Sum3;
                        ws.Cell(RangeCell1, 27).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 27).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 27).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell1, 28).Value = Sum4;
                        ws.Cell(RangeCell1, 28).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 28).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 28).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 29).Value = Sum5;
                        ws.Cell(RangeCell1, 29).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 29).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 29).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 30).Value = Sum6;
                        ws.Cell(RangeCell1, 30).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 30).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 30).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 31).Value = Sum7;
                        ws.Cell(RangeCell1, 31).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 31).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 31).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 32).Value = Sum8;
                        ws.Cell(RangeCell1, 32).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 32).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 32).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 33).Value = Sum9;
                        ws.Cell(RangeCell1, 33).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 33).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 33).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 34).Value = Sum10;
                        ws.Cell(RangeCell1, 34).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 34).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 34).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 35).Value = Sum11;
                        ws.Cell(RangeCell1, 35).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 35).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 35).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell1, 36).Value = Sum12;
                        ws.Cell(RangeCell1, 36).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 36).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 36).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell1, 37).Value = Sum13;
                        ws.Cell(RangeCell1, 37).Style.Font.Bold = true;
                        ws.Cell(RangeCell1, 37).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell1, 37).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        //      LastRRow = (RangeCell1 - 1);
                        var rangedbr2 = ws.Range(ws.Cell(6, 21), ws.Cell(RangeCell1, 38));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(6, 21), ws.Cell(RangeCell1, 38));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    //  titlesStyle.Fill.BackgroundColor = XLColor.Cyan;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    //   wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }


                }

            }
            catch (Exception ex)
            {
                LogCls.LogError(ex, "ST1314 Error");
            }
        }

        public System.Data.DataTable empnamelistdtwithoutHRA()
        {

            DataTable NameCon = new DataTable();

            NameCon.Columns.Add("Emoloyeename");
            NameCon.Columns.Add("Monthlywages");
            NameCon.Columns.Add("Employeeid");
            DataRow NameRon = NameCon.NewRow();

            DataTable EmpnmLi = balayer.GetDataTable("SELECT Emp_Name,Emp_ID FROM svcf.employee_details where BranchId =" + drpdownBranchlist.SelectedValue + " order by Designation_ID,Emp_SrNumber asc; ");
            if (EmpnmLi.Rows.Count != 0)
            {
                for (int i = 0; i < EmpnmLi.Rows.Count; i++)
                {
                    decimal Da = 0;
                    decimal Hra = 0;
                    decimal sal = 0;
                    string strsal = balayer.GetSingleValue("SELECT Amount FROM svcf.voucher where series='SALARY' and BranchId=" + drpdownBranchlist.SelectedValue + "  and Head_id ='86' and M_Id ='" + EmpnmLi.Rows[i]["Emp_ID"] + "'");
                    string strDA = balayer.GetSingleValue("SELECT Amount FROM svcf.voucher where series='SALARY' and BranchId=" + drpdownBranchlist.SelectedValue + "  and Head_id ='87' and M_Id ='" + EmpnmLi.Rows[i]["Emp_ID"] + "'");

                    if (strDA != "")
                    {
                        Da = Convert.ToDecimal(strDA);
                    }

                    if (strsal != "")
                    {
                        sal = Convert.ToDecimal(strsal);
                    }

                    string totsal = Convert.ToString(Da + Hra + sal);
                    if (totsal != "0")
                    {
                        NameRon["Emoloyeename"] = EmpnmLi.Rows[i]["Emp_Name"];
                        NameRon["Employeeid"] = EmpnmLi.Rows[i]["Emp_ID"];
                        NameRon["Monthlywages"] = totsal;

                        NameCon.Rows.Add(NameRon.ItemArray);
                    }
                }
            }

            return NameCon;
        }


        protected void ST14_Click(object sender, EventArgs e)
        {
            try
            {
                DateTime FromDate = Convert.ToDateTime(txtFrmDate.Text);
                DateTime ToDate = Convert.ToDateTime(txtToDate.Text);

                System.Data.DataTable EmpnmLi = empnamelistdt();
                List<string> months = new List<string>() { "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec", "jan", "feb", "mar", };
                DataTable NameCon = new DataTable();
                NameCon.Columns.Add("Name");
                NameCon.Columns.Add("total");
                foreach (var ss in months)
                {
                    NameCon.Columns.Add(ss);
                }

                int month = Convert.ToInt32(FromDate.Month);
                int year4 = Convert.ToInt32(FromDate.Year);
                decimal sum = 0;
                if (EmpnmLi.Rows.Count != 0)
                {
                    for (int i = 0; i < EmpnmLi.Rows.Count; i++)
                    {
                        DataRow NameRon = NameCon.NewRow();
                        for (int j = 0; j < months.Count; j++)
                        {

                            string amnt = balayer.GetSingleValue("SELECT Amount FROM svcf.voucher where Head_id ='173' and BranchId =" + drpdownBranchlist.SelectedValue + " and T_Month ='" + month + "' and T_Year ='" + year4 + "' and series ='SALARY' and M_id ='" + EmpnmLi.Rows[i]["Employeeid"] + "';");
                            if (month != 12)
                            {
                                month++;
                            }
                            else if (month == 12)
                            {
                                year4++;
                                month = 1;
                            }
                            var acc = months[j];
                            NameRon[acc] = amnt;
                            if (amnt != "")
                                sum += Convert.ToDecimal(amnt);
                        }
                        NameRon["Name"] = EmpnmLi.Rows[i]["Emoloyeename"];
                        NameRon["total"] = sum;
                        NameCon.Rows.Add(NameRon.ItemArray);
                        month = Convert.ToInt32(FromDate.Month);
                        year4 = Convert.ToInt32(FromDate.Year);
                        sum = 0;
                    }
                }
                string filename = "ESIC" + DateTime.Now.Second.ToString();

                var year1 = FromDate.Year;
                var year2 = ToDate.Year;


                using (XLWorkbook wb = new XLWorkbook())
                {
                    var ws = wb.Worksheets.Add("ESIC St-14");
                    int logo = 1;
                    int branch = 2;
                    int date = 3;
                    int CREDIT = 4;
                    int SNo1 = 5;
                    double page = Math.Ceiling((float)NameCon.Rows.Count / 24);
                    if (page == 0)
                    {
                        AddImage(wb, "ESIC St-14", 1, logo, "imglogo.png");

                        ws.Cell(logo, 16).Value = "Statement No. 14-A";
                        ws.Range(logo, 16, logo, 18).Merge().AddToNamed("Titles");


                        ws.Cell(logo, 3).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(logo, 3).Style.Font.Bold = true;
                        ws.Cell(logo, 3).Style.Font.FontSize = 14;


                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(branch, 3).Value = "Branch:  " + "Mount Road";
                            ws.Cell(branch, 3).Style.Font.Bold = true;
                            ws.Cell(branch, 3).Style.Font.FontSize = 13;
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(branch, 3).Value = "Branch:  " + "Pallathur";
                            ws.Cell(branch, 3).Style.Font.Bold = true;
                            ws.Cell(branch, 3).Style.Font.FontSize = 13;
                        }
                        else
                        {
                            ws.Cell(branch, 3).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                            ws.Cell(branch, 3).Style.Font.Bold = true;
                            ws.Cell(branch, 3).Style.Font.FontSize = 13;
                        }

                        ws.Cell(date, 1).Value = "Particulars of Company's Contribution paid to Employees State Insurance Corporation during the Financial year  " + txtFrmDate.Text + " to " + txtToDate.Text;
                        ws.Cell(date, 1).Style.Font.Bold = true;
                        ws.Cell(date, 1).Style.Font.FontSize = 13;
                        ws.Range(date, 1, date, 18).Merge().AddToNamed("Titles");

                        ws.Cell(CREDIT, 1).Value = "Sl. No.";
                        ws.Cell(CREDIT, 1).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 1).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 1, SNo1, 1).Merge();

                        ws.Cell(CREDIT, 2).Value = "P.F.A/c Number";
                        ws.Cell(CREDIT, 2).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 2).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 2, SNo1, 2).Merge();

                        ws.Cell(CREDIT, 3).Value = "Name of the Employees";
                        ws.Cell(CREDIT, 3).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 3).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 3, SNo1, 3).Merge();

                        ws.Cell(CREDIT, 4).Value = "Monthly Salary including D.A";
                        ws.Cell(CREDIT, 4).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 4).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 4).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 4, SNo1, 4).Merge();

                        ws.Cell(CREDIT, 5).Value = "CONTRIBUTION MADE FOR";
                        ws.Cell(CREDIT, 5).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 5).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 5).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 5, CREDIT, 16);
                        var range123 = ws.Range(CREDIT, 5, CREDIT, 16);
                        range123.Merge();
                        range123.Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                        var ss1 = "April -" + year1;
                        ws.Cell(SNo1, 5).Value = "Apr_ " + year1;
                        ws.Cell(SNo1, 5).Style.Font.Bold = true;
                        ws.Cell(SNo1, 5).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 6).Value = "May";
                        ws.Cell(SNo1, 6).Style.Font.Bold = true;
                        ws.Cell(SNo1, 6).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 7).Value = "Jun";
                        ws.Cell(SNo1, 7).Style.Font.Bold = true;
                        ws.Cell(SNo1, 7).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 8).Value = "Jul";
                        ws.Cell(SNo1, 8).Style.Font.Bold = true;
                        ws.Cell(SNo1, 8).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 9).Value = "Aug";
                        ws.Cell(SNo1, 9).Style.Font.Bold = true;
                        ws.Cell(SNo1, 9).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 10).Value = "Sep";
                        ws.Cell(SNo1, 10).Style.Font.Bold = true;
                        ws.Cell(SNo1, 10).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 11).Value = "Oct";
                        ws.Cell(SNo1, 11).Style.Font.Bold = true;
                        ws.Cell(SNo1, 11).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 12).Value = "Nov";
                        ws.Cell(SNo1, 12).Style.Font.Bold = true;
                        ws.Cell(SNo1, 12).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 13).Value = "Dec";
                        ws.Cell(SNo1, 13).Style.Font.Bold = true;
                        ws.Cell(SNo1, 13).Style.Font.FontSize = 11;

                        var ss2 = "January -" + year2;

                        ws.Cell(SNo1, 14).Value = "Jan_ " + year2;
                        ws.Cell(SNo1, 14).Style.Font.Bold = true;
                        ws.Cell(SNo1, 14).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 15).Value = "Feb";
                        ws.Cell(SNo1, 15).Style.Font.Bold = true;
                        ws.Cell(SNo1, 15).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 16).Value = "Mar";
                        ws.Cell(SNo1, 16).Style.Font.Bold = true;
                        ws.Cell(SNo1, 16).Style.Font.FontSize = 11;


                        ws.Cell(CREDIT, 17).Value = "Total Contribution Made";
                        ws.Cell(CREDIT, 17).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 17).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 17, SNo1, 17).Merge();

                        ws.Cell(CREDIT, 18).Value = "Remarks";
                        ws.Cell(CREDIT, 18).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 18).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 18, SNo1, 18).Merge();

                        var rangedbr7 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 18));
                        rangedbr7.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        var rangedbr8 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 18));
                        rangedbr8.Style.Border.InsideBorder = XLBorderStyleValues.Double;
                    }
                    for (int i = 0; i < page; i++)
                    {
                        AddImage(wb, "ESIC St-14", 1, logo, "imglogo.png");

                        ws.Cell(logo, 16).Value = "Statement No. 14-A";
                        ws.Range(logo, 16, logo, 18).Merge().AddToNamed("Titles");


                        ws.Cell(logo, 3).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(logo, 3).Style.Font.Bold = true;
                        ws.Cell(logo, 3).Style.Font.FontSize = 14;


                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(branch, 3).Value = "Branch:  " + "Mount Road";
                            ws.Cell(branch, 3).Style.Font.Bold = true;
                            ws.Cell(branch, 3).Style.Font.FontSize = 13;
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(branch, 3).Value = "Branch:  " + "Pallathur";
                            ws.Cell(branch, 3).Style.Font.Bold = true;
                            ws.Cell(branch, 3).Style.Font.FontSize = 13;
                        }
                        else
                        {
                            ws.Cell(branch, 3).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                            ws.Cell(branch, 3).Style.Font.Bold = true;
                            ws.Cell(branch, 3).Style.Font.FontSize = 13;
                        }

                        ws.Cell(date, 1).Value = "Particulars of Company's Contribution paid to Employees State Insurance Corporation during the Financial year  " + txtFrmDate.Text + " to " + txtToDate.Text;
                        ws.Cell(date, 1).Style.Font.Bold = true;
                        ws.Cell(date, 1).Style.Font.FontSize = 13;
                        ws.Range(date, 1, date, 18).Merge().AddToNamed("Titles");

                        ws.Cell(CREDIT, 1).Value = "Sl. No.";
                        ws.Cell(CREDIT, 1).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 1).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 1, SNo1, 1).Merge();

                        ws.Cell(CREDIT, 2).Value = "P.F.A/c Number";
                        ws.Cell(CREDIT, 2).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 2).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 2, SNo1, 2).Merge();

                        ws.Cell(CREDIT, 3).Value = "Name of the Employees";
                        ws.Cell(CREDIT, 3).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 3).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 3, SNo1, 3).Merge();

                        ws.Cell(CREDIT, 4).Value = "Monthly Salary including D.A";
                        ws.Cell(CREDIT, 4).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 4).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 4).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 4, SNo1, 4).Merge();

                        ws.Cell(CREDIT, 5).Value = "CONTRIBUTION MADE FOR";
                        ws.Cell(CREDIT, 5).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 5).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 5).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 5, CREDIT, 16);
                        var range123 = ws.Range(CREDIT, 5, CREDIT, 16);
                        range123.Merge();
                        range123.Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                        var ss1 = "April -" + year1;
                        ws.Cell(SNo1, 5).Value = "Apr_ " + year1;
                        ws.Cell(SNo1, 5).Style.Font.Bold = true;
                        ws.Cell(SNo1, 5).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 6).Value = "May";
                        ws.Cell(SNo1, 6).Style.Font.Bold = true;
                        ws.Cell(SNo1, 6).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 7).Value = "Jun";
                        ws.Cell(SNo1, 7).Style.Font.Bold = true;
                        ws.Cell(SNo1, 7).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 8).Value = "Jul";
                        ws.Cell(SNo1, 8).Style.Font.Bold = true;
                        ws.Cell(SNo1, 8).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 9).Value = "Aug";
                        ws.Cell(SNo1, 9).Style.Font.Bold = true;
                        ws.Cell(SNo1, 9).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 10).Value = "Sep";
                        ws.Cell(SNo1, 10).Style.Font.Bold = true;
                        ws.Cell(SNo1, 10).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 11).Value = "Oct";
                        ws.Cell(SNo1, 11).Style.Font.Bold = true;
                        ws.Cell(SNo1, 11).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 12).Value = "Nov";
                        ws.Cell(SNo1, 12).Style.Font.Bold = true;
                        ws.Cell(SNo1, 12).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 13).Value = "Dec";
                        ws.Cell(SNo1, 13).Style.Font.Bold = true;
                        ws.Cell(SNo1, 13).Style.Font.FontSize = 11;

                        var ss2 = "January -" + year2;

                        ws.Cell(SNo1, 14).Value = "Jan_ " + year2;
                        ws.Cell(SNo1, 14).Style.Font.Bold = true;
                        ws.Cell(SNo1, 14).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 15).Value = "Feb";
                        ws.Cell(SNo1, 15).Style.Font.Bold = true;
                        ws.Cell(SNo1, 15).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 16).Value = "Mar";
                        ws.Cell(SNo1, 16).Style.Font.Bold = true;
                        ws.Cell(SNo1, 16).Style.Font.FontSize = 11;


                        ws.Cell(CREDIT, 17).Value = "Total Contribution Made";
                        ws.Cell(CREDIT, 17).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 17).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 17, SNo1, 17).Merge();

                        ws.Cell(CREDIT, 18).Value = "Remarks";
                        ws.Cell(CREDIT, 18).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 18).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 18, SNo1, 18).Merge();

                        var rangedbr7 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 18));
                        rangedbr7.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        var rangedbr8 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 18));
                        rangedbr8.Style.Border.InsideBorder = XLBorderStyleValues.Double;

                        logo = logo + 31;
                        branch = branch + 31;
                        date = date + 31;
                        CREDIT = CREDIT + 31;
                        SNo1 = SNo1 + 31;
                    }

                    int slno = 0;
                    int RangeCell = 6;
                    decimal SumAmount1 = 0;
                    decimal SumAmount2 = 0;
                    decimal SumAmount3 = 0;
                    decimal SumAmount4 = 0;
                    decimal SumAmount5 = 0;
                    decimal SumAmount6 = 0;
                    decimal SumAmount7 = 0;
                    decimal SumAmount8 = 0;
                    decimal SumAmount9 = 0;
                    decimal SumAmount10 = 0;
                    decimal SumAmount11 = 0;
                    decimal SumAmount12 = 0;
                    decimal SumAmount13 = 0;
                    int debitrows = 0;
                    //    decimal totamnt = 0;
                    for (int j = 0; j < NameCon.Rows.Count; j++)
                    {
                        if (j < 24)
                        {
                            var s1 = NameCon.Rows[j]["apr"].ToString();
                            var s2 = NameCon.Rows[j]["may"].ToString();
                            var s3 = NameCon.Rows[j]["jun"].ToString();
                            var s4 = NameCon.Rows[j]["jul"].ToString();
                            var s5 = NameCon.Rows[j]["aug"].ToString();
                            var s6 = NameCon.Rows[j]["sep"].ToString();
                            var s7 = NameCon.Rows[j]["oct"].ToString();
                            var s8 = NameCon.Rows[j]["nov"].ToString();
                            var s9 = NameCon.Rows[j]["dec"].ToString();
                            var s10 = NameCon.Rows[j]["jan"].ToString();
                            var s11 = NameCon.Rows[j]["feb"].ToString();
                            var s12 = NameCon.Rows[j]["mar"].ToString();
                            if (s1 != "" || s2 != "" || s3 != "" || s4 != "" || s5 != "" || s6 != "" || s7 != "" || s8 != "" || s9 != "" || s10 != "" || s11 != "" || s12 != "")
                            {
                                slno += 1;
                                debitrows = debitrows + 1;
                                ws.Cell(RangeCell, 1).Value = slno;
                                ws.Cell(RangeCell, 3).Value = NameCon.Rows[j]["Name"].ToString();

                                ws.Cell(RangeCell, 5).Value = s1;
                                if (s1 != "")
                                {
                                    SumAmount1 += Convert.ToDecimal(s1);
                                }

                                ws.Cell(RangeCell, 6).Value = s2;
                                if (s2 != "")
                                {
                                    SumAmount2 += Convert.ToDecimal(s2);
                                }
                                ws.Cell(RangeCell, 7).Value = s3;
                                if (s3 != "")
                                {
                                    SumAmount3 += Convert.ToDecimal(s3);
                                }
                                ws.Cell(RangeCell, 8).Value = s4;
                                if (s4 != "")
                                {
                                    SumAmount4 += Convert.ToDecimal(s4);
                                }
                                ws.Cell(RangeCell, 9).Value = s5;
                                if (s5 != "")
                                {
                                    SumAmount5 += Convert.ToDecimal(s5);
                                }
                                ws.Cell(RangeCell, 10).Value = s6;
                                if (s6 != "")
                                {
                                    SumAmount6 += Convert.ToDecimal(s6);
                                }
                                ws.Cell(RangeCell, 11).Value = s7;
                                if (s7 != "")
                                {
                                    SumAmount7 += Convert.ToDecimal(s7);
                                }
                                ws.Cell(RangeCell, 12).Value = s8;
                                if (s8 != "")
                                {
                                    SumAmount8 += Convert.ToDecimal(s8);
                                }
                                ws.Cell(RangeCell, 13).Value = s9;
                                if (s9 != "")
                                {
                                    SumAmount9 += Convert.ToDecimal(s9);
                                }
                                ws.Cell(RangeCell, 14).Value = s10;
                                if (s10 != "")
                                {
                                    SumAmount10 += Convert.ToDecimal(s10);
                                }
                                ws.Cell(RangeCell, 15).Value = s11;
                                if (s11 != "")
                                {
                                    SumAmount11 += Convert.ToDecimal(s11);
                                }
                                ws.Cell(RangeCell, 16).Value = s12;
                                if (s12 != "")
                                {
                                    SumAmount12 += Convert.ToDecimal(s12);
                                }
                                ws.Cell(RangeCell, 17).Value = NameCon.Rows[j]["total"].ToString();
                                SumAmount13 += Convert.ToDecimal(NameCon.Rows[j]["total"].ToString());
                                var rangedbr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                var rangedbr29 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                rangedbr29.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                RangeCell++;
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (NameCon.Rows.Count > 24)
                    {
                        ws.Cell(RangeCell, 3).Value = "Total Carried Over";
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 5).Value = SumAmount1;
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 6).Value = SumAmount2;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = SumAmount3;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = SumAmount4;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SumAmount5;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = SumAmount6;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = SumAmount7;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = SumAmount8;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 13).Value = SumAmount9;
                        ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 14).Value = SumAmount10;
                        ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 15).Value = SumAmount11;
                        ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 16).Value = SumAmount12;
                        ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 17).Value = SumAmount13;
                        ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        //      LastRRow = (RangeCell - 1);
                        var rangedbr2 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell = RangeCell + 7;
                        ws.Cell(RangeCell, 3).Value = "Brought Forward";
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 5).Value = SumAmount1;
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 6).Value = SumAmount2;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = SumAmount3;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = SumAmount4;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SumAmount5;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = SumAmount6;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = SumAmount7;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = SumAmount8;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 13).Value = SumAmount9;
                        ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 14).Value = SumAmount10;
                        ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 15).Value = SumAmount11;
                        ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 16).Value = SumAmount12;
                        ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 17).Value = SumAmount13;
                        ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        //      LastRRow = (RangeCell - 1);
                        var rangedbr55 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                        rangedbr55.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr56 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                        rangedbr56.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell = RangeCell + 1;
                        for (; debitrows < NameCon.Rows.Count;)
                        {
                            if (debitrows < 48)
                            {
                                var s1 = NameCon.Rows[debitrows]["apr"].ToString();
                                var s2 = NameCon.Rows[debitrows]["may"].ToString();
                                var s3 = NameCon.Rows[debitrows]["jun"].ToString();
                                var s4 = NameCon.Rows[debitrows]["jul"].ToString();
                                var s5 = NameCon.Rows[debitrows]["aug"].ToString();
                                var s6 = NameCon.Rows[debitrows]["sep"].ToString();
                                var s7 = NameCon.Rows[debitrows]["oct"].ToString();
                                var s8 = NameCon.Rows[debitrows]["nov"].ToString();
                                var s9 = NameCon.Rows[debitrows]["dec"].ToString();
                                var s10 = NameCon.Rows[debitrows]["jan"].ToString();
                                var s11 = NameCon.Rows[debitrows]["feb"].ToString();
                                var s12 = NameCon.Rows[debitrows]["mar"].ToString();
                                if (s1 != "" || s2 != "" || s3 != "" || s4 != "" || s5 != "" || s6 != "" || s7 != "" || s8 != "" || s9 != "" || s10 != "" || s11 != "" || s12 != "")
                                {
                                    slno += 1;
                                    debitrows = debitrows + 1;
                                    ws.Cell(RangeCell, 1).Value = slno;
                                    ws.Cell(RangeCell, 3).Value = NameCon.Rows[debitrows]["Name"].ToString();

                                    ws.Cell(RangeCell, 5).Value = s1;
                                    if (s1 != "")
                                    {
                                        SumAmount1 += Convert.ToDecimal(s1);
                                    }

                                    ws.Cell(RangeCell, 6).Value = s2;
                                    if (s2 != "")
                                    {
                                        SumAmount2 += Convert.ToDecimal(s2);
                                    }
                                    ws.Cell(RangeCell, 7).Value = s3;
                                    if (s3 != "")
                                    {
                                        SumAmount3 += Convert.ToDecimal(s3);
                                    }
                                    ws.Cell(RangeCell, 8).Value = s4;
                                    if (s4 != "")
                                    {
                                        SumAmount4 += Convert.ToDecimal(s4);
                                    }
                                    ws.Cell(RangeCell, 9).Value = s5;
                                    if (s5 != "")
                                    {
                                        SumAmount5 += Convert.ToDecimal(s5);
                                    }
                                    ws.Cell(RangeCell, 10).Value = s6;
                                    if (s6 != "")
                                    {
                                        SumAmount6 += Convert.ToDecimal(s6);
                                    }
                                    ws.Cell(RangeCell, 11).Value = s7;
                                    if (s7 != "")
                                    {
                                        SumAmount7 += Convert.ToDecimal(s7);
                                    }
                                    ws.Cell(RangeCell, 12).Value = s8;
                                    if (s8 != "")
                                    {
                                        SumAmount8 += Convert.ToDecimal(s8);
                                    }
                                    ws.Cell(RangeCell, 13).Value = s9;
                                    if (s9 != "")
                                    {
                                        SumAmount9 += Convert.ToDecimal(s9);
                                    }
                                    ws.Cell(RangeCell, 14).Value = s10;
                                    if (s10 != "")
                                    {
                                        SumAmount10 += Convert.ToDecimal(s10);
                                    }
                                    ws.Cell(RangeCell, 15).Value = s11;
                                    if (s11 != "")
                                    {
                                        SumAmount11 += Convert.ToDecimal(s11);
                                    }
                                    ws.Cell(RangeCell, 16).Value = s12;
                                    if (s12 != "")
                                    {
                                        SumAmount12 += Convert.ToDecimal(s12);
                                    }
                                    ws.Cell(RangeCell, 17).Value = NameCon.Rows[debitrows]["total"].ToString();
                                    SumAmount13 += Convert.ToDecimal(NameCon.Rows[debitrows]["total"].ToString());
                                    var rangedbr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                    rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                    var rangedbr29 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                    rangedbr29.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                    RangeCell++;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (NameCon.Rows.Count > 48)
                        {
                            ws.Cell(RangeCell, 3).Value = "Total Carried Over";
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 5).Value = SumAmount1;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = SumAmount2;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount3;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount4;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount5;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount6;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount7;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount8;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount9;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 14).Value = SumAmount10;
                            ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 15).Value = SumAmount11;
                            ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 16).Value = SumAmount12;
                            ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 17).Value = SumAmount13;
                            ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //    LastRRow = (RangeCell - 1);
                            var rangedbr22 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr22.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr33 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr33.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            RangeCell = RangeCell + 6;

                            ws.Cell(RangeCell, 3).Value = "Brought Forward";
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 5).Value = SumAmount1;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = SumAmount2;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount3;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount4;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount5;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount6;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount7;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount8;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount9;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 14).Value = SumAmount10;
                            ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 15).Value = SumAmount11;
                            ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 16).Value = SumAmount12;
                            ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 17).Value = SumAmount13;
                            ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            var rangedbr555 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr555.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr566 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr566.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            RangeCell = RangeCell + 1;

                            for (; debitrows < NameCon.Rows.Count;)
                            {
                                if (debitrows < 72)
                                {
                                    var s1 = NameCon.Rows[debitrows]["apr"].ToString();
                                    var s2 = NameCon.Rows[debitrows]["may"].ToString();
                                    var s3 = NameCon.Rows[debitrows]["jun"].ToString();
                                    var s4 = NameCon.Rows[debitrows]["jul"].ToString();
                                    var s5 = NameCon.Rows[debitrows]["aug"].ToString();
                                    var s6 = NameCon.Rows[debitrows]["sep"].ToString();
                                    var s7 = NameCon.Rows[debitrows]["oct"].ToString();
                                    var s8 = NameCon.Rows[debitrows]["nov"].ToString();
                                    var s9 = NameCon.Rows[debitrows]["dec"].ToString();
                                    var s10 = NameCon.Rows[debitrows]["jan"].ToString();
                                    var s11 = NameCon.Rows[debitrows]["feb"].ToString();
                                    var s12 = NameCon.Rows[debitrows]["mar"].ToString();
                                    if (s1 != "" || s2 != "" || s3 != "" || s4 != "" || s5 != "" || s6 != "" || s7 != "" || s8 != "" || s9 != "" || s10 != "" || s11 != "" || s12 != "")
                                    {
                                        slno += 1;
                                        debitrows = debitrows + 1;
                                        ws.Cell(RangeCell, 1).Value = slno;
                                        ws.Cell(RangeCell, 3).Value = NameCon.Rows[debitrows]["Name"].ToString();

                                        ws.Cell(RangeCell, 5).Value = s1;
                                        if (s1 != "")
                                        {
                                            SumAmount1 += Convert.ToDecimal(s1);
                                        }

                                        ws.Cell(RangeCell, 6).Value = s2;
                                        if (s2 != "")
                                        {
                                            SumAmount2 += Convert.ToDecimal(s2);
                                        }
                                        ws.Cell(RangeCell, 7).Value = s3;
                                        if (s3 != "")
                                        {
                                            SumAmount3 += Convert.ToDecimal(s3);
                                        }
                                        ws.Cell(RangeCell, 8).Value = s4;
                                        if (s4 != "")
                                        {
                                            SumAmount4 += Convert.ToDecimal(s4);
                                        }
                                        ws.Cell(RangeCell, 9).Value = s5;
                                        if (s5 != "")
                                        {
                                            SumAmount5 += Convert.ToDecimal(s5);
                                        }
                                        ws.Cell(RangeCell, 10).Value = s6;
                                        if (s6 != "")
                                        {
                                            SumAmount6 += Convert.ToDecimal(s6);
                                        }
                                        ws.Cell(RangeCell, 11).Value = s7;
                                        if (s7 != "")
                                        {
                                            SumAmount7 += Convert.ToDecimal(s7);
                                        }
                                        ws.Cell(RangeCell, 12).Value = s8;
                                        if (s8 != "")
                                        {
                                            SumAmount8 += Convert.ToDecimal(s8);
                                        }
                                        ws.Cell(RangeCell, 13).Value = s9;
                                        if (s9 != "")
                                        {
                                            SumAmount9 += Convert.ToDecimal(s9);
                                        }
                                        ws.Cell(RangeCell, 14).Value = s10;
                                        if (s10 != "")
                                        {
                                            SumAmount10 += Convert.ToDecimal(s10);
                                        }
                                        ws.Cell(RangeCell, 15).Value = s11;
                                        if (s11 != "")
                                        {
                                            SumAmount11 += Convert.ToDecimal(s11);
                                        }
                                        ws.Cell(RangeCell, 16).Value = s12;
                                        if (s12 != "")
                                        {
                                            SumAmount12 += Convert.ToDecimal(s12);
                                        }
                                        ws.Cell(RangeCell, 17).Value = NameCon.Rows[debitrows]["total"].ToString();
                                        SumAmount13 += Convert.ToDecimal(NameCon.Rows[debitrows]["total"].ToString());
                                        var rangedbr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                        rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                        var rangedbr29 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                                        rangedbr29.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                        RangeCell++;
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                            RangeCell++;
                            ws.Cell(RangeCell, 3).Value = "Total";
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 5).Value = SumAmount1;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = SumAmount2;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount3;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount4;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount5;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount6;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount7;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount8;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount9;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 14).Value = SumAmount10;
                            ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 15).Value = SumAmount11;
                            ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 16).Value = SumAmount12;
                            ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 17).Value = SumAmount13;
                            ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //       LastRRow = (RangeCell - 1);
                            var rangedbr234 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr334 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        }
                        else
                        {

                            RangeCell++;
                            ws.Cell(RangeCell, 3).Value = "Total";
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 5).Value = SumAmount1;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = SumAmount2;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = SumAmount3;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = SumAmount4;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SumAmount5;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = SumAmount6;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = SumAmount7;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = SumAmount8;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 13).Value = SumAmount9;
                            ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 14).Value = SumAmount10;
                            ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 15).Value = SumAmount11;
                            ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 16).Value = SumAmount12;
                            ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 17).Value = SumAmount13;
                            ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);


                            //      LastRRow = (RangeCell - 1);
                            var rangedbr234 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr334 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 18));
                            rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        }
                    }
                    else
                    {
                        RangeCell = 30;

                        ws.Cell(RangeCell, 3).Value = "Total";
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 5).Value = SumAmount1;
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 6).Value = SumAmount2;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = SumAmount3;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = SumAmount4;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SumAmount5;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = SumAmount6;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = SumAmount7;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = SumAmount8;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 13).Value = SumAmount9;
                        ws.Cell(RangeCell, 13).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 14).Value = SumAmount10;
                        ws.Cell(RangeCell, 14).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 15).Value = SumAmount11;
                        ws.Cell(RangeCell, 15).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 15).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 16).Value = SumAmount12;
                        ws.Cell(RangeCell, 16).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 16).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 16).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 17).Value = SumAmount13;
                        ws.Cell(RangeCell, 17).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 17).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        //    LastRRow = (RangeCell - 1);
                        var rangedbr2 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 18));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 18));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    }
                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }

                }

            }
            catch (Exception ex)
            {
                LogCls.LogError(ex, "St-14 Error");
            }
        }

        public System.Data.DataTable empnamelistdt()
        {
            DateTime caldt = Convert.ToDateTime(txtFrmDate.Text);
            DateTime ToDate = Convert.ToDateTime(txtToDate.Text);
            // DataTable Moncon = new DataTable();
            DataTable NameCon = new DataTable();
            //DataTable Moncon1 = new DataTable();
            NameCon.Columns.Add("Emoloyeename");
            NameCon.Columns.Add("Monthlywages");
            NameCon.Columns.Add("Employeeid");

            DataRow NameRon = NameCon.NewRow();
            //Distinct
            // DataTable EmpnmLi = balayer.GetDataTable("SELECT Emp_Name FROM svcf.employee_details where BranchId =" + drpdownBranchlist.SelectedValue + ";");
            DataTable EmpnmLi = balayer.GetDataTable("SELECT  distinct(M_Id) FROM svcf.voucher where Head_id ='173' and BranchId =" + drpdownBranchlist.SelectedValue + " and choosendate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and series ='SALARY';");
            var empnamelist = EmpnmLi.AsEnumerable().Select(x => x.Field<Int32>("M_Id")).Distinct().ToList();
            DataTable getempdesi = new DataTable();
            getempdesi.Columns.Add("Designation_ID", typeof(decimal));
            getempdesi.Columns.Add("Emp_SrNumber", typeof(decimal));
            getempdesi.Columns.Add("Emp_Name");
            getempdesi.Columns.Add("Emp_ID");
            foreach (var disemp in empnamelist)
            {
                DataTable hh = balayer.GetDataTable("SELECT Designation_ID,Emp_SrNumber,Emp_Name,Emp_ID FROM svcf.employee_details where branchid='" + drpdownBranchlist.SelectedValue + "' and Emp_ID='" + disemp + "';");
                foreach (DataRow dr in hh.Rows)
                {
                    getempdesi.Rows.Add(dr.ItemArray);
                }

            }
            DataTable gty = new DataTable();
            gty.Columns.Add("Emp_ID");
            gty.Columns.Add("Emp_Name");
            DataRow dr1 = gty.NewRow();
            var orderemp = getempdesi.AsEnumerable().OrderBy(x => x.Field<decimal>("Designation_ID")).ToList();
            var empdist = orderemp.AsEnumerable().Select(x => x.Field<decimal>("Designation_ID")).Distinct().ToList();
            foreach (var emps in empdist)
            {
                var siemp = orderemp.AsEnumerable().Where(x => x.Field<decimal>("Designation_ID") == emps).ToList();
                if (siemp.Count == 1)
                {
                    foreach (var dr in siemp)
                    {
                        dr1["Emp_ID"] = dr.ItemArray[3];
                        dr1["Emp_Name"] = dr.ItemArray[2];
                        gty.Rows.Add(dr1.ItemArray);
                    }
                }
                else if (siemp.Count != 0 && siemp.Count != 1)
                {
                    //var dusiemp = siemp.AsEnumerable().OrderBy(x => x.Field<decimal>("Emp_SrNumber")).ToList();
                   var dusiemp = siemp.AsEnumerable().OrderBy(x => x.Field<string>("Emp_ID")).ToList();
                    foreach (var dr in dusiemp)
                    {
                        dr1["Emp_ID"] = dr.ItemArray[3];
                        dr1["Emp_Name"] = dr.ItemArray[2];
                        gty.Rows.Add(dr1.ItemArray);
                    }
                }
            }


            if (gty.Rows.Count != 0)
            {
                for (int i = 0; i < gty.Rows.Count; i++)
                {
                    decimal Da = 0;
                    decimal Hra = 0;
                    decimal sal = 0;
                    string strsal = balayer.GetSingleValue("SELECT Amount FROM svcf.voucher where series='SALARY' and BranchId='" + drpdownBranchlist.SelectedValue + "' and Head_id ='86' and M_Id ='" + gty.Rows[i]["Emp_ID"] + "'");
                    string strDA = balayer.GetSingleValue("SELECT Amount FROM svcf.voucher where series='SALARY' and BranchId='" + drpdownBranchlist.SelectedValue + "' and Head_id ='87' and M_Id ='" + gty.Rows[i]["Emp_ID"] + "'");
                    string strHRA = balayer.GetSingleValue("SELECT Amount FROM svcf.voucher where series='SALARY' and BranchId='" + drpdownBranchlist.SelectedValue + "' and Head_id ='168' and M_Id ='" + gty.Rows[i]["Emp_ID"] + "'");

                    if (strDA != "")
                    {
                        Da = Convert.ToDecimal(strDA);
                    }
                    if (strHRA != "")
                    {
                        Hra = Convert.ToDecimal(strHRA);
                    }
                    if (strsal != "")
                    {
                        sal = Convert.ToDecimal(strsal);
                    }

                    decimal totsal = Da + Hra + sal;

                    NameRon["Emoloyeename"] = gty.Rows[i]["Emp_Name"];
                    NameRon["Monthlywages"] = totsal;
                    NameRon["Employeeid"] = gty.Rows[i]["Emp_ID"];
                    NameCon.Rows.Add(NameRon.ItemArray);

                }
            }




            return NameCon;
        }

        protected void ST22_Click(object sender, EventArgs e)
        {
            commissiontblXLwrite();
        }
        public void commissiontblXLwrite()
        {

            //change on 22/08/2018 
            System.Data.DataTable commissiondt = commissiontbl();
            //change on 22/08/2018
            //string folderPath = "C:\\Exceltest\\";
            //if (!Directory.Exists(folderPath))
            //{
            //    Directory.CreateDirectory(folderPath);
            //}
            string filename = "GroupCommission" + DateTime.Now.Second.ToString();

            try
            {

                using (XLWorkbook wb = new XLWorkbook())
                {
                    //var ws = wb.Worksheets.Add(CreditDt, "Tr. P&L St-02");
                    var ws = wb.Worksheets.Add("GroupCommission");


                    var pages = Math.Ceiling((float)commissiondt.Rows.Count / 35);

                    int aa = 1;
                    int bb = 2;
                    int cc = 3;
                    int dd = 4;
                    int ee = 5;
                    int ff = 6;
                    int i = 0;
                    do
                    {
                        AddImage(wb, "GroupCommission", aa, aa, "imglogo.png");

                        ws.Cell(aa, 7).Value = "Statement No. 22";
                        ws.Range(aa, 7, aa, 8).Merge().AddToNamed("Titles");

                        ws.Cell(aa, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(aa, 2).Style.Font.Bold = true;
                        ws.Cell(aa, 2).Style.Font.FontSize = 14;


                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(bb, 2).Value = "Branch:  " + "Mount Road";
                            ws.Cell(bb, 2).Style.Font.Bold = true;
                            ws.Cell(bb, 2).Style.Font.FontSize = 13;
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(bb, 2).Value = "Branch:  " + "Pallathur";
                            ws.Cell(bb, 2).Style.Font.Bold = true;
                            ws.Cell(bb, 2).Style.Font.FontSize = 13;
                        }
                        else
                        {
                            ws.Cell(bb, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                            ws.Cell(bb, 2).Style.Font.Bold = true;
                            ws.Cell(bb, 2).Style.Font.FontSize = 13;
                        }

                        ws.Cell(cc, 1).Value = "Particulars of Group War Commission earned during " + txtFrmDate.Text + " to " + txtToDate.Text;
                        ws.Cell(cc, 1).Style.Font.Bold = true;
                        ws.Cell(cc, 1).Style.Font.FontSize = 13;
                        ws.Range(cc, 1, cc, 8).Merge().AddToNamed("Titles");



                        #region row creation

                        ws.Cell(ee, 1).Value = "Sl. No.";
                        ws.Cell(ee, 1).Style.Font.Bold = true;
                        ws.Cell(ee, 1).Style.Font.FontSize = 11;
                        ws.Range(ee, 1, ff, 1).Merge();

                        ws.Cell(ee, 2).Value = "Group Number";
                        ws.Cell(ee, 2).Style.Font.Bold = true;
                        ws.Cell(ee, 2).Style.Font.FontSize = 11;
                        ws.Range(ee, 2, ff, 2).Merge();

                        ws.Cell(ee, 3).Value = " Date of Commencement";
                        ws.Cell(ee, 3).Style.Font.Bold = true;
                        ws.Cell(ee, 3).Style.Font.FontSize = 11;
                        ws.Range(ee, 3, ff, 3).Merge();

                        ws.Cell(ee, 4).Value = "Date of Termination in case of Terminated Groups";
                        ws.Cell(ee, 4).Style.Font.Bold = true;
                        ws.Cell(ee, 4).Style.Font.FontSize = 11;
                        ws.Cell(ee, 4).Style.Alignment.WrapText = true;
                        ws.Range(ee, 4, ff, 4).Merge();

                        ws.Cell(ee, 5).Value = "Number of Instalments during the year";
                        ws.Cell(ee, 5).Style.Font.Bold = true;
                        ws.Cell(ee, 5).Style.Font.FontSize = 11;
                        ws.Cell(ee, 5).Style.Alignment.WrapText = true;
                        ws.Range(ee, 5, ff, 5).Merge();


                        ws.Cell(ee, 6).Value = "Chit Group Value";
                        ws.Cell(ee, 6).Style.Font.Bold = true;
                        ws.Cell(ee, 6).Style.Font.FontSize = 11;
                        ws.Range(ee, 6, ff, 6).Merge();

                        ws.Cell(ee, 7).Value = "Rate of Commission";
                        ws.Cell(ee, 7).Style.Font.Bold = true;
                        ws.Cell(ee, 7).Style.Font.FontSize = 11;
                        ws.Range(ee, 7, ff, 7).Merge();


                        ws.Cell(ee, 8).Value = "Total Commission";
                        ws.Cell(ee, 8).Style.Font.Bold = true;
                        ws.Cell(ee, 8).Style.Font.FontSize = 11;
                        ws.Range(ee, 8, ff, 8).Merge();

                        var rangedbr55 = ws.Range(ws.Cell(ee, 1), ws.Cell(ff, 8));
                        rangedbr55.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        var rangedbr56 = ws.Range(ws.Cell(ee, 1), ws.Cell(ff, 8));
                        rangedbr56.Style.Border.InsideBorder = XLBorderStyleValues.Double;
                        aa += 43;
                        ee += 43;
                        bb += 43;
                        cc += 43;
                        dd += 43;
                        ff += 43;
                        i++;
                    } while (i < pages);
                    #endregion

                    int SNo = 1;
                    decimal totamnt = 0;
                    //  bool FlagSummaryFilled = false;
                    // int CreditPortion1Cell = 0;
                    // int CreditMiscCell = 0;
                    int Rangecell = 7;
                    int creditrows = 0;

                    for (int j = 0; j < commissiondt.Rows.Count; j++)
                    {
                        if (j < 35)
                        {
                            creditrows = creditrows + 1;
                            ws.Cell(Rangecell, 1).Value = SNo;
                            ws.Cell(Rangecell, 2).Value = commissiondt.Rows[j]["GroupNo"];
                            ws.Cell(Rangecell, 3).Value = commissiondt.Rows[j]["Dateofcommencement"];
                            ws.Cell(Rangecell, 4).Value = commissiondt.Rows[j]["DateofTerminated"];
                            ws.Cell(Rangecell, 5).Value = commissiondt.Rows[j]["installyrs"];
                            //   ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "0.00";
                            ws.Cell(Rangecell, 6).Value = Convert.ToDecimal(commissiondt.Rows[j]["groupvalue"]);
                            ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(Rangecell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(Rangecell, 7).Value = Convert.ToDecimal(commissiondt.Rows[j]["Rateofcommission"]);
                            ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(Rangecell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(Rangecell, 8).Value = Convert.ToDecimal(commissiondt.Rows[j]["Totalcommission"]);
                            ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(Rangecell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            decimal val = Convert.ToDecimal(commissiondt.Rows[j]["Totalcommission"]);

                            totamnt = totamnt + val;

                            SNo++;
                            Rangecell++;
                            var rangecr4 = ws.Range(ws.Cell(7, 1), ws.Cell(Rangecell, 8));
                            rangecr4.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            rangecr4.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        }
                    }

                    if (commissiondt.Rows.Count > 35)
                    {
                        ws.Cell(Rangecell, 7).Value = "Total Carried Over";
                        ws.Cell(Rangecell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 7).Style.Font.FontSize = 11;

                        ws.Cell(Rangecell, 8).Value = totamnt;
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        // LastRRow = (Rangecell - 1);
                        var rangedbr2 = ws.Range(ws.Cell(7, 1), ws.Cell(Rangecell, 8));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(7, 1), ws.Cell(Rangecell, 8));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        Rangecell = Rangecell + 8;


                        ws.Cell(Rangecell, 7).Value = "Brought Forward";
                        ws.Cell(Rangecell, 8).Value = totamnt;
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";

                        var rangedbr5 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 8));
                        rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr6 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 8));
                        rangedbr6.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        Rangecell = Rangecell + 1;

                        for (; creditrows < commissiondt.Rows.Count;)
                        {
                            if (creditrows < 70)
                            {
                                //20/04/2021
                                //creditrows = creditrows + 1;
                                ws.Cell(Rangecell, 1).Value = SNo;
                                ws.Cell(Rangecell, 2).Value = commissiondt.Rows[creditrows]["GroupNo"];
                                ws.Cell(Rangecell, 3).Value = commissiondt.Rows[creditrows]["Dateofcommencement"];
                                ws.Cell(Rangecell, 4).Value = commissiondt.Rows[creditrows]["DateofTerminated"];
                                ws.Cell(Rangecell, 5).Value = commissiondt.Rows[creditrows]["installyrs"];
                                //   ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 6).Value = Convert.ToDecimal(commissiondt.Rows[creditrows]["groupvalue"]);
                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(Rangecell, 7).Value = Convert.ToDecimal(commissiondt.Rows[creditrows]["Rateofcommission"]);
                                ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(Rangecell, 8).Value = Convert.ToDecimal(commissiondt.Rows[creditrows]["Totalcommission"]);
                                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(Rangecell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                decimal val = Convert.ToDecimal(commissiondt.Rows[creditrows]["Totalcommission"]);

                                totamnt = totamnt + val;


                                var rangedbr51 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 8));
                                rangedbr51.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                var rangedbr61 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 8));
                                rangedbr61.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                Rangecell = Rangecell + 1;
                                SNo = SNo + 1;
                                creditrows = creditrows + 1;//20/04/2021
                            }
                        }

                        Rangecell = Rangecell + 2;
                        ws.Cell(Rangecell, 7).Value = "TOTAL";
                        ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = totamnt;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        var rangecr1 = ws.Range(ws.Cell(Rangecell - 2, 1), ws.Cell(Rangecell, 8));
                        rangecr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangecr2 = ws.Range(ws.Cell(Rangecell - 2, 1), ws.Cell(Rangecell, 8));
                        rangecr2.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    }
                    else
                    {
                        Rangecell = Rangecell + 2;
                        ws.Cell(Rangecell, 7).Value = "TOTAL";
                        ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Value = totamnt;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        var rangecr1 = ws.Range(ws.Cell(Rangecell - 1, 1), ws.Cell(Rangecell, 8));
                        rangecr1.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangecr2 = ws.Range(ws.Cell(Rangecell - 1, 1), ws.Cell(Rangecell, 8));
                        rangecr2.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }

                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    //  titlesStyle.Fill.BackgroundColor = XLColor.Cyan;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    //  wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }


                }

            }
            catch (Exception ex)
            {
                //LogCls.LogError(ex, "Commission:");
            }


        }
        //public void commissiontblXLwrite()
        //{
        //    int Rangecell;
        //    //change on 22/08/2018 
        //    System.Data.DataTable commissiondt = commissiontbl();
        //    //change on 22/08/2018
        //    //string folderPath = "C:\\Exceltest\\";
        //    //if (!Directory.Exists(folderPath))
        //    //{
        //    //    Directory.CreateDirectory(folderPath);
        //    //}
        //    string filename = "GroupCommission" + DateTime.Now.Second.ToString();

        //    try
        //    {

        //        using (XLWorkbook wb = new XLWorkbook())
        //        {
        //            //var ws = wb.Worksheets.Add(CreditDt, "Tr. P&L St-02");
        //            var ws = wb.Worksheets.Add("Tr. P&L St-02");


        //            var pages = Math.Ceiling((float)commissiondt.Rows.Count / 35);

        //            int aa = 1;
        //            int bb = 2;
        //            int cc = 3;
        //            int dd = 4;
        //            int ee = 5;
        //            int ff = 6;
        //            for (int i = 0; i < pages; i++)
        //            {
        //                AddImage(wb, "Tr. P&L St-02", aa, aa, "imglogo.png");

        //                ws.Cell(aa, 7).Value = "Statement No. 22";
        //                ws.Range(aa, 7, aa, 8).Merge().AddToNamed("Titles");

        //                ws.Cell(aa, 2).Value = "Sree Visalam Chit Fund Ltd.,";
        //                ws.Cell(aa, 2).Style.Font.Bold = true;
        //                ws.Cell(aa, 2).Style.Font.FontSize = 14;


        //                ws.Cell(bb, 2).Value = "Branch:" + drpdownBranchlist.SelectedItem.Text;
        //                ws.Cell(bb, 2).Style.Font.Bold = true;
        //                ws.Cell(bb, 2).Style.Font.FontSize = 13;

        //                ws.Cell(cc, 1).Value = "Particulars of Group War Commission earned during " + txtFrmDate.Text + " to " + txtToDate.Text;
        //                ws.Cell(cc, 1).Style.Font.Bold = true;
        //                ws.Cell(cc, 1).Style.Font.FontSize = 13;
        //                ws.Range(cc, 1, cc, 8).Merge().AddToNamed("Titles");



        //                #region row creation

        //                ws.Cell(ee, 1).Value = "Sl. No.";
        //                ws.Cell(ee, 1).Style.Font.Bold = true;
        //                ws.Cell(ee, 1).Style.Font.FontSize = 11;
        //                ws.Range(ee, 1, ff, 1).Merge();

        //                ws.Cell(ee, 2).Value = "Group Number";
        //                ws.Cell(ee, 2).Style.Font.Bold = true;
        //                ws.Cell(ee, 2).Style.Font.FontSize = 11;
        //                ws.Range(ee, 2, ff, 2).Merge();

        //                ws.Cell(ee, 3).Value = " Date of Commencement";
        //                ws.Cell(ee, 3).Style.Font.Bold = true;
        //                ws.Cell(ee, 3).Style.Font.FontSize = 11;
        //                ws.Range(ee, 3, ff, 3).Merge();

        //                ws.Cell(ee, 4).Value = "Date of Termination in case of Terminated Groups";
        //                ws.Cell(ee, 4).Style.Font.Bold = true;
        //                ws.Cell(ee, 4).Style.Font.FontSize = 11;
        //                ws.Cell(ee, 4).Style.Alignment.WrapText = true;
        //                ws.Range(ee, 4, ff, 4).Merge();

        //                ws.Cell(ee, 5).Value = "Number of Instalments during the year";
        //                ws.Cell(ee, 5).Style.Font.Bold = true;
        //                ws.Cell(ee, 5).Style.Font.FontSize = 11;
        //                ws.Cell(ee, 5).Style.Alignment.WrapText = true;
        //                ws.Range(ee, 5, ff, 5).Merge();


        //                ws.Cell(ee, 6).Value = "Chit Group Value";
        //                ws.Cell(ee, 6).Style.Font.Bold = true;
        //                ws.Cell(ee, 6).Style.Font.FontSize = 11;
        //                ws.Range(ee, 6, ff, 6).Merge();

        //                ws.Cell(ee, 7).Value = "Rate of Commission";
        //                ws.Cell(ee, 7).Style.Font.Bold = true;
        //                ws.Cell(ee, 7).Style.Font.FontSize = 11;
        //                ws.Range(ee, 7, ff, 7).Merge();


        //                ws.Cell(ee, 8).Value = "Total Commission";
        //                ws.Cell(ee, 8).Style.Font.Bold = true;
        //                ws.Cell(ee, 8).Style.Font.FontSize = 11;
        //                ws.Range(ee, 8, ff, 8).Merge();

        //                aa += 43;
        //                ee += 43;
        //                bb += 43;
        //                cc += 43;
        //                dd += 43;
        //                ff += 43;

        //            }
        //            #endregion

        //            int slno = 1;
        //             Rangecell = 7;
        //            decimal totamnt = 0;

        //            foreach (DataRow dr in commissiondt.AsEnumerable())
        //            {
        //                ws.Cell(Rangecell, 1).Value = slno;
        //                ws.Cell(Rangecell, 2).Value = dr.ItemArray[0];
        //                ws.Cell(Rangecell, 3).Value = dr.ItemArray[1];
        //                ws.Cell(Rangecell, 4).Value = dr.ItemArray[2];
        //                ws.Cell(Rangecell, 5).Value = dr.ItemArray[3];
        //             //   ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
        //                ws.Cell(Rangecell, 6).Value = Convert.ToDecimal(dr.ItemArray[4]);
        //                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
        //                ws.Cell(Rangecell, 7).Value = Convert.ToDecimal(dr.ItemArray[5]);
        //                ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
        //                ws.Cell(Rangecell, 8).Value = Convert.ToDecimal(dr.ItemArray[6]);
        //                ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
        //                decimal val = Convert.ToDecimal(dr.ItemArray[6]);

        //                totamnt = totamnt + val;

        //                slno++;
        //                Rangecell++;
        //                var rangecr4 = ws.Range(ws.Cell(5, 1), ws.Cell(Rangecell, 8));
        //                rangecr4.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }



        //            Rangecell = Rangecell + 5;
        //            ws.Cell(Rangecell, 7).Value = "TOTAL";
        //            ws.Cell(Rangecell, 7).Style.Font.Bold = true;
        //            ws.Cell(Rangecell, 8).Value = totamnt;
        //            ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
        //            var rangecr1 = ws.Range(ws.Cell(5, 1), ws.Cell(Rangecell, 8));
        //            rangecr1.Style.Border.OutsideBorder = XLBorderStyleValues.Double;

        //            var rangecr2 = ws.Range(ws.Cell(6, 1), ws.Cell(6, 8));
        //            rangecr2.Style.Border.BottomBorder = XLBorderStyleValues.Double;

        //            var titlesStyle = wb.Style;
        //            titlesStyle.Font.Bold = true;
        //            titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
        //            //  titlesStyle.Fill.BackgroundColor = XLColor.Cyan;

        //            wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
        //            ws.Columns().AdjustToContents();

        //            //  wb.SaveAs(folderPath + filename + ".xlsx");
        //            Response.Clear();
        //            Response.Buffer = true;
        //            Response.Charset = "";
        //            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        //            Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
        //            using (MemoryStream MyMemoryStream = new MemoryStream())
        //            {
        //                wb.SaveAs(MyMemoryStream);
        //                MyMemoryStream.WriteTo(Response.OutputStream);
        //                Response.Flush();
        //                //Response.End();
        //                HttpContext.Current.Response.End();
        //            }


        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        //LogCls.LogError(ex, "Commission:");
        //    }


        //}
        public System.Data.DataTable commissiontbl()
        {
            DataTable First = new DataTable();
            DataTable dt = new DataTable();

            dt.Columns.Add("GroupNo");
            dt.Columns.Add("Dateofcommencement");
            dt.Columns.Add("DateofTerminated");
            dt.Columns.Add("installyrs");
            dt.Columns.Add("groupvalue");
            dt.Columns.Add("Rateofcommission");
            dt.Columns.Add("Totalcommission");



            DataRow dr = dt.NewRow();

            // First = objBAL.GetDataTable("SELECT * FROM svcf.groupmaster where branchid=1481 and SDP_Commencement <= '2017-03-31' and ChitEndDate >= '2016-04-01';");
            //  First = objBAL.GetDataTable("SELECT * FROM svcf.groupmaster where branchid=" + drpdownBranchlist.SelectedValue + " and ChitStartDate <= '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and ChitEndDate >= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' order by GROUPNO;");
            First = objBAL.GetDataTable("SELECT distinct (GroupID),GROUPNO,ChitStartDate,ChitEndDate,g1.AuctionDate,ChitValue,g1.SDP_Commencement FROM svcf.auctiondetails as a1 join groupmaster as g1 on (a1.GroupID=g1.Head_Id) where a1.BranchID=" + drpdownBranchlist.SelectedValue + " and a1.AuctionDate between '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and  '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ");
            if (First.Rows.Count != 0)
            {
                for (int i = 0; i < First.Rows.Count; i++)
                {
                    // int totcoc = 0;
                    dr["GroupNo"] = First.Rows[i]["GROUPNO"];
                    dr["Dateofcommencement"] = balayer.GetSingleValue("SELECT  DATE_FORMAT((a1.AuctionDate),'%d/%m/%Y') as date,GROUPNO FROM svcf.groupmaster as g1 join svcf.auctiondetails as a1 on(g1.Head_Id=a1.GroupID)  where g1.branchid=" + drpdownBranchlist.SelectedValue + " and a1.DrawNO=1 and g1.Head_Id=" + First.Rows[i]["GroupID"] + "");
                    DateTime chitstartdate = Convert.ToDateTime(First.Rows[i]["ChitStartDate"]);
                    DateTime chitcalc = Convert.ToDateTime(First.Rows[i]["ChitEndDate"]);
                    DateTime dtFrom = Convert.ToDateTime(txtFrmDate.Text);

                    DateTime dtTo = DateTime.ParseExact(txtToDate.Text, "dd/MM/yyyy", null);
                    int month = Convert.ToInt32(chitcalc.Month);
                    int year = Convert.ToInt32(chitcalc.Year);
                    int lastdate = Convert.ToInt32(DateTime.DaysInMonth(year, month));
                    if (chitstartdate >= Convert.ToDateTime(dtFrom) && chitcalc >= Convert.ToDateTime(dtTo))
                    {
                        decimal totcoc2 = Convert.ToDecimal(balayer.GetSingleValue("SELECT count(*) FROM svcf.auctiondetails as a1  where a1.BranchID=" + drpdownBranchlist.SelectedValue + " and GroupID=" + First.Rows[i]["GroupID"] + "  and a1.AuctionDate between '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and  '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "'"));
                        decimal tot = totcoc2 - 1;
                        if (tot == 0)
                        {

                            dr["installyrs"] = "";
                            chitval = Convert.ToDecimal(First.Rows[i]["ChitValue"]);
                            bh = (chitval * 5 / 100);
                            Totalcommission = bh * tot;
                            dr["Totalcommission"] = "0.00";
                        }
                        else
                        {
                            dr["installyrs"] = tot;
                            chitval = Convert.ToDecimal(First.Rows[i]["ChitValue"]);
                            bh = (chitval * 5 / 100);
                            Totalcommission = bh * tot;
                            dr["Totalcommission"] = Totalcommission;
                        }


                    }
                    else
                    {
                        //dr["installyrs"] = balayer.GetSingleValue("SELECT count(*) FROM svcf.auctiondetails as a1 join svcf.membertogroupmaster as mg1 on (mg1.Head_Id=a1.PrizedMemberID)  where mg1.BranchID=" + drpdownBranchlist.SelectedValue + "  and mg1.MemberName<>'Sree Visalam Chit Fund Ltd'  and a1.GroupID=" + First.Rows[i]["GroupID"] + "   and a1.AuctionDate between '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and  '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "'");
                        dr["installyrs"] = balayer.GetSingleValue("SELECT count(*) FROM svcf.auctiondetails as a1 join svcf.membertogroupmaster as mg1 on (mg1.Head_Id=a1.PrizedMemberID)  where mg1.BranchID=" + drpdownBranchlist.SelectedValue + "    and a1.GroupID=" + First.Rows[i]["GroupID"] + "   and a1.AuctionDate between '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and  '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "'");
                        //decimal totcoc1 = Convert.ToDecimal(balayer.GetSingleValue("SELECT count(*) FROM svcf.auctiondetails as a1 join svcf.membertogroupmaster as mg1 on (mg1.Head_Id=a1.PrizedMemberID)  where mg1.BranchID=" + drpdownBranchlist.SelectedValue + "  and mg1.MemberName<>'Sree Visalam Chit Fund Ltd'  and a1.GroupID=" + First.Rows[i]["GroupID"] + "   and a1.AuctionDate between '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and  '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "'"));
                        decimal totcoc1 = Convert.ToDecimal(balayer.GetSingleValue("SELECT count(*) FROM svcf.auctiondetails as a1 join svcf.membertogroupmaster as mg1 on (mg1.Head_Id=a1.PrizedMemberID)  where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and a1.GroupID=" + First.Rows[i]["GroupID"] + "   and a1.AuctionDate between '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and  '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "'"));
                        chitval = Convert.ToDecimal(First.Rows[i]["ChitValue"]);
                        bh = (chitval * 5 / 100);
                        Totalcommission = bh * totcoc1;
                        dr["Totalcommission"] = Totalcommission;

                    }
                    //if (chitcalc <= Convert.ToDateTime(dtFrom))
                    // {
                    //     DateTime chitendmodify = Convert.ToDateTime(year + "-" + month + "-" + lastdate);
                    //    // dr["DateofTerminated"] = First.Rows[i]["ChitEndDate"];
                    //    int calculation = Convert.ToInt32(chitendmodify.Subtract((Convert.ToDateTime(dtTo))).Days / (365.25 / 12));
                    //     dr["installyrs"] = calculation;
                    //     totcoc = calculation;
                    // }
                    // else if (chitstartdate >= Convert.ToDateTime(dtFrom) && chitstartdate < Convert.ToDateTime(dtTo))

                    // {
                    //     int months = Convert.ToInt32(chitstartdate.Month);
                    //     int years = Convert.ToInt32(chitstartdate.Year);
                    //     int lastdates = Convert.ToInt32(01);
                    //  //   dr["DateofTerminated"] = "";

                    //     DateTime chitstartmodify = Convert.ToDateTime(years + "-" + months + "-" + lastdates);
                    //     int calculation = Convert.ToInt32(Convert.ToDateTime(dtFrom).Subtract(chitstartmodify).Days / (365.25 / 12));
                    //     dr["installyrs"] = calculation - 1;
                    //     totcoc = calculation - 1;
                    // }
                    // else
                    // {
                    //   //  dr["DateofTerminated"] = "";
                    //     dr["installyrs"] = Convert.ToString("12");
                    //     totcoc = 12;
                    // }

                    dr["DateofTerminated"] = balayer.GetSingleValue("SELECT DATE_FORMAT(ChitEndDate,'%d/%m/%Y') as date FROM svcf.groupmaster where branchid=" + drpdownBranchlist.SelectedValue + " and Head_Id=" + First.Rows[i]["GroupID"] + " and ChitStartDate <= '" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and ChitEndDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "'");
                    dr["groupvalue"] = First.Rows[i]["ChitValue"];
                    decimal chitval1 = Convert.ToDecimal(First.Rows[i]["ChitValue"]);
                    decimal bh1 = (chitval1 * 5 / 100);

                    dr["Rateofcommission"] = bh1;





                    dt.Rows.Add(dr.ItemArray);




                }





            }



            return dt;

        }


        protected void ST24_Click(object sender, EventArgs e)
        {
            // BindExcessandArrearTerminated1();
            //TupleBindDecree();
            ST24XLwrite();
        }

        public System.Data.DataTable BindExcessandArrearTerminated1()
        {


            //DataTable dt = balayer.GetDataTable("select * from groupmaster where `PSOOrderDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID=" + Session["Branchid"]);
            DataTable dt = balayer.GetDataTable("select * from groupmaster where `ChitStartDate` <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID='" + drpdownBranchlist.SelectedValue + "'");

            DataTable dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            DataRow drB = dtB.NewRow();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                //   DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where (IsPrized='I' or AuctionDate >= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') and GroupID=" + dt.Rows[i]["Head_Id"]);
                DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where ( AuctionDate >= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') and GroupID=" + dt.Rows[i]["Head_Id"]);
                string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);
                //if (dtTerminated.Rows.Count == 0)
                if (drawno == Noofmem)
                {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }

            DataTable dtM = new DataTable();
            dtM.Columns.Add("SNo");
            dtM.Columns.Add("GroupNo", typeof(string));
            dtM.Columns.Add("P", typeof(decimal));
            dtM.Columns.Add("NP", typeof(decimal));
            dtM.Columns.Add("Excess", typeof(decimal));
            DataRow dr = dtM.NewRow();
            //dr["SNo"] = "";
            //dr["GroupNo"] = "Terminated";
            //dr["P"] = "0.00";
            //dr["NP"] = "0.00";
            //dr["Excess"] = "0.00";
            //dtM.Rows.Add(dr.ItemArray);
            int iCount = 0;
            for (int i = 0; i < dtB.Rows.Count; i++)
            {
                DataTable dtSum = balayer.GetDataTable("select mg1.Head_Id,cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier  from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + "  left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID='" + drpdownBranchlist.SelectedValue + "' and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");
                if (dtSum.Rows.Count > 0)
                {
                    if (Convert.ToInt32(dtB.Rows[i]["Head_Id"]) == 1193)
                    {
                        DataTable dtS = balayer.GetDataTable("SELECT sum((case when (Voucher_Type='C') then Amount else 0.00 end)) as Credit,sum((case when (Voucher_Type='D') then Amount else 0.00 end)) as Debit FROM svcf.voucher where Head_id=1194");
                        if (dtS.Rows.Count > 0)
                        {
                            if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) < Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                            {
                                dr["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                dr["P"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                dr["NP"] = "0.00";
                                dr["Excess"] = "0.00";
                                dr["SNo"] = iCount + 1;
                                dtM.Rows.Add(dr.ItemArray);
                                iCount++;
                            }
                            else if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) > Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                            {
                                dr["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                dr["P"] = "0.00";
                                dr["NP"] = "0.00";
                                dr["Excess"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                dr["SNo"] = iCount + 1;
                                dtM.Rows.Add(dr.ItemArray);
                                iCount++;
                            }
                        }
                    }
                    else
                    {
                        dr["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                        object sumObjectPArrear = dtSum.Compute("Sum(PArrier)", "");

                        if (sumObjectPArrear != DBNull.Value)
                        {
                            dr["P"] = sumObjectPArrear;
                        }
                        //ExcessRemittance
                        else
                        {
                            sumObjectPArrear = 0.00;
                            dr["P"] = "0.00";
                        }
                        object sumObjectNPArrear = dtSum.Compute("Sum(NPArrier)", "");
                        if (sumObjectNPArrear != DBNull.Value)
                        {
                            dr["NP"] = sumObjectNPArrear;
                        }
                        else
                        {
                            sumObjectNPArrear = 0.00;
                            dr["NP"] = "0.00";
                        }

                        object sumObjectExcess = dtSum.Compute("Sum(ExcessRemittance)", "");
                        if (sumObjectExcess != DBNull.Value)
                        {
                            dr["Excess"] = sumObjectExcess;
                        }
                        else
                        {
                            sumObjectExcess = 0.00;
                            dr["Excess"] = "0.00";
                        }
                        if (Convert.ToDecimal(sumObjectExcess) != 0.00M || Convert.ToDecimal(sumObjectNPArrear) != 0.00M || Convert.ToDecimal(sumObjectPArrear) != 0.00M)
                        {
                            dr["SNo"] = iCount + 1;
                            dtM.Rows.Add(dr.ItemArray);
                            iCount++;
                        }
                    }
                }
            }

            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') group by `auctiondetails`.`GroupID`");
            dt = balayer.GetDataTable("select * from groupmaster where `PSOOrderDate` <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID='" + drpdownBranchlist.SelectedValue + "'");
            dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            drB = dtB.NewRow();
            int Maxdrawno = 0;
            decimal Totalcr = 0;

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                //DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where (IsPrized='I' or AuctionDate >= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') and GroupID=" + dt.Rows[i]["Head_Id"]);
                DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where ( AuctionDate >= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') and GroupID=" + dt.Rows[i]["Head_Id"]);
                string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);

                if (drawno != Noofmem)
                {
                    // if (dtTerminated.Rows.Count > 0)
                    // {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }
            //dr["SNo"] = "";
            //dr["GroupNo"] = "Running";
            //dr["P"] = "0.00";
            //dr["NP"] = "0.00";
            //dr["Excess"] = "0.00";
            //dtM.Rows.Add(dr.ItemArray);
            iCount = 0;
            for (int i = 0; i < dtB.Rows.Count; i++)
            {
                DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where IsPrized='Y' and AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                //DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where (IsPrized='N' or IsPrized='Y') and AuctionDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                if (dtInit.Rows.Count > 0)
                {
                    DataTable dtSum = balayer.GetDataTable("select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + "  left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID='" + drpdownBranchlist.SelectedValue + "' and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");

                    dr["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                    object sumObjectPArrear = dtSum.Compute("Sum(PArrier)", "");

                    if (sumObjectPArrear != DBNull.Value)
                    {
                        dr["P"] = sumObjectPArrear;
                    }
                    //ExcessRemittance
                    else
                    {
                        sumObjectPArrear = 0.00;
                        dr["P"] = "0.00";
                    }
                    object sumObjectNPArrear = dtSum.Compute("Sum(NPArrier)", "");

                    //Non Prized Arrear                                      
                    // objCOM.Dtnullck = balayer.GetDataTable(@"SELECT * FROM voucher WHERE ChitGroupId = " + dtB.Rows[i]["Head_Id"] + " and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "';");
                    //if (sumObjectNPArrear == DBNull.Value)
                    //{
                    //  dr["NP"] = GetSummary(Convert.ToInt32(dtB.Rows[i]["Head_Id"]));
                    //}
                    //else
                    //{

                    //    dr["NP"] = sumObjectNPArrear;

                    //    //else
                    //    //{
                    //    //    sumObjectNPArrear = 0.00;
                    //    //    dr["NP"] = "0.00";
                    //    //}
                    //}

                    //
                    //if (Totalcr != 0)
                    //{
                    //    dr["NP"] = sumObjectNPArrear;
                    //}
                    //else
                    //{
                    //    Totalcr = 0;
                    //    dr["NP"] = "0.00";
                    //}

                    object sumObjectExcess = dtSum.Compute("Sum(ExcessRemittance)", "");
                    if (sumObjectExcess != DBNull.Value)
                    {
                        dr["Excess"] = sumObjectExcess;
                    }
                    else
                    {
                        sumObjectExcess = 0.00;
                        dr["Excess"] = "0.00";
                    }
                    if (Convert.ToDecimal(sumObjectExcess) != 0.00M || Convert.ToDecimal(sumObjectNPArrear) != 0.00M || Convert.ToDecimal(sumObjectPArrear) != 0.00M)
                    {
                        dr["SNo"] = iCount + 1;
                        dtM.Rows.Add(dr.ItemArray);
                        iCount++;
                    }
                }
                else
                {
                    string strChits = "";
                    DataTable dtC = balayer.GetDataTable("SELECT concat(Cast(NodeID as char(10)),',') FROM svcf.headstree where ParentID=" + dtB.Rows[i]["Head_Id"]);
                    for (int k = 0; k < dtC.Rows.Count; k++)
                    {
                        strChits = strChits + dtC.Rows[k][0];
                    }
                    if (string.IsNullOrEmpty(strChits))
                    {
                        strChits = "0";
                    }
                    else
                    {
                        strChits = strChits.TrimEnd(',');
                    }
                    string credit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='C') then Amount else 0.00 end) as Credit FROM svcf.voucher where ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                    string debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                    if (string.IsNullOrEmpty(credit))
                        credit = "0.00";
                    if (string.IsNullOrEmpty(debit))
                        debit = "0.00";
                    decimal decCredit = Convert.ToDecimal(credit);
                    decimal decDebit = Convert.ToDecimal(debit);

                    dr["SNo"] = iCount + 1;
                    dr["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                    dr["Excess"] = decCredit - decDebit;
                    dr["NP"] = "0.00";
                    dr["P"] = "0.00";
                    dtM.Rows.Add(dr.ItemArray);
                    iCount++;
                }
            }
            DataTable dtdebit = new DataTable();
            dtdebit.Columns.Add("SNo");
            dtdebit.Columns.Add("GrpNo");
            dtdebit.Columns.Add("prizedchitArr");

            DataRow drdebit = dtdebit.NewRow();
            int iCou = 0;
            for (int i = 0; i < (dtM.Rows.Count); i++)
            {

                drdebit["SNo"] = iCou + 1;
                drdebit["GrpNo"] = dtM.Rows[i]["GroupNo"];
                drdebit["prizedchitArr"] = dtM.Rows[i]["P"];

                dtdebit.Rows.Add(drdebit.ItemArray);
                iCou++;

            }

            return dtdebit;
        }

        public DataTable BindChitTrial111()
        {

            DataTable dtdebit = new DataTable();
            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') group by `auctiondetails`.`GroupID`");
            DataTable dt = balayer.GetDataTable("select * from groupmaster where `ChitStartDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID=" + drpdownBranchlist.SelectedValue + " order by GROUPNO");

            DataTable dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            DataRow drB = dtB.NewRow();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);
                if (drawno == Noofmem)
                {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }

            DataTable dtBind = new DataTable();
            dtBind.Columns.Add("SNo");
            dtBind.Columns.Add("GroupNo");
            dtBind.Columns.Add("I_Credit", typeof(decimal));
            dtBind.Columns.Add("I_Debit", typeof(decimal));
            dtBind.Columns.Add("E_Credit", typeof(decimal));
            dtBind.Columns.Add("E_Debit", typeof(decimal));
            dtBind.Columns.Add("N_Credit", typeof(decimal));
            dtBind.Columns.Add("N_Debit", typeof(decimal));
            dtBind.Columns.Add("NonPrized", typeof(decimal));
            dtBind.Columns.Add("Prized", typeof(decimal));
            dtBind.Columns.Add("TotalAmountofKasar", typeof(decimal));
            dtBind.Columns.Add("NP", typeof(int));
            dtBind.Columns.Add("P", typeof(int));
            dtBind.Columns.Add("Remarks");
            DataRow drBind = dtBind.NewRow();
            //drBind["SNo"] = "";
            //drBind["GroupNo"] = "Terminated";
            //drBind["Remarks"] = "";
            //dtBind.Rows.Add(drBind.ItemArray);
            int iCount = 0;
            for (int i = 0; i < dtB.Rows.Count; i++)
            {

                //DataTable dt1 = balayer.GetDataTable(@"select mg1.Head_Id,cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");
                DataTable dt1 = balayer.GetDataTable(@"select mg1.Head_Id,cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier,(case when( tp1.PaymentDate<'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PA from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ; ");
                if (dt1.Rows.Count > 0)
                {
                    #region start
                    if (((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M) && Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", "")) == 0.00M)
                    {

                    }
                    else
                    {

                        List<string> lstPArr = new List<string>();
                        int iPCount = 0;
                        int ip1 = 0;

                        DataTable dtNPkasar = balayer.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + "  and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (dtNPkasar.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtNPkasar.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtNPkasar.Rows[iRow]["NPKasar"]) > 0)
                                {
                                    lstPArr.Add(Convert.ToString(dtNPkasar.Rows[iRow]["Head_Id"]));
                                    ip1++;
                                }
                            }
                        }

                        DataTable dtPArr = balayer.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + "  and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (dtPArr.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtPArr.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtPArr.Rows[iRow]["PArrier"]) > 0)
                                {
                                    lstPArr.Add(Convert.ToString(dtPArr.Rows[iRow]["Head_Id"]));
                                    iPCount++;
                                }
                            }
                        }

                        // Total Number Calculation End
                        if (Convert.ToInt32(dtB.Rows[i]["Head_Id"]) == 01193)
                        {
                            DataTable dtS = balayer.GetDataTable("SELECT sum((case when (Voucher_Type='C') then Amount else 0.00 end)) as Credit,sum((case when (Voucher_Type='D') then Amount else 0.00 end)) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id=1194");
                            if (dtS.Rows.Count > 0)
                            {
                                if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) < Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["I_Credit"] = 0.00;
                                    drBind["I_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["E_Credit"] = 0.00;
                                    drBind["E_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["N_Credit"] = 0.00;
                                    drBind["N_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["NonPrized"] = "0.00";
                                    drBind["Prized"] = "0.00";
                                    drBind["TotalAmountofKasar"] = "0.00";
                                    drBind["NP"] = "0";
                                    drBind["P"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["Remarks"] = "";
                                    iCount++;
                                    dtBind.Rows.Add(drBind.ItemArray);
                                }
                                else if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) > Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["I_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["I_Debit"] = 0.00;
                                    drBind["E_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["E_Debit"] = 0.00;
                                    drBind["N_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["N_Debit"] = 0.00;
                                    drBind["NonPrized"] = "0.00";
                                    drBind["Prized"] = "0.00";
                                    drBind["TotalAmountofKasar"] = "0.00";
                                    drBind["NP"] = "0";
                                    drBind["P"] = "0";
                                    drBind["Remarks"] = "";
                                    iCount++;
                                    dtBind.Rows.Add(drBind.ItemArray);
                                }
                            }
                        }
                        else
                        {
                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                            object sumObjectPArrear = dt1.Compute("Sum(PA)", "");

                            if (sumObjectPArrear != DBNull.Value)
                            {
                                drBind["P"] = sumObjectPArrear;
                            }
                            //ExcessRemittance
                            else
                            {
                                sumObjectPArrear = 0.00;
                                drBind["P"] = "0.00";
                            }


                            decimal SumExcess_WithoutCreditIncluding = dt1.AsEnumerable().Where(a => a.Field<decimal>("Credit") == 0).Sum(a => a.Field<decimal>("ExcessRemittance"));

                            drBind["I_Credit"] = SumExcess_WithoutCreditIncluding + Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["I_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", ""));
                            decimal SumExcess_WithoutCreditExcluding = dt1.AsEnumerable().Where(a => a.Field<decimal>("Credit") == 0).Sum(a => a.Field<decimal>("ExcessRemittance"));
                            drBind["E_Credit"] = SumExcess_WithoutCreditExcluding + Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                            drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) - Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", ""));

                            if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) > Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                                drBind["N_Debit"] = "0.00";

                            }
                            else if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) < Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")));
                            }
                            ///////////////////////=====================///////////////////////
                            else
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = "0.00";
                            }
                            ////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
                            drBind["NonPrized"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["Prized"] = "0.00";
                            drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            //   drBind["NP"] = ip1;
                            //    drBind["P"] = iPCount; // "0";
                            drBind["Remarks"] = "";
                            iCount++;
                            dtBind.Rows.Add(drBind.ItemArray);
                        }
                    }
                    #endregion
                }

            }
            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') group by `auctiondetails`.`GroupID`");
            dt = balayer.GetDataTable("select * from groupmaster where `PSOOrderDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID=" + drpdownBranchlist.SelectedValue + "");

            if (dt.Rows.Count != 0)
            {

                dtB = new DataTable();
                dtB.Columns.Add("Head_Id");
                dtB.Columns.Add("GROUPNO");
                drB = dtB.NewRow();
                for (int i = 0; i < dt.Rows.Count; i++)
                {

                    DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                    string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);

                    if (drawno != Noofmem)
                    {
                        drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                        drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                        dtB.Rows.Add(drB.ItemArray);
                    }
                }
                DataRow drBind1 = dtBind.NewRow();
                //drBind1["SNo"] = "";
                //drBind1["GroupNo"] = "Running";
                //drBind1["Remarks"] = "";
                //dtBind.Rows.Add(drBind1.ItemArray);

                iCount = 0;
                for (int i = 0; i < dtB.Rows.Count; i++)
                {


                    DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                    //jeya --------------
                    string prizecount = balayer.GetSingleValue("select count(*) from trans_payment where ChitGroupID = " + dtB.Rows[i]["Head_Id"] + " and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "';");
                    string Totalcount = balayer.GetSingleValue("select count(*) from auctiondetails where GroupID=" + dtB.Rows[i]["Head_Id"] + ";");
                    //jeya -----------------
                    string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dtB.Rows[i]["Head_Id"]);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dtB.Rows[i]["Head_Id"]);
                    //DataTable dt1 = balayer.GetDataTable(@"select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + "  and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");
                    DataTable dt1 = balayer.GetDataTable(@"select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier,(case when( tp1.PaymentDate<'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PA from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + "  and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");

                    if (drawno != Noofmem && dt1.Rows.Count > 0)
                    {

                        if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M)
                        {

                        }
                        else
                        {
                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                            object sumObjectPArrear = dt1.Compute("Sum(PA)", "");

                            if (sumObjectPArrear != DBNull.Value)
                            {
                                drBind["P"] = sumObjectPArrear;
                            }
                            //ExcessRemittance
                            else
                            {
                                sumObjectPArrear = 0.00;
                                drBind["P"] = "0.00";
                            }
                            drBind["I_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["I_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                            drBind["E_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                            drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) > Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - (Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")));
                                drBind["N_Debit"] = "0.00";
                            }
                            else if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) < Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")));
                            }
                            ///////////////////////////-------------------------////////////////
                            else
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = "0.00";
                            }
                            /////////////////////////--------==================//////////////////
                            drBind["NonPrized"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));

                            //jeya
                            if (prizecount == "1")
                            {
                                drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                //   drBind["P"] = (prizecount);
                                //   drBind["NP"] = Convert.ToInt16(Totalcount) - Convert.ToInt16(prizecount);
                            }
                            else if (prizecount != "1")
                            {
                                drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                //drBind["NP"] = dt1.AsEnumerable()
                                //        .Where(r => (decimal)r["NPKasar"] != 0.00m)
                                //        .Count();
                                //drBind["P"] = dt1.AsEnumerable()
                                //            .Where(r => (decimal)r["PKasar"] != 0.00m)
                                //            .Count(); ;
                            }
                            else if (prizecount == "0")
                            {
                                //  drBind["NP"] = Convert.ToInt16(Totalcount);
                            }
                            //jeya


                            drBind["Remarks"] = "";
                            iCount++;
                            dtBind.Rows.Add(drBind.ItemArray);
                        }
                        //}
                    }
                    else
                    {
                        decimal credit1 = 0;
                        decimal debit1 = 0;
                        decimal decCredit = 0;
                        decimal decDebit = 0;
                        strChits = "";
                        dtC = new DataTable();
                        dtC = balayer.GetDataTable("SELECT concat(Cast(NodeID as char(10)),',') FROM svcf.headstree where ParentID=" + dtB.Rows[i]["Head_Id"]);
                        for (int k = 0; k < dtC.Rows.Count; k++)
                        {
                            strChits = strChits + dtC.Rows[k][0];
                        }
                        if (string.IsNullOrEmpty(strChits))
                        {
                            strChits = "0";
                        }
                        else
                        {
                            strChits = strChits.TrimEnd(',');
                        }
                        credit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='C') then Amount else 0.00 end) as Credit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                        debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");

                        if (credit != "")
                        {
                            credit1 = Convert.ToDecimal(credit);
                        }
                        if (debit != "")
                        {
                            debit1 = Convert.ToDecimal(debit);
                        }
                        if (string.IsNullOrEmpty(credit))
                            credit = "0.00";
                        if (string.IsNullOrEmpty(debit))
                            debit = "0.00";

                        if (prizecount == "0")
                        {
                            debit = "0.00";
                        }
                        else
                        {
                            debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                        }
                        if (credit1 > debit1)
                        {
                            decCredit = Convert.ToDecimal(credit1) - Convert.ToDecimal(debit1);
                        }
                        else
                        {
                            decCredit = Convert.ToDecimal(debit1) - Convert.ToDecimal(credit1);
                        }

                        //decCredit = Convert.ToDecimal(credit);
                        decDebit = Convert.ToDecimal(debit);
                        string npkas = "";
                        string pkas = "";
                        int NPcount = 0;
                        int Pcount = 0;
                        DataTable dtDetails = balayer.GetDataTable(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar                              from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (" + strChits + ") and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC;");

                        if (dtDetails.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtDetails.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtDetails.Rows[iRow]["NPKasar"]) > 0)
                                    NPcount++;
                                if (Convert.ToDecimal(dtDetails.Rows[iRow]["PKasar"]) > 0)
                                    Pcount++;
                            }
                            pkas = Convert.ToString(dtDetails.Compute("sum(PKasar)", ""));
                            npkas = Convert.ToString(dtDetails.Compute("sum(NPKasar)", ""));
                            credit = Convert.ToString(dtDetails.Compute("sum(Credit)", ""));
                            debit = Convert.ToString(dtDetails.Compute("sum(Debit)", ""));
                        }

                        if (string.IsNullOrEmpty(npkas))
                            npkas = "0.00";
                        if (string.IsNullOrEmpty(pkas))
                            pkas = "0.00";

                        string netCredit = "0.00";
                        string netDebit = "0.00";

                        if ((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) > Convert.ToDecimal(debit))
                            //netCredit = Convert.ToString((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) - Convert.ToDecimal(debit));
                            netCredit = Convert.ToString((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) - Convert.ToDecimal(debit1));
                        else
                            //netDebit = Convert.ToString(Convert.ToDecimal(debit) - (Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)));
                            netDebit = Convert.ToString(Convert.ToDecimal(debit1) - (Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)));

                        drBind["SNo"] = iCount + 1;
                        drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                        //drBind["I_Credit"] = Convert.ToString(Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas));
                        drBind["I_Credit"] = decCredit;
                        drBind["I_Debit"] = debit; //0.00M;
                        /*drBind["E_Credit"] = credit;*/
                        //decCredit - decDebit;
                        drBind["E_Credit"] = decCredit;
                        drBind["E_Debit"] = Convert.ToString(Convert.ToDecimal(debit) - Convert.ToDecimal(pkas)); //0.00M;
                        drBind["N_Credit"] = netCredit;
                        drBind["N_Debit"] = netDebit;
                        drBind["NonPrized"] = npkas;
                        drBind["Prized"] = pkas;
                        drBind["TotalAmountofKasar"] = Convert.ToString(Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas));
                        if (prizecount == "1")
                        {
                            drBind["P"] = (prizecount);
                            //  drBind["NP"] = Convert.ToInt16(Totalcount) - Convert.ToInt16(prizecount);
                        }
                        else if (prizecount != "1" && prizecount != "0")
                        {
                            //drBind["NP"] = dt1.AsEnumerable()
                            //        .Where(r => (decimal)r["NPKasar"] != 0.00m)
                            //        .Count();
                            //drBind["P"] = dt1.AsEnumerable()
                            //            .Where(r => (decimal)r["PKasar"] != 0.00m)
                            //            .Count(); ;
                        }
                        else if (prizecount == "0")
                        {
                            //drBind["NP"] = Convert.ToInt16(Totalcount);
                            //drBind["P"] = (prizecount);
                        }
                        drBind["Remarks"] = "";
                        drBind["NP"] = "0";
                        drBind["P"] = "0";
                        iCount++;
                        dtBind.Rows.Add(drBind.ItemArray);
                    }
                }


                dtBind.Rows.Add(drBind.ItemArray);
                dtdebit.Columns.Add("SNo");
                dtdebit.Columns.Add("GrpNo");
                dtdebit.Columns.Add("GdebitlessKasar", typeof(decimal));
                dtdebit.Columns.Add("Prized", typeof(decimal));
                dtdebit.Columns.Add("prizedchitArr", typeof(decimal));
                DataRow drdebit = dtdebit.NewRow();
                int iCou = 0;
                decimal pan = 0;
                for (int i = 0; i < (dtBind.Rows.Count) - 1; i++)
                {

                    drdebit["SNo"] = iCou + 1;
                    drdebit["GrpNo"] = dtBind.Rows[i]["GroupNo"];
                    decimal GdebitlessKasar = Convert.ToDecimal(dtBind.Rows[i]["E_Debit"]);
                    decimal prizedchitArr = Convert.ToDecimal(dtBind.Rows[i]["P"]);
                    decimal Prized1 = Convert.ToDecimal(dtBind.Rows[i]["Prized"]);
                    pan += Prized1;
                    drdebit["GdebitlessKasar"] = dtBind.Rows[i]["E_Debit"];
                    drdebit["prizedchitArr"] = dtBind.Rows[i]["P"];
                    drdebit["Prized"] = Prized1;

                    dtdebit.Rows.Add(drdebit.ItemArray);
                    iCou++;

                }

                drdebit["SNo"] = iCou + 1;
                drdebit["GrpNo"] = "";

                drdebit["GdebitlessKasar"] = "0.00";
                drdebit["prizedchitArr"] = "0.00";
                drdebit["Prized"] = pan;

                dtdebit.Rows.Add(drdebit.ItemArray);
            }
            return dtdebit;

        }
        public System.Data.DataTable BindExcessandArrearTerminated()
        {


            //DataTable dt = balayer.GetDataTable("select * from groupmaster where `PSOOrderDate` <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID=" + Session["Branchid"]);
            DataTable dt = balayer.GetDataTable("select * from groupmaster where `ChitStartDate` <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID='" + drpdownBranchlist.SelectedValue + "'");

            DataTable dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            DataRow drB = dtB.NewRow();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                //   DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where (IsPrized='I' or AuctionDate >= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') and GroupID=" + dt.Rows[i]["Head_Id"]);
                DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where ( AuctionDate >= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') and GroupID=" + dt.Rows[i]["Head_Id"]);
                string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);
                //if (dtTerminated.Rows.Count == 0)
                if (drawno == Noofmem)
                {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }

            DataTable dtM = new DataTable();
            dtM.Columns.Add("SNo");
            dtM.Columns.Add("GroupNo", typeof(string));
            dtM.Columns.Add("P", typeof(decimal));
            dtM.Columns.Add("NP", typeof(decimal));
            dtM.Columns.Add("Excess", typeof(decimal));
            DataRow dr = dtM.NewRow();
            //dr["SNo"] = "";
            //dr["GroupNo"] = "Terminated";
            //dr["P"] = "0.00";
            //dr["NP"] = "0.00";
            //dr["Excess"] = "0.00";
            //dtM.Rows.Add(dr.ItemArray);
            int iCount = 0;
            for (int i = 0; i < dtB.Rows.Count; i++)
            {
                DataTable dtSum = balayer.GetDataTable("select mg1.Head_Id,cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier  from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + "  left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID='" + drpdownBranchlist.SelectedValue + "' and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");
                if (dtSum.Rows.Count > 0)
                {
                    if (Convert.ToInt32(dtB.Rows[i]["Head_Id"]) == 1193)
                    {
                        DataTable dtS = balayer.GetDataTable("SELECT sum((case when (Voucher_Type='C') then Amount else 0.00 end)) as Credit,sum((case when (Voucher_Type='D') then Amount else 0.00 end)) as Debit FROM svcf.voucher where Head_id=1194");
                        if (dtS.Rows.Count > 0)
                        {
                            if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) < Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                            {
                                dr["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                dr["P"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                dr["NP"] = "0.00";
                                dr["Excess"] = "0.00";
                                dr["SNo"] = iCount + 1;
                                dtM.Rows.Add(dr.ItemArray);
                                iCount++;
                            }
                            else if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) > Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                            {
                                dr["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                dr["P"] = "0.00";
                                dr["NP"] = "0.00";
                                dr["Excess"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                dr["SNo"] = iCount + 1;
                                dtM.Rows.Add(dr.ItemArray);
                                iCount++;
                            }
                        }
                    }
                    else
                    {
                        dr["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                        object sumObjectPArrear = dtSum.Compute("Sum(PArrier)", "");

                        if (sumObjectPArrear != DBNull.Value)
                        {
                            dr["P"] = sumObjectPArrear;
                        }
                        //ExcessRemittance
                        else
                        {
                            sumObjectPArrear = 0.00;
                            dr["P"] = "0.00";
                        }
                        object sumObjectNPArrear = dtSum.Compute("Sum(NPArrier)", "");
                        if (sumObjectNPArrear != DBNull.Value)
                        {
                            dr["NP"] = sumObjectNPArrear;
                        }
                        else
                        {
                            sumObjectNPArrear = 0.00;
                            dr["NP"] = "0.00";
                        }

                        object sumObjectExcess = dtSum.Compute("Sum(ExcessRemittance)", "");
                        if (sumObjectExcess != DBNull.Value)
                        {
                            dr["Excess"] = sumObjectExcess;
                        }
                        else
                        {
                            sumObjectExcess = 0.00;
                            dr["Excess"] = "0.00";
                        }
                        if (Convert.ToDecimal(sumObjectExcess) != 0.00M || Convert.ToDecimal(sumObjectNPArrear) != 0.00M || Convert.ToDecimal(sumObjectPArrear) != 0.00M)
                        {
                            dr["SNo"] = iCount + 1;
                            dtM.Rows.Add(dr.ItemArray);
                            iCount++;
                        }
                    }
                }
            }

            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') group by `auctiondetails`.`GroupID`");
            dt = balayer.GetDataTable("select * from groupmaster where `PSOOrderDate` <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and BranchID='" + drpdownBranchlist.SelectedValue + "'");
            dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            drB = dtB.NewRow();
            int Maxdrawno = 0;
            decimal Totalcr = 0;

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                //DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where (IsPrized='I' or AuctionDate >= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') and GroupID=" + dt.Rows[i]["Head_Id"]);
                DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where ( AuctionDate >= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') and GroupID=" + dt.Rows[i]["Head_Id"]);
                string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);

                if (drawno != Noofmem)
                {
                    // if (dtTerminated.Rows.Count > 0)
                    // {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }
            //dr["SNo"] = "";
            //dr["GroupNo"] = "Running";
            //dr["P"] = "0.00";
            //dr["NP"] = "0.00";
            //dr["Excess"] = "0.00";
            //dtM.Rows.Add(dr.ItemArray);
            iCount = 0;
            for (int i = 0; i < dtB.Rows.Count; i++)
            {
                DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where IsPrized='Y' and AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                //DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where (IsPrized='N' or IsPrized='Y') and AuctionDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                if (dtInit.Rows.Count > 0)
                {
                    DataTable dtSum = balayer.GetDataTable("select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + "  left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID='" + drpdownBranchlist.SelectedValue + "' and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");

                    dr["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                    object sumObjectPArrear = dtSum.Compute("Sum(PArrier)", "");

                    if (sumObjectPArrear != DBNull.Value)
                    {
                        dr["P"] = sumObjectPArrear;
                    }
                    //ExcessRemittance
                    else
                    {
                        sumObjectPArrear = 0.00;
                        dr["P"] = "0.00";
                    }
                    object sumObjectNPArrear = dtSum.Compute("Sum(NPArrier)", "");
                    //23/04/2022
                    if(sumObjectNPArrear!=DBNull.Value)
                    {
                        dr["NP"] = sumObjectNPArrear;
                    }
                    else
                    {
                        sumObjectNPArrear = 0.00;
                        dr["NP"] = "0.00";
                    }
                    //Non Prized Arrear                                      
                    // objCOM.Dtnullck = balayer.GetDataTable(@"SELECT * FROM voucher WHERE ChitGroupId = " + dtB.Rows[i]["Head_Id"] + " and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "';");
                    //if (sumObjectNPArrear == DBNull.Value)
                    //{
                    //  dr["NP"] = GetSummary(Convert.ToInt32(dtB.Rows[i]["Head_Id"]));
                    //}
                    //else
                    //{

                    //    dr["NP"] = sumObjectNPArrear;

                    //    //else
                    //    //{
                    //    //    sumObjectNPArrear = 0.00;
                    //    //    dr["NP"] = "0.00";
                    //    //}
                    //}

                    //
                    //if (Totalcr != 0)
                    //{
                    //    dr["NP"] = sumObjectNPArrear;
                    //}
                    //else
                    //{
                    //    Totalcr = 0;
                    //    dr["NP"] = "0.00";
                    //}

                    object sumObjectExcess = dtSum.Compute("Sum(ExcessRemittance)", "");
                    if (sumObjectExcess != DBNull.Value)
                    {
                        dr["Excess"] = sumObjectExcess;
                    }
                    else
                    {
                        sumObjectExcess = 0.00;
                        dr["Excess"] = "0.00";
                    }
                    if (Convert.ToDecimal(sumObjectExcess) != 0.00M || Convert.ToDecimal(sumObjectNPArrear) != 0.00M || Convert.ToDecimal(sumObjectPArrear) != 0.00M)
                    {
                        dr["SNo"] = iCount + 1;
                        dtM.Rows.Add(dr.ItemArray);
                        iCount++;
                    }
                }
                else
                {
                    string strChits = "";
                    DataTable dtC = balayer.GetDataTable("SELECT concat(Cast(NodeID as char(10)),',') FROM svcf.headstree where ParentID=" + dtB.Rows[i]["Head_Id"]);
                    for (int k = 0; k < dtC.Rows.Count; k++)
                    {
                        strChits = strChits + dtC.Rows[k][0];
                    }
                    if (string.IsNullOrEmpty(strChits))
                    {
                        strChits = "0";
                    }
                    else
                    {
                        strChits = strChits.TrimEnd(',');
                    }
                    string credit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='C') then Amount else 0.00 end) as Credit FROM svcf.voucher where ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                    string debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and Head_id in (" + strChits + ")");
                    if (string.IsNullOrEmpty(credit))
                        credit = "0.00";
                    if (string.IsNullOrEmpty(debit))
                        debit = "0.00";
                    decimal decCredit = Convert.ToDecimal(credit);
                    decimal decDebit = Convert.ToDecimal(debit);

                    dr["SNo"] = iCount + 1;
                    dr["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                    dr["Excess"] = decCredit - decDebit;
                    dr["NP"] = "0.00";
                    dr["P"] = "0.00";
                    dtM.Rows.Add(dr.ItemArray);
                    iCount++;
                }
            }
            DataTable dtdebit = new DataTable();
            dtdebit.Columns.Add("SNo");
            dtdebit.Columns.Add("GrpNo");
            dtdebit.Columns.Add("prizedchitArr");

            DataRow drdebit = dtdebit.NewRow();
            int iCou = 0;
            for (int i = 0; i < (dtM.Rows.Count); i++)
            {

                drdebit["SNo"] = iCou + 1;
                drdebit["GrpNo"] = dtM.Rows[i]["GroupNo"];
                drdebit["prizedchitArr"] = dtM.Rows[i]["P"];

                dtdebit.Rows.Add(drdebit.ItemArray);
                iCou++;

            }

            return dtdebit;
        }
        public Tuple<decimal, decimal> TupleBindDecree()
        {
            //gridDecree.SettingsText.Title = "Decree Statement as on " + txtToDate.Text;
            //gridDecree.Visible = true;
            //DateTime dtFrom = Convert.ToDateTime(txtFromDate.Text).AddMonths(1);
            //DateTime dtTo = Convert.ToDateTime(txtToDate.Text).AddMonths(1);
            // DataTable dtDistinct = balayer.GetDataTable("SELECT v1.TransactionKey,ht2.NodeID, ht2.Node as Head,(sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end))  as `Cr.total`,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Bal.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Bal.Debit`,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Court.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Court.Debit`,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Advocate.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Advocate.Debit`  FROM `voucher` as v1 join headstree as ht2 on v1.Head_Id=ht2.NodeID where v1.RootID=7 and v1.BranchID=" + Session["Branchid"] + " and v1.ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by ht2.NodeID order by ht2.NodeID asc");
            DataTable dtDistinct = balayer.GetDataTable("SELECT v1.TransactionKey,ht2.NodeID, ht2.Node as Head,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Bal.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Bal.Debit`,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Court.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Court.Debit`,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Advocate.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Advocate.Debit`  FROM `voucher` as v1 join headstree as ht2 on v1.Head_Id=ht2.NodeID where v1.RootID=7 and v1.BranchID='" + drpdownBranchlist.SelectedValue + "' and v1.ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by ht2.NodeID order by ht2.NodeID asc");
            // DataTable dtDistinct1 = balayer.GetDataTable(qry);
            DataTable dtBind = new DataTable();
            DataRow dr = dtBind.NewRow();
            dtBind.Columns.Add("SlNo");
            dtBind.Columns.Add("CC No");
            dtBind.Columns.Add("EP No./OS No./ARC No./ARB No.");
            dtBind.Columns.Add("ChitName");
            dtBind.Columns.Add("Name");
            dtBind.Columns.Add("Totalamount", typeof(decimal));
            dtBind.Columns.Add("Date");
            dtBind.Columns.Add("AmountReceived", typeof(decimal));
            dtBind.Columns.Add("CreditDECREE", typeof(decimal));
            dtBind.Columns.Add("DebitDECREE", typeof(decimal));
            dtBind.Columns.Add("CreditCOST", typeof(decimal));
            dtBind.Columns.Add("DebitCOST", typeof(decimal));
            dtBind.Columns.Add("CreditAdvocate", typeof(decimal));
            dtBind.Columns.Add("DebitAdvocate", typeof(decimal));
            dtBind.Columns.Add("Description");

            int iCount = 0;
            for (int i = 0; i < dtDistinct.Rows.Count; i++)
            {

                if (Convert.ToDecimal(dtDistinct.Rows[i]["Bal.Credit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Bal.Debit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Court.Credit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Court.Debit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Advocate.Credit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Advocate.Debit"]) > 0.00M)
                {
                    dr["SlNo"] = iCount + 1;
                    dr["CC No"] = balayer.GetSingleValue("SELECT CC FROM svcf.transcourt where TransactionKey=" + dtDistinct.Rows[i]["TransactionKey"]);
                    dr["EP No./OS No./ARC No./ARB No."] = balayer.GetSingleValue("SELECT Number FROM svcf.transcourt where TransactionKey=" + dtDistinct.Rows[i]["TransactionKey"]);
                    dr["ChitName"] = balayer.GetSingleValue("SELECT ChitName FROM svcf.chitheads where HeadId=" + dtDistinct.Rows[i]["NodeID"]);
                    dr["Name"] = balayer.GetSingleValue("SELECT MemberName FROM svcf.chitheads where HeadId=" + dtDistinct.Rows[i]["NodeID"]);

                    string amtRec = Convert.ToString(balayer.GetSingleValue("select t1.Amount as `Credit` from voucher as t1 left Join headstree as t3 on t1.Head_ID=t3.NodeID left join membermaster as t4 on t4.MemberIDNew=t1.MemberID left join headstree as t8 on (t1.ChitGroupID=t8.NodeID) left join headstree as t9 on (t9.NodeID=t1.Head_Id) left join headstree as t10 on (t10.NodeID=t9.ParentID)where t1.Voucher_Type='C' and `t1`.`BranchID` ='" + drpdownBranchlist.SelectedValue + "'  and `t1`.`RootID` = 7  and t1.Amount<>0 and t1.ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and t1.IsDeleted=0 and t1.Head_Id=" + dtDistinct.Rows[i]["NodeID"] + " order by t1.ChoosenDate desc Limit 1"));
                    if (amtRec != "")
                    {

                        //dr["AmountReceived"] = Convert.ToDecimal(balayer.GetSingleValue("select (case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )as `Credit` from voucher as t1 left Join headstree as t3 on t1.Head_ID=t3.NodeID left join membermaster as t4 on t4.MemberIDNew=t1.MemberID left join headstree as t8 on (t1.ChitGroupID=t8.NodeID) left join headstree as t9 on (t9.NodeID=t1.Head_Id) left join headstree as t10 on (t10.NodeID=t9.ParentID)where  `t1`.`BranchID` =" + Session["Branchid"] + " and `t1`.`RootID` = 7  and t1.Amount<>0 and t1.ChoosenDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and t1.IsDeleted=0 and t1.Head_Id=" + dtDistinct.Rows[i]["NodeID"] + " order by t1.ChoosenDate desc Limit 1"));
                        dr["AmountReceived"] = Convert.ToDecimal(balayer.GetSingleValue("select t1.Amount as `Credit` from voucher as t1 left Join headstree as t3 on t1.Head_ID=t3.NodeID left join membermaster as t4 on t4.MemberIDNew=t1.MemberID left join headstree as t8 on (t1.ChitGroupID=t8.NodeID) left join headstree as t9 on (t9.NodeID=t1.Head_Id) left join headstree as t10 on (t10.NodeID=t9.ParentID)where t1.Voucher_Type='C' and `t1`.`BranchID` ='" + drpdownBranchlist.SelectedValue + "'  and `t1`.`RootID` = 7  and t1.Amount<>0 and t1.ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and t1.IsDeleted=0 and t1.Head_Id=" + dtDistinct.Rows[i]["NodeID"] + " order by t1.ChoosenDate desc Limit 1"));
                        dr["Totalamount"] = Convert.ToDecimal(balayer.GetSingleValue("select(sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end))  as `Cr.total`FROM `voucher` as v1  join headstree as ht2 on v1.Head_Id=ht2.NodeID where v1.RootID=7 and v1.BranchID='" + drpdownBranchlist.SelectedValue + "'  and ht2.NodeID=" + dtDistinct.Rows[i]["NodeID"] + " and v1.ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'"));
                    }
                    else
                    {
                        dr["AmountReceived"] = "0.00";
                        dr["Totalamount"] = "0.00";
                    }
                    string date = balayer.GetSingleValue("select DATE_FORMAT( t1.`ChoosenDate`, '%d/%m/%Y') as `Date`from voucher as t1 left Join headstree as t3 on t1.Head_ID=t3.NodeID left join membermaster as t4 on t4.MemberIDNew=t1.MemberID left join headstree as t8 on (t1.ChitGroupID=t8.NodeID) left join headstree as t9 on (t9.NodeID=t1.Head_Id) left join headstree as t10 on (t10.NodeID=t9.ParentID)where t1.Voucher_Type='C' and `t1`.`BranchID` ='" + drpdownBranchlist.SelectedValue + "' and `t1`.`RootID` = 7  and t1.Amount<>0 and t1.ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and t1.IsDeleted=0 and t1.Head_Id=" + dtDistinct.Rows[i]["NodeID"] + " order by t1.ChoosenDate desc Limit 1");
                    if (date != "")
                    {
                        dr["Date"] = balayer.GetSingleValue("select DATE_FORMAT( t1.`ChoosenDate`, '%d/%m/%Y') as `Date`from voucher as t1 left Join headstree as t3 on t1.Head_ID=t3.NodeID left join membermaster as t4 on t4.MemberIDNew=t1.MemberID left join headstree as t8 on (t1.ChitGroupID=t8.NodeID) left join headstree as t9 on (t9.NodeID=t1.Head_Id) left join headstree as t10 on (t10.NodeID=t9.ParentID)where t1.Voucher_Type='C' and `t1`.`BranchID` ='" + drpdownBranchlist.SelectedValue + "' and `t1`.`RootID` = 7  and t1.Amount<>0 and t1.ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and t1.IsDeleted=0 and t1.Head_Id=" + dtDistinct.Rows[i]["NodeID"] + " order by t1.ChoosenDate desc Limit 1");
                        dr["Totalamount"] = Convert.ToDecimal(balayer.GetSingleValue("select(sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end))  as `Cr.total`FROM `voucher` as v1  join headstree as ht2 on v1.Head_Id=ht2.NodeID where v1.RootID=7 and v1.BranchID='" + drpdownBranchlist.SelectedValue + "'  and ht2.NodeID=" + dtDistinct.Rows[i]["NodeID"] + " and v1.ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'"));
                        // dr["Totalamount"] = Convert.ToDecimal(dtDistinct.Rows[i]["Cr.total"]);
                    }
                    else
                    {
                        dr["Date"] = "";
                        dr["Totalamount"] = "0.00";
                    }


                    dr["CreditDECREE"] = dtDistinct.Rows[i]["Bal.Credit"];
                    dr["DebitDECREE"] = dtDistinct.Rows[i]["Bal.Debit"];
                    dr["CreditCOST"] = dtDistinct.Rows[i]["Court.Credit"];
                    dr["DebitCOST"] = dtDistinct.Rows[i]["Court.Debit"];
                    //Advocate
                    dr["CreditAdvocate"] = dtDistinct.Rows[i]["Advocate.Credit"];
                    dr["DebitAdvocate"] = dtDistinct.Rows[i]["Advocate.Debit"];
                    dr["Description"] = "";
                    dtBind.Rows.Add(dr.ItemArray);
                    iCount++;
                }
            }
            //   dtBind.Rows.Add(dr.ItemArray);
            //   }
            decimal decreedebit = 0;
            decimal decreecort = 0;
            if (dtBind.Rows.Count > 0)
            {
                decimal Deecreeamount = Convert.ToDecimal(dtBind.Compute("sum(AmountReceived)", ""));
                decimal Deecreetotal = Convert.ToDecimal(dtBind.Compute("sum(Totalamount)", ""));
                decimal DeecreeCR = Convert.ToDecimal(dtBind.Compute("sum(CreditDECREE)", ""));
                decimal DeecreeDR = Convert.ToDecimal(dtBind.Compute("sum(DebitDECREE)", ""));
                decimal CostCR = Convert.ToDecimal(dtBind.Compute("sum(CreditCOST)", ""));
                decimal CostDR = Convert.ToDecimal(dtBind.Compute("sum(DebitCOST)", ""));
                decimal AdvocateCR = Convert.ToDecimal(dtBind.Compute("sum(CreditAdvocate)", ""));
                decimal AdvocateDR = Convert.ToDecimal(dtBind.Compute("sum(DebitAdvocate)", ""));

                decimal Costval = CostCR - CostDR;
                decimal Advocateval = AdvocateCR - AdvocateDR;



                decreedebit = DeecreeCR - DeecreeDR;
                decreecort = Advocateval + Costval;

            }

            return Tuple.Create(Math.Abs(decreedebit), Math.Abs(decreecort));


        }


        public DataTable BindForeman()
        {
            int CSCCallId = 0, CSCPrizedId = 0;
            double PrizedCSCDebitValue = 0;
            double PrizedCSCCreditValue = 0;

            double CallCSCDebitValue = 0, CallCSCCreditValue = 0;



            //string str = @"select t3.Node as Heads , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '5,44%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `RCM1_Credit`,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '5,45%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `RCM2_Credit`,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '5,43%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Cc_Credit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + Session["Branchid"] + " and `t1`.`RootID` = 5  and (t3.TreeHint like '5,44%' or t3.TreeHint like '5,45%') and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' group by `t1`.`Head_ID`";
            DataTable dt = balayer.GetDataTable("select * from groupmaster where BranchID='" + drpdownBranchlist.SelectedValue + "'");

            DataTable dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            dtB.Columns.Add("ChitValue");
            dtB.Columns.Add("NoofMembers");
            DataRow drB = dtB.NewRow();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt.Rows[i]["Head_Id"]);
                if (dtTerminated.Rows.Count > 0)
                {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    drB["ChitValue"] = dt.Rows[i]["ChitValue"];
                    drB["NoofMembers"] = dt.Rows[i]["NoofMembers"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }

            DataTable dtM = new DataTable();
            dtM.Columns.Add("SNo");
            dtM.Columns.Add("ChitNumber", typeof(string));
            dtM.Columns.Add("PrizeMoney", typeof(decimal));
            dtM.Columns.Add("CallAmount", typeof(decimal));
            dtM.Columns.Add("BalancePayable", typeof(decimal));
            dtM.Columns.Add("CallAmountPaid", typeof(decimal));
            dtM.Columns.Add("NoofInstalmentsPaid");//
            DataRow dr = dtM.NewRow();
            //dr["SNo"] = "I";
            //dr["ChitNumber"] = "Foreman Chits";
            //dtM.Rows.Add(dr.ItemArray);
            int iCount = 0;

            string sA = balayer.GetSingleValue("set group_concat_max_len=30000; " +
                "SELECT cast(group_concat( GroupmemberID) as char) FROM svcf.removedmaster where (fromdate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')");
            DataTable dt1 = balayer.GetDataTable("SELECT * FROM svcf.membertogroupmaster where  Head_Id in (" + sA + ") and BranchID='" + drpdownBranchlist.SelectedValue + "'");

            iCount = 0;
            decimal sumAmnt = 0;
            string sumsingle = "";
            string sumcsc = "";
            string sumcsccl = "";

            string sumauct = "";
            DataRow dr1 = dtM.NewRow();
            dr1["SNo"] = "II";
            dr1["ChitNumber"] = "CSC Chits";
            dtM.Rows.Add(dr1.ItemArray);
            string qry = "";
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                int sum = Convert.ToInt32(balayer.GetSingleValue("SELECT NoofMembers FROM svcf.groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]));
                int iSum = Convert.ToInt32(balayer.GetSingleValue("SELECT count(*) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                ////Foreman Prized Id
                qry = "select NodeID from headstree where parentid = 49 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dt1.Rows[i]["GroupID"] + " and GrpMemberID='" + dt1.Rows[i]["GrpMemberID"] + "')";
                CSCCallId = balayer.GetScalarDataInt(qry);

                qry = "select NodeID from headstree where parentid = 50 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dt1.Rows[i]["GroupID"] + " and GrpMemberID='" + dt1.Rows[i]["GrpMemberID"] + "')";
                CSCPrizedId = balayer.GetScalarDataInt(qry);

                qry = "select sum(Amount) from voucher where Head_Id=" + CSCCallId + " and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'";
                PrizedCSCCreditValue = balayer.GetScalarDataDbl(qry);

                qry = "select sum(Amount) from voucher where Head_Id=" + CSCCallId + " and Voucher_Type='D' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'";
                PrizedCSCDebitValue = balayer.GetScalarDataDbl(qry);


                qry = "select sum(Amount) from voucher where Head_Id=" + CSCPrizedId + " and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'";
                CallCSCCreditValue = balayer.GetScalarDataDbl(qry);

                qry = "select sum(Amount) from voucher where Head_Id=" + CSCPrizedId + " and Voucher_Type='D' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'";
                CallCSCDebitValue = balayer.GetScalarDataDbl(qry);



                if (sum == iSum)
                {
                    //Sum of prized id(c) - sum of prized id(d) = 0
                    if ((PrizedCSCCreditValue - PrizedCSCDebitValue) != 0 && (CallCSCCreditValue - CallCSCDebitValue) != 0)
                    {
                        dr["SNo"] = iCount + 1;
                        dr["ChitNumber"] = dt1.Rows[i]["GrpMemberID"];
                        DataTable dtG = new DataTable();
                        dtG = balayer.GetDataTable("select * from groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]);
                        string dddd = balayer.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber=" + dt1.Rows[i]["Head_Id"] + " and BranchID= '" + drpdownBranchlist.SelectedValue + "' and PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                        string ssss = balayer.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and PrizedMemberID=" + dt1.Rows[i]["Head_Id"]);
                        //ssss = balayer.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]);
                        //              //jeya-nandha 12-06-2016
                        if (!(string.IsNullOrEmpty(dddd)))
                        {
                            // sumcsc = balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "'");
                            //// sumcsccl = balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "'");
                            // sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                            sumcsc = balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id in (select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                            sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");

                        }


                        if (string.IsNullOrEmpty(dddd))
                        {
                            dr["PrizeMoney"] = 0.00;
                            dr["CallAmount"] = 0.00;
                            dr["BalancePayable"] = 0.00;
                            dr["CallAmountPaid"] = Convert.ToDecimal(balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                            dr["NoofInstalmentsPaid"] = iSum;
                        }
                        else
                        {
                            sumauct = balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]);

                            //if (!(string.IsNullOrEmpty(sumcsc)))
                            if (string.IsNullOrEmpty(sumcsc))
                            {
                                dr["PrizeMoney"] = Convert.ToDecimal(ssss) + Convert.ToDecimal(sumcsc);
                            }
                            else
                            {
                                dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                            }

                            //                   //jeya
                            if (!(string.IsNullOrEmpty(sumcsccl)))
                            {
                                dr["CallAmount"] = Convert.ToDecimal(sumcsccl);
                            }
                            else
                            {
                                dr["CallAmount"] = 0.00;
                                sumcsccl = null;
                            }
                            //dr["BalancePayable"] = Convert.ToDecimal(ssss) - Convert.ToDecimal(balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));

                            sumsingle = balayer.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                            if (sumsingle != "")
                            {
                                sumAmnt = Convert.ToDecimal(sumsingle);
                            }
                            //dr["BalancePayable"] = Convert.ToDecimal(ssss) - Convert.ToDecimal(balayer.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id="+dt1 .Rows [i]["Head_Id"]+" and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0"));
                            if (!(string.IsNullOrEmpty(sumcsc)))
                            {
                                dr["BalancePayable"] = (Convert.ToDecimal(sumcsc)) - (Convert.ToDecimal(sumcsccl));
                            }
                            else if (!(string.IsNullOrEmpty(sumcsccl)))
                            {
                                // dr["BalancePayable"] = Convert.ToDecimal(sumcsc) - Convert.ToDecimal(sumcsccl);
                                dr["BalancePayable"] = Convert.ToDecimal(sumcsc);
                            }
                            else
                            {
                                dr["BalancePayable"] = Convert.ToDecimal(sumcsc);
                            }

                            dr["CallAmountPaid"] = 0.00;
                            dr["NoofInstalmentsPaid"] = iSum;
                        }

                        dtM.Rows.Add(dr.ItemArray);
                        iCount++;
                    }
                    else
                    {


                    }

                }
                else if (sum != iSum)
                {
                    dr["SNo"] = iCount + 1;
                    dr["ChitNumber"] = dt1.Rows[i]["GrpMemberID"];
                    DataTable dtG = new DataTable();
                    dtG = balayer.GetDataTable("select * from groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]);
                    string dddd = balayer.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber=" + dt1.Rows[i]["Head_Id"] + " and BranchID='" + drpdownBranchlist.SelectedValue + "' and PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                    string ssss = balayer.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and PrizedMemberID=" + dt1.Rows[i]["Head_Id"]);

                    if (!(string.IsNullOrEmpty(dddd)))
                    {
                        //sumcsc = balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "'");

                        //sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                        sumcsc = balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id in (select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                        sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                    }


                    if (string.IsNullOrEmpty(dddd))
                    {
                        dr["PrizeMoney"] = 0.00;
                        dr["CallAmount"] = 0.00;
                        dr["BalancePayable"] = 0.00;
                        // dr["CallAmountPaid"] = Convert.ToDecimal(balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                        dr["CallAmountPaid"] = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                        dr["NoofInstalmentsPaid"] = iSum;
                    }
                    else
                    {
                        sumauct = balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]);

                        if ((string.IsNullOrEmpty(sumcsc)))
                        {
                            dr["PrizeMoney"] = Convert.ToDecimal(ssss) + Convert.ToDecimal(sumcsc);
                            //dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                        }
                        else
                        {
                            //dr["PrizeMoney"] = Convert.ToDecimal(ssss);
                            dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                        }

                        //                   //jeya
                        if (!(string.IsNullOrEmpty(sumcsccl)))
                        {
                            dr["CallAmount"] = Convert.ToDecimal(sumcsccl);
                        }
                        else
                        {
                            dr["CallAmount"] = 0.00;
                            sumcsccl = null;
                        }

                        sumsingle = balayer.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                        if (sumsingle != "")
                        {
                            sumAmnt = Convert.ToDecimal(sumsingle);
                        }

                        if (!(string.IsNullOrEmpty(sumcsc)))
                        {
                            if (Convert.ToDecimal(sumcsc) > Convert.ToDecimal(sumcsccl))
                            {
                                dr["BalancePayable"] = (Convert.ToDecimal(sumcsc)) - (Convert.ToDecimal(sumcsccl));
                            }
                            else
                            {
                                dr["BalancePayable"] = (Convert.ToDecimal(sumcsccl)) - (Convert.ToDecimal(sumcsc));
                            }

                        }
                        else if (!(string.IsNullOrEmpty(sumcsccl)))
                        {
                            dr["BalancePayable"] = Convert.ToDecimal(sumcsc) - Convert.ToDecimal(sumcsccl);
                        }
                        else
                        {
                            dr["BalancePayable"] = Convert.ToDecimal(sumcsc);
                        }

                        dr["CallAmountPaid"] = 0.00;
                        dr["NoofInstalmentsPaid"] = iSum;
                    }

                    dtM.Rows.Add(dr.ItemArray);
                    iCount++;
                }
                else
                {
                    DataTable st = balayer.GetDataTable("SELECT insertkey_from_bin(DualTransactionKey) FROM svcf.voucher where Head_id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='D' and ChoosenDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                    for (int k = 0; k < st.Rows.Count; k++)
                    {
                        DataTable sdsd = balayer.GetDataTable("select * from voucher where Voucher_Type='C' and Head_Id=00069");
                        if (sdsd.Rows.Count <= 0)
                        {
                            dr["SNo"] = iCount + 1;
                            dr["ChitNumber"] = dt1.Rows[i]["GrpMemberID"];
                            DataTable dtG = balayer.GetDataTable("select * from groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]);

                            string dddd = balayer.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber=" + dt1.Rows[i]["Head_Id"] + " and BranchID= '" + drpdownBranchlist.SelectedValue + "' and PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                            string ssss = balayer.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and PrizedMemberID=" + dt1.Rows[i]["Head_Id"]);


                            if (!(string.IsNullOrEmpty(dddd)))
                            {
                                //sumcsc = balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "'");
                                //sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id=(select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                                sumcsc = balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id in (select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                                sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "')as 'Amount'");
                            }

                            if (string.IsNullOrEmpty(dddd))
                            {
                                sumcsc = balayer.GetSingleValue("select sum(amount) from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + ") and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

                                dr["PrizeMoney"] = 0.00;
                                dr["CallAmount"] = 0.00;
                                dr["BalancePayable"] = 0.00;
                                dr["CallAmountPaid"] = Convert.ToDecimal(balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                                dr["NoofInstalmentsPaid"] = iSum;
                            }
                            else
                            {
                                if ((string.IsNullOrEmpty(sumcsc)))
                                {
                                    dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                                }
                                else
                                {
                                    dr["PrizeMoney"] = Convert.ToDecimal(ssss);
                                }
                                dr["CallAmount"] = Convert.ToDecimal(sumcsccl);

                                sumsingle = balayer.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0 and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                                if (sumsingle != "")
                                {
                                    sumcsc = balayer.GetSingleValue("select sum(amount) from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + ") and Voucher_Type='C' and ChoosenDate <= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");
                                    sumAmnt = Convert.ToDecimal(sumsingle) + Convert.ToDecimal(sumcsc);
                                }
                                if (Convert.ToDecimal(sumcsc) > Convert.ToDecimal(sumcsccl))
                                {
                                    dr["BalancePayable"] = (Convert.ToDecimal(sumcsc)) - (Convert.ToDecimal(sumcsccl));
                                }
                                else
                                {
                                    dr["BalancePayable"] = (Convert.ToDecimal(sumcsccl)) - (Convert.ToDecimal(sumcsc));
                                }


                                dr["CallAmountPaid"] = 0.00;
                                dr["NoofInstalmentsPaid"] = iSum;
                            }
                            dtM.Rows.Add(dr.ItemArray);
                            iCount++;
                            break;
                        }
                    }
                }
            }
            decimal decCallAmount2 = 0;
            if (dtM.Rows.Count > 0)
            {
                //  decCallAmount2 = Convert.ToDecimal(dtM.Compute("sum(CallAmountPaid)", ""));
            }

            DataTable dttM = new DataTable();
            dttM.Columns.Add("ChitNumber", typeof(string));
            dttM.Columns.Add("CallAmountPaid", typeof(decimal));

            DataRow drr = dttM.NewRow();




            List<string> chits = new List<string>();
            List<decimal> values = new List<decimal>();
            for (int a = 0; a < dtM.Rows.Count; a++)
            {
                var ss = dtM.Rows[a]["CallAmountPaid"].ToString();
                if (ss != "")
                {
                    if (Convert.ToDecimal(dtM.Rows[a]["CallAmountPaid"]) != 0)
                    {
                        var chitvalues = dtM.Rows[a]["ChitNumber"].ToString();
                        int index = chitvalues.IndexOf("/");
                        if (index > 0)
                        {
                            chitvalues = chitvalues.Substring(0, index);
                            chits.Add(chitvalues);
                            values.Add(Convert.ToDecimal(dtM.Rows[a]["CallAmountPaid"]));
                        }
                    }
                }
            }
            int kk = 1;

            for (int i = 0; i < chits.Count; i++)
            {

                var total = values[i];
                for (int j = kk; j < chits.Count; j++)
                {
                    if (chits[i] == chits[j])
                    {
                        total += values[j];
                        values.RemoveAt(j);
                        chits.RemoveAt(j);
                    }
                }
                drr["CallAmountPaid"] = total;
                drr["ChitNumber"] = chits[i];
                dttM.Rows.Add(drr.ItemArray);
                kk++;

            }

            return dttM;

        }


        public decimal BindOutstanding1()
        {

            DataTable dtHeads = balayer.GetDataTable("select cast(concat(PrizedMemberID,'',',')as char) from svcf.auctiondetails join trans_payment tp where tp.TokenNumber=auctiondetails.PrizedMemberID and tp.DrawNo=auctiondetails.DrawNO and tp.ChitGroupId=auctiondetails.GroupID and tp.PaymentDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and IsPrized='Y'  and auctiondetails.AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and auctiondetails.BranchId='" + drpdownBranchlist.SelectedValue + "' ");

            string sHeads = "";


            if (dtHeads.Rows.Count <= 0)
            {
            }
            else
            {
                for (int i = 0; i < dtHeads.Rows.Count; i++)
                {
                    sHeads += balayer.ToobjectstrEvenNull(dtHeads.Rows[i][0]);
                }
                sHeads = sHeads.TrimEnd(',').Replace(",,", ",");
                sHeads = " and auctiondetails.prizedMemberID not  in (" + sHeads + ")";
            }


            string str = @"SELECT `auctiondetails`.`PrizedMemberID`,`membertogroupmaster`.`GrpMemberID` AS `Chit Number`,`membertogroupmaster`.`GroupID` AS `GroupId`,`auctiondetails`.`DrawNO` AS `Instmnt`,DATE_FORMAT(`auctiondetails`.`AuctionDate`,'%d/%m/%Y') AS `Date`,`membertogroupmaster`.`MemberName` as `Name of the Subscriber`,(`auctiondetails`.`PrizedAmount`) AS `PrizedMoney1`,if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`auctiondetails`.`PrizedAmount`+`commissiondetails`.`Commission`),0.0) AS `Kasar`,(`auctiondetails`.`PrizedAmount` +`auctiondetails`.`KasarAmount`) as `Total`, if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`,`commissiondetails`.`ChitValue` AS `PrizeMoney2`, '' AS Arrears FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` and  `auctiondetails`.`BranchID`='" + drpdownBranchlist.SelectedValue + "' and auctiondetails.AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'" + sHeads + "";

            DataTable dt = new DataTable();
            dt = balayer.GetDataTable(str);

            DataTable unpaiddt = balayer.GetDataTable("select (case when (sum(case when t1.Voucher_Type='C' and t1.Head_Id=46 then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' and t1.Head_Id=46 then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' and t1.Head_Id=46 then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' and t1.Head_Id=46 then t1.Amount else 0.00 end ) else 0.00 end ) as `Amount` from voucher as t1  where `t1`.`BranchID` ='" + drpdownBranchlist.SelectedValue + "' and t1.ChoosenDate <='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "'");

            // dt.Merge(unpaiddt);

            DataTable dtBind = new DataTable();
            dtBind.Columns.Add("SNo");
            dtBind.Columns.Add("ChitNumber");
            dtBind.Columns.Add("GroupId");
            dtBind.Columns.Add("PrizedMemberID");
            dtBind.Columns.Add("Instmnt");
            dtBind.Columns.Add("Date");
            dtBind.Columns.Add("NameoftheSubscriber");
            dtBind.Columns.Add("OutPrizedMoney", typeof(decimal));
            dtBind.Columns.Add("OutKasar", typeof(decimal));
            dtBind.Columns.Add("OutTotal", typeof(decimal));
            dtBind.Columns.Add("UnpaidCommision", typeof(decimal));
            dtBind.Columns.Add("UnpaidPrizeMoney", typeof(decimal));
            dtBind.Columns.Add("AmountActuallyremittedbytheParty", typeof(decimal));
            dtBind.Columns.Add("Arrears");
            dtBind.Columns.Add("UnpaidPrizeMoneyPayable");
            dtBind.Columns.Add("Remarks");
            DataRow drBind = dtBind.NewRow();
            int mmmm = 0;
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (balayer.ToobjectstrEvenNull(dt.Rows[i]["Chit Number"]) == "CX-31-4" || balayer.ToobjectstrEvenNull(dt.Rows[i]["Chit Number"]) == "CX-31/25")
                { }
                else
                {
                    drBind["SNo"] = mmmm + 1;
                    drBind["ChitNumber"] = dt.Rows[i]["Chit Number"];
                    drBind["Instmnt"] = dt.Rows[i]["Instmnt"];
                    drBind["Date"] = dt.Rows[i]["Date"];
                    drBind["NameoftheSubscriber"] = dt.Rows[i]["Name of the Subscriber"];
                    drBind["OutPrizedMoney"] = dt.Rows[i]["PrizedMoney1"];
                    drBind["OutKasar"] = dt.Rows[i]["Kasar"];
                    drBind["OutTotal"] = dt.Rows[i]["Total"];
                    drBind["UnpaidCommision"] = dt.Rows[i]["Commision"];
                    drBind["UnpaidPrizeMoney"] = dt.Rows[i]["PrizeMoney2"];


                    string sdfgd = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID= '" + drpdownBranchlist.SelectedValue + "' and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

                    if (string.IsNullOrEmpty(sdfgd))
                    {
                        drBind["AmountActuallyremittedbytheParty"] = "0.00"; ;
                    }
                    else
                    {
                        drBind["AmountActuallyremittedbytheParty"] = sdfgd;
                    }
                    string TotaldueAmount = "";

                    TotaldueAmount = balayer.GetSingleValue(@"select sum(CurrentDueAmount) from auctiondetails where GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and AuctionDate<='" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "';");

                    string nparr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID='" + drpdownBranchlist.SelectedValue + "' and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                    if (string.IsNullOrEmpty(nparr))
                    {
                        drBind["Arrears"] = "0.00";
                    }
                    else
                    {
                        drBind["Arrears"] = nparr;
                    }

                    //drBind["Arrears"] = "";
                    drBind["UnpaidPrizeMoneyPayable"] = "";
                    drBind["Remarks"] = "";
                    dtBind.Rows.Add(drBind.ItemArray);
                    mmmm++;
                }



            }
            for (int i = 0; i < unpaiddt.Rows.Count; i++)
            {
                drBind["SNo"] = mmmm + 1;
                drBind["ChitNumber"] = "";
                drBind["Instmnt"] = "";
                drBind["Date"] = "";
                drBind["GroupId"] = "";
                drBind["NameoftheSubscriber"] = "";
                drBind["OutPrizedMoney"] = "0.00";
                drBind["OutKasar"] = "0.00";
                drBind["OutTotal"] = "0.00";
                drBind["UnpaidCommision"] = "0.00";
                drBind["UnpaidPrizeMoney"] = "0.00";
                drBind["AmountActuallyremittedbytheParty"] = "0.00";
                drBind["Arrears"] = "0.00";
                drBind["UnpaidPrizeMoneyPayable"] = unpaiddt.Rows[i]["Amount"];
                dtBind.Rows.Add(drBind.ItemArray);
            }
            decimal unprizedunpaid = 0;
            decimal AmountActuallyRemittence = 0;
            decimal value = 0;
            if (dtBind.Rows.Count != 0)
            {
                unprizedunpaid = Convert.ToDecimal(dtBind.Compute("sum(UnpaidPrizeMoney)", ""));
                AmountActuallyRemittence = Convert.ToDecimal(dtBind.Compute("sum(AmountActuallyremittedbytheParty)", ""));
                value = unprizedunpaid - AmountActuallyRemittence;
            }
            return value;

        }


        public void ST24XLwrite1()
        {
            DataTable Mergetbl = new DataTable();
            System.Data.DataTable BindChitTrial = BindChitTrial111();
            System.Data.DataTable PrizedchitArr = BindExcessandArrearTerminated();
            Mergetbl.Columns.Add("SNo");
            Mergetbl.Columns.Add("GrpNo");
            Mergetbl.Columns.Add("GdebitlessKasar", typeof(decimal));
            //Mergetbl.Columns.Add("GrpNo1");
            Mergetbl.Columns.Add("prizedchitArr", typeof(decimal));
            Mergetbl.Columns.Add("prizedSubscribers", typeof(decimal));
            DataRow drMerge = Mergetbl.NewRow();
            int iCou = 0;
            decimal sumofGdebitlessKasar = 0;
            decimal sumofprizedchitArr = 0;
            decimal sumofprizedSubscribers = 0;
            decimal PrizedKasarTotal = 0;
            decimal total = 0;
            decimal prized = 0;
            if (BindChitTrial.Rows.Count != 0)
            {
                for (int i = 0; i < BindChitTrial.Rows.Count; i++)
                {
                    decimal prizedsubscriber = 0;
                    decimal debitlesskasar = 0;
                    decimal prizedchitar = 0;
                    decimal GdebitlessKasar = 0;
                    decimal prizedchitArr = 0;

                    GdebitlessKasar = Convert.ToDecimal(BindChitTrial.Rows[i]["GdebitlessKasar"]);
                    prizedchitArr = Convert.ToDecimal(BindChitTrial.Rows[i]["prizedchitArr"]);
                    prized = Convert.ToDecimal(BindChitTrial.Rows[i]["Prized"]);
                    drMerge["SNo"] = Convert.ToString(BindChitTrial.Rows[i]["SNo"]);
                    drMerge["GrpNo"] = Convert.ToString(BindChitTrial.Rows[i]["GrpNo"]);
                    prized = Convert.ToDecimal(BindChitTrial.Rows[i]["Prized"]);
                    drMerge["GdebitlessKasar"] = Convert.ToDecimal(BindChitTrial.Rows[i]["GdebitlessKasar"]);
                    debitlesskasar = Convert.ToDecimal(BindChitTrial.Rows[i]["GdebitlessKasar"]);
                    sumofGdebitlessKasar = sumofGdebitlessKasar + debitlesskasar;
                    prizedchitar = Convert.ToDecimal(BindChitTrial.Rows[i]["prizedchitArr"]);
                    drMerge["prizedchitArr"] = Convert.ToDecimal(BindChitTrial.Rows[i]["prizedchitArr"]);
                    sumofprizedchitArr = sumofprizedchitArr + prizedchitar;


                    PrizedKasarTotal = PrizedKasarTotal + prized;

                    drMerge["prizedSubscribers"] = debitlesskasar - prizedchitar;
                    prizedsubscriber = debitlesskasar - prizedchitar;
                    sumofprizedSubscribers = sumofprizedSubscribers + prizedsubscriber;

                    Mergetbl.Rows.Add(drMerge.ItemArray);
                }
            }

            var tupleval = TupleBindDecree();
            decimal decree1 = tupleval.Item1;
            decimal debcourt = tupleval.Item2;
            DataTable cscchitprized = BindForeman();



            decimal balancepayablesubscribe = BindOutstanding1();


            //string folderPath = "C:\\Exceltest\\";
            //if (!Directory.Exists(folderPath))
            //{
            //    Directory.CreateDirectory(folderPath);
            //}
            string filename = "CHITDEBITDETAILS" + DateTime.Now.Second.ToString();


            try
            {

                using (XLWorkbook wb = new XLWorkbook())
                {
                    int logo = 1;
                    int branch = 2;
                    int date = 3;
                    int CREDIT = 4;
                    int SNo1 = 5;
                    int num = 6;
                    var ws = wb.Worksheets.Add("CHITDEBITDETAILS");
                    for (int i = 0; i < 2; i++)
                    {
                        //var ws = wb.Worksheets.Add(CreditDt, "Tr. P&L St-02");

                        AddImage(wb, "CHITDEBITDETAILS", 1, logo, "imglogo.png");

                        ws.Cell(logo, 8).Value = "Statement No. 24";
                        ws.Range(logo, 8, logo, 9).Merge().AddToNamed("Titles");

                        ws.Cell(logo, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(logo, 2).Style.Font.Bold = true;
                        ws.Cell(logo, 2).Style.Font.FontSize = 14;


                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                            ws.Cell(branch, 2).Style.Font.Bold = true;
                            ws.Cell(branch, 2).Style.Font.FontSize = 13;
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                            ws.Cell(branch, 2).Style.Font.Bold = true;
                            ws.Cell(branch, 2).Style.Font.FontSize = 13;
                        }
                        else
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                            ws.Cell(branch, 2).Style.Font.Bold = true;
                            ws.Cell(branch, 2).Style.Font.FontSize = 13;
                        }


                        ws.Cell(date, 1).Value = "CHIT DEBIT DETAILS AS AT " + txtToDate.Text;
                        ws.Cell(date, 1).Style.Font.Bold = true;
                        ws.Cell(date, 1).Style.Font.FontSize = 13;
                        ws.Range(date, 1, date, 8).Merge().AddToNamed("Titles");




                        ws.Cell(SNo1, 1).Value = "Sl. No.";
                        ws.Cell(SNo1, 1).Style.Font.Bold = true;
                        ws.Cell(SNo1, 1).Style.Font.FontSize = 11;
                        ws.Range(SNo1, 1, num, 1).Merge();

                        ws.Cell(SNo1, 2).Value = "Group Number";
                        ws.Cell(SNo1, 2).Style.Font.Bold = true;
                        ws.Cell(SNo1, 2).Style.Font.FontSize = 11;
                        ws.Range(SNo1, 2, num, 2).Merge();

                        ws.Cell(SNo1, 3).Value = "Gross Debit Less Prized Dividend";
                        ws.Cell(SNo1, 3).Style.Font.Bold = true;
                        ws.Cell(SNo1, 3).Style.Font.FontSize = 11;
                        ws.Range(SNo1, 3, num, 3).Merge();

                        ws.Cell(SNo1, 4).Value = "Less Arrears from Prized Subscribers";
                        ws.Cell(SNo1, 4).Style.Font.Bold = true;
                        ws.Cell(SNo1, 4).Style.Font.FontSize = 11;
                        ws.Cell(SNo1, 4).Style.Alignment.WrapText = true;
                        ws.Range(SNo1, 4, num, 4).Merge();

                        ws.Cell(SNo1, 5).Value = "Share amount due from prized Subscribers";
                        ws.Cell(SNo1, 5).Style.Font.Bold = true;
                        ws.Cell(SNo1, 5).Style.Font.FontSize = 11;
                        ws.Cell(SNo1, 5).Style.Alignment.WrapText = true;
                        ws.Range(SNo1, 5, num, 5).Merge();


                        ws.Cell(SNo1, 6).Value = "Call amount paid for Non Prized Foreman Substituted Chits";
                        ws.Cell(SNo1, 6).Style.Font.Bold = true;
                        ws.Cell(SNo1, 6).Style.Font.FontSize = 11;
                        ws.Range(SNo1, 6, num, 6).Merge();

                        ws.Cell(SNo1, 7).Value = "Amount in Decree Account";
                        ws.Cell(SNo1, 7).Style.Font.Bold = true;
                        ws.Cell(SNo1, 7).Style.Font.FontSize = 11;
                        ws.Range(SNo1, 7, num, 7).Merge();


                        ws.Cell(SNo1, 8).Value = "Amount in Court Cost Account";
                        ws.Cell(SNo1, 8).Style.Font.Bold = true;
                        ws.Cell(SNo1, 8).Style.Font.FontSize = 11;
                        ws.Range(SNo1, 8, num, 8).Merge();

                        ws.Cell(SNo1, 9).Value = "";
                        ws.Cell(SNo1, 9).Style.Font.Bold = true;
                        ws.Cell(SNo1, 9).Style.Font.FontSize = 11;
                        ws.Range(SNo1, 9, num, 9).Merge();

                        var rangedbr213 = ws.Range(ws.Cell(SNo1, 1), ws.Cell(num, 9));
                        rangedbr213.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        rangedbr213.Style.Border.InsideBorder = XLBorderStyleValues.Double;

                        logo = logo + 43;
                        branch = branch + 43;
                        date = date + 43;
                        CREDIT = CREDIT + 43;
                        SNo1 = SNo1 + 43;
                        num = num + 43;

                        //var rangedbr213 = ws.Range(ws.Cell(logo, 1), ws.Cell(num, 9));
                        //rangedbr213.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    }
                    int slno = 1;
                    int Rangecell = 7;
                    decimal totamnt = 0;
                    int j = 0;
                    int creditrows = 0;
                    decimal SumAmount1 = 0;
                    decimal SumAmount2 = 0;
                    decimal SumAmount3 = 0;
                    decimal SumAmount4 = 0;
                    foreach (DataRow dr in Mergetbl.AsEnumerable())
                    {
                        if (j < 34)
                        {
                            if (dr.ItemArray[2].ToString() != "0.00" || dr.ItemArray[3].ToString() != "0" || dr.ItemArray[4].ToString() != "0.00")
                            {
                                if (dr.ItemArray[1].ToString() != "")
                                {
                                    creditrows = creditrows + 1;
                                    ws.Cell(Rangecell, 1).Value = slno;
                                    ws.Cell(Rangecell, 2).Value = dr.ItemArray[1];
                                    for (int a = 0; a < cscchitprized.Rows.Count; a++)
                                    {
                                        if (cscchitprized.Rows[a]["ChitNumber"].ToString() == dr.ItemArray[1].ToString())
                                        {
                                            ws.Cell(Rangecell, 6).Value = cscchitprized.Rows[a]["CallAmountPaid"];
                                            SumAmount4 += Convert.ToDecimal(cscchitprized.Rows[a]["CallAmountPaid"]);
                                            ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                        }

                                    }
                                    ws.Cell(Rangecell, 3).Value = dr.ItemArray[2];
                                    SumAmount1 += Convert.ToDecimal(dr.ItemArray[2]);
                                    ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(Rangecell, 4).Value = dr.ItemArray[3];
                                    SumAmount2 += Convert.ToDecimal(dr.ItemArray[3]);
                                    ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(Rangecell, 5).Value = dr.ItemArray[4];
                                    SumAmount3 += Convert.ToDecimal(dr.ItemArray[4]);
                                    ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";

                                    var rangedbr213 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                                    rangedbr213.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                    var rangedbr1213 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                                    rangedbr1213.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                    Rangecell++;
                                    j++;
                                    slno++;
                                }
                            }

                        }
                    }

                    // ws.Cell(Rangecell , 6).Value = cscchitprized;
                    // ws.Cell(Rangecell , 6).Style.NumberFormat.Format = "#,##0.00";
                    // ws.Cell(Rangecell , 7).Value = decree1;
                    // ws.Cell(Rangecell , 7).Style.NumberFormat.Format = "#,##0.00";
                    // ws.Cell(Rangecell , 8).Value = debcourt;
                    // ws.Cell(Rangecell , 8).Style.NumberFormat.Format = "#,##0.00";
                    if (Mergetbl.Rows.Count > 34)
                    {

                        ws.Cell(Rangecell, 2).Value = "Carried Over";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = SumAmount1;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = SumAmount2;
                        ws.Cell(Rangecell, 4).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = SumAmount3;
                        ws.Cell(Rangecell, 5).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = "";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = "";
                        ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = "";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2131 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2131.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr21131 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr21131.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        Rangecell = Rangecell + 8;

                        ws.Cell(Rangecell, 2).Value = "Brought Forward";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = SumAmount1;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = SumAmount2;
                        ws.Cell(Rangecell, 4).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = SumAmount3;
                        ws.Cell(Rangecell, 5).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = "";
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = "";
                        ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = "";
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2123 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2123.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr12123 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr12123.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        Rangecell = Rangecell + 1;
                        for (; creditrows < Mergetbl.Rows.Count;)
                        {
                            if (creditrows < 70)
                            {
                                if (Mergetbl.Rows[creditrows]["GdebitlessKasar"].ToString() != "0.00" || Mergetbl.Rows[creditrows]["prizedchitArr"].ToString() != "0" || Mergetbl.Rows[creditrows]["prizedSubscribers"].ToString() != "0.00")
                                {
                                    if (Mergetbl.Rows[creditrows]["GrpNo"].ToString() != "")
                                    {
                                        ws.Cell(Rangecell, 1).Value = slno;
                                        ws.Cell(Rangecell, 2).Value = Mergetbl.Rows[creditrows]["GrpNo"];
                                        for (int a = 0; a < cscchitprized.Rows.Count; a++)
                                        {
                                            if (cscchitprized.Rows[a]["ChitNumber"].ToString() == Mergetbl.Rows[creditrows]["GrpNo"].ToString())
                                            {
                                                ws.Cell(Rangecell, 6).Value = cscchitprized.Rows[a]["CallAmountPaid"];
                                                SumAmount4 += Convert.ToDecimal(cscchitprized.Rows[a]["CallAmountPaid"]);
                                                ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                                            }

                                        }

                                        ws.Cell(Rangecell, 3).Value = Mergetbl.Rows[creditrows]["GdebitlessKasar"];
                                        SumAmount1 += Convert.ToDecimal(Mergetbl.Rows[creditrows]["GdebitlessKasar"]);
                                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(Rangecell, 4).Value = Mergetbl.Rows[creditrows]["prizedchitArr"];
                                        SumAmount2 += Convert.ToDecimal(Mergetbl.Rows[creditrows]["prizedchitArr"]);
                                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(Rangecell, 5).Value = Mergetbl.Rows[creditrows]["prizedSubscribers"];
                                        SumAmount3 += Convert.ToDecimal(Mergetbl.Rows[creditrows]["prizedSubscribers"]);
                                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";

                                        var rangedbr2133 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                                        rangedbr2133.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                        rangedbr2133.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                        Rangecell++;
                                        creditrows = creditrows + 1;
                                        slno++;
                                    }
                                }
                                creditrows = creditrows + 1;
                                Rangecell++;
                                //slno++;
                            }
                        }


                        ws.Cell(Rangecell, 6).Value = SumAmount4;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = decree1;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = debcourt;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2135 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2135.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2135.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        Rangecell++;
                        ws.Cell(Rangecell, 2).Value = "Total";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = SumAmount1;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = SumAmount2;
                        ws.Cell(Rangecell, 4).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = SumAmount3;
                        ws.Cell(Rangecell, 5).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = SumAmount4;
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = decree1;
                        ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = debcourt;
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2136 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2136.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2136.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        

                        Rangecell = Rangecell + 4;
                        ws.Cell(Rangecell, 3).Value = SumAmount1;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        Rangecell++;
                        ws.Cell(Rangecell, 2).Value = "ADD: Balance payable    by the Subscribers";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = balancepayablesubscribe;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2137 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2137.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2137.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        int rangecellsub = Rangecell + 1;

                        Rangecell = Rangecell + 2;
                        //ws.Cell(Rangecell, 3).Value = sumofGdebitlessKasar + PrizedKasarTotal;
                        total = SumAmount1 + balancepayablesubscribe;
                        ws.Cell(Rangecell, 3).Value = total;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        Rangecell = Rangecell + 1;
                        ws.Cell(Rangecell, 2).Value = "ADD: Prized Dividend";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = prized;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2138 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2138.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2138.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        //  decimal prizedka = balancepayablesubscribe + total;
                        //   ws.Cell(Rangecell, 3).Value = balancepayablesubscribe+ total;
                        int rangecellsub1 = Rangecell + 1;
                        Rangecell = Rangecell + 2;
                        int sectotbottom = Rangecell;
                        ws.Cell(Rangecell, 2).Value = "Balance (5F)";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = balancepayablesubscribe + SumAmount1 + prized;
                        // ws.Cell(Rangecell, 3).Value = total+ prizedka;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        //ws.Cell(Rangecell, 4).Value = SumAmount2;
                        //ws.Cell(Rangecell, 4).Style.Font.Bold = true;
                        //ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        //ws.Cell(Rangecell, 5).Value = SumAmount3;
                        //ws.Cell(Rangecell, 5).Style.Font.Bold = true;
                        //ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        //ws.Cell(Rangecell, 6).Value = SumAmount4;
                        //ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        //ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        //ws.Cell(Rangecell, 7).Value = decree1;
                        //ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        //ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        //ws.Cell(Rangecell, 8).Value = debcourt;
                        //ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        //ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2139 = ws.Range(ws.Cell(50, 1), ws.Cell(Rangecell, 9));
                        rangedbr2139.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2139.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    }
                    else
                    {
                        ws.Cell(Rangecell, 6).Value = SumAmount4;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = decree1;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = debcourt;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2135 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2135.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2135.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        Rangecell++;
                        ws.Cell(Rangecell, 2).Value = "Carried Over";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = SumAmount1;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = SumAmount2;
                        ws.Cell(Rangecell, 4).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = SumAmount3;
                        ws.Cell(Rangecell, 5).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = SumAmount4;
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = decree1;
                        ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = debcourt;
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2131 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2131.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2131.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        Rangecell = 50;

                        ws.Cell(Rangecell, 2).Value = "Brought Forward";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = SumAmount1;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 4).Value = SumAmount2;
                        ws.Cell(Rangecell, 4).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 5).Value = SumAmount3;
                        ws.Cell(Rangecell, 5).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 6).Value = SumAmount4;
                        ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 7).Value = decree1;
                        ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(Rangecell, 8).Value = debcourt;
                        ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2123 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2123.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2123.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        Rangecell = Rangecell + 4;
                        ws.Cell(Rangecell, 3).Value = SumAmount1;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        Rangecell++;
                        ws.Cell(Rangecell, 2).Value = "ADD: Balance payable      by the Subscribers";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = balancepayablesubscribe;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2137 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2137.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2137.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        int rangecellsub = Rangecell + 1;

                        Rangecell = Rangecell + 2;
                        //ws.Cell(Rangecell, 3).Value = sumofGdebitlessKasar + PrizedKasarTotal;
                        total = SumAmount1 + balancepayablesubscribe;
                        ws.Cell(Rangecell, 3).Value = total;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2138 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr2138.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2138.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        Rangecell = Rangecell + 1;
                        ws.Cell(Rangecell, 2).Value = "ADD: Prized Dividend";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = prized;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr21381 = ws.Range(ws.Cell(Rangecell, 1), ws.Cell(Rangecell, 9));
                        rangedbr21381.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr21381.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        //  decimal prizedka = balancepayablesubscribe + total;
                        //   ws.Cell(Rangecell, 3).Value = balancepayablesubscribe+ total;
                        int rangecellsub1 = Rangecell + 1;
                        Rangecell = Rangecell + 2;
                        int sectotbottom = Rangecell;
                        ws.Cell(Rangecell, 2).Value = "Balance (5F)";
                        ws.Cell(Rangecell, 2).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Value = balancepayablesubscribe + SumAmount1 + prized;
                        // ws.Cell(Rangecell, 3).Value = total+ prizedka;
                        ws.Cell(Rangecell, 3).Style.Font.Bold = true;
                        ws.Cell(Rangecell, 3).Style.NumberFormat.Format = "#,##0.00";
                        //ws.Cell(Rangecell, 4).Value = SumAmount2;
                        //ws.Cell(Rangecell, 4).Style.Font.Bold = true;
                        //ws.Cell(Rangecell, 4).Style.NumberFormat.Format = "#,##0.00";
                        //ws.Cell(Rangecell, 5).Value = SumAmount3;
                        //ws.Cell(Rangecell, 5).Style.Font.Bold = true;
                        //ws.Cell(Rangecell, 5).Style.NumberFormat.Format = "#,##0.00";
                        //ws.Cell(Rangecell, 6).Value = SumAmount4;
                        //ws.Cell(Rangecell, 6).Style.Font.Bold = true;
                        //ws.Cell(Rangecell, 6).Style.NumberFormat.Format = "#,##0.00";
                        //ws.Cell(Rangecell, 7).Value = decree1;
                        //ws.Cell(Rangecell, 7).Style.Font.Bold = true;
                        //ws.Cell(Rangecell, 7).Style.NumberFormat.Format = "#,##0.00";
                        //ws.Cell(Rangecell, 8).Value = debcourt;
                        //ws.Cell(Rangecell, 8).Style.Font.Bold = true;
                        //ws.Cell(Rangecell, 8).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr2139 = ws.Range(ws.Cell(50, 1), ws.Cell(Rangecell, 9));
                        rangedbr2139.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        rangedbr2139.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    }

                    //var rangecr1 = ws.Range(ws.Cell(5, 1), ws.Cell(firstend, 9));
                    //rangecr1.Style.Border.OutsideBorder = XLBorderStyleValues.Double;

                    //var rangecr2 = ws.Range(ws.Cell(6, 1), ws.Cell(6, 9));
                    //rangecr2.Style.Border.BottomBorder = XLBorderStyleValues.Double;
                    var rangedbr21329 = ws.Range(ws.Cell(48, 1), ws.Cell(49, 9));
                    rangedbr21329.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangedbr21329.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    var rangedbr21391 = ws.Range(ws.Cell(5, 1), ws.Cell(6, 9));
                    rangedbr21391.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                    rangedbr21391.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    //var rangecr3 = ws.Range(ws.Cell(secondst, 1), ws.Cell(Rangecell, 9));
                    //rangecr3.Style.Border.OutsideBorder = XLBorderStyleValues.Double;

                    //var rangecr4 = ws.Range(ws.Cell(secondst + 1, 1), ws.Cell(secondst + 1, 9));
                    //rangecr4.Style.Border.BottomBorder = XLBorderStyleValues.Double;

                    //var rangecr5 = ws.Range(ws.Cell(firsttotbottom - 1, 1), ws.Cell(firsttotbottom - 1, 9));
                    //rangecr5.Style.Border.BottomBorder = XLBorderStyleValues.Double;

                    //var rangecr6 = ws.Range(ws.Cell(sectotbottom - 1, 1), ws.Cell(sectotbottom - 1, 9));
                    //rangecr6.Style.Border.BottomBorder = XLBorderStyleValues.Double;

                    //var rangecr7 = ws.Range(ws.Cell(rangecellsub, 2), ws.Cell(rangecellsub, 3));
                    //rangecr7.Style.Border.BottomBorder = XLBorderStyleValues.Double;


                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    //  titlesStyle.Fill.BackgroundColor = XLColor.Cyan;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    //wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }


                }

            }
            catch (Exception ex)
            {
                //LogCls.LogError(ex, "Chit Debit St-  24");
            }



        }


        public void ST24XLwrite()
        {
            try
            {
                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                System.Data.DataTable Chitdebt = GrpwarDebDT1();
                sheet.Name = "statement-24A";
                var dtBind = YearEndingObj.binddegree(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");

                sheet.Pictures.Add(1, 1, filepath);
                CellRange range = sheet.Range["A4:L6"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["C1"].RichText;
                richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + branchtext;
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }


                sheet.Range["K1"].Value = "Statement No.24A";
                RichText richText27 = sheet.Range["K1"].RichText;
                richText27.SetFont(0, richText27.Text.Length - 1, fontBold);
                sheet.Range["K1:L1"].Merge();

                sheet.Range["A3"].Value = "Chit Excess, Arrears and Decree details for secured, Un secured and Non Prized members as at " + txtToDate.Text;
                RichText richText03 = sheet.Range["A3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["A3:L3"].Merge();

                sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                sheet.Range["A4:A5"].Merge();
                sheet.Range["A4"].Value = "Sl.No.";
                RichText richText04 = sheet.Range["A4"].RichText;
                richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["B4:B5"].Merge();
                sheet.Range["B4"].Value = "Group Number";
                RichText richText05 = sheet.Range["B4"].RichText;
                richText05.SetFont(0, richText05.Text.Length - 1, fontBold);
                sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["C4:E4"].Merge();
                sheet.Range["C4"].Value = "EXCESS";
                RichText richText06 = sheet.Range["C4"].RichText;
                richText06.SetFont(0, richText06.Text.Length - 1, fontBold);
                sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["C5"].Merge();
                sheet.Range["C5"].Value = "Non-Prized Subscribers";
                RichText richText07 = sheet.Range["C5"].RichText;
                richText07.SetFont(0, richText07.Text.Length - 1, fontBold);
                sheet.Range["C5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["D5:E5"].Merge();
                sheet.Range["D5"].Value = "Prized Subscribers Excess";
                RichText richText08 = sheet.Range["D5"].RichText;
                richText08.SetFont(0, richText08.Text.Length - 1, fontBold);
                sheet.Range["D5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D5"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["F4:F5"].Merge();
                sheet.Range["C6"].Value = "Excess";
                RichText richText09 = sheet.Range["C6"].RichText;
                richText09.SetFont(0, richText09.Text.Length - 1, fontBold);
                sheet.Range["C6"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C6"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["D6"].Value = "Secured";
                RichText richText10 = sheet.Range["D6"].RichText;
                richText10.SetFont(0, richText10.Text.Length - 1, fontBold);
                sheet.Range["D6"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D6"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["E6"].Value = "Unsecured";
                RichText richText18 = sheet.Range["E6"].RichText;
                richText18.SetFont(0, richText18.Text.Length - 1, fontBold);
                sheet.Range["E6"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E6"].Style.VerticalAlignment = VerticalAlignType.Center;






                sheet.Range["F4:H4"].Merge();
                sheet.Range["F4"].Value = "ARREARS";
                RichText richText11 = sheet.Range["F4"].RichText;
                richText11.SetFont(0, richText11.Text.Length - 1, fontBold);
                sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["H4:I4"].Merge();
                sheet.Range["F5"].Value = "Non-prized Subscribers";
                RichText richText12 = sheet.Range["F5"].RichText;
                richText12.SetFont(0, richText12.Text.Length - 1, fontBold);
                sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["G5:H5"].Merge();
                sheet.Range["G5"].Value = "Prized Subscribers Arrears";
                RichText richText13 = sheet.Range["G5"].RichText;
                richText13.SetFont(0, richText13.Text.Length - 1, fontBold);
                sheet.Range["G5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["F6"].Value = "Arrears";
                RichText richText14 = sheet.Range["F6"].RichText;
                richText14.SetFont(0, richText14.Text.Length - 1, fontBold);
                sheet.Range["F6"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F6"].Style.VerticalAlignment = VerticalAlignType.Center;

                //sheet.Range["J4:K5"].Merge();
                sheet.Range["G6"].Value = "Secured";
                RichText richText15 = sheet.Range["G6"].RichText;
                richText15.SetFont(0, richText15.Text.Length - 1, fontBold);
                sheet.Range["G6"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G6"].Style.VerticalAlignment = VerticalAlignType.Center;


                sheet.Range["H6"].Value = "Unsecured";
                RichText richText16 = sheet.Range["H6"].RichText;
                richText16.SetFont(0, richText16.Text.Length - 1, fontBold);
                sheet.Range["H6"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["H6"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["I4:J4"].Merge();
                sheet.Range["I4"].Value = "TERMINATED CHIT SUBSCRIBERS ARREARS";
                RichText richText17 = sheet.Range["I4"].RichText;
                richText17.SetFont(0, richText17.Text.Length - 1, fontBold);
                sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["I5"].Value = "Secured";
                RichText richText19 = sheet.Range["I5"].RichText;
                richText19.SetFont(0, richText19.Text.Length - 1, fontBold);
                sheet.Range["I5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["J5"].Value = "Unsecured";
                RichText richText20 = sheet.Range["J5"].RichText;
                richText20.SetFont(0, richText20.Text.Length - 1, fontBold);
                sheet.Range["J5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["J5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["K4:L4"].Merge();
                sheet.Range["K4"].Value = "DECREE";
                RichText richText21 = sheet.Range["K4"].RichText;
                richText21.SetFont(0, richText21.Text.Length - 1, fontBold);
                sheet.Range["K4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["K4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["K5"].Value = "secured";
                RichText richText22 = sheet.Range["K5"].RichText;
                richText22.SetFont(0, richText22.Text.Length - 1, fontBold);
                sheet.Range["K5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["K5"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["L5"].Value = "Unsecured";
                RichText richText23 = sheet.Range["L5"].RichText;
                richText23.SetFont(0, richText23.Text.Length - 1, fontBold);
                sheet.Range["L5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["L5"].Style.VerticalAlignment = VerticalAlignType.Center;

                int slno = 1;
                int rowcnt = 6;
                decimal excess = 0;
                decimal excesssecured = 0;
                decimal excessnonsecured = 0;
                decimal nonprizedarrear = 0;
                decimal prizedsecuredarrear = 0;
                decimal prizedunsecuredarrear = 0;
                decimal terminatesecured = 0;
                decimal total = 0;
                decimal terminatenonsecured = 0;
                foreach (DataRow dr in dtBind.Rows)
                {
                    if (dr.ItemArray[4].ToString().Trim() == "Total")
                    {
                        sheet.Range["K" + rowcnt].Value = dr.ItemArray[6].ToString();
                        sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                        total += Convert.ToDecimal(dr.ItemArray[6].ToString());
                    }
                }
                foreach (DataRow dr in Chitdebt.AsEnumerable())
                {
                    rowcnt = rowcnt + 1;

                    sheet.Range["A" + rowcnt].Value = Convert.ToString(slno);
                    sheet.Range["B" + rowcnt].Value = dr.ItemArray[0].ToString();
                    sheet.Range["C" + rowcnt].Value = dr.ItemArray[1].ToString();
                    sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                    excess = excess + Convert.ToDecimal(dr.ItemArray[1].ToString());
                    sheet.Range["D" + rowcnt].Value = dr.ItemArray[2].ToString();
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    excesssecured = excesssecured + Convert.ToDecimal(dr.ItemArray[2].ToString());
                    sheet.Range["E" + rowcnt].Value = dr.ItemArray[3].ToString();
                    sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                    excessnonsecured = excessnonsecured + Convert.ToDecimal(dr.ItemArray[3].ToString());
                    sheet.Range["F" + rowcnt].Value = dr.ItemArray[4].ToString();
                    sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                    nonprizedarrear = nonprizedarrear + Convert.ToDecimal(dr.ItemArray[4].ToString());
                    sheet.Range["G" + rowcnt].Value = dr.ItemArray[5].ToString();
                    sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
                    prizedsecuredarrear = prizedsecuredarrear + Convert.ToDecimal(dr.ItemArray[5].ToString());
                    sheet.Range["H" + rowcnt].Value = dr.ItemArray[6].ToString();
                    sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                    prizedunsecuredarrear = prizedunsecuredarrear + Convert.ToDecimal(dr.ItemArray[6].ToString());
                    sheet.Range["I" + rowcnt].Value = dr.ItemArray[7].ToString();
                    sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
                    terminatesecured = terminatesecured + Convert.ToDecimal(dr.ItemArray[7].ToString());
                    sheet.Range["J" + rowcnt].Value = dr.ItemArray[8].ToString();
                    sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                    terminatenonsecured = terminatenonsecured + Convert.ToDecimal(dr.ItemArray[8].ToString());
                    //sheet.Range["K" + rowcnt].Value = dr.ItemArray[11].ToString();
                    //sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                    //sheet.Range["L" + rowcnt].Value = dr.ItemArray[12].ToString();
                    //sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                    slno++;
                    CellRange range41 = sheet.Range["A6:" + "L" + rowcnt];
                    range41.Borders.LineStyle = LineStyleType.Thin;
                    range41.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range41.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;





                }
                rowcnt = rowcnt + 3;
                sheet.Range["B" + rowcnt].Value = "Total";
                sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["C" + rowcnt].Value = Convert.ToString(excess);
                sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["D" + rowcnt].Value = Convert.ToString(excesssecured);
                sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["E" + rowcnt].Value = Convert.ToString(excessnonsecured);
                sheet.Range["E" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["F" + rowcnt].Value = Convert.ToString(nonprizedarrear);
                sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["G" + rowcnt].Value = Convert.ToString(prizedsecuredarrear);
                sheet.Range["G" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["G" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["H" + rowcnt].Value = Convert.ToString(prizedunsecuredarrear);
                sheet.Range["H" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["H" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["I" + rowcnt].Value = Convert.ToString(terminatesecured);
                sheet.Range["I" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["I" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["J" + rowcnt].Value = Convert.ToString(terminatenonsecured);
                sheet.Range["J" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["J" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["K" + rowcnt].Value = Convert.ToString(total);
                sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                CellRange range45 = sheet.Range["A6:" + "L" + rowcnt];
                range45.Borders.LineStyle = LineStyleType.Thin;
                range45.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range45.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                //    CellRange range45 = sheet.Range["A5:" + "L" + rowcnt];
                //  range45.BorderInside(LineStyleType.Medium, Color.Black);


                rowcnt = rowcnt + 2;

                //CellRange range1 = sheet.Range["A5:" + "L" + rowcnt];
                //range1.BorderAround(LineStyleType.Medium, Color.Black);



                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(1, 9);
                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);



                workbook.SaveToHttpResponse("statement-024A.xlsx", HttpContext.Current.Response);
            }
            catch (Exception) { }



        }

        protected void ST20_Click(object sender, EventArgs e)
        {

            // commissiontbl();
            //GrpwarDebtorsXLwrite();
            //string folderPath = "C:\\Exceltest\\";
            //if (!Directory.Exists(folderPath))
            //{
            //    Directory.CreateDirectory(folderPath);
            //}
            string filename = "GrpwarDebtors" + DateTime.Now.Second.ToString();
            //System.Data.DataTable ValuesDT = GrpwarDebDT();
            System.Data.DataTable GrpwarDebDT = GrpwarDebDTfor20();
            try
            {

                using (XLWorkbook wb = new XLWorkbook())
                {

                    var ws = wb.Worksheets.Add("Groupwar Chit Debt St-20");
                    int logo = 1;
                    int branch = 2;
                    int date = 3;
                    int CREDIT = 4;
                    int SNo1 = 5;
                    int i = 0;
                    double page = Math.Ceiling((float)GrpwarDebDT.Rows.Count / 34);
                    do
                    {
                        AddImage(wb, "Groupwar Chit Debt St-20", 1, logo, "imglogo.png");

                        ws.Cell(logo, 10).Value = "Statement No. 20";
                        ws.Range(logo, 10, logo, 12).Merge().AddToNamed("Titles");
                        ws.Cell(logo, 10).Style.Font.Bold = true;
                        ws.Cell(logo, 10).Style.Font.FontSize = 13;

                        ws.Cell(logo, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(logo, 2).Style.Font.Bold = true;
                        ws.Cell(logo, 2).Style.Font.FontSize = 14;


                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + "Mount Road";
                            ws.Cell(branch, 2).Style.Font.Bold = true;
                            ws.Cell(branch, 2).Style.Font.FontSize = 13;
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + "Pallathur";
                            ws.Cell(branch, 2).Style.Font.Bold = true;
                            ws.Cell(branch, 2).Style.Font.FontSize = 13;
                        }
                        else
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                            ws.Cell(branch, 2).Style.Font.Bold = true;
                            ws.Cell(branch, 2).Style.Font.FontSize = 13;
                        }

                        ws.Cell(date, 1).Value = "Particulars of Group War Chit Debtors as at " + txtToDate.Text;
                        ws.Cell(date, 1).Style.Font.Bold = true;
                        ws.Cell(date, 1).Style.Font.FontSize = 13;
                        var sss = ws.Range(date, 1, date, 12);
                        sss.Merge();
                        sss.Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                        ws.Cell(CREDIT, 1).Value = "Sl. No.";
                        ws.Cell(CREDIT, 1).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 1).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 1, SNo1, 1).Merge();

                        ws.Cell(CREDIT, 2).Value = "Chit Group Number and Category";
                        ws.Cell(CREDIT, 2).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 2).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 2, SNo1, 2).Merge();

                        ws.Cell(CREDIT, 3).Value = "Number of Debts excluding Foreman of Chits";
                        ws.Cell(CREDIT, 3).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 3).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 3).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 3, SNo1, 3).Merge();

                        ws.Cell(CREDIT, 4).Value = "Debts considered Good for which the company holds personal security of the Debtors and with others";
                        ws.Cell(CREDIT, 4).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 4).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 4).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 4, CREDIT, 6).Merge();

                        ws.Cell(SNo1, 4).Value = "Personal";
                        ws.Cell(SNo1, 4).Style.Font.Bold = true;
                        ws.Cell(SNo1, 4).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 5).Value = "Personal with others";
                        ws.Cell(SNo1, 5).Style.Font.Bold = true;
                        ws.Cell(SNo1, 5).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 6).Value = "Total";
                        ws.Cell(SNo1, 6).Style.Font.Bold = true;
                        ws.Cell(SNo1, 6).Style.Font.FontSize = 11;



                        ws.Cell(CREDIT, 7).Value = "Debts considered Good for which the company is fully secured by Equitable Mortgage or otherwise";
                        ws.Cell(CREDIT, 7).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 7).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 7).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 7, CREDIT, 9).Merge();

                        ws.Cell(SNo1, 7).Value = "Personal";
                        ws.Cell(SNo1, 7).Style.Font.Bold = true;
                        ws.Cell(SNo1, 7).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 8).Value = "Personal with others";
                        ws.Cell(SNo1, 8).Style.Font.Bold = true;
                        ws.Cell(SNo1, 8).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 9).Value = "Total";
                        ws.Cell(SNo1, 9).Style.Font.Bold = true;
                        ws.Cell(SNo1, 9).Style.Font.FontSize = 11;


                        ws.Cell(CREDIT, 10).Value = "Number of Foreman Chits and Foreman Substituted chits";
                        ws.Cell(CREDIT, 10).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 10).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 10).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 10, CREDIT, 11).Merge();

                        ws.Cell(SNo1, 10).Value = "Number of Chits";
                        ws.Cell(SNo1, 10).Style.Font.Bold = true;
                        ws.Cell(SNo1, 10).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 11).Value = "Amount";
                        ws.Cell(SNo1, 11).Style.Font.Bold = true;
                        ws.Cell(SNo1, 11).Style.Font.FontSize = 11;


                        ws.Cell(CREDIT, 12).Value = "Grand Total";
                        ws.Cell(CREDIT, 12).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 12).Style.Font.FontSize = 11;
                        ws.Cell(CREDIT, 12).Style.Alignment.WrapText = true;
                        ws.Range(CREDIT, 12, SNo1, 12).Merge();

                        var rangedbr7 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 12));
                        rangedbr7.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        var rangedbr8 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 12));
                        rangedbr8.Style.Border.InsideBorder = XLBorderStyleValues.Double;
                        logo = logo + 41;
                        branch = branch + 41;
                        date = date + 41;
                        CREDIT = CREDIT + 41;
                        SNo1 = SNo1 + 41;
                        i++;
                    } while (i < page);


                    int slno = 0;
                    int RangeCell = 6;
                    decimal purepersonal = 0;
                    decimal GuarontorNameOnly = 0;
                    decimal FirstTotal = 0;
                    decimal Documentonly = 0;
                    decimal DocumentandGuarontor = 0;
                    decimal SecondTotal = 0;
                    decimal companycount = 0;
                    decimal Total = 0;
                    decimal GrandTotal = 0;
                    decimal membercount = 0;
                    int debitrows = 0;
                    for (int j = 0; j < GrpwarDebDT.Rows.Count; j++)
                    {
                        if (j < 34)
                        {
                            slno += 1;
                            debitrows = debitrows + 1;
                            ws.Cell(RangeCell, 1).Value = slno;
                            ws.Cell(RangeCell, 2).Value = GrpwarDebDT.Rows[j]["Groupnumber"].ToString();
                            ws.Cell(RangeCell, 3).Value = GrpwarDebDT.Rows[j]["Membercount"].ToString();
                            membercount = membercount + Convert.ToDecimal(GrpwarDebDT.Rows[j]["Membercount"].ToString());
                            ws.Cell(RangeCell, 4).Value = GrpwarDebDT.Rows[j]["PurePersonal"].ToString();
                            purepersonal = purepersonal + Convert.ToDecimal(GrpwarDebDT.Rows[j]["PurePersonal"].ToString());
                            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Value = GrpwarDebDT.Rows[j]["GuarontorNameOnly"].ToString();
                            GuarontorNameOnly = GuarontorNameOnly + Convert.ToDecimal(GrpwarDebDT.Rows[j]["GuarontorNameOnly"].ToString());
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Value = Convert.ToDecimal(GrpwarDebDT.Rows[j]["FirstTotal"].ToString());
                            FirstTotal = FirstTotal + Convert.ToDecimal(GrpwarDebDT.Rows[j]["FirstTotal"].ToString());
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Value = Convert.ToDecimal(GrpwarDebDT.Rows[j]["Documentonly"].ToString());
                            Documentonly = Documentonly + Convert.ToDecimal(GrpwarDebDT.Rows[j]["Documentonly"].ToString());
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Value = Convert.ToDecimal(GrpwarDebDT.Rows[j]["DocumentandGuarontor"].ToString());
                            DocumentandGuarontor = DocumentandGuarontor + Convert.ToDecimal(GrpwarDebDT.Rows[j]["DocumentandGuarontor"].ToString());
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Value = Convert.ToDecimal(GrpwarDebDT.Rows[j]["SecondTotal"].ToString());
                            SecondTotal = SecondTotal + Convert.ToDecimal(GrpwarDebDT.Rows[j]["SecondTotal"].ToString());
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 10).Value = Convert.ToDecimal(GrpwarDebDT.Rows[j]["companycount"].ToString());
                            companycount = companycount + Convert.ToDecimal(GrpwarDebDT.Rows[j]["companycount"].ToString());

                            ws.Cell(RangeCell, 11).Value = Convert.ToDecimal(GrpwarDebDT.Rows[j]["Total"].ToString());
                            Total = Total + Convert.ToDecimal(GrpwarDebDT.Rows[j]["Total"].ToString());
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Value = Convert.ToDecimal(GrpwarDebDT.Rows[j]["GrandTotal"].ToString());
                            GrandTotal = GrandTotal + Convert.ToDecimal(GrpwarDebDT.Rows[j]["GrandTotal"].ToString());
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            var rangedbr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr29 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr29.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            RangeCell++;

                        }
                        else
                        {
                            break;
                        }
                    }
                    if (GrpwarDebDT.Rows.Count > 34)
                    {
                        ws.Cell(RangeCell, 2).Value = "Total Carried Over";
                        ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 3).Value = membercount;
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 4).Value = purepersonal;
                        ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 5).Value = GuarontorNameOnly;
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 6).Value = FirstTotal;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = Documentonly;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = DocumentandGuarontor;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SecondTotal;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = companycount;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = Total;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = GrandTotal;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        var rangedbr2 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell = RangeCell + 7;
                        ws.Cell(RangeCell, 2).Value = "Brought Forward";
                        ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 3).Value = membercount;
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 4).Value = purepersonal;
                        ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 5).Value = GuarontorNameOnly;
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 6).Value = FirstTotal;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = Documentonly;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";

                        ws.Cell(RangeCell, 8).Value = DocumentandGuarontor;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SecondTotal;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = companycount;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = Total;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = GrandTotal;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        var rangedbr55 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangedbr55.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr56 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangedbr56.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell = RangeCell + 1;
                        for (; debitrows < GrpwarDebDT.Rows.Count;)
                        {
                            if (debitrows < 58)
                            {
                                slno += 1;
                                debitrows = debitrows + 1;
                                ws.Cell(RangeCell, 1).Value = slno;
                                ws.Cell(RangeCell, 2).Value = GrpwarDebDT.Rows[debitrows]["Groupnumber"].ToString();
                                ws.Cell(RangeCell, 3).Value = GrpwarDebDT.Rows[debitrows]["Membercount"].ToString();
                                membercount = membercount + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["Membercount"].ToString());
                                ws.Cell(RangeCell, 4).Value = GrpwarDebDT.Rows[debitrows]["PurePersonal"].ToString();
                                purepersonal = purepersonal + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["PurePersonal"].ToString());
                                ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 5).Value = GrpwarDebDT.Rows[debitrows]["GuarontorNameOnly"].ToString();
                                GuarontorNameOnly = GuarontorNameOnly + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["GuarontorNameOnly"].ToString());
                                ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 6).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["FirstTotal"].ToString());
                                FirstTotal = FirstTotal + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["FirstTotal"].ToString());
                                ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 7).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["Documentonly"].ToString());
                                Documentonly = Documentonly + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["Documentonly"].ToString());
                                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 8).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["DocumentandGuarontor"].ToString());
                                DocumentandGuarontor = DocumentandGuarontor + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["DocumentandGuarontor"].ToString());
                                ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 9).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["SecondTotal"].ToString());
                                SecondTotal = SecondTotal + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["SecondTotal"].ToString());
                                ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 10).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["companycount"].ToString());
                                companycount = companycount + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["companycount"].ToString());

                                ws.Cell(RangeCell, 11).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["Total"].ToString());
                                Total = Total + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["Total"].ToString());
                                ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 12).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["GrandTotal"].ToString());
                                GrandTotal = GrandTotal + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["GrandTotal"].ToString()); RangeCell++;
                                ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                                var rangedbr224 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                                rangedbr224.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangedbr334 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                                rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            }

                            else
                            {
                                break;
                            }
                        }
                        if (GrpwarDebDT.Rows.Count > 58)
                        {
                            ws.Cell(RangeCell, 2).Value = "Total Carried Over";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 3).Value = membercount;
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 4).Value = purepersonal;
                            ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 5).Value = GuarontorNameOnly;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = FirstTotal;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = Documentonly;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = DocumentandGuarontor;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SecondTotal;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = companycount;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = Total;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = GrandTotal;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            var rangedbr22 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr22.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr33 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr33.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            RangeCell = RangeCell + 6;

                            ws.Cell(RangeCell, 2).Value = "Brought Forward";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 3).Value = membercount;
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 4).Value = purepersonal;
                            ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 5).Value = GuarontorNameOnly;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = FirstTotal;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = Documentonly;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = DocumentandGuarontor;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SecondTotal;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = companycount;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = Total;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = GrandTotal;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            var rangedbr555 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr555.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr566 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr566.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            RangeCell = RangeCell + 1;

                            for (; debitrows < GrpwarDebDT.Rows.Count;)
                            {
                                if (debitrows < 82)
                                {
                                    slno += 1;
                                    debitrows = debitrows + 1;
                                    ws.Cell(RangeCell, 1).Value = slno;
                                    ws.Cell(RangeCell, 2).Value = GrpwarDebDT.Rows[debitrows]["Groupnumber"].ToString();
                                    ws.Cell(RangeCell, 3).Value = GrpwarDebDT.Rows[debitrows]["Membercount"].ToString();
                                    membercount = membercount + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["Membercount"].ToString());
                                    ws.Cell(RangeCell, 4).Value = GrpwarDebDT.Rows[debitrows]["PurePersonal"].ToString();
                                    ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                                    purepersonal = purepersonal + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["PurePersonal"].ToString());

                                    ws.Cell(RangeCell, 5).Value = GrpwarDebDT.Rows[debitrows]["GuarontorNameOnly"].ToString();
                                    ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                                    GuarontorNameOnly = GuarontorNameOnly + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["GuarontorNameOnly"].ToString());

                                    ws.Cell(RangeCell, 6).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["FirstTotal"].ToString());
                                    ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                    FirstTotal = FirstTotal + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["FirstTotal"].ToString());

                                    ws.Cell(RangeCell, 7).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["Documentonly"].ToString());
                                    ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                                    Documentonly = Documentonly + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["Documentonly"].ToString());

                                    ws.Cell(RangeCell, 8).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["DocumentandGuarontor"].ToString());
                                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                                    DocumentandGuarontor = DocumentandGuarontor + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["DocumentandGuarontor"].ToString());

                                    ws.Cell(RangeCell, 9).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["SecondTotal"].ToString());
                                    ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                                    SecondTotal = SecondTotal + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["SecondTotal"].ToString());

                                    ws.Cell(RangeCell, 10).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["companycount"].ToString());

                                    companycount = companycount + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["companycount"].ToString());

                                    ws.Cell(RangeCell, 11).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["Total"].ToString());
                                    ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                                    Total = Total + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["Total"].ToString());

                                    ws.Cell(RangeCell, 12).Value = Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["GrandTotal"].ToString());
                                    ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                                    GrandTotal = GrandTotal + Convert.ToDecimal(GrpwarDebDT.Rows[debitrows]["GrandTotal"].ToString());
                                    RangeCell++;

                                    var rangedbr2344 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                                    rangedbr2344.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                    var rangedbr3344 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                                    rangedbr3344.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                }

                                else
                                {
                                    break;
                                }
                            }

                            RangeCell++;
                            ws.Cell(RangeCell, 2).Value = "Total";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 3).Value = membercount;
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 4).Value = purepersonal;
                            ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 5).Value = GuarontorNameOnly;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = FirstTotal;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = Documentonly;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = DocumentandGuarontor;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SecondTotal;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = companycount;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = Total;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = GrandTotal;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            var rangedbr234 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr334 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        }
                        else
                        {

                            RangeCell++;
                            ws.Cell(RangeCell, 2).Value = "Total";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 3).Value = membercount;
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 4).Value = purepersonal;
                            ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 5).Value = GuarontorNameOnly;
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 6).Value = FirstTotal;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 7).Value = Documentonly;
                            ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 8).Value = DocumentandGuarontor;
                            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 9).Value = SecondTotal;
                            ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 10).Value = companycount;
                            ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 11).Value = Total;
                            ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 12).Value = GrandTotal;
                            ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            var rangedbr234 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr334 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr334.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        }
                    }
                    else
                    {
                        RangeCell += 1;
                        ws.Cell(RangeCell, 2).Value = "Total";
                        ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 3).Value = membercount;
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 4).Value = purepersonal;
                        ws.Cell(RangeCell, 4).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 5).Value = GuarontorNameOnly;
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 6).Value = FirstTotal;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 7).Value = Documentonly;
                        ws.Cell(RangeCell, 7).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 8).Value = DocumentandGuarontor;
                        ws.Cell(RangeCell, 8).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 9).Value = SecondTotal;
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 10).Value = companycount;
                        ws.Cell(RangeCell, 10).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 11).Value = Total;
                        ws.Cell(RangeCell, 11).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 11).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        ws.Cell(RangeCell, 12).Value = GrandTotal;
                        ws.Cell(RangeCell, 12).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 12).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        var rangedbr2 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 12));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(6, 1), ws.Cell(RangeCell, 12));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                    }

                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        HttpContext.Current.Response.End();
                    }

                }

            }
            catch (Exception ex)
            {

            }


        }

        public System.Data.DataTable Terminate1(string groupnumber, string dateto)
        {
            DataTable terminate1 = new DataTable();
            dateto = txtToDate.Text;
            CommonVariables objCOM = new CommonVariables();


            terminate1.Columns.Add("Memberid");
            //  terminate1.Columns.Add("MemberName");
            terminate1.Columns.Add("PArrier", typeof(decimal));
            terminate1.Columns.Add("MemberHeadid");
            // terminate1.Columns.Add("Excess");
            //terminate.Columns.Add("NPArrier");
            DataRow terminaterw = terminate1.NewRow();


            string TotaldueAmount = "";
            if (groupnumber == "")
            {
            }
            else
            {
                var ActionCount = balayer.GetScalarDataInt("select * from auctiondetails where IsPrized='Y' and AuctionDate<='" + balayer.indiandateToMysqlDate(dateto) + "' and GroupID=" + groupnumber);
                if (ActionCount > 0)
                {
                    DataTable Nodeid = balayer.GetDataTable(" select NodeID from headstree where ParentID=" + groupnumber);
                    for (int j = 0; j < Nodeid.Rows.Count; j++)
                    {
                        var filvalue = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(dateto) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (filvalue != "0.00" && filvalue != "")
                        {
                            decimal strA = 0.00M;
                            decimal strE = 0.00M;
                            decimal strB = 0.00M;
                            decimal strC = 0.00M;
                            decimal strD = 0.00M;


                            var memberid = balayer.GetSingleValue(@"select concat(mg1.MemberID) as `MemberID` from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by v1.ChoosenDate DESC ;");
                            if (string.IsNullOrEmpty(memberid))
                            {
                                var StrMemID = balayer.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_id=" + Nodeid.Rows[j]["NodeID"]);
                                terminaterw["Memberid"] = StrMemID;
                            }
                            else
                            {
                                terminaterw["Memberid"] = memberid;
                            }
                            //      var Excess = balayer.GetSingleValue(@"select  (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + ddlChit.SelectedItem.Value + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + ddlChit.SelectedItem.Value + " and v1.Head_Id=" + DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

                            var memheadid = balayer.GetSingleValue(@"select concat(mg1.Head_Id) as `Head_Id` from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by v1.ChoosenDate DESC ;");
                            if (string.IsNullOrEmpty(memheadid))
                            {
                                var headid = balayer.GetSingleValue("SELECT Head_Id FROM svcf.membertogroupmaster where Head_id=" + Nodeid.Rows[j]["NodeID"]);
                                terminaterw["MemberHeadid"] = headid;
                            }
                            else
                            {
                                terminaterw["MemberHeadid"] = memheadid;
                            }
                            //  balayer.GetSingleValue(@"select (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(dateto) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            var Parr = filvalue;
                            if (string.IsNullOrEmpty(Parr))
                            {
                                strA = 0.00M;
                                terminaterw["PArrier"] = "0.00";
                            }
                            else
                            {
                                strA = Convert.ToDecimal(Parr);
                                terminaterw["PArrier"] = Parr;
                            }

                            if (strA != 0.00M)
                            {

                                terminate1.Rows.Add(terminaterw.ItemArray);
                            }
                        }


                    }

                    return terminate1;
                }







            }
            return terminate1;
        }
        public System.Data.DataTable Terminate(string groupnumber, string dateto)
        {
            DataTable terminate = new DataTable();
            try
            {
                // Session["Branchid"] = "1481";
                dateto = txtToDate.Text;
                CommonVariables objCOM = new CommonVariables();


                terminate.Columns.Add("Memberid");
                terminate.Columns.Add("MemberName");
                terminate.Columns.Add("PArrier", typeof(decimal));
                terminate.Columns.Add("MemberHeadid");
                terminate.Columns.Add("Excess");
                terminate.Columns.Add("ChitCategory");
                //terminate.Columns.Add("NPArrier");
                DataRow terminaterw = terminate.NewRow();


                string TotaldueAmount = "";
                if (groupnumber == "")
                {
                }
                else
                {
                    var ActionCount = balayer.GetScalarDataInt("select * from auctiondetails where IsPrized='Y' and AuctionDate<='" + balayer.indiandateToMysqlDate(dateto) + "' and GroupID=" + groupnumber);
                    if (ActionCount > 0)
                    {
                        DataTable Nodeid = balayer.GetDataTable(" select NodeID from headstree where ParentID=" + groupnumber);
                        for (int j = 0; j < Nodeid.Rows.Count; j++)
                        {
                            var filvalue = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(dateto) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            if (filvalue != "0.00" && filvalue != "")
                            {
                                decimal strA = 0.00M;
                                decimal strE = 0.00M;
                                decimal strB = 0.00M;
                                decimal strC = 0.00M;
                                decimal strD = 0.00M;

                                var StrName = balayer.GetSingleValue(@"select concat(mg1.MemberName) as `MemberName` from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by v1.ChoosenDate DESC ;");
                                if (string.IsNullOrEmpty(StrName))
                                {
                                    var StrMemID = balayer.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_id=" + Nodeid.Rows[j]["NodeID"]);
                                    var strmemname = balayer.GetSingleValue("SELECT CustomerName FROM svcf.membermaster where MemberIDNew=" + StrMemID);
                                    terminaterw["MemberName"] = strmemname;
                                }
                                else
                                {
                                    terminaterw["MemberName"] = StrName;
                                }

                                var memberid = balayer.GetSingleValue(@"select concat(mg1.MemberID) as `MemberID` from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by v1.ChoosenDate DESC ;");
                                if (string.IsNullOrEmpty(memberid))
                                {
                                    var StrMemID = balayer.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_id=" + Nodeid.Rows[j]["NodeID"]);
                                    terminaterw["Memberid"] = StrMemID;
                                }
                                else
                                {
                                    terminaterw["Memberid"] = memberid;
                                }
                                //      var Excess = balayer.GetSingleValue(@"select  (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + ddlChit.SelectedItem.Value + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + ddlChit.SelectedItem.Value + " and v1.Head_Id=" + DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                                var Excess = balayer.GetSingleValue(@"select  (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                                if (string.IsNullOrEmpty(Excess))
                                {
                                    strE = 0.00M;
                                    terminaterw["Excess"] = "0.00";
                                }
                                else
                                {
                                    strE = Convert.ToDecimal(Excess);
                                    terminaterw["Excess"] = strE;
                                }
                                var memheadid = balayer.GetSingleValue(@"select concat(mg1.Head_Id) as `Head_Id` from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by v1.ChoosenDate DESC ;");
                                if (string.IsNullOrEmpty(memheadid))
                                {
                                    var headid = balayer.GetSingleValue("SELECT Head_Id FROM svcf.membertogroupmaster where Head_id=" + Nodeid.Rows[j]["NodeID"]);
                                    terminaterw["MemberHeadid"] = headid;
                                }
                                else
                                {
                                    terminaterw["MemberHeadid"] = memheadid;
                                }
                                var ChitCategory = balayer.GetSingleValue("select g1.ChitCategory from groupmaster as g1 join membertogroupmaster as mg1 on (g1.Head_Id=mg1.GroupID) where g1.BranchID=" + drpdownBranchlist.SelectedValue + " and g1.Head_Id=" + groupnumber + " and mg1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + "");
                                if (string.IsNullOrEmpty(ChitCategory))
                                {
                                    terminaterw["ChitCategory"] = "";
                                }
                                else
                                {
                                    terminaterw["ChitCategory"] = ChitCategory;
                                }

                                //  balayer.GetSingleValue(@"select (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(dateto) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + Nodeid.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                                var Parr = filvalue;
                                if (string.IsNullOrEmpty(Parr))
                                {
                                    strA = 0.00M;
                                    terminaterw["PArrier"] = "0.00";
                                }
                                else
                                {
                                    strA = Convert.ToDecimal(Parr);
                                    terminaterw["PArrier"] = Parr;
                                }

                                if (strA != 0.00M)
                                {

                                    terminate.Rows.Add(terminaterw.ItemArray);
                                }
                            }


                        }

                        return terminate;
                    }






                }



            }
            catch (Exception) { }
            return terminate;

        }

        public System.Data.DataTable Running(string groupnumber, string dateto)
        {
            DataTable terminate = new DataTable();
            try
            {
                // Session["Branchid"] = "1481";
                CommonVariables objCOM = new CommonVariables();


                terminate.Columns.Add("Memberid");
                terminate.Columns.Add("MemberName");
                terminate.Columns.Add("Debit", typeof(decimal));
                terminate.Columns.Add("MemberHeadid");
                terminate.Columns.Add("ExcessRemittance", typeof(decimal));
                terminate.Columns.Add("NPArrier", typeof(decimal));
                terminate.Columns.Add("PArrier", typeof(decimal));
                terminate.Columns.Add("ChitCategory");





                string TotaldueAmount = "";

                if (groupnumber == "--select--")
                {
                }
                else
                {
                    objCOM.RowCount = balayer.GetScalarDataInt("select count(*) from auctiondetails where IsPrized='Y' and AuctionDate<='" + balayer.indiandateToMysqlDate(dateto) + "' and GroupID=" + groupnumber);
                    if (objCOM.RowCount > 0)
                    {
                        objCOM.DtHeads = balayer.GetDataTable("select NodeID from headstree where ParentID=" + groupnumber);
                        for (int j = 0; j < objCOM.DtHeads.Rows.Count; j++)
                        {
                            DataRow terminaterw = terminate.NewRow();
                            objCOM.Sss = balayer.GetSingleValue(@"select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1 from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

                            TotaldueAmount = balayer.GetSingleValue(@"select sum(CurrentDueAmount) from auctiondetails where GroupID=" + groupnumber + " and AuctionDate<='" + balayer.indiandateToMysqlDate(dateto) + "';");

                            var transfername = balayer.GetSingleValue(@"select (case when(r.ApprovedDate>'" + balayer.indiandateToMysqlDate(dateto) + "') then concat(m1.CustomerName) else concat(mg1.MemberName) end) as `MemberName` from membertogroupmaster as mg1 left join transfer_approval r on mg1.Head_Id=r.GrpMemberID join membermaster m1 on m1.MemberIDNew=r.Old_Member join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by v1.ChoosenDate DESC");


                            objCOM.StrName = balayer.GetSingleValue(@"select (case when(r.DateOfRemoval>'" + balayer.indiandateToMysqlDate(dateto) + "') then concat(m1.CustomerName) else concat(mg1.MemberName) end) as `MemberName` from membertogroupmaster as mg1 left join removal_approval r on mg1.Head_Id=r.GroupMemberID join membermaster m1 on m1.MemberIDNew=r.OldMemberID join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by v1.ChoosenDate DESC ;");

                            if (string.IsNullOrEmpty(objCOM.StrName) && string.IsNullOrEmpty(transfername))
                            {
                                objCOM.StrMemID = balayer.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_id=" + objCOM.DtHeads.Rows[j]["NodeID"]);
                                if (objCOM.StrMemID != "")
                                {
                                    objCOM.MemberName = balayer.GetSingleValue("SELECT CustomerName FROM svcf.membermaster where MemberIDNew=" + objCOM.StrMemID);

                                    terminaterw["MemberName"] = objCOM.MemberName;
                                }
                            }

                            else if (objCOM.StrName.ToString() == "")
                            {
                                // strName = UpperFirst(strName);
                                terminaterw["MemberName"] = transfername;
                            }
                            else
                            {
                                terminaterw["MemberName"] = objCOM.StrName.ToString();
                            }


                            var memberid = balayer.GetSingleValue(@"SELECT MemberID FROM svcf.membertogroupmaster where Head_Id='" + objCOM.DtHeads.Rows[j]["NodeID"] + "' and branchid='" + drpdownBranchlist.SelectedValue + "';");
                            if (string.IsNullOrEmpty(memberid))
                            {
                                objCOM.StrMemID = balayer.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_id=" + objCOM.DtHeads.Rows[j]["NodeID"]);

                                terminaterw["Memberid"] = objCOM.StrMemID;
                            }
                            else
                            {
                                terminaterw["Memberid"] = memberid;

                            }

                            var memheadid = balayer.GetSingleValue(@"SELECT Head_Id FROM svcf.membertogroupmaster where Head_id=" + objCOM.DtHeads.Rows[j]["NodeID"]);
                            if (string.IsNullOrEmpty(memheadid))
                            {
                                var headid = balayer.GetSingleValue("SELECT Head_Id FROM svcf.membertogroupmaster where Head_id=" + objCOM.DtHeads.Rows[j]["NodeID"]);

                                terminaterw["MemberHeadid"] = headid;
                            }
                            else
                            {
                                terminaterw["MemberHeadid"] = memheadid;

                            }


                            //  objCOM.Debit = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(dateto) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            objCOM.Debit = balayer.GetSingleValue(@" select (case  when ( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(dateto) + "' ) then (case when (sum(case when v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 then v1.Amount else 0.00 end)>sum(case when v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 then v1.Amount else 0.00 end)) then sum(case when v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 then v1.Amount else 0.00 end)-sum(case when v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 then v1.Amount else 0.00 end) else sum(case when v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 then v1.Amount else 0.00 end)-sum(case when v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 then v1.Amount else 0.00 end) end )end) as Debit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            if (string.IsNullOrEmpty(objCOM.Debit))
                            {

                                terminaterw["Debit"] = "0.00";
                            }
                            else
                            {

                                terminaterw["Debit"] = objCOM.Debit;
                            }
                            //objCOM.Excess = balayer.GetSingleValue(@"select  (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -'" + TotaldueAmount + "')>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -'" + TotaldueAmount + "') else 0.00 end) as ExcessRemittance from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + ddlChit.SelectedItem.Value + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + ddlChit.SelectedItem.Value + " and v1.Head_Id=" + DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            objCOM.Excess = balayer.GetSingleValue(@"select  (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -'" + TotaldueAmount + "')>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -'" + TotaldueAmount + "') else 0.00 end) as ExcessRemittance from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            if (string.IsNullOrEmpty(objCOM.Excess))
                            {
                                terminaterw["ExcessRemittance"] = "0.00";
                            }
                            else
                            {
                                terminaterw["ExcessRemittance"] = objCOM.Excess;
                            }
                            //objCOM.Nparr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + ddlChit.SelectedItem.Value + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + ddlChit.SelectedItem.Value + " and v1.Head_Id=" + DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            objCOM.Nparr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(dateto) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<='" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            if (string.IsNullOrEmpty(objCOM.Nparr))
                            {

                                objCOM.Dtnullck = balayer.GetDataTable(@"SELECT * FROM voucher WHERE Head_Id = " + objCOM.DtHeads.Rows[j]["NodeID"] + " and ChoosenDate <= '" + balayer.indiandateToMysqlDate(dateto) + "';");
                                if (objCOM.Dtnullck.Rows.Count <= 0)
                                {
                                    objCOM.Maxdrawno = Convert.ToInt32(balayer.GetSingleValue(@"select max(DrawNO) as Drawno from auctiondetails where GroupId=" + groupnumber + "  and  (IsPrized='N' or IsPrized='Y') and AuctionDate <= '" + balayer.indiandateToMysqlDate(dateto) + "' ;"));
                                    objCOM.Totalcr = Convert.ToDecimal(balayer.GetSingleValue(@"select sum(CurrentDueAmount) as Amount from auctiondetails where GroupId=" + groupnumber + "  and  (IsPrized='N' or IsPrized='Y') and DrawNO <= " + objCOM.Maxdrawno + ""));
                                    terminaterw["NPArrier"] = objCOM.Totalcr;
                                }
                                else
                                {
                                    terminaterw["NPArrier"] = "0.00";
                                }
                            }
                            else
                            {
                                terminaterw["NPArrier"] = objCOM.Nparr;
                            }
                            var ChitCategory = balayer.GetSingleValue("select g1.ChitCategory from groupmaster as g1 join membertogroupmaster as mg1 on (g1.Head_Id=mg1.GroupID) where g1.BranchID=" + drpdownBranchlist.SelectedValue + " and g1.Head_Id=" + groupnumber + " and mg1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + "");
                            if (string.IsNullOrEmpty(ChitCategory))
                            {
                                terminaterw["ChitCategory"] = "";
                            }
                            else
                            {
                                terminaterw["ChitCategory"] = ChitCategory;
                            }
                            //objCOM.Parr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "' ) then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + ddlChit.SelectedItem.Value + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and mg1.GroupID=" + ddlChit.SelectedItem.Value + " and v1.Head_Id=" + DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(txtFromDate.Text) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            objCOM.Parr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' ) then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<=  '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            if (string.IsNullOrEmpty(objCOM.Excess))
                            {
                                terminaterw["PArrier"] = "0.00";
                            }
                            else
                            {
                                terminaterw["PArrier"] = objCOM.Parr;
                            }

                            terminate.Rows.Add(terminaterw.ItemArray);

                        }


                        // ViewState["RunningDT"] = terminate;
                        return terminate;
                    }
                    else
                    {

                        objCOM.DtHeads = balayer.GetDataTable(" select h1.NodeID from svcf.headstree h1 right join svcf.membertogroupmaster mg1 on mg1.Head_Id=h1.NodeID where h1.ParentID='" + groupnumber + "' group by h1.NodeID");

                        for (int j = 0; j < objCOM.DtHeads.Rows.Count; j++)
                        {
                            DataRow terminaterw = terminate.NewRow();
                            objCOM.Sss = balayer.GetSingleValue(@"select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1 from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            objCOM.StrName = balayer.GetSingleValue(@"select concat(mg1.MemberName) as `MemberName` from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + groupnumber + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + drpdownBranchlist.SelectedValue + " and mg1.GroupID=" + groupnumber + " and v1.Head_Id=" + objCOM.DtHeads.Rows[j]["NodeID"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(dateto) + "' group by v1.Head_Id order by v1.ChoosenDate DESC ;");
                            if (string.IsNullOrEmpty(objCOM.StrName))
                            {
                                string strMemID = balayer.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_id=" + objCOM.DtHeads.Rows[j]["NodeID"]);
                                if (strMemID != "")
                                {
                                    terminaterw["MemberName"] = balayer.GetSingleValue("SELECT CustomerName FROM svcf.membermaster where MemberIDNew=" + strMemID);
                                }
                            }
                            else
                            {

                                terminaterw["MemberName"] = objCOM.StrName;
                            }
                            objCOM.Credit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='C') then Amount else 0.00 end) as Credit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(dateto) + "' and Head_id=" + objCOM.DtHeads.Rows[j]["NodeID"]);
                            objCOM.Debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(dateto) + "' and Head_id=" + objCOM.DtHeads.Rows[j]["NodeID"]);
                            if (string.IsNullOrEmpty(objCOM.Credit))
                                objCOM.Credit = "0.00";
                            if (string.IsNullOrEmpty(objCOM.Debit))
                                objCOM.Debit = "0.00";
                            objCOM.DecCredit = Convert.ToDecimal(objCOM.Credit);
                            objCOM.DecDebit = Convert.ToDecimal(objCOM.Debit);


                            objCOM.Excess = null;
                            if (string.IsNullOrEmpty(objCOM.Excess))
                            {
                                terminaterw["ExcessRemittance"] = "0.00";
                            }
                            else
                            {
                                terminaterw["ExcessRemittance"] = objCOM.Excess;
                            }

                            if (objCOM.DecCredit > objCOM.DecDebit)
                            {

                                terminaterw["ExcessRemittance"] = objCOM.DecCredit - objCOM.DecDebit;
                                terminaterw["Debit"] = "0.00";
                            }
                            else
                            {

                                terminaterw["Debit"] = objCOM.DecDebit - objCOM.DecCredit;
                            }


                            var memberid = balayer.GetSingleValue(@"SELECT MemberID FROM svcf.membertogroupmaster where Head_Id='" + objCOM.DtHeads.Rows[j]["NodeID"] + "' and branchid='" + drpdownBranchlist.SelectedValue + "';");
                            if (string.IsNullOrEmpty(memberid))
                            {
                                objCOM.StrMemID = balayer.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_id=" + objCOM.DtHeads.Rows[j]["NodeID"]);

                                terminaterw["Memberid"] = objCOM.StrMemID;
                            }
                            else
                            {
                                terminaterw["Memberid"] = memberid;

                            }

                            var memheadid = balayer.GetSingleValue(@"SELECT Head_Id FROM svcf.membertogroupmaster where Head_id=" + objCOM.DtHeads.Rows[j]["NodeID"]);
                            if (string.IsNullOrEmpty(memheadid))
                            {
                                var headid = balayer.GetSingleValue("SELECT Head_Id FROM svcf.membertogroupmaster where Head_id=" + objCOM.DtHeads.Rows[j]["NodeID"]);
                                terminaterw["MemberHeadid"] = headid;
                            }
                            else
                            {
                                terminaterw["MemberHeadid"] = memheadid;

                            }

                            objCOM.Nparr = null;
                            if (string.IsNullOrEmpty(objCOM.Nparr))
                            {
                                terminaterw["NPArrier"] = "0.00";
                            }
                            else
                            {
                                terminaterw["NPArrier"] = objCOM.Nparr;
                            }
                            objCOM.Parr = null;
                            if (string.IsNullOrEmpty(objCOM.Excess))
                            {
                                terminaterw["PArrier"] = "0.00";
                            }
                            else
                            {
                                terminaterw["PArrier"] = objCOM.Parr;
                            }

                            terminate.Rows.Add(terminaterw.ItemArray);
                        }

                        return terminate;
                    }

                }


            }
            catch (Exception) { }
            return terminate;

        }

        public System.Data.DataTable GrpwarDebDT2()
        {
            DataTable Chitdebt = new DataTable();
            Chitdebt.Columns.Add("Groupnumber");
            Chitdebt.Columns.Add("ChitCategory");
            Chitdebt.Columns.Add("Membercount");
            Chitdebt.Columns.Add("PurePersonal", typeof(decimal));
            Chitdebt.Columns.Add("GuarontorNameOnly", typeof(decimal));
            Chitdebt.Columns.Add("FirstTotal", typeof(decimal));
            Chitdebt.Columns.Add("Documentonly", typeof(decimal));
            Chitdebt.Columns.Add("DocumentandGuarontor", typeof(decimal));
            Chitdebt.Columns.Add("SecondTotal", typeof(decimal));
            Chitdebt.Columns.Add("companycount", typeof(decimal));
            Chitdebt.Columns.Add("Total", typeof(decimal));
            Chitdebt.Columns.Add("GrandTotal", typeof(decimal));


            DataRow CDdr = Chitdebt.NewRow();

            DataTable getgrouplist = balayer.GetDataTable("SELECT Head_Id FROM svcf.groupmaster where ChitStartDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and branchid='" + drpdownBranchlist.SelectedValue + "' order by ChitValue;");
            var companychit = balayer.GetSingleValue("SELECT MemberIDNew FROM svcf.membermaster where CustomerName='Sree Visalam Chit Fund Ltd' and branchid ='" + drpdownBranchlist.SelectedValue + "';");
            if (getgrouplist.Rows.Count != 0)
            {
                for (int i = 0; i < getgrouplist.Rows.Count; i++)
                {
                    decimal ComapanyChitAmnt = 0;
                    decimal FullPersonalAmnt = 0;
                    decimal GuaNmeOnlyAmnt = 0;
                    decimal DocuOnlyAmnt = 0;
                    decimal DocandGuaAmnt = 0;
                    var companycount = 0;
                    //var memberscount = 0;
                    var ChitCategory = "";
                    int memberscount = 0;
                    bool creditian = false;
                    var groupid = Convert.ToString(getgrouplist.Rows[i]["Head_Id"]);
                    var groupname = balayer.GetSingleValue("SELECT GROUPNO FROM svcf.groupmaster where head_id ='" + groupid + "' and branchid='" + drpdownBranchlist.SelectedValue + "';");

                    DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + groupid);

                    string drawno1 = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + groupid);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + getgrouplist.Rows[i]["Head_Id"]);
                    //if (dtTerminated.Rows.Count == 0)

                    if (drawno1 == Noofmem)
                    {
                        System.Data.DataTable creditamnt = Terminate(groupid, txtToDate.Text);
                        if (creditamnt.Rows.Count != 0)
                        {
                            DataTable TerminateDT = creditamnt;
                            if (TerminateDT.Rows.Count != 0)
                            {
                                for (int jkl = 0; jkl < TerminateDT.Rows.Count; jkl++)
                                {
                                    var Ticketnumber = Convert.ToString(TerminateDT.Rows[jkl]["MemberHeadid"]);
                                    var Amount = Convert.ToString(TerminateDT.Rows[jkl]["PArrier"]);
                                    ChitCategory = Convert.ToString(TerminateDT.Rows[jkl]["ChitCategory"]);
                                    DataTable getpaymentdetails = balayer.GetDataTable("SELECT * FROM svcf.trans_payment where branchid=" + drpdownBranchlist.SelectedValue + " and ChitGroupId='" + groupid + "' and TokenNumber='" + Ticketnumber + "' and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "';");
                                    if (getpaymentdetails.Rows.Count != 0)
                                    {

                                        for (int j = 0; j < getpaymentdetails.Rows.Count; j++)
                                        {
                                            var drawno = Convert.ToString(getpaymentdetails.Rows[j]["DrawNo"]);
                                            var Tokennumber = Convert.ToString(getpaymentdetails.Rows[j]["TokenNumber"]);
                                            var PrizedAmount = Convert.ToDecimal(Amount);
                                            var memberid = objBAL.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_Id='" + Tokennumber + "' and branchid=" + drpdownBranchlist.SelectedValue + ";");
                                            var Guarantorname = Convert.ToString(getpaymentdetails.Rows[j]["GuarantorName"]);
                                            if (drawno == "1")
                                            {

                                                ComapanyChitAmnt = ComapanyChitAmnt + PrizedAmount;


                                                companycount++;
                                            }
                                            else if (companychit == memberid)
                                            {


                                                ComapanyChitAmnt = ComapanyChitAmnt + PrizedAmount;

                                                companycount++;

                                            }
                                            else
                                            {
                                                var docdetcount = objBAL.GetDataTable("SELECT * FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");
                                                if (docdetcount.Rows.Count != 0)
                                                {
                                                    var guaranteer = objBAL.GetSingleValue("SELECT guaranteer FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");

                                                    if (guaranteer == "")
                                                    {
                                                        // Document only

                                                        DocuOnlyAmnt = DocuOnlyAmnt + PrizedAmount;



                                                        memberscount++;
                                                    }
                                                    else if (guaranteer != "")
                                                    {
                                                        //Document and Guarontor

                                                        DocandGuaAmnt = DocandGuaAmnt + PrizedAmount;

                                                        memberscount++;
                                                    }


                                                }
                                                else
                                                {
                                                    if (Guarantorname == "")
                                                    {
                                                        // Pure Personal
                                                        FullPersonalAmnt = FullPersonalAmnt + PrizedAmount;


                                                        memberscount++;
                                                    }
                                                    else if (Guarantorname != "")
                                                    {
                                                        //Guarontor Name Only

                                                        GuaNmeOnlyAmnt = GuaNmeOnlyAmnt + PrizedAmount;

                                                        memberscount++;
                                                    }
                                                }


                                            }
                                        }


                                    }
                                }

                            }

                        }
                        else
                        {
                            creditian = true;
                        }

                    }
                    else
                    {

                        DataTable RunningDT = Running(groupid, txtToDate.Text);

                        if (RunningDT.Rows.Count != 0)
                        {
                            for (int iop = 0; iop < RunningDT.Rows.Count; iop++)
                            {
                                var Ticketnumber = Convert.ToString(RunningDT.Rows[iop]["MemberHeadid"]);
                                var Amount = Convert.ToString(RunningDT.Rows[iop]["Debit"]);
                                //int mcount = Convert.ToUInt16(balayer.GetSingleValue("SELECT count(*) FROM svcf.trans_payment where branchid=" + drpdownBranchlist.SelectedValue + " and ChitGroupId='" + groupid + "' and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ;"));
                                int mcount = Convert.ToUInt16(balayer.GetSingleValue("SELECT count(*) FROM svcf.trans_payment where branchid=" + drpdownBranchlist.SelectedValue + " and ChitGroupId='" + groupid + "' and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and DrawNo!=1 and GuarantorName !='Sree visalam chit Fund Limited' ;"));
                                memberscount = Convert.ToUInt16(mcount);
                                ChitCategory = Convert.ToString(RunningDT.Rows[iop]["ChitCategory"]);
                                DataTable getpaymentdetails = balayer.GetDataTable("SELECT * FROM svcf.trans_payment where branchid=" + drpdownBranchlist.SelectedValue + " and ChitGroupId='" + groupid + "' and TokenNumber='" + Ticketnumber + "'and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ;");

                                if (getpaymentdetails.Rows.Count != 0)
                                {

                                    for (int j = 0; j < getpaymentdetails.Rows.Count; j++)
                                    {
                                        var drawno = Convert.ToString(getpaymentdetails.Rows[j]["DrawNo"]);
                                        var Tokennumber = Convert.ToString(getpaymentdetails.Rows[j]["TokenNumber"]);
                                        var PrizedAmount = Convert.ToDecimal(Amount);
                                        var memberid = objBAL.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_Id='" + Tokennumber + "' and branchid=" + drpdownBranchlist.SelectedValue + ";");
                                        var Guarantorname = Convert.ToString(getpaymentdetails.Rows[j]["GuarantorName"]);
                                        if (drawno == "1")
                                        {
                                            ComapanyChitAmnt = ComapanyChitAmnt + PrizedAmount;
                                            companycount++;
                                        }
                                        else if (companychit == memberid)
                                        {


                                            ComapanyChitAmnt = ComapanyChitAmnt + PrizedAmount;

                                            companycount++;

                                        }
                                        else
                                        {
                                            var docdetcount = objBAL.GetDataTable("SELECT * FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");
                                            if (docdetcount.Rows.Count != 0)
                                            {
                                                var guaranteer = objBAL.GetSingleValue("SELECT guaranteer FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");

                                                if (guaranteer == "")
                                                {
                                                    // Document only

                                                    DocuOnlyAmnt = DocuOnlyAmnt + PrizedAmount;
                                                    //memberscount++;
                                                }
                                                else if (guaranteer != "")
                                                {
                                                    //Document and Guarontor

                                                    DocandGuaAmnt = DocandGuaAmnt + PrizedAmount;

                                                    // memberscount++;
                                                }


                                            }
                                            else
                                            {
                                                if (Guarantorname == "")
                                                {
                                                    // Pure Personal
                                                    FullPersonalAmnt = FullPersonalAmnt + PrizedAmount;
                                                    // memberscount++;
                                                }
                                                else if (Guarantorname != "")
                                                {
                                                    //Guarontor Name Only
                                                    GuaNmeOnlyAmnt = GuaNmeOnlyAmnt + PrizedAmount;
                                                    //memberscount++;
                                                }
                                            }


                                        }
                                    }

                                }
                            }
                        }

                    }
                    if (creditian == false)
                    {
                        CDdr["Groupnumber"] = groupname;
                        CDdr["ChitCategory"] = ChitCategory;
                        CDdr["Membercount"] = memberscount;
                        CDdr["PurePersonal"] = FullPersonalAmnt;
                        CDdr["GuarontorNameOnly"] = GuaNmeOnlyAmnt;
                        CDdr["FirstTotal"] = FullPersonalAmnt + GuaNmeOnlyAmnt;
                        CDdr["Documentonly"] = DocuOnlyAmnt;
                        CDdr["DocumentandGuarontor"] = DocandGuaAmnt;
                        CDdr["SecondTotal"] = DocuOnlyAmnt + DocandGuaAmnt;
                        CDdr["companycount"] = companycount;
                        CDdr["Total"] = ComapanyChitAmnt;
                        CDdr["GrandTotal"] = GuaNmeOnlyAmnt + DocandGuaAmnt + FullPersonalAmnt + DocuOnlyAmnt + ComapanyChitAmnt;
                        Chitdebt.Rows.Add(CDdr.ItemArray);

                    }

                }

            }

            return Chitdebt;
        }

        public System.Data.DataTable GrpwarDebDTfor20()
        {
            DataTable Chitdebt = new DataTable();
            Chitdebt.Columns.Add("Groupnumber");
            Chitdebt.Columns.Add("Membercount");
            Chitdebt.Columns.Add("PurePersonal", typeof(decimal));
            Chitdebt.Columns.Add("GuarontorNameOnly", typeof(decimal));
            Chitdebt.Columns.Add("FirstTotal", typeof(decimal));
            Chitdebt.Columns.Add("Documentonly", typeof(decimal));
            Chitdebt.Columns.Add("DocumentandGuarontor", typeof(decimal));
            Chitdebt.Columns.Add("SecondTotal", typeof(decimal));
            Chitdebt.Columns.Add("companycount", typeof(decimal));
            Chitdebt.Columns.Add("Total", typeof(decimal));
            Chitdebt.Columns.Add("GrandTotal", typeof(decimal));

            DataRow CDdr = Chitdebt.NewRow();

            DataTable getgrouplist = balayer.GetDataTable("SELECT Head_Id FROM svcf.groupmaster where ChitStartDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and branchid='" + drpdownBranchlist.SelectedValue + "' ;");
            var companychit = balayer.GetSingleValue("SELECT MemberIDNew FROM svcf.membermaster where CustomerName='Sree Visalam Chit Fund Ltd' and branchid ='" + drpdownBranchlist.SelectedValue + "';");
            if (getgrouplist.Rows.Count != 0)
            {
                for (int i = 0; i < getgrouplist.Rows.Count; i++)
                {
                    decimal ComapanyChitAmnt = 0;
                    decimal FullPersonalAmnt = 0;
                    decimal GuaNmeOnlyAmnt = 0;
                    decimal DocuOnlyAmnt = 0;
                    decimal DocandGuaAmnt = 0;
                    var companycount = 0;
                    //var memberscount = 0;
                    int memberscount = 0;
                    bool creditian = false;
                    var groupid = Convert.ToString(getgrouplist.Rows[i]["Head_Id"]);
                    var groupname = balayer.GetSingleValue("SELECT GROUPNO FROM svcf.groupmaster where head_id ='" + groupid + "' and branchid='" + drpdownBranchlist.SelectedValue + "';");

                    DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + groupid);

                    string drawno1 = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + groupid);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + getgrouplist.Rows[i]["Head_Id"]);
                    //if (dtTerminated.Rows.Count == 0)

                    if (drawno1 == Noofmem)
                    {
                        System.Data.DataTable creditamnt = Terminate(groupid, txtToDate.Text);
                        if (creditamnt.Rows.Count != 0)
                        {
                            DataTable TerminateDT = creditamnt;
                            if (TerminateDT.Rows.Count != 0)
                            {
                                for (int jkl = 0; jkl < TerminateDT.Rows.Count; jkl++)
                                {
                                    var Ticketnumber = Convert.ToString(TerminateDT.Rows[jkl]["MemberHeadid"]);
                                    var Amount = Convert.ToString(TerminateDT.Rows[jkl]["PArrier"]);
                                    DataTable getpaymentdetails = balayer.GetDataTable("SELECT * FROM svcf.trans_payment where branchid=" + drpdownBranchlist.SelectedValue + " and ChitGroupId='" + groupid + "' and TokenNumber='" + Ticketnumber + "' and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "';");
                                    if (getpaymentdetails.Rows.Count != 0)
                                    {

                                        for (int j = 0; j < getpaymentdetails.Rows.Count; j++)
                                        {
                                            var drawno = Convert.ToString(getpaymentdetails.Rows[j]["DrawNo"]);
                                            var Tokennumber = Convert.ToString(getpaymentdetails.Rows[j]["TokenNumber"]);
                                            var PrizedAmount = Convert.ToDecimal(Amount);
                                            var memberid = objBAL.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_Id='" + Tokennumber + "' and branchid=" + drpdownBranchlist.SelectedValue + ";");
                                            var Guarantorname = Convert.ToString(getpaymentdetails.Rows[j]["GuarantorName"]);
                                            if (drawno == "1")
                                            {

                                                ComapanyChitAmnt = ComapanyChitAmnt + PrizedAmount;


                                                companycount++;
                                            }
                                            else if (companychit == memberid)
                                            {


                                                ComapanyChitAmnt = ComapanyChitAmnt + PrizedAmount;

                                                companycount++;

                                            }
                                            else
                                            {
                                                var docdetcount = objBAL.GetDataTable("SELECT * FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");
                                                if (docdetcount.Rows.Count != 0)
                                                {
                                                    var guaranteer = objBAL.GetSingleValue("SELECT guaranteer FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");

                                                    if (guaranteer == "")
                                                    {
                                                        // Document only

                                                        DocuOnlyAmnt = DocuOnlyAmnt + PrizedAmount;



                                                        memberscount++;
                                                    }
                                                    else if (guaranteer != "")
                                                    {
                                                        //Document and Guarontor

                                                        DocandGuaAmnt = DocandGuaAmnt + PrizedAmount;

                                                        memberscount++;
                                                    }


                                                }
                                                else
                                                {
                                                    if (Guarantorname == "")
                                                    {
                                                        // Pure Personal
                                                        FullPersonalAmnt = FullPersonalAmnt + PrizedAmount;


                                                        memberscount++;
                                                    }
                                                    else if (Guarantorname != "")
                                                    {
                                                        //Guarontor Name Only

                                                        GuaNmeOnlyAmnt = GuaNmeOnlyAmnt + PrizedAmount;

                                                        memberscount++;
                                                    }
                                                }


                                            }
                                        }


                                    }
                                }

                            }

                        }
                        else
                        {
                            creditian = true;
                        }

                    }
                    else
                    {

                        DataTable RunningDT = Running(groupid, txtToDate.Text);

                        if (RunningDT.Rows.Count != 0)
                        {
                            for (int iop = 0; iop < RunningDT.Rows.Count; iop++)
                            {
                                var Ticketnumber = Convert.ToString(RunningDT.Rows[iop]["MemberHeadid"]);
                                var Amount = Convert.ToString(RunningDT.Rows[iop]["Debit"]);
                                int mcount = Convert.ToUInt16(balayer.GetSingleValue("SELECT count(*) FROM svcf.trans_payment where branchid=" + drpdownBranchlist.SelectedValue + " and ChitGroupId='" + groupid + "' and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and DrawNo!=1 and GuarantorName !='Sree visalam chit Fund Limited' ;"));
                                memberscount = Convert.ToUInt16(mcount);
                                DataTable getpaymentdetails = balayer.GetDataTable("SELECT * FROM svcf.trans_payment where branchid=" + drpdownBranchlist.SelectedValue + " and ChitGroupId='" + groupid + "' and TokenNumber='" + Ticketnumber + "'and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ;");

                                if (getpaymentdetails.Rows.Count != 0)
                                {

                                    for (int j = 0; j < getpaymentdetails.Rows.Count; j++)
                                    {
                                        var drawno = Convert.ToString(getpaymentdetails.Rows[j]["DrawNo"]);
                                        var Tokennumber = Convert.ToString(getpaymentdetails.Rows[j]["TokenNumber"]);
                                        var PrizedAmount = Convert.ToDecimal(Amount);
                                        var memberid = objBAL.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_Id='" + Tokennumber + "' and branchid=" + drpdownBranchlist.SelectedValue + ";");
                                        var Guarantorname = Convert.ToString(getpaymentdetails.Rows[j]["GuarantorName"]);
                                        if (drawno == "1")
                                        {
                                            ComapanyChitAmnt = ComapanyChitAmnt + PrizedAmount;
                                            companycount++;
                                        }
                                        else if (companychit == memberid)
                                        {


                                            ComapanyChitAmnt = ComapanyChitAmnt + PrizedAmount;

                                            companycount++;

                                        }
                                        else
                                        {
                                            var docdetcount = objBAL.GetDataTable("SELECT * FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");
                                            if (docdetcount.Rows.Count != 0)
                                            {
                                                var guaranteer = objBAL.GetSingleValue("SELECT guaranteer FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");

                                                if (guaranteer == "")
                                                {
                                                    // Document only

                                                    DocuOnlyAmnt = DocuOnlyAmnt + PrizedAmount;
                                                    //memberscount++;
                                                }
                                                else if (guaranteer != "")
                                                {
                                                    //Document and Guarontor

                                                    DocandGuaAmnt = DocandGuaAmnt + PrizedAmount;

                                                    // memberscount++;
                                                }


                                            }
                                            else
                                            {
                                                if (Guarantorname == "")
                                                {
                                                    // Pure Personal
                                                    FullPersonalAmnt = FullPersonalAmnt + PrizedAmount;
                                                    // memberscount++;
                                                }
                                                else if (Guarantorname != "")
                                                {
                                                    //Guarontor Name Only
                                                    GuaNmeOnlyAmnt = GuaNmeOnlyAmnt + PrizedAmount;
                                                    //memberscount++;
                                                }
                                            }


                                        }
                                    }

                                }
                            }
                        }

                    }
                    if (creditian == false)
                    {
                        CDdr["Groupnumber"] = groupname;
                        CDdr["Membercount"] = memberscount;
                        CDdr["PurePersonal"] = FullPersonalAmnt;
                        CDdr["GuarontorNameOnly"] = GuaNmeOnlyAmnt;
                        CDdr["FirstTotal"] = FullPersonalAmnt + GuaNmeOnlyAmnt;
                        CDdr["Documentonly"] = DocuOnlyAmnt;
                        CDdr["DocumentandGuarontor"] = DocandGuaAmnt;
                        CDdr["SecondTotal"] = DocuOnlyAmnt + DocandGuaAmnt;
                        CDdr["companycount"] = companycount;
                        CDdr["Total"] = ComapanyChitAmnt;
                        CDdr["GrandTotal"] = GuaNmeOnlyAmnt + DocandGuaAmnt + FullPersonalAmnt + DocuOnlyAmnt + ComapanyChitAmnt;
                        Chitdebt.Rows.Add(CDdr.ItemArray);

                    }

                }

            }

            return Chitdebt;
        }
        public System.Data.DataTable GrpwarDebDT1()
        {
            DataTable Chitdebt = new DataTable();
            Chitdebt.Columns.Add("Groupnumber");
            Chitdebt.Columns.Add("npexcess", typeof(decimal));
            Chitdebt.Columns.Add("prizedexcesssecured", typeof(decimal));
            Chitdebt.Columns.Add("prizedexcessunsecured", typeof(decimal));
            Chitdebt.Columns.Add("arrearnonprized", typeof(decimal));
            Chitdebt.Columns.Add("prizedarrearsecured", typeof(decimal));
            //  Chitdebt.Columns.Add("nonprized", typeof(decimal));
            Chitdebt.Columns.Add("nonprizedarrearunsecured", typeof(decimal));
            Chitdebt.Columns.Add("terminatesecured", typeof(decimal));
            Chitdebt.Columns.Add("terminatenonsecured", typeof(decimal));
            // Chitdebt.Columns.Add("Total", typeof(decimal));
            //Chitdebt.Columns.Add("GrandTotal", typeof(decimal));

            DataRow CDdr = Chitdebt.NewRow();

            DataTable getgrouplist = balayer.GetDataTable("SELECT Head_Id FROM svcf.groupmaster where PSOOrderDate <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and branchid='" + drpdownBranchlist.SelectedValue + "' ;");
            var companychit = balayer.GetSingleValue("SELECT MemberIDNew FROM svcf.membermaster where CustomerName='Sree Visalam Chit Fund Ltd' and branchid ='" + drpdownBranchlist.SelectedValue + "';");
            if (getgrouplist.Rows.Count != 0)
            {
                for (int i = 0; i < getgrouplist.Rows.Count; i++)
                {
                    decimal npexcess = 0;
                    decimal prizedexcesssecured = 0;
                    decimal prizedexcessunsecured = 0;
                    decimal arrearnonprized = 0;
                    decimal prizedarrearsecured = 0;
                    decimal nonprizedarrearunsecured = 0;
                    decimal terminatesecured = 0;
                    decimal terminatenonsecured = 0;
                    //    decimal nonprized = 0;
                    // var companycount = 0;
                    //  int memberscount = 0;
                    bool creditian = false;
                    var groupid = Convert.ToString(getgrouplist.Rows[i]["Head_Id"]);
                    var groupname = balayer.GetSingleValue("SELECT GROUPNO FROM svcf.groupmaster where head_id ='" + groupid + "' and branchid='" + drpdownBranchlist.SelectedValue + "';");


                    DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + groupid);

                    string drawno1 = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and  GroupID=" + groupid);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + getgrouplist.Rows[i]["Head_Id"]);

                    if (drawno1 == Noofmem)
                    {
                        System.Data.DataTable creditamnt = Terminate1(groupid, txtToDate.Text);
                        if (creditamnt.Rows.Count != 0)
                        {
                            DataTable TerminateDT = creditamnt;
                            if (TerminateDT.Rows.Count != 0)
                            {
                                for (int jkl = 0; jkl < TerminateDT.Rows.Count; jkl++)
                                {
                                    var Ticketnumber = Convert.ToString(TerminateDT.Rows[jkl]["MemberHeadid"]);
                                    var Amount = Convert.ToString(TerminateDT.Rows[jkl]["PArrier"]);
                                    DataTable getpaymentdetails = balayer.GetDataTable("SELECT * FROM svcf.trans_payment where branchid=" + drpdownBranchlist.SelectedValue + " and ChitGroupId='" + groupid + "' and TokenNumber='" + Ticketnumber + "' and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "';");
                                    if (getpaymentdetails.Rows.Count != 0)
                                    {

                                        for (int j = 0; j < getpaymentdetails.Rows.Count; j++)
                                        {
                                            var drawno = Convert.ToString(getpaymentdetails.Rows[j]["DrawNo"]);
                                            var Tokennumber = Convert.ToString(getpaymentdetails.Rows[j]["TokenNumber"]);
                                            var PrizedAmount = Convert.ToDecimal(Amount);
                                            var memberid = objBAL.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_Id='" + Tokennumber + "' and branchid=" + drpdownBranchlist.SelectedValue + ";");
                                            var Guarantorname = Convert.ToString(getpaymentdetails.Rows[j]["GuarantorName"]);

                                            //  else
                                            //    {
                                            var docdetcount = objBAL.GetDataTable("SELECT * FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");
                                            if (docdetcount.Rows.Count != 0)
                                            {
                                                //    var guaranteer = objBAL.GetSingleValue("SELECT guaranteer FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");

                                                //    if (guaranteer == "")
                                                //    {

                                                //    terminatenonsecured = terminatenonsecured + PrizedAmount;
                                                //}
                                                //    else if (guaranteer != "")
                                                //    {
                                                terminatesecured = terminatesecured + PrizedAmount;
                                                // }


                                            }
                                            else
                                            {
                                                //if (Guarantorname == "")
                                                //{

                                                // terminatesecured = terminatesecured+ PrizedAmount;
                                                terminatenonsecured = terminatenonsecured + PrizedAmount;
                                                //    }
                                                //        else if (Guarantorname != "")
                                                //        {

                                                //        terminatesecured = terminatesecured+ PrizedAmount;
                                                //    }
                                            }


                                            // }
                                        }


                                    }

                                }

                            }

                        }
                        else
                        {
                            creditian = true;
                        }

                    }
                    else
                    {

                        DataTable RunningDT = Running(groupid, txtToDate.Text);

                        if (RunningDT.Rows.Count != 0)
                        {
                            for (int iop = 0; iop < RunningDT.Rows.Count; iop++)
                            {
                                var Ticketnumber = Convert.ToString(RunningDT.Rows[iop]["MemberHeadid"]);
                                var Amount = Convert.ToString(RunningDT.Rows[iop]["Debit"]);
                                decimal exess = Convert.ToDecimal(RunningDT.Rows[iop]["ExcessRemittance"]);
                                decimal nparriear = Convert.ToDecimal(RunningDT.Rows[iop]["NPArrier"]);
                                decimal parriear = Convert.ToDecimal(RunningDT.Rows[iop]["PArrier"]);



                                DataTable getpaymentdetails = balayer.GetDataTable("SELECT * FROM svcf.trans_payment where branchid=" + drpdownBranchlist.SelectedValue + " and ChitGroupId='" + groupid + "' and TokenNumber='" + Ticketnumber + "'and PaymentDate <='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' ;");

                                if (getpaymentdetails.Rows.Count != 0)
                                {

                                    for (int j = 0; j < getpaymentdetails.Rows.Count; j++)
                                    {
                                        //  var drawno = Convert.ToString(getpaymentdetails.Rows[j]["DrawNo"]);
                                        var Tokennumber = Convert.ToString(getpaymentdetails.Rows[j]["TokenNumber"]);
                                        var PrizedAmount = Convert.ToDecimal(Amount);
                                        arrearnonprized = arrearnonprized + nparriear;
                                        var memberid = objBAL.GetSingleValue("SELECT MemberID FROM svcf.membertogroupmaster where Head_Id='" + Tokennumber + "' and branchid=" + drpdownBranchlist.SelectedValue + ";");
                                        var Guarantorname = Convert.ToString(getpaymentdetails.Rows[j]["GuarantorName"]);
                                        var docdetcount = objBAL.GetDataTable("SELECT * FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");

                                        if (docdetcount.Rows.Count != 0)
                                        {
                                            //var guaranteer = objBAL.GetSingleValue("SELECT guaranteer FROM svcf.documentdetails where prizedmemberid='" + memberid + "' and groupid='" + groupid + "';");

                                            //if (guaranteer == "")
                                            //{
                                            //prizedexcessunsecured = prizedexcessunsecured + exess;
                                            //nonprizedarrearunsecured = nonprizedarrearunsecured+ parriear;

                                            //}
                                            //else if (guaranteer != "")

                                            //{
                                            prizedexcesssecured = prizedexcesssecured + exess;
                                            prizedarrearsecured = prizedarrearsecured + parriear;

                                            //}


                                        }
                                        else
                                        {
                                            //if (Guarantorname == "")
                                            //{

                                            prizedexcessunsecured = prizedexcessunsecured + exess;
                                            nonprizedarrearunsecured = nonprizedarrearunsecured + parriear;
                                            //}
                                            //    else if (Guarantorname != "")
                                            //    {

                                            //    prizedexcesssecured = prizedexcesssecured + exess;
                                            //    prizedarrearsecured = prizedarrearsecured+ parriear;
                                            //}

                                        }


                                        //}
                                    }

                                }
                                else
                                {
                                    if (RunningDT.Rows[iop]["MemberName"].ToString() != "")
                                    {
                                        npexcess = npexcess + exess;

                                        arrearnonprized = arrearnonprized + nparriear;
                                    }
                                }
                            }
                        }


                    }
                    if (creditian == false)
                    {
                        CDdr["Groupnumber"] = groupname;
                        CDdr["npexcess"] = npexcess;
                        CDdr["prizedexcesssecured"] = prizedexcesssecured;
                        CDdr["prizedexcessunsecured"] = prizedexcessunsecured;
                        CDdr["arrearnonprized"] = arrearnonprized;
                        CDdr["prizedarrearsecured"] = prizedarrearsecured;
                        CDdr["nonprizedarrearunsecured"] = nonprizedarrearunsecured;
                        //    CDdr["nonprized"] = nonprized;
                        CDdr["terminatesecured"] = terminatesecured;
                        CDdr["terminatenonsecured"] = terminatenonsecured;

                        Chitdebt.Rows.Add(CDdr.ItemArray);

                    }

                }

            }

            return Chitdebt;
        }
        protected void BtnTrPandLSt02_Click(object sender, EventArgs e)
        {
            try
            {
                ExportEXcel_PandL();
            }
            catch (Exception err) { }
        }

        public DataTable GetHeadPF(string nodeids)
        {
            DataTable MiscDt = new DataTable();
            try
            {
                //string strCredit = @"select t1.ChoosenDate as `Date`,t3.NodeID as 'NodeID',t3.Node as Heads , (case when " +
                //    "(sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount " +
                //    "else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when " +
                //    "t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when " +
                //    "t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 " +
                //    "end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' " +
                //    "then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on " +
                //    "t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 11 and t1.ChoosenDate between " +
                //    "'" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and t3.NodeID in (" + nodeids + ") group by `t1`.`Head_ID`";
                string strCredit = @"select t1.ChoosenDate as `Date`,t3.NodeID as 'NodeID',t3.Node as Heads , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 11 and t1.ChoosenDate between " +
                    "'" + balayer.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and t3.NodeID!='1971' group by `t1`.`Head_ID` having Debit>0.00";
                var dt1 = objBAL.GetDataTable(strCredit);

                var nodeids1 = dt1.AsEnumerable().Select(x => x.Field<UInt32>("NodeID")).ToList();
                //  List<string> NodeIds = new List<string>();
                string nodeids2 = string.Join(",", nodeids1);
                string[] nodearr = nodeids2.Split(',');
                List<int> NodeIds = new List<int>();
                foreach (var r in nodearr)
                {
                    NodeIds.Add(Convert.ToInt32(r));
                }


                MiscDt.Columns.Add("SNo");
                MiscDt.Columns.Add("Heads");
                MiscDt.Columns.Add("NodeID", typeof(int));
                MiscDt.Columns.Add("Debit", typeof(decimal));

                DataRow dr = MiscDt.NewRow();
                int iCount = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    if (Convert.ToDecimal(dt1.Rows[i]["Debit"]) > 0)
                    {
                        dr["SNo"] = iCount + 1;
                        dr["Heads"] = dt1.Rows[i]["Heads"];
                        dr["NodeID"] = dt1.Rows[i]["NodeID"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        MiscDt.Rows.Add(dr.ItemArray);
                        iCount++;
                    }
                }

                var subquery = (from li in NodeIds
                                join ri in MiscDt.AsEnumerable() on li equals ri.Field<System.Int32>("NodeID")
                                select ri).ToList();
                MiscDt = subquery.CopyToDataTable();
            }
            catch (Exception err)
            {

            }
            return MiscDt;
        }

        public DataTable GetMiscIncome(string nodeids)
        {
            DataTable MiscDt = new DataTable();
            try
            {
                string strCredit = @"select t1.ChoosenDate as `Date`,t3.NodeID as 'NodeID',t3.Node as Heads , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID " +
                    "where `t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 11 and t1.ChoosenDate between '2016/04/01' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' " +
                    "and t3.NodeID in (" + nodeids + ") group by `t1`.`Head_ID`";
                string[] nodearr = nodeids.Split(',');
                List<int> NodeIds = new List<int>();
                foreach (var r in nodearr)
                {
                    NodeIds.Add(Convert.ToInt32(r));
                }

                var dt1 = objBAL.GetDataTable(strCredit);

                MiscDt.Columns.Add("SNo");
                MiscDt.Columns.Add("Heads");
                MiscDt.Columns.Add("NodeID", typeof(int));
                MiscDt.Columns.Add("Credit", typeof(decimal));

                DataRow dr = MiscDt.NewRow();
                int iCount = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0)
                    {
                        dr["SNo"] = iCount + 1;
                        dr["Heads"] = dt1.Rows[i]["Heads"];
                        dr["NodeID"] = dt1.Rows[i]["NodeID"];
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        MiscDt.Rows.Add(dr.ItemArray);
                        iCount++;
                    }
                }

                var subquery = (from li in NodeIds
                                join ri in MiscDt.AsEnumerable() on li equals ri.Field<System.Int32>("NodeID")
                                select ri).ToList();
                MiscDt = subquery.CopyToDataTable();

            }
            catch (Exception err)
            {

            }
            return MiscDt;
        }

        //public void ExportEXcel_PandL()
        //{
        //    try
        //    {
        //        System.Data.DataTable CreditDt1 = GetDataPandL_Credit("64,1128098,1123088,66,67,68");
        //        DataTable MiscDt = GetMiscIncome("1114674,83,1120857");


        //        //Exporting to Excel
        //        //string folderPath = "E:\\Exceltest\\";
        //        //if (!Directory.Exists(folderPath))
        //        //{
        //        //    Directory.CreateDirectory(folderPath);
        //        //}
        //        string filename = "Tr.P&L St-02" + DateTime.Now.Second.ToString();


        //        using (XLWorkbook wb = new XLWorkbook())
        //        {
        //            //var ws = wb.Worksheets.Add(CreditDt, "Tr. P&L St-02");
        //            var ws = wb.Worksheets.Add("Tr. P&L St-02");

        //            AddImage(wb, "Tr. P&L St-02", 1, 1, "imglogo.png");

        //            ws.Cell(1, 7).Value = "Statement No. 02";
        //            ws.Range(1, 7, 1, 8).Merge().AddToNamed("Titles");

        //            ws.Cell(1, 2).Value = "Sree Visalam Chit Fund Ltd.,";
        //            ws.Cell(1, 2).Style.Font.Bold = true;
        //            ws.Cell(1, 2).Style.Font.FontSize = 14;


        //            ws.Cell(2, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;

        //            ws.Cell(2, 2).Style.Font.Bold = true;
        //            ws.Cell(2, 2).Style.Font.FontSize = 13;

        //            ws.Cell(3, 1).Value = "TRIAL BALANCE OF PROFIT AND LOSS ACCOUNT AS AT "+ txtToDate.Text;
        //            ws.Cell(3, 1).Style.Font.Bold = true;
        //            ws.Cell(3, 1).Style.Font.FontSize = 13;
        //            ws.Range(3, 1, 3, 10).Merge().AddToNamed("Titles");

        //            ws.Cell(4, 1).Value = "CREDIT";
        //            ws.Cell(4, 1).Style.Font.Bold = true;
        //            ws.Cell(4, 1).Style.Font.FontSize = 11;
        //            ws.Range(4, 1, 4, 4).Merge().AddToNamed("Titles");

        //            ws.Cell(4, 5).Value = "DEBIT";
        //            ws.Cell(4, 5).Style.Font.Bold = true;
        //            ws.Cell(4, 5).Style.Font.FontSize = 11;
        //            ws.Range(4, 5, 4, 8).Merge().AddToNamed("Titles");

        //            #region First Head                   
        //            ws.Cell(5, 1).Value = "S.No.";
        //            ws.Cell(5, 1).Style.Font.Bold = true;
        //            ws.Cell(5, 1).Style.Font.FontSize = 11;

        //            ws.Cell(5, 2).Value = "HEAD";
        //            ws.Cell(5, 2).Style.Font.Bold = true;
        //            ws.Cell(5, 2).Style.Font.FontSize = 11;

        //            ws.Cell(5, 3).Value = "";
        //            ws.Cell(5, 4).Value = "AMOUNT";
        //            ws.Cell(5, 4).Style.Font.Bold = true;
        //            ws.Cell(5, 4).Style.Font.FontSize = 11;
        //            #endregion

        //            #region Second Header
        //            ws.Cell(5, 5).Value = "S.No.";
        //            ws.Cell(5, 5).Style.Font.Bold = true;
        //            ws.Cell(5, 5).Style.Font.FontSize = 11;

        //            ws.Cell(5, 6).Value = "HEAD";
        //            ws.Cell(5, 6).Style.Font.Bold = true;
        //            ws.Cell(5, 6).Style.Font.FontSize = 11;

        //            ws.Cell(5, 7).Value = "";
        //            ws.Cell(5, 8).Value = "AMOUNT";
        //            ws.Cell(5, 8).Style.Font.Bold = true;
        //            ws.Cell(5, 8).Style.Font.FontSize = 11;
        //            #endregion

        //            #region Adding Normal Head[Left1]
        //            int RangeCell = 6;

        //            int SNo = 1;
        //            decimal SumAmount = 1;
        //            bool FlagSummaryFilled = false;
        //            int CreditPortion1Cell = 0;
        //            int CreditMiscCell = 0;
        //            #region Credit Left head portion 1

        //            foreach (DataRow dr in CreditDt1.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 1).Value = SNo;
        //                ws.Cell(RangeCell, 2).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;
        //                ws.Cell(RangeCell, 3).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "0.00";
        //                if (dr.Table.Rows.Count == SNo)
        //                {
        //                    ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C6:C11)}";
        //                    ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00";
        //                    CreditPortion1Cell = RangeCell;
        //                }
        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                var rangedbr5 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 4));
        //                rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                var rangedbr6 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 4));
        //                rangedbr6.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }
        //            #endregion

        //            #region Credit head left Portion 2
        //            var CreditDt2 = GetDataPandL_Credit("69,76,70,71,72,1119937,75");
        //            foreach (DataRow dr in CreditDt2.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 1).Value = SNo;
        //                ws.Cell(RangeCell, 2).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;
        //                ws.Cell(RangeCell, 4).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00";

        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                var rangedbr51 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 4));
        //                rangedbr51.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                var rangedbr52 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 4));
        //                rangedbr52.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }
        //            #endregion

        //            #endregion

        //            #region Adding Misc Portion[Left2]
        //            SNo = 1;
        //            RangeCell = RangeCell + 2;
        //            ws.Cell(RangeCell, 2).Value = "MISCELLANEOUS INCOME";
        //            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
        //            int miscrowcount = 1;
        //            RangeCell = RangeCell + 1;
        //            int startingCell = RangeCell;
        //            foreach (DataRow mdr in MiscDt.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 1).Value = SNo;
        //                ws.Cell(RangeCell, 2).Value = mdr.ItemArray[1];
        //                ws.Cell(RangeCell, 3).Value = mdr.ItemArray[3];
        //                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "0.00";

        //                if (mdr.Table.Rows.Count == miscrowcount)
        //                {
        //                    ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + startingCell + ":C" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00";
        //                    CreditMiscCell = RangeCell;
        //                }

        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                miscrowcount = miscrowcount + 1;
        //                var rangedbr53 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 4));
        //                rangedbr53.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                var rangedbr54 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 4));
        //                rangedbr54.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }
        //            #endregion


        //            #region Add Data to Second Header[Right1]

        //            RangeCell = 6;
        //            SNo = 1;
        //            SumAmount = 1;
        //            FlagSummaryFilled = false;
        //            int LastRRow = 0;
        //            #region Portion 1
        //            var PFHeadDt = GetHeadPF("86,87,168,169,1508,91,90,1067");

        //            foreach (DataRow dr in PFHeadDt.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 5).Value = SNo;
        //                ws.Cell(RangeCell, 6).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;
        //                ws.Cell(RangeCell, 7).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "0.00";
        //                if (dr.Table.Rows.Count == SNo)
        //                {
        //                    ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G6:G" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //                }

        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                var rangedbr55 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr55.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                var rangedbr56 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr56.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }
        //            #endregion

        //            #region Portion 2
        //            var PFHeadDt2 = GetHeadPF("92,1113550,173");
        //            int starting2 = RangeCell;
        //            int rowcount = 1;
        //            foreach (DataRow dr in PFHeadDt2.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 5).Value = SNo;
        //                ws.Cell(RangeCell, 6).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;
        //                ws.Cell(RangeCell, 7).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "0.00";
        //                if (dr.Table.Rows.Count == rowcount)
        //                {
        //                    ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G" + starting2 + ":G" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //                }
        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                rowcount = rowcount + 1;
        //                var rangedbr58 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr58.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                var rangedbr59 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr59.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }
        //            #endregion

        //            #region Portion 3
        //            rowcount = 1;
        //            var PFHeadDt3 = GetHeadPF("94,1953,1069,139");
        //            int starting3 = RangeCell;
        //            foreach (DataRow dr in PFHeadDt3.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 5).Value = SNo;
        //                ws.Cell(RangeCell, 6).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;
        //                ws.Cell(RangeCell, 7).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "0.00";
        //                if (dr.Table.Rows.Count == rowcount)
        //                {
        //                    ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G" + starting3 + ":G" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //                }
        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                rowcount = rowcount + 1;
        //                var rangedbr60 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr60.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                var rangedbr61 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr61.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }
        //            #endregion

        //            #region Portion 4
        //            var PFHeadDt4 = GetHeadPF("97,98,99,1111221,101,1126210,1113548");
        //            int starting4 = RangeCell;
        //            rowcount = 1;
        //            foreach (DataRow dr in PFHeadDt4.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 5).Value = SNo;
        //                ws.Cell(RangeCell, 6).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;
        //                ws.Cell(RangeCell, 7).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "0.00";
        //                if (dr.Table.Rows.Count == rowcount)
        //                {
        //                    ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G" + starting4 + ":G" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //                }
        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                rowcount = rowcount + 1;
        //                var rangedbr62 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr62.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                var rangedbr63 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr63.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }
        //            #endregion

        //            #region Portion 5
        //            var PFHeadDt5 = GetHeadPF("140,104");
        //            int starting5 = RangeCell;
        //            rowcount = 1;
        //            foreach (DataRow dr in PFHeadDt5.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 5).Value = SNo;
        //                ws.Cell(RangeCell, 6).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;
        //                ws.Cell(RangeCell, 7).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "0.00";
        //                if (dr.Table.Rows.Count == rowcount)
        //                {
        //                    ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G" + starting5 + ":G" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //                }
        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                rowcount = rowcount + 1;
        //                var rangedbr64 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr64.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                var rangedbr65 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr65.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }
        //            #endregion

        //            #region miscellaneous portion for Second Header[Right1]
        //            ws.Cell(RangeCell, 5).Value = SNo;
        //            ws.Cell(RangeCell, 6).Value = "MISCELLANEOUS EXPENSES";
        //             ws.Cell(RangeCell, 6).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 6).Style.Font.FontSize = 11;

        //            SNo = 1;
        //            SumAmount = 1;
        //            FlagSummaryFilled = false;
        //            RangeCell = RangeCell + 1;

        //            var miscDtRight2 = GetHeadPF("106,141,107,108,1120858,110,111,113");
        //            startingCell = RangeCell;
        //            foreach (DataRow dr in miscDtRight2.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 6).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;
        //                ws.Cell(RangeCell, 7).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "0.00";

        //                if (dr.Table.Rows.Count == SNo)
        //                {
        //                    ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G" + startingCell + ":G" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //                }
        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                var rangedbr66 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr66.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //                var rangedbr67 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //                rangedbr67.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }


        //            #endregion

        //            ws.Cell(RangeCell, 6).Value = "Carried Over";
        //            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
        //            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 6).Style.Font.FontSize = 11;

        //            ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
        //            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";

        //            LastRRow = (RangeCell - 1);
        //            var rangedbr2 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //            rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

        //            var rangedbr3 = ws.Range(ws.Cell(5, 5), ws.Cell(RangeCell, 8));
        //            rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            #endregion

        //            //Carried over Credit - started
        //            ws.Cell(RangeCell, 2).Value = "Carried Over";
        //            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
        //            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

        //            ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(D" + CreditPortion1Cell + ":D" + CreditMiscCell + ")}";
        //            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00";

        //            var rangecr = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 4));
        //            rangecr.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

        //            var rangecr1 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 4));
        //            rangecr1.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

        //            //Carried over Credit - completed

        //            RangeCell = RangeCell + 2;

        //            #region 3rd Head[Left 3]
        //            ws.Cell(RangeCell, 1).Value = "CREDIT";
        //            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
        //            ws.Range(RangeCell, 1, RangeCell, 4).Merge().AddToNamed("Titles");

        //            //3rd Head Right[Right  3]
        //            ws.Cell(RangeCell, 5).Value = "DEBIT";
        //            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;
        //            ws.Range(RangeCell, 5, RangeCell, 8).Merge().AddToNamed("Titles");

        //            //3rd head left
        //            RangeCell = RangeCell + 1;
        //            int thirdheadleftstarting = RangeCell;
        //            ws.Cell(RangeCell, 1).Value = "S.No.";
        //            ws.Cell(RangeCell, 1).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 1).Style.Font.FontSize = 11;

        //            ws.Cell(RangeCell, 2).Value = "HEAD";
        //            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

        //            ws.Cell(RangeCell, 3).Value = "";
        //            ws.Cell(RangeCell, 4).Value = "AMOUNT";
        //            ws.Cell(RangeCell, 4).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 4).Style.Font.FontSize = 11;


        //            //3rd right[Right  3]
        //            ws.Cell(RangeCell, 5).Value = "S.No.";
        //            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

        //            ws.Cell(RangeCell, 6).Value = "HEAD";
        //            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 6).Style.Font.FontSize = 11;

        //            ws.Cell(RangeCell, 7).Value = "";
        //            ws.Cell(RangeCell, 8).Value = "AMOUNT";
        //            ws.Cell(RangeCell, 8).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 8).Style.Font.FontSize = 11;


        //            //to the 3rd head[left 2]
        //            RangeCell = RangeCell + 1;
        //            ws.Cell(RangeCell, 2).Value = "Brought Forward";
        //            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
        //            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
        //            ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(D" + CreditPortion1Cell + ":D" + CreditMiscCell + ")}";
        //            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00";
        //            #endregion

        //            #region 3rd Head[Right2]

        //            RangeCell = thirdheadleftstarting + 1;
        //            int srightstarting = 0;
        //            srightstarting = RangeCell;

        //            int DebitStartingCell = RangeCell;
        //            //to the 3rd head[right2]
        //            // RangeCell = RangeCell + 1;
        //            ws.Cell(RangeCell, 6).Value = "Brought Forward";
        //            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
        //            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 6).Style.Font.FontSize = 11;
        //            ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G6:G" + LastRRow + ")}";
        //            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";

        //            #region Adding DataPortion for 3rd Head[Right2]
        //            var PFHeadDtR2 = GetHeadPF("118,1073,1126619,121,122,124,125,126,1074,128,119");
        //            RangeCell = RangeCell + 1;
        //            int startingr2 = RangeCell;
        //            rowcount = 1;
        //            SNo = 1;
        //            foreach (DataRow dr in PFHeadDtR2.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 5).Value = SNo;
        //                ws.Cell(RangeCell, 6).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;

        //                ws.Cell(RangeCell, 7).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "0.00";
        //                if (dr.Table.Rows.Count == rowcount)
        //                {
        //                    ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G" + startingr2 + ":G" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //                }
        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                rowcount = rowcount + 1;
        //                var rangecr7 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //                rangecr7.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

        //                var rangecr3 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //                rangecr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }

        //            #endregion

        //            ws.Cell(RangeCell, 6).Value = "VEHICLE MAINTENANCE & REPAIRS";
        //            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 6).Style.Font.FontSize = 11;

        //            #region 3rd right - vehicle maintenance data bind
        //            var PFHeadDtR3 = GetHeadPF("129,130,1120852,1132566,1130026,1132567,131,132");
        //            RangeCell = RangeCell + 1;
        //            int startingr3 = RangeCell;
        //            rowcount = 1;

        //            foreach (DataRow dr in PFHeadDtR3.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 6).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;

        //                ws.Cell(RangeCell, 7).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "0.00";
        //                if (dr.Table.Rows.Count == rowcount)
        //                {
        //                    ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G" + startingr3 + ":G" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //                }
        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                rowcount = rowcount + 1;
        //                var rangecr12 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //                rangecr12.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

        //                var rangecr13 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //                rangecr13.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }

        //            #endregion

        //            #region 3rd right - contribution
        //            var PFHeadDtR4 = GetHeadPF("1113797,134,135");
        //            //    RangeCell = RangeCell + 1;
        //            int startingr4 = RangeCell;
        //            rowcount = 1;

        //            foreach (DataRow dr in PFHeadDtR4.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 6).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;

        //                ws.Cell(RangeCell, 7).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "0.00";
        //                if (dr.Table.Rows.Count == rowcount)
        //                {
        //                    ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G" + startingr4 + ":G" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //                }
        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                rowcount = rowcount + 1;
        //                var rangecr14 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //                rangecr14.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

        //                var rangecr15 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //                rangecr15.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }

        //            #endregion

        //            #region 3rd right - swachh/krishi
        //            var PFHeadDtR5 = GetHeadPF("136,137,1062,4733,1113945");
        //            // RangeCell = RangeCell + 1;
        //            int startingr5 = RangeCell;
        //            rowcount = 1;

        //            foreach (DataRow dr in PFHeadDtR5.AsEnumerable())
        //            {
        //                ws.Cell(RangeCell, 6).Value = dr.ItemArray[1];
        //                SumAmount = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount;

        //                ws.Cell(RangeCell, 7).Value = dr.ItemArray[3];
        //                ws.Cell(RangeCell, 7).Style.NumberFormat.Format = "0.00";
        //                if (dr.Table.Rows.Count == rowcount)
        //                {
        //                    ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G" + startingr5 + ":G" + RangeCell + ")}";
        //                    ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //                }
        //                RangeCell = RangeCell + 1;
        //                SNo = SNo + 1;
        //                rowcount = rowcount + 1;
        //                var rangecr16 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //                rangecr16.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

        //                var rangecr17 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //                rangecr17.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            }

        //            #endregion

        //            #region Credit Net Loss  [left tabe 3rd]
        //            ws.Cell(RangeCell, 2).Value = "NET LOSS";
        //            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
        //            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
        //            ws.Cell(RangeCell, 4).Value = "0.00";
        //            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //            var rangecr18 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //            rangecr18.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

        //            var rangecr19 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //            rangecr19.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

        //            #endregion

        //            //  ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C6:C" + (RangeCell - 1) + ")}";

        //            #region Credit Net Profit right table[3rd]
        //            ws.Cell(RangeCell, 6).Value = "NET PROFIT";
        //            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
        //            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 6).Style.Font.FontSize = 11;
        //            ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(G" + startingr2 + ":G" + (RangeCell - 1) + ")}";
        //            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //            var rangecr20 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //            rangecr20.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

        //            var rangecr21 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //            rangecr21.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        //            #endregion

        //            RangeCell = RangeCell + 1;
        //            #region Credit Total
        //            ws.Cell(RangeCell, 2).Value = "TOTAL";
        //            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
        //            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
        //            ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(D" + CreditPortion1Cell + ":D" + CreditMiscCell + ")}";
        //            ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00";
        //            //Border Credit
        //            var range3rdHeadLeft = ws.Range(ws.Cell(thirdheadleftstarting, 1), ws.Cell(RangeCell, 4));
        //            range3rdHeadLeft.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        //            var rangecr22 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //            rangecr22.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

        //            var rangecr23 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 8));
        //            rangecr23.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

        //            #endregion

        //            #region Debit Total
        //            ws.Cell(RangeCell, 6).Value = "TOTAL";
        //            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
        //            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
        //            ws.Cell(RangeCell, 6).Style.Font.FontSize = 11;
        //            ws.Cell(RangeCell, 8).FormulaA1 = "{=SUM(D" + CreditPortion1Cell + ":D" + CreditMiscCell + ")}";
        //            ws.Cell(RangeCell, 8).Style.NumberFormat.Format = "0.00";
        //            #endregion
        //            //Border Debit
        //            var rangedbrright2 = ws.Range(ws.Cell(thirdheadleftstarting, 5), ws.Cell(RangeCell, 8));
        //            rangedbrright2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

        //            #endregion

        //            var titlesStyle = wb.Style;
        //            titlesStyle.Font.Bold = true;
        //            titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
        //            //  titlesStyle.Fill.BackgroundColor = XLColor.Cyan;

        //            wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
        //            ws.Columns().AdjustToContents();

        //            // wb.SaveAs(folderPath + filename + ".xlsx");
        //            Response.Clear();
        //            Response.Buffer = true;
        //            Response.Charset = "";
        //            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        //            Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
        //            using (MemoryStream MyMemoryStream = new MemoryStream())
        //            {
        //                wb.SaveAs(MyMemoryStream);
        //                MyMemoryStream.WriteTo(Response.OutputStream);
        //                Response.Flush();
        //                //Response.End();
        //                HttpContext.Current.Response.End();
        //            }
        //        }
        //    }
        //    catch (Exception err)
        //    {

        //    }
        //}
        public void ExportEXcel_PandL()
        {
            try
            {
                System.Data.DataTable CreditDt1 = GetDataPandL_Credit("64,1128098,1123088,1131147,66,67,68,69,76,70,71,72,1119937,75,1129697,1120889,1130637,1120857,79,1114674,1126826,83");
                // DataTable MiscDt = GetMiscIncome("1114674,83,1120857");
                string filename = "Tr.P&L St-02" + DateTime.Now.Second.ToString();

                using (XLWorkbook wb = new XLWorkbook())
                {
                    //var ws = wb.Worksheets.Add(CreditDt, "Tr. P&L St-02");
                    var ws = wb.Worksheets.Add("Tr. P&L St-02");
                    var PFHeadDt = GetHeadPF("86,87,168,169,1508,91,90,1067,92,1113550,173,94,1132559,1132561,1953,1069,1132270,1132271,1132558,139,1132960,1132961,97,1132560,1132562,98,1131148,99,1111221,1113792,1113794,1113793,101,1126210,1113548,1113806,140,104,105,1132274,1132272,1132556,106,141,107,108,109,1120858,110,111,113,1132477,73,1131995,84,115,116,118,120,119,1126619,121,122,124,125,1132564,1132565,126,127,128,142,112,1132273,1132557,129,130,1132566,1120852,1132567,1130026,131,132,1113797,134,135,136,137,1062,4733,1113945,1132060,1132723,1131829,103,1131692,1134821,1134820,1114674");

                    int logo = 1;
                    int branch = 2;
                    int date = 3;
                    int CREDIT = 4;
                    int SNo1 = 5;
                    List<string> ss = new List<string> { "imglogo.png", "imglogo1.png", "imglogo2.png" };
                    double page = Math.Ceiling((float)PFHeadDt.Rows.Count / 35);
                    for (int i = 0; i < page; i++)
                    {
                        AddImage(wb, "Tr. P&L St-02", 1, logo, "imglogo.png");

                        ws.Cell(logo, 5).Value = "Statement No. 02";
                        ws.Range(logo, 5, logo, 6).Merge().AddToNamed("Titles");

                        ws.Cell(logo, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(logo, 2).Style.Font.Bold = true;
                        ws.Cell(logo, 2).Style.Font.FontSize = 14;

                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(branch, 2).Value = "Mount Road";
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(branch, 2).Value = "Pallathur";
                        }
                        else
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        }
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;

                        ws.Cell(date, 1).Value = "TRIAL BALANCE OF PROFIT AND LOSS ACCOUNT AS AT " + txtToDate.Text;
                        ws.Cell(date, 1).Style.Font.Bold = true;
                        ws.Cell(date, 1).Style.Font.FontSize = 13;
                        ws.Range(date, 1, date, 6).Merge().AddToNamed("Titles");

                        ws.Cell(CREDIT, 1).Value = "CREDIT";
                        ws.Cell(CREDIT, 1).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 1).Style.Alignment.TextRotation = 90;
                        ws.Cell(CREDIT, 1).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 1, CREDIT, 3).Merge().AddToNamed("Titles");

                        ws.Cell(CREDIT, 4).Value = "DEBIT";
                        ws.Cell(CREDIT, 4).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 4).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 4, CREDIT, 6).Merge().AddToNamed("Titles");

                        ws.Cell(SNo1, 1).Value = "S.No.";
                        ws.Cell(SNo1, 1).Style.Font.Bold = true;
                        ws.Cell(SNo1, 1).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 2).Value = "HEAD";
                        ws.Cell(SNo1, 2).Style.Font.Bold = true;
                        ws.Cell(SNo1, 2).Style.Font.FontSize = 11;

                        // ws.Cell(5, 3).Value = "";
                        ws.Cell(SNo1, 3).Value = "AMOUNT";
                        ws.Cell(SNo1, 3).Style.Font.Bold = true;
                        ws.Cell(SNo1, 3).Style.Font.FontSize = 11;


                        ws.Cell(SNo1, 4).Value = "S.No.";
                        ws.Cell(SNo1, 4).Style.Font.Bold = true;
                        ws.Cell(SNo1, 4).Style.Font.FontSize = 11;

                        ws.Cell(SNo1, 5).Value = "HEAD";
                        ws.Cell(SNo1, 5).Style.Font.Bold = true;
                        ws.Cell(SNo1, 5).Style.Font.FontSize = 11;

                        //  ws.Cell(5, 7).Value = "";
                        ws.Cell(SNo1, 6).Value = "AMOUNT";
                        ws.Cell(SNo1, 6).Style.Font.Bold = true;
                        ws.Cell(SNo1, 6).Style.Font.FontSize = 11;
                        var rangedbr571 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 6));
                        rangedbr571.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr671 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 6));
                        rangedbr671.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        logo = logo + 43;
                        branch = branch + 43;
                        date = date + 43;
                        CREDIT = CREDIT + 43;
                        SNo1 = SNo1 + 43;
                    }

                    int SNo = 1;
                    decimal SumAmount = 0;
                    //  bool FlagSummaryFilled = false;
                    // int CreditPortion1Cell = 0;
                    // int CreditMiscCell = 0;
                    int RangeCell = 6;
                    int creditrows = 0;

                    for (int j = 0; j < CreditDt1.Rows.Count; j++)
                    {
                        if (j < 35)
                        {
                            creditrows = creditrows + 1;
                            ws.Cell(RangeCell, 1).Value = SNo;
                            ws.Cell(RangeCell, 2).Value = CreditDt1.Rows[j]["Heads"];
                            SumAmount = Convert.ToDecimal(CreditDt1.Rows[j]["Credit"]) + SumAmount;
                            ws.Cell(RangeCell, 3).Value = Convert.ToDecimal(CreditDt1.Rows[j]["Credit"]);

                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            RangeCell = RangeCell + 1;
                            SNo = SNo + 1;
                            var rangedbr51 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 3));
                            rangedbr51.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr61 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 3));
                            rangedbr61.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        }
                        else
                        {
                            break;
                        }
                    }

                    RangeCell = 6;
                    SNo = 1;
                    decimal SumAmount1 = 0;
                    // FlagSummaryFilled = false;
                    int LastRRow = 0;
                    int debitrows = 0;
                    for (int j = 0; j < PFHeadDt.Rows.Count; j++)
                    {
                        if (j < 35)
                        {
                            debitrows = debitrows + 1;
                            ws.Cell(RangeCell, 4).Value = SNo;
                            ws.Cell(RangeCell, 5).Value = PFHeadDt.Rows[j]["Heads"];
                            SumAmount1 = Convert.ToDecimal(PFHeadDt.Rows[j]["Debit"]) + SumAmount1;
                            ws.Cell(RangeCell, 6).Value = Convert.ToDecimal(PFHeadDt.Rows[j]["Debit"]);
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            //if (dr.Table.Rows.Count == SNo)
                            // {
                            //   ws.Cell(RangeCell1, 6).FormulaA1 = "{=SUM(G6:G" + RangeCell1 + ")}";
                            //  ws.Cell(RangeCell1, 6).Style.NumberFormat.Format = "0.00";
                            // }

                            RangeCell = RangeCell + 1;
                            SNo = SNo + 1;
                            var rangedbr551 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 6));
                            rangedbr551.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr561 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 6));
                            rangedbr561.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        }
                        else
                        {
                            break;
                        }
                    }

                    if (PFHeadDt.Rows.Count > 35)
                    {
                        ws.Cell(RangeCell, 5).Value = "Total Carried Over";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                        //  ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                        //   ws.Cell(RangeCell, 6).Style.NumberFormat.Format = SumAmount1;
                        ws.Cell(RangeCell, 6).Value = SumAmount1;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        LastRRow = (RangeCell - 1);
                        var rangedbr2 = ws.Range(ws.Cell(5, 4), ws.Cell(RangeCell, 6));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(5, 4), ws.Cell(RangeCell, 6));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                        //Carried over Credit - started
                        ws.Cell(RangeCell, 2).Value = "Total Carried Over";
                        ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                        //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                        //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                        //  ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                        //  ws.Cell(RangeCell, 3).Style.NumberFormat.Format = SumAmount;
                        ws.Cell(RangeCell, 3).Value = SumAmount;
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        var rangecr = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 3));
                        rangecr.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangecr1 = ws.Range(ws.Cell(5, 1), ws.Cell(RangeCell, 3));
                        rangecr1.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        RangeCell = RangeCell + 8;


                        //     ws.Cell(RangeCell, 1).Value = SNo;
                        ws.Cell(RangeCell, 2).Value = "Brought Forward";
                        ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                        //SumAmount = Convert.ToDecimal(CreditDt1.Rows[creditrows][""]) + SumAmount;
                        ws.Cell(RangeCell, 3).Value = SumAmount;
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                        //RangeCell = RangeCell + 1;
                        //SNo = SNo + 1;
                        var rangedbr5 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                        rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr6 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                        rangedbr6.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                        //        ws.Cell(RangeCell, 4).Value = SNo;
                        ws.Cell(RangeCell, 5).Value = "Brought Forward";
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        // SumAmount1 = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount1;
                        ws.Cell(RangeCell, 6).Value = SumAmount1;
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        // if (dr.Table.Rows.Count == SNo)
                        //  {
                        //     ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + RangeCell + ")}";
                        //    ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "0.00";
                        //   }


                        //     SNo = SNo + 1;
                        var rangedbr55 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                        rangedbr55.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr56 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                        rangedbr56.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        RangeCell = RangeCell + 1;
                        for (; creditrows < CreditDt1.Rows.Count;)
                        {
                            if (creditrows < 70)
                            {
                                ws.Cell(RangeCell, 1).Value = SNo;
                                ws.Cell(RangeCell, 2).Value = CreditDt1.Rows[creditrows]["Heads"];
                                SumAmount = Convert.ToDecimal(CreditDt1.Rows[creditrows]["Credit"]) + SumAmount;
                                ws.Cell(RangeCell, 3).Value = Convert.ToDecimal(CreditDt1.Rows[creditrows]["Credit"]);
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";

                                var rangedbr52 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangedbr52.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                var rangedbr62 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangedbr62.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                RangeCell = RangeCell + 1;
                                SNo = SNo + 1;
                                creditrows = creditrows + 1;
                            }
                            else
                            {
                                break;
                            }
                        }
                        RangeCell = 50;
                        SNo = 36;
                        for (; debitrows < PFHeadDt.Rows.Count;)
                        {
                            if (debitrows < 70)
                            {
                                ws.Cell(RangeCell, 4).Value = SNo;
                                ws.Cell(RangeCell, 5).Value = PFHeadDt.Rows[debitrows]["Heads"];
                                SumAmount1 = Convert.ToDecimal(PFHeadDt.Rows[debitrows]["Debit"]) + SumAmount1;
                                ws.Cell(RangeCell, 6).Value = Convert.ToDecimal(PFHeadDt.Rows[debitrows]["Debit"]);
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                //   if (dr.Table.Rows.Count == SNo)
                                //  {
                                //   ws.Cell(RangeCell1, 6).FormulaA1 = "{=SUM(G6:G" + RangeCell1 + ")}";
                                //  ws.Cell(RangeCell1, 6).Style.NumberFormat.Format = "0.00";
                                //  }

                                var rangedbr552 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 6));
                                rangedbr552.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                var rangedbr562 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 6));
                                rangedbr562.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                debitrows = debitrows + 1;
                                RangeCell = RangeCell + 1;
                                SNo = SNo + 1;
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (PFHeadDt.Rows.Count > 70)
                        {
                            ws.Cell(RangeCell, 5).Value = "Total Carried Over";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                            ws.Cell(RangeCell, 6).Value = SumAmount1;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            //  ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            // ws.Cell(RangeCell, 6).Style.NumberFormat.Format = SumAmount1;

                            LastRRow = (RangeCell - 1);
                            var rangedbr21 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr21.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr31 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr31.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                            //Carried over Credit - started
                            ws.Cell(RangeCell, 2).Value = "Total Carried Over";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                            //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                            // ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            ws.Cell(RangeCell, 3).Value = SumAmount;
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00"; ;
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            var rangecr2 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangecr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr12 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangecr12.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            RangeCell = RangeCell + 8;

                            //          ws.Cell(RangeCell, 1).Value = SNo;
                            ws.Cell(RangeCell, 2).Value = "Brought Forward";
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            //SumAmount = Convert.ToDecimal(CreditDt1.Rows[creditrows][""]) + SumAmount;
                            ws.Cell(RangeCell, 3).Value = SumAmount;

                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            //RangeCell = RangeCell + 1;
                            //SNo = SNo + 1;
                            var rangedbr53 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangedbr53.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr63 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangedbr63.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                            //        ws.Cell(RangeCell, 4).Value = SNo;
                            ws.Cell(RangeCell, 5).Value = "Brought Forward";
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            // SumAmount1 = Convert.ToDecimal(dr.ItemArray[3]) + SumAmount1;
                            ws.Cell(RangeCell, 6).Value = SumAmount1;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            //  if (dr.Table.Rows.Count == SNo)
                            // {
                            //     ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + RangeCell + ")}";
                            //    ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "0.00";
                            //  }

                            //      
                            //       SNo = SNo + 1;
                            var rangedbr554 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr554.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr564 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr564.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            RangeCell = RangeCell + 1;
                            for (; creditrows < CreditDt1.Rows.Count;)
                            {
                                if (creditrows < 105)
                                {


                                    ws.Cell(RangeCell, 1).Value = SNo;
                                    ws.Cell(RangeCell, 2).Value = CreditDt1.Rows[creditrows]["Heads"];
                                    SumAmount = Convert.ToDecimal(CreditDt1.Rows[creditrows]["Credit"]) + SumAmount;
                                    ws.Cell(RangeCell, 3).Value = Convert.ToDecimal(CreditDt1.Rows[creditrows]["Credit"]);
                                    ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                                    SNo = SNo + 1;
                                    var rangedbr15 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                    rangedbr15.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                    var rangedbr16 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                    rangedbr16.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                    RangeCell = RangeCell + 1;
                                    creditrows = creditrows + 1;
                                }
                                else
                                {
                                    break;
                                }
                            }
                            RangeCell = 91;
                            SNo = 71;
                            for (; debitrows < PFHeadDt.Rows.Count;)
                            {
                                if (debitrows < 105)
                                {
                                    ws.Cell(RangeCell, 4).Value = SNo;
                                    ws.Cell(RangeCell, 5).Value = PFHeadDt.Rows[debitrows]["Heads"];
                                    SumAmount1 = Convert.ToDecimal(PFHeadDt.Rows[debitrows]["Debit"]) + SumAmount1;
                                    ws.Cell(RangeCell, 6).Value = Convert.ToDecimal(PFHeadDt.Rows[debitrows]["Debit"]);
                                    ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                    //   if (dr.Table.Rows.Count == SNo)
                                    //  {
                                    //   ws.Cell(RangeCell1, 6).FormulaA1 = "{=SUM(G6:G" + RangeCell1 + ")}";
                                    //  ws.Cell(RangeCell1, 6).Style.NumberFormat.Format = "0.00";
                                    // }


                                    var rangedbr155 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 6));
                                    rangedbr155.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                    var rangedbr156 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 6));
                                    rangedbr156.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                    RangeCell = RangeCell + 1;
                                    SNo = SNo + 1;
                                    debitrows = debitrows + 1;
                                }
                                else
                                {
                                    break;
                                }
                            }
                            RangeCell = RangeCell + 2;
                            ws.Cell(RangeCell, 5).Value = "";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                            //     ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            //      ws.Cell(RangeCell, 6).Style.NumberFormat.Format = SumAmount1;
                            ws.Cell(RangeCell, 6).Value = SumAmount1;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            LastRRow = (RangeCell - 1);
                            var rangedbr112 = ws.Range(ws.Cell(RangeCell - 2, 4), ws.Cell(RangeCell, 6));
                            rangedbr112.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr113 = ws.Range(ws.Cell(RangeCell - 2, 4), ws.Cell(RangeCell, 6));
                            rangedbr113.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                            //Carried over Credit - started
                            ws.Cell(RangeCell, 2).Value = "";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                            //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                            //     ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            //    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = SumAmount;
                            ws.Cell(RangeCell, 3).Value = SumAmount;
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            var rangecr212 = ws.Range(ws.Cell(RangeCell - 2, 1), ws.Cell(RangeCell, 3));
                            rangecr212.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr112 = ws.Range(ws.Cell(RangeCell - 2, 1), ws.Cell(RangeCell, 3));
                            rangecr112.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            RangeCell = RangeCell + 1;

                            if (SumAmount < SumAmount1)
                            {
                                ws.Cell(RangeCell, 5).Value = "";
                                ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                                //ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                //ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "";
                                ws.Cell(RangeCell, 6).Value = "";
                                LastRRow = (RangeCell - 1);
                                var rangedbr223 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr223.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangedbr323 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr323.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                                //Carried over Credit - started
                                ws.Cell(RangeCell, 2).Value = "NET LOSS";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
                                var ssss = (SumAmount1 - SumAmount);

                                //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                                //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                                //  ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                //   ws.Cell(RangeCell, 3).Style.NumberFormat.Format = (SumAmount1 - SumAmount);
                                ws.Cell(RangeCell, 3).Value = ssss;
                                ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                                var rangecr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr23.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangecr123 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr123.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                RangeCell = RangeCell + 1;


                                ws.Cell(RangeCell, 5).Value = "TOTAL";
                                ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                                //      ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                ws.Cell(RangeCell, 6).Value = SumAmount1;
                                ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                LastRRow = (RangeCell - 1);
                                var rangedbr234 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangedbr345 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr345.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                                //Carried over Credit - started
                                ws.Cell(RangeCell, 2).Value = "TOTAL";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                                //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                                //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                                //      ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                ws.Cell(RangeCell, 3).Value = SumAmount1;
                                ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                var rangecr56 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr56.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangecr165 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr165.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            }
                            else
                            {
                                ws.Cell(RangeCell, 5).Value = "NET PROFIT";
                                ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;
                                var sss = (SumAmount - SumAmount1);
                                //    ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                //    ws.Cell(RangeCell, 6).Style.NumberFormat.Format = sss;
                                ws.Cell(RangeCell, 6).Value = sss;
                                ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                LastRRow = (RangeCell - 1);
                                var rangedbr213 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr213.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangedbr313 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr313.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                                //Carried over Credit - started
                                ws.Cell(RangeCell, 2).Value = "";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                                //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                                //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                                //   ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                //   ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "";
                                ws.Cell(RangeCell, 3).Value = "";

                                var rangecr13 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr13.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangecr113 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr113.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                RangeCell = RangeCell + 1;


                                ws.Cell(RangeCell, 5).Value = "TOTAL";
                                ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                                //    ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                ws.Cell(RangeCell, 6).Value = SumAmount;
                                ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                LastRRow = (RangeCell - 1);
                                var rangedbr2131 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr2131.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangedbr3133 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr3133.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                                //Carried over Credit - started
                                ws.Cell(RangeCell, 2).Value = "TOTAL";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                                //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                                //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                                //       ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                ws.Cell(RangeCell, 3).Value = SumAmount;
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                var rangecr14 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr14.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangecr114 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr114.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            }
                        }
                        else
                        {
                            RangeCell = RangeCell + 2;
                            ws.Cell(RangeCell, 5).Value = "";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                            //      ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            //      ws.Cell(RangeCell, 6).Style.NumberFormat.Format = SumAmount1;

                            ws.Cell(RangeCell, 6).Value = SumAmount1;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            LastRRow = (RangeCell - 1);
                            var rangedbr112 = ws.Range(ws.Cell(RangeCell - 2, 4), ws.Cell(RangeCell, 6));
                            rangedbr112.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr113 = ws.Range(ws.Cell(RangeCell - 2, 4), ws.Cell(RangeCell, 6));
                            rangedbr113.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                            //Carried over Credit - started
                            ws.Cell(RangeCell, 2).Value = "";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                            //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                            //     ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            //    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = SumAmount;
                            ws.Cell(RangeCell, 3).Value = SumAmount;
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            var rangecr12 = ws.Range(ws.Cell(RangeCell - 2, 1), ws.Cell(RangeCell, 3));
                            rangecr12.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr112 = ws.Range(ws.Cell(RangeCell - 2, 1), ws.Cell(RangeCell, 3));
                            rangecr112.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            RangeCell = RangeCell + 1;

                            if (SumAmount < SumAmount1)
                            {
                                ws.Cell(RangeCell, 5).Value = "";
                                ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                                //ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                //ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "";
                                ws.Cell(RangeCell, 6).Value = "";
                                LastRRow = (RangeCell - 1);
                                var rangedbr223 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr223.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangedbr323 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr323.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                                //Carried over Credit - started
                                ws.Cell(RangeCell, 2).Value = "NET LOSS";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
                                var ssss = (SumAmount1 - SumAmount);

                                //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                                //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                                //  ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                //   ws.Cell(RangeCell, 3).Style.NumberFormat.Format = (SumAmount1 - SumAmount);
                                ws.Cell(RangeCell, 3).Value = ssss;
                                ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                var rangecr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr23.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangecr123 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr123.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                RangeCell = RangeCell + 1;


                                ws.Cell(RangeCell, 5).Value = "TOTAL";
                                ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                                //ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                ws.Cell(RangeCell, 6).Value = SumAmount1;
                                ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                LastRRow = (RangeCell - 1);
                                var rangedbr234 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangedbr345 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr345.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                                //Carried over Credit - started
                                ws.Cell(RangeCell, 2).Value = "TOTAL";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                                //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                                //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                                //    ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                ws.Cell(RangeCell, 3).Value = SumAmount1;
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                var rangecr56 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr56.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangecr165 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr165.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                            }
                            else
                            {
                                ws.Cell(RangeCell, 5).Value = "NET PROFIT";
                                ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;
                                var sss = (SumAmount - SumAmount1);
                                //    ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                //    ws.Cell(RangeCell, 6).Style.NumberFormat.Format = sss;
                                ws.Cell(RangeCell, 6).Value = sss;
                                ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                LastRRow = (RangeCell - 1);
                                var rangedbr213 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr213.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangedbr313 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr313.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                                //Carried over Credit - started
                                ws.Cell(RangeCell, 2).Value = "";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                                //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                                //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                                //   ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                //   ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "";
                                ws.Cell(RangeCell, 3).Value = "";

                                var rangecr13 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr13.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangecr113 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr113.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                RangeCell = RangeCell + 1;


                                ws.Cell(RangeCell, 5).Value = "TOTAL";
                                ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                                //      ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                ws.Cell(RangeCell, 6).Value = SumAmount;
                                ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                LastRRow = (RangeCell - 1);
                                var rangedbr2131 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr2131.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangedbr3133 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                                rangedbr3133.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                                //Carried over Credit - started
                                ws.Cell(RangeCell, 2).Value = "TOTAL";
                                ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                                //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                                //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                                //        ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                                ws.Cell(RangeCell, 3).Value = SumAmount;
                                ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                var rangecr14 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr14.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                                var rangecr114 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                                rangecr114.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            }
                        }
                    }
                    else
                    {
                        RangeCell = RangeCell + 2;
                        ws.Cell(RangeCell, 5).Value = "";
                        ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                        //     ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                        //      ws.Cell(RangeCell, 6).Style.NumberFormat.Format = SumAmount1;
                        ws.Cell(RangeCell, 6).Value = SumAmount1;
                        ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        LastRRow = (RangeCell - 1);
                        var rangedbr112 = ws.Range(ws.Cell(RangeCell - 2, 4), ws.Cell(RangeCell, 6));
                        rangedbr112.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr113 = ws.Range(ws.Cell(RangeCell - 2, 4), ws.Cell(RangeCell, 6));
                        rangedbr113.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                        //Carried over Credit - started
                        ws.Cell(RangeCell, 2).Value = "";
                        ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                        //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                        //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                        //     ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                        //    ws.Cell(RangeCell, 3).Style.NumberFormat.Format = SumAmount;
                        ws.Cell(RangeCell, 3).Value = SumAmount;
                        ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        var rangecr212 = ws.Range(ws.Cell(RangeCell - 2, 1), ws.Cell(RangeCell, 3));
                        rangecr212.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangecr112 = ws.Range(ws.Cell(RangeCell - 2, 1), ws.Cell(RangeCell, 3));
                        rangecr112.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        RangeCell = RangeCell + 1;

                        if (SumAmount < SumAmount1)
                        {
                            ws.Cell(RangeCell, 5).Value = "";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                            //ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            //ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "";
                            ws.Cell(RangeCell, 6).Value = "";
                            LastRRow = (RangeCell - 1);
                            var rangedbr223 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr223.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr323 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr323.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                            //Carried over Credit - started
                            ws.Cell(RangeCell, 2).Value = "NET LOSS";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;
                            var ssss = (SumAmount1 - SumAmount);
                            //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                            //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                            //  ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            //   ws.Cell(RangeCell, 3).Style.NumberFormat.Format = (SumAmount1 - SumAmount);
                            ws.Cell(RangeCell, 3).Value = ssss;
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            var rangecr23 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangecr23.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr123 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangecr123.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            RangeCell = RangeCell + 1;


                            ws.Cell(RangeCell, 5).Value = "TOTAL";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                            //     ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            ws.Cell(RangeCell, 6).Value = SumAmount1;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            LastRRow = (RangeCell - 1);
                            var rangedbr234 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr234.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr345 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr345.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                            //Carried over Credit - started
                            ws.Cell(RangeCell, 2).Value = "TOTAL";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                            //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;
                            // ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            ws.Cell(RangeCell, 3).Value = SumAmount1;
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            var rangecr56 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangecr56.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr165 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangecr165.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        }
                        else
                        {
                            ws.Cell(RangeCell, 5).Value = "NET PROFIT";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;
                            var sss = (SumAmount - SumAmount1);
                            //    ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            //    ws.Cell(RangeCell, 6).Style.NumberFormat.Format = sss;
                            ws.Cell(RangeCell, 6).Value = sss;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            LastRRow = (RangeCell - 1);
                            var rangedbr213 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr213.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr313 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr313.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                            //Carried over Credit - started
                            ws.Cell(RangeCell, 2).Value = "";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                            //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                            //   ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            //   ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "";
                            ws.Cell(RangeCell, 3).Value = "";

                            var rangecr13 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangecr13.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr113 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangecr113.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            RangeCell = RangeCell + 1;


                            ws.Cell(RangeCell, 5).Value = "TOTAL";
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 5).Style.Font.FontSize = 11;

                            //      ws.Cell(RangeCell, 6).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            ws.Cell(RangeCell, 6).Value = SumAmount;
                            ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            LastRRow = (RangeCell - 1);
                            var rangedbr2131 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr2131.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangedbr3133 = ws.Range(ws.Cell(RangeCell, 4), ws.Cell(RangeCell, 6));
                            rangedbr3133.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                            //Carried over Credit - started
                            ws.Cell(RangeCell, 2).Value = "TOTAL";
                            ws.Cell(RangeCell, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 2).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 2).Style.Font.FontSize = 11;

                            //ws.Cell(RangeCell, 4).FormulaA1 = "{=SUM(C" + CreditPortion1Cell +")}";
                            //ws.Cell(RangeCell, 4).Style.NumberFormat.Format = "0.00;

                            //        ws.Cell(RangeCell, 3).FormulaA1 = "{=SUM(G6:G" + (RangeCell - 1) + ")}";
                            ws.Cell(RangeCell, 3).Value = SumAmount;
                            ws.Cell(RangeCell, 3).Style.Font.Bold = true;
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            var rangecr14 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangecr14.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                            var rangecr114 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 3));
                            rangecr114.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        }
                    }
                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    //  titlesStyle.Fill.BackgroundColor = XLColor.Cyan;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    // wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }
                }


            }
            catch (Exception err)
            {

            }
        }
        public System.Data.DataTable GetDataPandL_Credit(string nodeids)
        {
            System.Data.DataTable dt = new System.Data.DataTable();
            DataTable ModDt = new DataTable();
            try
            {
                string str = @"select t1.ChoosenDate as `Date`,t3.Node as Heads ,t3.NodeID as 'NodeID', (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where " +
                    "`t1`.`BranchID` =" + drpdownBranchlist.SelectedValue + " and `t1`.`RootID` = 11 and t1.ChoosenDate between '" + objBAL.indiandateToMysqlDate(txtFrmDate.Text) + "' and '" + objBAL.indiandateToMysqlDate(txtToDate.Text) + "' and t3.NodeID!='1971' group by `t1`.`Head_ID` having Credit>0.00";
                System.Data.DataTable dt1 = new System.Data.DataTable();
                dt1 = objBAL.GetDataTable(str);


                //string str2 = @"SELECT MIN(documentid) as RowId,groupid,prizedmemberid ,count(*) FROM svcf.documentdetails GROUP BY groupid,prizedmemberid ;";

                //System.Data.DataTable dt2 = new System.Data.DataTable();
                //dt2 = objBAL.GetDataTable(str2);
                //var aa = dt2.AsEnumerable().Select(r => r.Field<Int32>("RowId").ToString()).ToArray();
                //string ss = string.Join("','", aa);




                var nodeids1 = dt1.AsEnumerable().Select(x => x.Field<UInt32>("NodeID")).ToList();
                //  List<string> NodeIds = new List<string>();
                string nodeids2 = string.Join(",", nodeids1);
                string[] nodearr = nodeids2.Split(',');
                List<int> NodeIds = new List<int>();
                foreach (var r in nodearr)
                {
                    NodeIds.Add(Convert.ToInt32(r));
                }

                dt.Columns.Add("SNo");
                dt.Columns.Add("Heads");
                dt.Columns.Add("NodeID", typeof(int));
                dt.Columns.Add("Credit", typeof(decimal));

                DataRow dr = dt.NewRow();
                int iCount = 0;
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0)
                    {
                        dr["SNo"] = iCount + 1;
                        dr["Heads"] = dt1.Rows[i]["Heads"];
                        dr["NodeID"] = dt1.Rows[i]["NodeID"];
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dt.Rows.Add(dr.ItemArray);
                        iCount++;
                    }
                }

                var subquery = (from li in NodeIds
                                join ri in dt.AsEnumerable() on li equals ri.Field<System.Int32>("NodeID")
                                select ri).ToList();
                ModDt = subquery.CopyToDataTable();

            }
            catch (Exception err)
            {

            }
            return ModDt;
        }

        protected void BtnSt6AB_Click(object sender, EventArgs e)
        {
            // YearEndingObj.BindSt6A_6B(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value),filepath);
            try
            {

                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;


                var dtM = YearEndingObj.bindforman(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));
                var dt = YearEndingObj.bindformanchit(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));

                sheet.Name = "forman6A";
                sheet.Pictures.Add(1, 1, filepath);

                //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");

                CellRange range = sheet.Range["A4:G5"];
                range.Borders.LineStyle = LineStyleType.Double;
                range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
                RichText richText01 = sheet.Range["C1"].RichText;
                richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                var bb = 2;
                if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                {

                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                }
                else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }
                else
                {
                    sheet.Range["C" + bb + ""].Value = "Branch: " + branchtext;
                    RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                }


                sheet.Range["E1"].Value = "Statement No. 6 (A).,";
                RichText richText06 = sheet.Range["E1"].RichText;
                richText06.SetFont(0, richText06.Text.Length - 1, fontBold);

                sheet.Range["A3"].Value = "Particulars of Foreman Chits as at " + txtToDate.Text;
                RichText richText03 = sheet.Range["A3"].RichText;
                richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
                sheet.Range["A3:G3"].Merge();

                sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

                sheet.Range["A4:A5"].Merge();
                sheet.Range["A4"].Value = "Sl.No.";
                sheet.Range["A4"].Style.Font.IsBold = true;
                sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["B4:B5"].Merge();
                sheet.Range["B4"].Value = "Chit Number.";
                sheet.Range["B4"].Style.Font.IsBold = true;
                sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["C4:C5"].Merge();
                sheet.Range["C4"].Value = "Prize Money";
                sheet.Range["C4"].Style.Font.IsBold = true;
                sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["D4:D5"].Merge();
                sheet.Range["D4"].Value = "Call Amount paid";
                sheet.Range["D4"].Style.Font.IsBold = true;
                sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["E4:E5"].Merge();
                sheet.Range["E4"].Value = "Balance Payable";
                sheet.Range["E4"].Style.Font.IsBold = true;
                sheet.Range["E4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["E4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["F4:F5"].Merge();
                sheet.Range["F4"].Value = "No of Instalment paid";
                sheet.Range["F4"].Style.Font.IsBold = true;
                sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["G4:G5"].Merge();
                sheet.Range["G4"].Value = "Remarks";
                sheet.Range["G4"].Style.Font.IsBold = true;
                sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;


                CellRange range3 = sheet.Range["H4:O5"];
                range3.Borders.LineStyle = LineStyleType.Double;
                range3.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range3.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                sheet.Range["H3"].Value = "Particulars of Foreman Substitution Chits as at " + txtToDate.Text;
                RichText richText04 = sheet.Range["H3"].RichText;
                richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                sheet.Range["H3:L3"].Merge();

                sheet.Range["M1"].Value = "Statement No. 6 (B).,";
                RichText richText05 = sheet.Range["M1"].RichText;
                richText05.SetFont(0, richText06.Text.Length - 1, fontBold);
                sheet.Range["M1:O1"].Merge();

                sheet.Range["H4:H5"].Merge();
                sheet.Range["H4"].Value = "Sl.No.";
                sheet.Range["H4"].Style.Font.IsBold = true;
                sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["I4:I5"].Merge();
                sheet.Range["I4"].Value = "Chit Number.";
                sheet.Range["I4"].Style.Font.IsBold = true;
                sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["J4:J5"].Merge();
                sheet.Range["J4"].Value = "Prize Money";
                sheet.Range["J4"].Style.Font.IsBold = true;
                sheet.Range["J4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["J4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["K4:K5"].Merge();
                sheet.Range["K4"].Value = "Call Amount paid ";
                sheet.Range["K4"].Style.Font.IsBold = true;
                sheet.Range["K4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["K4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["L4:L5"].Merge();
                sheet.Range["L4"].Value = "Balance Payable";
                sheet.Range["L4"].Style.Font.IsBold = true;
                sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["M4:M5"].Merge();
                sheet.Range["M4"].Value = "Call amount paid for Non Prized Chits";
                sheet.Range["M4"].Style.Font.IsBold = true;
                sheet.Range["M4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["M4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["N4:N5"].Merge();
                sheet.Range["N4"].Value = "No of Instalment paid";
                sheet.Range["N4"].Style.Font.IsBold = true;
                sheet.Range["N4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["N4"].Style.VerticalAlignment = VerticalAlignType.Center;

                sheet.Range["O4:O5"].Merge();
                sheet.Range["O4"].Value = "Remarks";
                sheet.Range["O4"].Style.Font.IsBold = true;
                sheet.Range["O4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                sheet.Range["O4"].Style.VerticalAlignment = VerticalAlignType.Center;





                int rowcnt = 5;
                int end = 5;
                foreach (DataRow dr in dtM.Rows)
                {
                    rowcnt = rowcnt + 1;
                    end = end + 1;
                    sheet.Range["A" + rowcnt].Value = dr.ItemArray[0].ToString();
                    sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                    sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                    sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                    PrizeMoneyforman = PrizeMoneyforman + Convert.ToDecimal(dr.ItemArray[2]);
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    CallAmount = CallAmount + Convert.ToDecimal(dr.ItemArray[3]);
                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                    sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                    BalancePayableforman = BalancePayableforman + Convert.ToDecimal(dr.ItemArray[4]);
                    sheet.Range["F" + rowcnt].Value = dr.ItemArray[5].ToString();

                    CellRange range5 = sheet.Range["A6:" + "G" + rowcnt];
                    range5.Borders.LineStyle = LineStyleType.Thin;
                    range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                }
                rowcnt = rowcnt + 3;
                sheet.Range["B" + rowcnt].Value = "Total";
                sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(PrizeMoneyforman);
                sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(CallAmount);
                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(BalancePayableforman);
                sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["E" + rowcnt].Style.Font.IsBold = true;
                CellRange range55 = sheet.Range["A6:" + "G" + rowcnt];
                range55.Borders.LineStyle = LineStyleType.Thin;
                range55.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range55.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                //        DataRow lastRow = dtM.Rows[dtM.Rows.Count - 1];
                //      value = Convert.ToDecimal(lastRow.ItemArray[4].ToString());
                rowcnt = rowcnt + 2;
                sheet.Range["B" + rowcnt].Value = "Balance Debit";
                sheet.Range["B" + rowcnt].Style.Font.IsBold = true;
                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(BalancePayableforman);
                sheet.Range["C" + rowcnt].NumberFormat = "#,##0.00";
                sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                CellRange range45 = sheet.Range["A6:" + "G" + rowcnt];
                range45.Borders.LineStyle = LineStyleType.Thin;
                range45.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range45.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                rowcnt = rowcnt + 2;

                //CellRange range1 = sheet.Range["A5:" + "G" + rowcnt];
                //range1.BorderAround(LineStyleType.Medium, Color.Black);

                int rowcnt1 = 5;
                decimal CallAmount1 = 0;

                foreach (DataRow dr in dt.Rows)
                {
                    rowcnt1 = rowcnt1 + 1;

                    sheet.Range["H" + rowcnt1].Value = dr.ItemArray[0].ToString();
                    sheet.Range["I" + rowcnt1].Value = dr.ItemArray[1].ToString();
                    sheet.Range["J" + rowcnt1].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                    sheet.Range["J" + rowcnt1].NumberFormat = "#,##0.00";
                    prize = prize + Convert.ToDecimal(dr.ItemArray[2]);
                    sheet.Range["K" + rowcnt1].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                    sheet.Range["K" + rowcnt1].NumberFormat = "#,##0.00";
                    callforman = callforman + Convert.ToDecimal(dr.ItemArray[3]);
                    sheet.Range["L" + rowcnt1].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                    sheet.Range["L" + rowcnt1].NumberFormat = "#,##0.00";
                    balance = balance + Convert.ToDecimal(dr.ItemArray[4]);
                    sheet.Range["M" + rowcnt1].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
                    sheet.Range["M" + rowcnt1].NumberFormat = "#,##0.00";
                    CallAmount1 = CallAmount1 + Convert.ToDecimal(dr.ItemArray[5]);
                    sheet.Range["N" + rowcnt1].Value = dr.ItemArray[6].ToString();

                    CellRange range5 = sheet.Range["H6:" + "O" + rowcnt1];
                    range5.Borders.LineStyle = LineStyleType.Thin;
                    range5.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range5.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }
                end = end + 3;
                sheet.Range["I" + end].Value = "Total";
                sheet.Range["I" + end].Style.Font.IsBold = true;
                sheet.Range["J" + end].NumberValue = Convert.ToDouble(prize);
                sheet.Range["J" + end].NumberFormat = "#,##0.00";
                sheet.Range["J" + end].Style.Font.IsBold = true;
                sheet.Range["K" + end].NumberValue = Convert.ToDouble(callforman);
                sheet.Range["K" + end].NumberFormat = "#,##0.00";
                sheet.Range["K" + end].Style.Font.IsBold = true;
                sheet.Range["L" + end].NumberValue = Convert.ToDouble(balance);
                sheet.Range["L" + end].NumberFormat = "#,##0.00";
                sheet.Range["L" + end].Style.Font.IsBold = true;
                sheet.Range["M" + end].NumberValue = Convert.ToDouble(CallAmount1);
                sheet.Range["M" + end].NumberFormat = "#,##0.00";
                sheet.Range["M" + end].Style.Font.IsBold = true;
                //            DataRow lastRow1 = dt.Rows[dt.Rows.Count - 1];
                CellRange range15 = sheet.Range["H6:" + "O" + end];
                range15.Borders.LineStyle = LineStyleType.Thin;
                range15.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                range15.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                //   end = end + 5;
                if (balance > CallAmount1)
                {
                    end = end + 2;
                    finalamount = Convert.ToDecimal(balance) - Convert.ToDecimal(CallAmount1);
                    sheet.Range["J" + end].Value = "Balance Debit";
                    sheet.Range["J" + end].Style.Font.IsBold = true;
                    sheet.Range["K" + end].Value = Convert.ToString(finalamount);
                    sheet.Range["K" + end].NumberFormat = "#,##0.00";
                    sheet.Range["K" + end].Style.Font.IsBold = true;
                    CellRange range25 = sheet.Range["H6:" + "O" + end];
                    range25.Borders.LineStyle = LineStyleType.Thin;
                    range25.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range25.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }

                else
                {
                    end = end + 2;
                    finalamount = Convert.ToDecimal(CallAmount1) - Convert.ToDecimal(balance);
                    sheet.Range["J" + end].Value = "Balance Credit";
                    sheet.Range["J" + end].Style.Font.IsBold = true;
                    sheet.Range["K" + end].Value = Convert.ToString(finalamount);
                    sheet.Range["K" + end].NumberFormat = "#,##0.00";
                    sheet.Range["K" + end].Style.Font.IsBold = true;
                    CellRange range35 = sheet.Range["H6:" + "O" + end];
                    range35.Borders.LineStyle = LineStyleType.Thin;
                    range35.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range35.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                }

                end = end + 2;
                //CellRange range2 = sheet.Range["H5:" + "O" + end];
                //range2.BorderAround(LineStyleType.Medium, Color.Black);
                sheet.AllocatedRange.AutoFitColumns();
                sheet.AllocatedRange.AutoFitRows();

                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(3, 17);
                sheet.SetColumnWidth(4, 17);
                sheet.SetColumnWidth(5, 17);
                sheet.SetColumnWidth(10, 17);
                sheet.SetColumnWidth(11, 17);
                sheet.SetColumnWidth(12, 17);
                sheet.SetColumnWidth(13, 17);
                sheet.SetColumnWidth(6, 9);
                sheet.SetColumnWidth(14, 9);


                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);
                workbook.SaveToHttpResponse("forman6A.xlsx", HttpContext.Current.Response);

                // workbook.SaveToFile(@"C:\Excel\forman.xlsx");
            }
            catch (Exception err)
            {
                LogCls.LogError(err, "Bind Statement 6A and 6B");
            }
        }

        protected void Btndeduction12_Click(object sender, EventArgs e)
        {
            try
            {
                var branchtext = balayer.GetSingleValue("select Node from headstree where NodeID=" + drpdownBranchlist.SelectedItem.Value + "");
                Workbook workbook = new Workbook();
                workbook.CreateEmptySheets(1);
                Worksheet sheet = workbook.Worksheets[0];

                ExcelFont fontBold = workbook.CreateFont();
                fontBold.IsBold = true;

                var deductionc = YearEndingObj.binddeduction(txtFrmDate.Text, txtToDate.Text, Convert.ToInt32(drpdownBranchlist.SelectedItem.Value));


                sheet.Name = "chitsecdepositandaccured";
                int aa = 1;
                int bb = 2;
                int cc = 3;
                int dd = 4;
                int ee = 5;
                double page = Math.Ceiling((float)deductionc.Rows.Count / 24);

                for (int k = 0; k < page; k++)
                {
                    sheet.Pictures.Add(aa, 1, filepath);
                    //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");

                    CellRange range = sheet.Range["A" + dd + ":N" + ee + ""];
                    range.Borders.LineStyle = LineStyleType.Double;
                    range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                    sheet.Range["C" + aa + ""].Value = "Sree Visalam Chit Fund Ltd.,";
                    RichText richText01 = sheet.Range["C" + aa + ""].RichText;
                    richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

                    if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                    {

                        sheet.Range["C" + bb + ""].Value = "Branch: " + "Mount Road";
                        RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                        richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

                    }
                    else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                    {
                        sheet.Range["C" + bb + ""].Value = "Branch: " + "Pallathur";
                        RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                        richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                    }
                    else
                    {
                        sheet.Range["C" + bb + ""].Value = "Branch: " + branchtext;
                        RichText richText02 = sheet.Range["C" + bb + ""].RichText;
                        richText02.SetFont(0, richText02.Text.Length - 1, fontBold);
                    }


                    sheet.Range["L" + bb + ""].Value = "Statement No. 12 Continue";
                    RichText richText33 = sheet.Range["L" + bb + ""].RichText;
                    richText33.SetFont(0, richText33.Text.Length - 1, fontBold);
                    sheet.Range["L" + bb + ":N" + bb + ""].Merge();
                    sheet.Range["L" + bb + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;

                    sheet.Range["A" + dd + ":A" + ee + ""].Merge();
                    sheet.Range["A" + dd + ""].Value = "Sl.No.";
                    RichText richText04 = sheet.Range["A" + dd + ""].RichText;
                    richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                    sheet.Range["A" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["A" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["B" + dd + ":B" + ee + ""].Merge();
                    sheet.Range["B" + dd + ""].Value = "SR / APR Number";
                    RichText richText05 = sheet.Range["B" + dd + ""].RichText;
                    richText05.SetFont(0, richText05.Text.Length - 1, fontBold);
                    sheet.Range["B" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["B" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["C" + dd + ":C" + ee + ""].Merge();
                    sheet.Range["C" + dd + ""].Value = "Name of the Staff";
                    RichText richText06 = sheet.Range["C" + dd + ""].RichText;
                    richText06.SetFont(0, richText06.Text.Length - 1, fontBold);
                    sheet.Range["C" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["C" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["D" + dd + ":D" + ee + ""].Merge();
                    sheet.Range["D" + dd + ""].Value = "Total Aggregate Amount";
                    RichText richText07 = sheet.Range["D" + dd + ""].RichText;
                    richText07.SetFont(0, richText07.Text.Length - 1, fontBold);
                    sheet.Range["D" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["D" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["E" + dd + ":K" + dd + ""].Merge();
                    sheet.Range["E" + dd + ""].Value = "ELIGIBLE DEDUCTIONS";
                    RichText richText08 = sheet.Range["E" + dd + ""].RichText;
                    richText08.SetFont(0, richText08.Text.Length - 1, fontBold);
                    sheet.Range["E" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["E" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["E" + ee + ""].Value = "Profession Tax";
                    RichText richText081 = sheet.Range["E" + ee + ""].RichText;
                    richText081.SetFont(0, richText081.Text.Length - 1, fontBold);
                    sheet.Range["E" + ee + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["E" + ee + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["F" + ee + ""].Value = "Provident Fund";
                    RichText richText082 = sheet.Range["F" + ee + ""].RichText;
                    richText082.SetFont(0, richText082.Text.Length - 1, fontBold);
                    sheet.Range["F" + ee + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["F" + ee + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["G" + ee + ""].Value = "LIC Premium";
                    RichText richText083 = sheet.Range["G" + ee + ""].RichText;
                    richText083.SetFont(0, richText083.Text.Length - 1, fontBold);
                    sheet.Range["G" + ee + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["G" + ee + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["H" + ee + ""].Value = "Interest for Housing Loan";
                    RichText richText084 = sheet.Range["H" + ee + ""].RichText;
                    richText084.SetFont(0, richText084.Text.Length - 1, fontBold);
                    sheet.Range["H" + ee + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["H" + ee + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["I" + ee + ""].Value = "Tution Fees";
                    RichText richText085 = sheet.Range["I" + ee + ""].RichText;
                    richText085.SetFont(0, richText085.Text.Length - 1, fontBold);
                    sheet.Range["I" + ee + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["I" + ee + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["J" + ee + ""].Value = "N.S.C Amount";
                    RichText richText086 = sheet.Range["J" + ee + ""].RichText;
                    richText086.SetFont(0, richText086.Text.Length - 1, fontBold);
                    sheet.Range["J" + ee + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["J" + ee + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["K" + ee + ""].Value = "Total Deductions";
                    RichText richText087 = sheet.Range["K" + ee + ""].RichText;
                    richText087.SetFont(0, richText087.Text.Length - 1, fontBold);
                    sheet.Range["K" + ee + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["K" + ee + ""].Style.VerticalAlignment = VerticalAlignType.Center;






                    sheet.Range["L" + dd + ":L" + ee + ""].Merge();
                    sheet.Range["L" + dd + ""].Value = "Balance";
                    RichText richText09 = sheet.Range["L" + dd + ""].RichText;
                    richText09.SetFont(0, richText09.Text.Length - 1, fontBold);
                    sheet.Range["L" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["L" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["M" + dd + ":M" + ee + ""].Merge();
                    sheet.Range["M" + dd + ""].Value = "T.D.S";
                    RichText richText10 = sheet.Range["M" + dd + ""].RichText;
                    richText10.SetFont(0, richText10.Text.Length - 1, fontBold);
                    sheet.Range["M" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["M" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    sheet.Range["N" + dd + ":N" + ee + ""].Merge();
                    sheet.Range["N" + dd + ""].Value = "Remarks";
                    RichText richText11 = sheet.Range["N" + dd + ""].RichText;
                    richText11.SetFont(0, richText11.Text.Length - 1, fontBold);
                    sheet.Range["N" + dd + ""].Style.HorizontalAlignment = HorizontalAlignType.Center;
                    sheet.Range["N" + dd + ""].Style.VerticalAlignment = VerticalAlignType.Center;

                    aa = aa + 31;
                    bb = bb + 31;
                    cc = cc + 31;
                    dd = dd + 31;
                    ee = ee + 31;

                }


                int rowcnt = 5;
                int sno = 1;
                int count = 0;
                decimal aggergatesum = 0,
                professionsum = 0,
                providendsum = 0,
                licsum = 0,
                totalsum = 0,
                balancesum = 0;
                for (int j = 0; j < deductionc.Rows.Count; j++)
                {
                    if (deductionc.Rows[j]["Aggergate"].ToString() != "0")
                    {
                        if (count < 24)
                        {
                            rowcnt = rowcnt + 1;
                            sheet.Range["A" + rowcnt].Value = sno.ToString();
                            sheet.Range["A" + rowcnt].HorizontalAlignment = HorizontalAlignType.Center;
                            sheet.Range["B" + rowcnt].Value = deductionc.Rows[j]["srnumber"].ToString();
                            sheet.Range["B" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                            sheet.Range["C" + rowcnt].Value = deductionc.Rows[j]["name"].ToString();
                            sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[j]["Aggergate"].ToString());
                            sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                            aggergatesum = aggergatesum + Convert.ToDecimal(deductionc.Rows[j]["Aggergate"].ToString());
                            sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[j]["profession"].ToString());
                            sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                            professionsum = professionsum + Convert.ToDecimal(deductionc.Rows[j]["profession"].ToString());
                            sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[j]["providend"].ToString());
                            sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                            providendsum = providendsum + Convert.ToDecimal(deductionc.Rows[j]["providend"].ToString());
                            sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[j]["total"].ToString());
                            sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                            totalsum = totalsum + Convert.ToDecimal(deductionc.Rows[j]["total"].ToString());
                            sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[j]["balance"].ToString());
                            sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                            balancesum = balancesum + Convert.ToDecimal(deductionc.Rows[j]["balance"].ToString());

                            CellRange range25 = sheet.Range["A6:" + "N" + rowcnt];
                            range25.Borders.LineStyle = LineStyleType.Thin;
                            range25.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                            range25.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                            sno++;
                            count++;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                if (deductionc.Rows.Count > 24)
                {
                    rowcnt = rowcnt + 1;
                    sheet.Range["C" + rowcnt].Value = "Total Carried Over";
                    sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                    sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(professionsum);
                    sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["E" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["E" + rowcnt].Style.Font.IsBold = true;

                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(providendsum);
                    sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["F" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(totalsum);
                    sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["K" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(balancesum);
                    sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["L" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
                    CellRange range15 = sheet.Range["A6:" + "N" + rowcnt];
                    range15.Borders.LineStyle = LineStyleType.Thin;
                    range15.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range15.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                    rowcnt = rowcnt + 7;

                    sheet.Range["C" + rowcnt].Value = "Brought Forward";
                    sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                    sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(professionsum);
                    sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["E" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["E" + rowcnt].Style.Font.IsBold = true;

                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(providendsum);
                    sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["F" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(totalsum);
                    sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["K" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(balancesum);
                    sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["L" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
                    CellRange range551 = sheet.Range["A" + rowcnt + ":" + "N" + rowcnt];
                    range551.Borders.LineStyle = LineStyleType.Thin;
                    range551.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range551.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    for (; count < deductionc.Rows.Count; count++)
                    {
                        if (deductionc.Rows[count]["Aggergate"].ToString() != "0")
                        {
                            if (count < 48)
                            {
                                rowcnt = rowcnt + 1;

                                sheet.Range["A" + rowcnt].Value = sno.ToString();
                                sheet.Range["A" + rowcnt].HorizontalAlignment = HorizontalAlignType.Center;
                                sheet.Range["B" + rowcnt].Value = deductionc.Rows[count]["srnumber"].ToString();
                                sheet.Range["B" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                                sheet.Range["C" + rowcnt].Value = deductionc.Rows[count]["name"].ToString();
                                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["Aggergate"].ToString());
                                sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                                aggergatesum = aggergatesum + Convert.ToDecimal(deductionc.Rows[count]["Aggergate"].ToString());
                                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["profession"].ToString());
                                sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                                professionsum = professionsum + Convert.ToDecimal(deductionc.Rows[count]["profession"].ToString());
                                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["providend"].ToString());
                                sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                                providendsum = providendsum + Convert.ToDecimal(deductionc.Rows[count]["providend"].ToString());
                                sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["total"].ToString());
                                sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                                totalsum = totalsum + Convert.ToDecimal(deductionc.Rows[count]["total"].ToString());
                                sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["balance"].ToString());
                                sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                                balancesum = balancesum + Convert.ToDecimal(deductionc.Rows[count]["balance"].ToString());

                                CellRange range555 = sheet.Range["A" + rowcnt + ":" + "N" + rowcnt];
                                range555.Borders.LineStyle = LineStyleType.Thin;
                                range555.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                                range555.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                                sno++;

                            }
                            else
                            {
                                break;
                            }
                        }
                    }
                    if (deductionc.Rows.Count > 48)
                    {
                        rowcnt = rowcnt + 1;
                        sheet.Range["C" + rowcnt].Value = "Total Carried Over";
                        sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(professionsum);
                        sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["E" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["E" + rowcnt].Style.Font.IsBold = true;

                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(providendsum);
                        sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["F" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(totalsum);
                        sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["K" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(balancesum);
                        sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["L" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
                        CellRange range150 = sheet.Range["A" + rowcnt + ":" + "N" + rowcnt];
                        range150.Borders.LineStyle = LineStyleType.Thin;
                        range150.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range150.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


                        rowcnt = rowcnt + 6;

                        sheet.Range["C" + rowcnt].Value = "Brought Forward";
                        sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(professionsum);
                        sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["E" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["E" + rowcnt].Style.Font.IsBold = true;

                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(providendsum);
                        sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["F" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(totalsum);
                        sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["K" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(balancesum);
                        sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["L" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
                        CellRange range5512 = sheet.Range["A" + rowcnt + ":" + "N" + rowcnt];
                        range5512.Borders.LineStyle = LineStyleType.Thin;
                        range5512.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5512.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                        for (; count < deductionc.Rows.Count; count++)
                        {
                            if (deductionc.Rows[count]["Aggergate"].ToString() != "0")
                            {
                                if (count < 72)
                                {
                                    rowcnt = rowcnt + 1;

                                    sheet.Range["A" + rowcnt].Value = sno.ToString();
                                    sheet.Range["A" + rowcnt].HorizontalAlignment = HorizontalAlignType.Center;
                                    sheet.Range["B" + rowcnt].Value = deductionc.Rows[count]["srnumber"].ToString();
                                    sheet.Range["B" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                                    sheet.Range["C" + rowcnt].Value = deductionc.Rows[count]["name"].ToString();
                                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["Aggergate"].ToString());
                                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                                    aggergatesum = aggergatesum + Convert.ToDecimal(deductionc.Rows[count]["Aggergate"].ToString());
                                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["profession"].ToString());
                                    sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                                    professionsum = professionsum + Convert.ToDecimal(deductionc.Rows[count]["profession"].ToString());
                                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["providend"].ToString());
                                    sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                                    providendsum = providendsum + Convert.ToDecimal(deductionc.Rows[count]["providend"].ToString());
                                    sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["total"].ToString());
                                    sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                                    totalsum = totalsum + Convert.ToDecimal(deductionc.Rows[count]["total"].ToString());
                                    sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(deductionc.Rows[count]["balance"].ToString());
                                    sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                                    balancesum = balancesum + Convert.ToDecimal(deductionc.Rows[count]["balance"].ToString());

                                    CellRange range555 = sheet.Range["A" + rowcnt + ":" + "N" + rowcnt];
                                    range555.Borders.LineStyle = LineStyleType.Thin;
                                    range555.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                                    range555.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                                    sno++;

                                }
                                else
                                {
                                    break;
                                }
                            }
                        }
                        rowcnt = rowcnt + 1;

                        sheet.Range["C" + rowcnt].Value = "Total";
                        sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(professionsum);
                        sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["E" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["E" + rowcnt].Style.Font.IsBold = true;

                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(providendsum);
                        sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["F" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(totalsum);
                        sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["K" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(balancesum);
                        sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["L" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
                        CellRange range5511 = sheet.Range["A" + rowcnt + ":" + "N" + rowcnt];
                        range5511.Borders.LineStyle = LineStyleType.Thin;
                        range5511.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5511.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    }
                    else
                    {
                        rowcnt = rowcnt + 1;

                        sheet.Range["C" + rowcnt].Value = "Total";
                        sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                        sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                        sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(professionsum);
                        sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["E" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["E" + rowcnt].Style.Font.IsBold = true;

                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(providendsum);
                        sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["F" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(totalsum);
                        sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["K" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
                        sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(balancesum);
                        sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                        sheet.Range["L" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                        sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
                        CellRange range5510 = sheet.Range["A" + rowcnt + ":" + "N" + rowcnt];
                        range5510.Borders.LineStyle = LineStyleType.Thin;
                        range5510.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range5510.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                    }
                }
                else
                {
                    rowcnt = 30;
                    sheet.Range["C" + rowcnt].Value = "Total";
                    sheet.Range["C" + rowcnt].HorizontalAlignment = HorizontalAlignType.Left;
                    sheet.Range["C" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(aggergatesum);
                    sheet.Range["D" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["D" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["D" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(professionsum);
                    sheet.Range["E" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["E" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["E" + rowcnt].Style.Font.IsBold = true;

                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(providendsum);
                    sheet.Range["F" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["F" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["F" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(totalsum);
                    sheet.Range["K" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["K" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["K" + rowcnt].Style.Font.IsBold = true;
                    sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(balancesum);
                    sheet.Range["L" + rowcnt].NumberFormat = "#,##0.00";
                    sheet.Range["L" + rowcnt].HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["L" + rowcnt].Style.Font.IsBold = true;
                    CellRange range551 = sheet.Range["A6:" + "N" + rowcnt];
                    range551.Borders.LineStyle = LineStyleType.Thin;
                    range551.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                    range551.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;
                    sheet.AllocatedRange.AutoFitColumns();
                    sheet.AllocatedRange.AutoFitRows();

                }
                sheet.SetRowHeight(4, 29);
                sheet.SetColumnWidth(1, 9);
                sheet.SetRowHeight(5, 24);
                sheet.SetRowHeight(1, 24);
                sheet.SetRowHeight(2, 24);


                workbook.SaveToHttpResponse("deduction.xlsx", HttpContext.Current.Response);
            }
            catch (Exception err)
            {
                LogCls.LogError(err, "Emoluments St12");
            }
            finally
            {

            }
        }

        protected void BtnTrBlBankSt04A_Click(object sender, EventArgs e)
        {
            try
            {
                string filename = "Chit Sec Dep Bank&Accrued Int" + DateTime.Now.Second.ToString();

                using (XLWorkbook wb = new XLWorkbook())
                {
                    var ws = wb.Worksheets.Add("Chit Sec Dep Bank&Accrued Int");
                    var dd = "0/00/0000";
                    string strCredit = @"SELECT GROUPNO,SDP_FDRNO,SDP_Commencement,SDP_Maturity,SDP_PeriodinMonths,SDP_RateofInterest,SDP_Amount FROM svcf.groupmaster where BranchID=" + drpdownBranchlist.SelectedValue + " and Head_id not in (SELECT ChitNumber FROM svcf.fd where BranchId=" + drpdownBranchlist.SelectedValue + " and `Date`<='" + balayer.indiandateToMysqlDate(txtToDate.Text) + "') and SDP_Commencement <= '" + balayer.indiandateToMysqlDate(txtToDate.Text) + "' and SDP_Commencement !='" + dd + "'";
                    var PFHeadDt = objBAL.GetDataTable(strCredit);

                    int logo = 1;
                    int branch = 2;
                    int date = 3;
                    int CREDIT = 5;
                    int SNo1 = 6;
                    List<string> ss = new List<string> { "imglogo.png", "imglogo1.png", "imglogo2.png" };
                    double page = Math.Ceiling((float)PFHeadDt.Rows.Count / 35);
                    //     page = 2;
                    int i = 0;
                    do
                    {
                        AddImage(wb, "Chit Sec Dep Bank&Accrued Int", 1, logo, "imglogo.png");

                        ws.Cell(logo, 9).Value = "Statement No. 4A & 4B";
                        ws.Range(logo, 9, logo, 12).Merge().AddToNamed("Titles");

                        ws.Cell(logo, 2).Value = "Sree Visalam Chit Fund Ltd.,";
                        ws.Cell(logo, 2).Style.Font.Bold = true;
                        ws.Cell(logo, 2).Style.Font.FontSize = 14;

                        if (drpdownBranchlist.SelectedItem.Text == "Triplicane")
                        {
                            ws.Cell(branch, 2).Value = "Branch:  Mount Road";
                        }
                        else if (drpdownBranchlist.SelectedItem.Text == "Pallathur II")
                        {
                            ws.Cell(branch, 2).Value = "Branch:  Pallathur";
                        }
                        else
                        {
                            ws.Cell(branch, 2).Value = "Branch:  " + drpdownBranchlist.SelectedItem.Text;
                        }
                        ws.Cell(branch, 2).Style.Font.Bold = true;
                        ws.Cell(branch, 2).Style.Font.FontSize = 13;

                        ws.Cell(date, 1).Value = "Particulars of Chit Security Deposit with Banks and Accrued Interest there on as at " + txtToDate.Text;
                        ws.Cell(date, 1).Style.Font.Bold = true;
                        ws.Cell(date, 1).Style.Font.FontSize = 13;
                        ws.Range(date, 1, date, 12).Merge().AddToNamed("Titles");
                        ws.Cell(date, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                        ws.Cell(CREDIT, 1).Value = "Sl. No.";
                        ws.Cell(CREDIT, 1).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 1).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 1, SNo1, 1).Merge();

                        //   rangedbr561.Style.Fill.BackgroundColor = XLColor.Gray;

                        ws.Cell(CREDIT, 2).Value = "Group No.";
                        ws.Cell(CREDIT, 2).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 2).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 2, SNo1, 2).Merge();
                        //      ws.Range(CREDIT, 2, SNo1, 2).Style.Fill.BackgroundColor = XLColor.Gray;

                        ws.Cell(CREDIT, 3).Value = "F.D.R. No.";
                        ws.Cell(CREDIT, 3).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 3).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 3, SNo1, 3).Merge();
                        //      ws.Range(CREDIT, 3, SNo1, 3).Style.Fill.BackgroundColor = XLColor.Gray;

                        ws.Cell(CREDIT, 4).Value = "Bank and Place";
                        ws.Cell(CREDIT, 4).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 4).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 4, SNo1, 4).Merge();
                        //      ws.Range(CREDIT, 4, SNo1, 4).Style.Fill.BackgroundColor = XLColor.Gray;

                        ws.Cell(CREDIT, 5).Value = "Date of";
                        ws.Cell(CREDIT, 5).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 5).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 5, CREDIT, 6).Merge();
                        //     ws.Range(CREDIT, 5, SNo1, 6).Style.Fill.BackgroundColor = XLColor.Gray;


                        ws.Cell(SNo1, 5).Value = "Commencement";
                        ws.Cell(SNo1, 5).Style.Font.Bold = true;
                        ws.Cell(SNo1, 5).Style.Font.FontSize = 11;
                        //      ws.Range(SNo1, 5 ,SNo1, 5).Style.Fill.BackgroundColor = XLColor.Gray;

                        ws.Cell(SNo1, 6).Value = "Maturity";
                        ws.Cell(SNo1, 6).Style.Font.Bold = true;
                        ws.Cell(SNo1, 6).Style.Font.FontSize = 11;
                        //      ws.Range(SNo1, 6, SNo1, 6).Style.Fill.BackgroundColor = XLColor.Gray;



                        ws.Cell(CREDIT, 7).Value = "Period in Months";
                        ws.Cell(CREDIT, 7).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 7).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 7, SNo1, 7).Merge();
                        //        ws.Range(CREDIT, 7, SNo1, 7).Style.Fill.BackgroundColor = XLColor.Gray;

                        ws.Cell(CREDIT, 8).Value = "Rate of Interest";
                        ws.Cell(CREDIT, 8).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 8).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 8, SNo1, 8).Merge();
                        //         ws.Range(CREDIT, 8, SNo1, 8).Style.Fill.BackgroundColor = XLColor.Gray;

                        ws.Cell(CREDIT, 9).Value = "Amount";
                        ws.Cell(CREDIT, 9).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 9).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 9, SNo1, 9).Merge();
                        //      ws.Range(CREDIT, 9, SNo1, 9).Style.Fill.BackgroundColor = XLColor.Gray;


                        ws.Cell(CREDIT, 10).Value = "Accrued Interest";
                        ws.Cell(CREDIT, 10).Style.Font.Bold = true;
                        ws.Cell(CREDIT, 10).Style.Font.FontSize = 11;
                        ws.Range(CREDIT, 10, CREDIT, 12).Merge();
                        //      ws.Range(CREDIT, 10, SNo1, 12).Style.Fill.BackgroundColor = XLColor.Gray;


                        ws.Cell(SNo1, 10).Value = "From";
                        ws.Cell(SNo1, 10).Style.Font.Bold = true;
                        ws.Cell(SNo1, 10).Style.Font.FontSize = 11;
                        //       ws.Range(SNo1, 10, SNo1, 10).Style.Fill.BackgroundColor = XLColor.Gray;

                        ws.Cell(SNo1, 11).Value = "To";
                        ws.Cell(SNo1, 11).Style.Font.Bold = true;
                        ws.Cell(SNo1, 11).Style.Font.FontSize = 11;
                        //         ws.Range(SNo1, 11, SNo1, 11).Style.Fill.BackgroundColor = XLColor.Gray;

                        ws.Cell(SNo1, 12).Value = "Amount";
                        ws.Cell(SNo1, 12).Style.Font.Bold = true;
                        ws.Cell(SNo1, 12).Style.Font.FontSize = 11;
                        //          ws.Range(SNo1, 12, SNo1, 12).Style.Fill.BackgroundColor = XLColor.Gray;
                        var rangedbr551 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 12));
                        rangedbr551.Style.Border.OutsideBorder = XLBorderStyleValues.Double;
                        var rangedbr561 = ws.Range(ws.Cell(CREDIT, 1), ws.Cell(SNo1, 12));
                        rangedbr561.Style.Border.InsideBorder = XLBorderStyleValues.Double;
                        logo = logo + 37;
                        branch = branch + 37;
                        date = date + 37;
                        CREDIT = CREDIT + 37;
                        SNo1 = SNo1 + 37;
                        i++;
                    } while (i < page);


                    int SNo = 1;
                    int RangeCell = 7;
                    decimal SumAmount1 = 0;
                    // FlagSummaryFilled = false;
                    int LastRRow = 0;
                    int debitrows = 0;
                    for (int j = 0; j < PFHeadDt.Rows.Count; j++)
                    {
                        if (j < 30)
                        {
                            debitrows = debitrows + 1;
                            ws.Cell(RangeCell, 1).Value = SNo;
                            ws.Cell(RangeCell, 2).Value = PFHeadDt.Rows[j]["GROUPNO"];
                            ws.Cell(RangeCell, 3).Value = PFHeadDt.Rows[j]["SDP_FDRNO"].ToString();
                            ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "0";
                            ws.Cell(RangeCell, 4).Value = "City Union Bank Ltd,Karaikudi";
                            ws.Cell(RangeCell, 5).Value = PFHeadDt.Rows[j]["SDP_Commencement"];
                            ws.Cell(RangeCell, 6).Value = PFHeadDt.Rows[j]["SDP_Maturity"].ToString();
                            ws.Cell(RangeCell, 7).Value = PFHeadDt.Rows[j]["SDP_PeriodinMonths"];
                            ws.Cell(RangeCell, 8).Value = PFHeadDt.Rows[j]["SDP_RateofInterest"] + "%";


                            SumAmount1 = Convert.ToDecimal(PFHeadDt.Rows[j]["SDP_Amount"]) + SumAmount1;
                            ws.Cell(RangeCell, 9).Value = Convert.ToDecimal(PFHeadDt.Rows[j]["SDP_Amount"]);
                            ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                            ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                            ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";


                            var rangedbr551 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr551.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                            var rangedbr561 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                            rangedbr561.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                            RangeCell = RangeCell + 1;
                            SNo = SNo + 1;
                        }
                    }

                    if (PFHeadDt.Rows.Count > 30)
                    {
                        ws.Cell(RangeCell, 6).Value = "Total Carried Over";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 9).Value = SumAmount1;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        LastRRow = (RangeCell - 1);
                        var rangedbr2 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangedbr2.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr3 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangedbr3.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                        RangeCell = RangeCell + 7;

                        ws.Cell(RangeCell, 6).Value = "Brought Forward";
                        ws.Cell(RangeCell, 9).Value = SumAmount1;

                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        var rangedbr5 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangedbr5.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr6 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangedbr6.Style.Border.InsideBorder = XLBorderStyleValues.Thin;


                        var rangedbr55 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangedbr55.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                        var rangedbr56 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                        rangedbr56.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                        RangeCell = RangeCell + 1;
                        for (; debitrows < PFHeadDt.Rows.Count;)
                        {
                            if (debitrows < 70)
                            {
                                ws.Cell(RangeCell, 1).Value = SNo;
                                ws.Cell(RangeCell, 2).Value = PFHeadDt.Rows[debitrows]["GROUPNO"];
                                ws.Cell(RangeCell, 3).Value = PFHeadDt.Rows[debitrows]["SDP_FDRNO"].ToString();
                                ws.Cell(RangeCell, 3).Style.NumberFormat.Format = "0";
                                ws.Cell(RangeCell, 4).Value = "City Union Bank Ltd,Karaikudi";
                                ws.Cell(RangeCell, 5).Value = PFHeadDt.Rows[debitrows]["SDP_Commencement"];
                                ws.Cell(RangeCell, 6).Value = PFHeadDt.Rows[debitrows]["SDP_Maturity"];
                                ws.Cell(RangeCell, 7).Value = PFHeadDt.Rows[debitrows]["SDP_PeriodinMonths"];
                                ws.Cell(RangeCell, 8).Value = PFHeadDt.Rows[debitrows]["SDP_RateofInterest"] + "%";


                                SumAmount1 = Convert.ToDecimal(PFHeadDt.Rows[debitrows]["SDP_Amount"]) + SumAmount1;
                                ws.Cell(RangeCell, 9).Value = Convert.ToDecimal(PFHeadDt.Rows[debitrows]["SDP_Amount"]);
                                ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(RangeCell, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                ws.Cell(RangeCell, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";


                                var rangedbr551 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                                rangedbr551.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                                var rangedbr561 = ws.Range(ws.Cell(RangeCell, 1), ws.Cell(RangeCell, 12));
                                rangedbr561.Style.Border.InsideBorder = XLBorderStyleValues.Thin;
                                debitrows = debitrows + 1;
                                RangeCell = RangeCell + 1;
                                SNo = SNo + 1;
                            }
                        }

                        RangeCell = RangeCell + 1;
                        ws.Cell(RangeCell, 6).Value = "Total";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 9).Value = SumAmount1;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        LastRRow = (RangeCell - 1);
                        var rangedbr112 = ws.Range(ws.Cell(RangeCell - 1, 1), ws.Cell(RangeCell, 12));
                        rangedbr112.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr113 = ws.Range(ws.Cell(RangeCell - 1, 1), ws.Cell(RangeCell, 12));
                        rangedbr113.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    else
                    {
                        RangeCell = RangeCell + 1;
                        ws.Cell(RangeCell, 6).Value = "Total";
                        ws.Cell(RangeCell, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(RangeCell, 6).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 6).Style.Font.FontSize = 11;

                        ws.Cell(RangeCell, 9).Value = SumAmount1;
                        ws.Cell(RangeCell, 9).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(RangeCell, 9).Style.Font.Bold = true;
                        ws.Cell(RangeCell, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        LastRRow = (RangeCell - 1);
                        var rangedbr112 = ws.Range(ws.Cell(RangeCell - 1, 1), ws.Cell(RangeCell, 12));
                        rangedbr112.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

                        var rangedbr113 = ws.Range(ws.Cell(RangeCell - 1, 1), ws.Cell(RangeCell, 12));
                        rangedbr113.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                    }
                    var titlesStyle = wb.Style;
                    titlesStyle.Font.Bold = true;
                    titlesStyle.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    //  titlesStyle.Fill.BackgroundColor = XLColor.Cyan;

                    wb.NamedRanges.NamedRange("Titles").Ranges.Style = titlesStyle;
                    ws.Columns().AdjustToContents();

                    // wb.SaveAs(folderPath + filename + ".xlsx");
                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        //Response.End();
                        HttpContext.Current.Response.End();
                    }
                }


            }
            catch (Exception err)
            {

            }
        }

    }
}
