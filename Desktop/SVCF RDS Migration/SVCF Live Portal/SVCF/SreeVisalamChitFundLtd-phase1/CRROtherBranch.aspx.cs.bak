using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using SVCF_BusinessAccessLayer;
using SVCF_DataAccessLayer;
using SVCF_TransactionLayer;
using System.Web.Caching;
using log4net;
using log4net.Config;

namespace SreeVisalamChitFundLtd_phase1
{
    public partial class CRROtherBranch : System.Web.UI.Page
    {
        #region VarDeclaration
       // CommonClassFile objcls = new CommonClassFile();
        string mindat, maxdt;
        Dictionary<string, string> Tempdic = new Dictionary<string, string>();
        static string[] ddltooltip;
        static List<string> RefNo = new List<string>();
        static List<string> RefNo1 = new List<string>();
        static long RCNumber = 0;
        string query = "";
        string userinfo = "";
        string qry = "";
        string usrRole = "";
        string memid = "";
        #endregion

        #region Object
        BusinessLayer balayer = new BusinessLayer();
        TransactionLayer trn = new TransactionLayer();
        #endregion
        ILog logger = log4net.LogManager.GetLogger(typeof(CRROtherBranch));
        protected void Page_PreInit(object sender, EventArgs e)
        {
            if (Session["UserName"] == null || Session["Branchid"] == null || Session["BranchName"] == null)
            {
                Response.Redirect(Page.ResolveUrl("~/Login.aspx"), true);
            }
        }
        protected void Page_Init(object sender, EventArgs e)
        {
            ////img16List.ImageUrl = Page.ResolveUrl("~/pertho_admin_v1.3/img/ico/icSw2/16-List.png");
           // Image img = (Image)UpdateProgress1.FindControl("imgWaiting");
           // img.ImageUrl = Page.ResolveUrl("~/Styles/Image/waiting.gif");
        }
        protected void Page_Load(object sender, EventArgs e)
        {
            pnlmsg.Visible = false;
            //UpdateProgress1.AssociatedUpdatePanelID = UpdatePanel1.UniqueID;
            Pnlgendrate.Visible = false;
            rvDate.MinimumValue = balayer.GetSingleValue("SELECT DATE_FORMAT( MinimumDate, '%d/%m/%Y') MinimumDate FROM svcf.restrictionmaster where BranchID=" + Session["Branchid"]);
            rvDate.MaximumValue = DateTime.Now.ToString("dd/MM/yyyy");

            if (!Page.IsPostBack)
            {
                userinfo = HttpContext.Current.User.Identity.Name;
                qry = "select rs.name from roles as rs inner join rights as rt on (rt.roleid=rs.id) where memberid=" + userinfo + "";
                usrRole = balayer.GetSingleValue(qry);
                if (usrRole == "Report")
                {
                    Response.Redirect(Page.ResolveUrl("~/Home.aspx"), true);
                }
                // mindat = balayer.GetSingleValue("SELECT DATE_FORMAT( min(ChoosenDate), '%d/%m/%Y') MinimumDate FROM svcf.voucher where BranchID=" + Session["Branchid"]);                
                //if (mindat == "")
                //{
                //    mindat = System.DateTime.Now.Date.ToString("dd/MM/yyyy");
                //}                
                //maxdt = DateTime.Now.ToString("dd/MM/yyyy");
                Session["CheckRefresh"] = System.Guid.NewGuid().ToString();
                SetInitialRow();
                CollectorName();
                ddlColloctorName.Focus();
                fillEmployee();                
               // FillDropDownList(ddlBranchName, 0, "");
              //  FillDropDownList(listbranch, 0, "");
                FillDropDownList(ddlMisc, 2, "");
                LoadbranchList();
                //string Choosendate = balayer.GetSingleValue("SELECT DATE_FORMAT( MinimumDate, '%d/%m/%Y') MinimumDate FROM svcf.restrictionmaster where BranchID=" + Session["Branchid"]);
                //txtReceivedDate.Text = Choosendate;
                string Choosendate = balayer.GetSingleValue("SELECT DATE_FORMAT(ChoosenDate,'%d/%m/%Y') from `svcf`.`voucher`where BranchID=" + Session["Branchid"] + " and ChoosenDate<>'0000-00-00' order by CurrDate desc limit 1");
                txtReceivedDate.Text = "";
               // FillDropDownList(ddlChitno, 3, "");
            }
            
        }

       
        public void LoadbranchList()
        {
            listbranch.DataSource = null;
            DataTable dtgroupno = null;
            dtgroupno = balayer.GetDataTable("select NodeID,Node from headstree where ParentID=1 and NodeID<>" + Session["Branchid"]);
            DataRow dr = dtgroupno.NewRow();
            dr[0] = "0";
            dr[1] = "--Select--";
            listbranch.DataValueField = "NodeID";
            listbranch.DataTextField = "Node";
            dtgroupno.Rows.InsertAt(dr, 0);
            listbranch.DataSource = dtgroupno;
            listbranch.DataBind();
        }
        void fillEmployee()
        {
            DataTable dt = balayer.GetDataTable("SELECT Emp_Name FROM svcf.employee_details where BranchID=" + Session["Branchid"]);
            DataRow dr = dt.NewRow();
            dr[0] = "--Select--";
            ddlEmployee.DataTextField = "Emp_Name";
            ddlEmployee.DataValueField = "Emp_Name";
            dt.Rows.InsertAt(dr, 0);
            ddlEmployee.DataSource = dt;
            ddlEmployee.DataBind();
        }
        protected void Page_PreRender(object sender, EventArgs e)
        {
            ViewState["CheckRefresh"] = Session["CheckRefresh"];
        }
        protected void OrderGrid_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                ImageButton ButtonAdd = (e.Row.FindControl("aDDpAN") as Panel).FindControl("ButtonAdd") as ImageButton;
                ToolkitScriptManager1.RegisterAsyncPostBackControl(ButtonAdd);
            }
        }
        public bool DecideVisibility(object xcv)
        {
            if (balayer.ToobjectstrEvenNull(xcv).Trim() != "")
            {
                return true;

            }
            else
            {
                return false;
            }
        }
        public void CollectorName()
        {
            DataTable dtCollector = balayer.GetDataTable("Select moneycollid,moneycollname from moneycollector where BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]));
            DataRow dr = dtCollector.NewRow();
            dr[0] = "0";
            dr[1] = "--Select--";
            ddlColloctorName.DataValueField = "moneycollid";
            ddlColloctorName.DataTextField = "moneycollname";
            dtCollector.Rows.InsertAt(dr, 0);
            ddlColloctorName.DataSource = dtCollector;
            ddlColloctorName.DataBind();
            ddlReceiptSeries.Focus();
        }
        //protected void ddlReceiptSeries_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    getRecieptBookNO(ddlReceiptSeries.SelectedValue, ddlColloctorName.SelectedValue);
        //    ddlEmployee.Focus();
        //}
        public void getRecieptBookNO(string Series, string CollectorID)
        {
            DataTable dtAll = balayer.GetDataTable("SELECT  alreadyusedreceipts,receiptnoto   FROM svcf.assignreceiptbook where  moneycollid=" + ddlColloctorName.SelectedValue + "  and IsFinished=0 and BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and receiptseries='" + ddlReceiptSeries.SelectedItem.Text + "'");
            if (dtAll.Rows.Count != 0)
            {
                int from = int.Parse(dtAll.Rows[0][0].ToString());
                int t0 = int.Parse(dtAll.Rows[0][1].ToString());
                string strQuery = "select ifnull(max(Voucher_No)+1,0) from voucher where BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and Trans_Type=1 and Voucher_No>=" + from + " and Voucher_No<=" + t0 + " and `Series`='" + ddlReceiptSeries.SelectedItem.Text + "'";
                int RecNo = int.Parse(balayer.GetSingleValue(strQuery));
                if (RecNo != 0)
                {
                    txtReceiptNumber.Text = RecNo.ToString();
                }
                else
                {
                    txtReceiptNumber.Text = from.ToString();
                }
            }
            else
            {
                txtReceiptNumber.Text = "0";
                ScriptManager.RegisterStartupScript(this, GetType(), "Warning", "alert(' Please Assign new Reciept Book!!!');", true);
            }
        }
        void series()
        {
            DataTable dtMC = balayer.GetDataTable("Select distinct receiptseries from assignreceiptbook where moneycollid='" + ddlColloctorName.SelectedValue + "' and IsFinished=0");
            if (dtMC.Rows.Count == 0)
            {
                ClientScript.RegisterStartupScript(this.Page.GetType(), "Validation", "<script Language='Javascript'>alert('Please Assign Receipt Book For " + ddlColloctorName.SelectedItem.Text + " (" + ddlColloctorName.SelectedValue + ") ')</script>");
            }
            else if ((dtMC.Rows.Count > 1))
            {
                DataTable dtMCtemp = balayer.GetDataTable("select distinct Series as receiptseries from receiptmaster where (select mod(max(ReceiptNo) ,200) <>'0') and CollectedBy='" + ddlColloctorName.SelectedItem.Text + "' ");
                if (dtMCtemp.Rows.Count != 0)
                {
                    dtMC = dtMCtemp.Copy();
                }
            }
            DataRow dr = dtMC.NewRow();
            dr[0] = "--Select--";
            ddlReceiptSeries.DataValueField = "receiptseries";
            ddlReceiptSeries.DataTextField = "receiptseries";
            ddlReceiptSeries.DataSource = dtMC;
            dtMC.Rows.InsertAt(dr, 0);
            ddlReceiptSeries.DataBind();

            ddlColloctorName.Focus();
            SetInitialRow();
        }
        protected void ddlColloctorName_SelectedIndexChanged(object sender, EventArgs e)
        {
            series();
        }
        private void FillDropDownList(DropDownList ddl, int iType, string MemberID)
        {  //chit
            if (iType == 0)
            {
                ddl.DataSource = null;
                DataTable dtgroupno = null;
                dtgroupno = balayer.GetDataTable("select NodeID,Node from headstree where ParentID=1 and NodeID<>" + Session["Branchid"]);
                DataRow dr = dtgroupno.NewRow();
                dr[0] = "0";
                dr[1] = "--Select--";
                ddl.DataValueField = "NodeID";
                ddl.DataTextField = "Node";
                dtgroupno.Rows.InsertAt(dr, 0);
                ddl.DataSource = dtgroupno;

                ddl.DataBind();
            }
            else if (iType == 3)
            {
                Tempdic.Clear();              
                Tempdic = balayer.CmnList(@"SELECT Head_Id,GrpMemberID FROM membertogroupmaster");              
                ddl.DataValueField = "Key";
                ddl.DataTextField = "Value";
                ddl.DataSource = Tempdic;
                ddl.DataBind();
                ddl.Items.Insert(0, new ListItem("--Select--", "0"));
            }
            //token
            else if (iType == 1)
            {
                //DropDownList ddlBranchName = (DropDownList)GridView1.Rows[0].Cells[1].FindControl("ddlBranchName");
                //if (ddlBranchName.SelectedItem.Text != "--Select--")
                if (listbranch.SelectedItem.Text != "--Select--")
                {
                    ddl.DataSource = null;
                    DataTable dt = null;
                    dt = balayer.GetDataTable(@"SELECT GrpMemberID,Head_Id FROM membertogroupmaster where  MemberID=" + MemberID);
                    DataRow dr = dt.NewRow();
                    dr[0] = "--Select--";
                    dr[1] = "0";
                    dt.Rows.InsertAt(dr, 0);
                    ddl.DataSource = dt;
                    ddl.DataValueField = "Head_Id";
                    ddl.DataTextField = "GrpMemberID";
                    ddl.DataBind();
                }                
                else
                {
                    ddl.DataSource = null;
                    ddl.DataSource = null;
                    DataTable dt = balayer.GetDataTable(@"SELECT GrpMemberID,Head_Id FROM membertogroupmaster where  MemberID=0");
                    DataRow dr = dt.NewRow();
                    dr[0] = "--Select--";
                    dr[1] = "0";
                    dt.Rows.InsertAt(dr, 0);
                    ddl.DataBind();
                }
            }
            //misc
            else if (iType == 2)
            {
                ddl.DataSource = null;
                DataTable dtgroupno = null;
                dtgroupno = balayer.GetDataTable("SELECT concat(cast(TreeID as char),',',cast(RootID as char)) as TreeID,TREE FROM svcf.view_parent where RootID<>5 and (BranchID is null or BranchID=" + Session["Branchid"] + ")");
                DataRow dr = dtgroupno.NewRow();
                dr[0] = "0,0";
                dr[1] = "--Select--";
                ddl.DataValueField = "TreeID";
                ddl.DataTextField = "TREE";
                dtgroupno.Rows.InsertAt(dr, 0);
                ddl.DataSource = dtgroupno;
                ddl.DataBind();
            }
        }
        private void SetInitialRow()
        {
            try
            {
                DataTable dt = new DataTable();
                DataRow dr = null;
                //Define the Columns
                dt.Columns.Add(new DataColumn("RowNumber", typeof(string)));
                dt.Columns.Add(new DataColumn("BranchName", typeof(string)));
                dt.Columns.Add(new DataColumn("chittoken", typeof(string)));                
                dt.Columns.Add(new DataColumn("Narration", typeof(string)));
                dt.Columns.Add(new DataColumn("Amount", typeof(string)));
                dt.Columns.Add(new DataColumn("MiscHead", typeof(string)));
                dt.Columns.Add(new DataColumn("MiscAmount", typeof(string)));                              
                dt.Columns.Add(new DataColumn("GrpTokenid", typeof(string)));
                dt.Columns.Add(new DataColumn("Branchid", typeof(string)));
                dt.Columns.Add(new DataColumn("RCNumber", typeof(string)));

                dt.Columns.Add(new DataColumn("firstmisc", typeof(string)));
                dt.Columns.Add(new DataColumn("secmisc", typeof(string)));

                
                //Add a Dummy Data on Initial Load
                dr = dt.NewRow();
                //dr["RowNumber"] = 1;
                dt.Rows.Add(dr);
                //Store the DataTable in ViewState
                ViewState["CurrentTable"] = dt;
                //Bind the DataTable to the Grid
                GViewCROther_Selected.DataSource = dt;
                GViewCROther_Selected.DataBind();
            }
            catch (Exception) { }
        }

        
        public void PopulateDropDownList(List<ListItem> list, DropDownList ddl)
        {
            ddl.DataSource = list;
            ddl.DataTextField = "Text";
            ddl.DataValueField = "Value";
            ddl.DataBind();
        }

        private void AddNewRowToGrid()
        {
            try
            {

                //string selectedToken = "";
                string selectedRSeries = "";
               // string GpChitToken = "";
               // string LoadedSeries = "";
                string selectedbranch = "";
                string selectedchit = "";
                string selseries = "";
                string seltokenname = "";
                DataTable dtCurrentTable = (DataTable)ViewState["CurrentTable"];
               
                    //Collector name
                    selectedRSeries = Request.Form[ddlColloctorName.UniqueID];

                    //Receipt series
                    PopulateDropDownList(CRSeries_OtherBranch(selectedRSeries), ddlReceiptSeries);
                    selseries = HD_RSeriesid.Value;
                    ddlReceiptSeries.Items.FindByText(selseries).Selected = true;


                    //Selected Branch
                    selectedbranch = Request.Form[listbranch.UniqueID];                   
                    listbranch.Items.FindByValue(selectedbranch).Selected = true;

                    //Chit token
                    selectedchit = tkn_id.Value;   //token id
                    seltokenname = hiddentkn_text.Value;    // Selected token name
                    seltokenname = seltokenname.Trim();
                 
                    if (ViewState["CurrentTable"] != null)
                    {                        
                        DataRow drCurrentRow = null;
                        if (dtCurrentTable.Rows.Count > 0)
                        {
                            //DropDownList ddlMiscVal = (DropDownList)GridView1.Rows[dtCurrentTable.Rows.Count - 1].FindControl("ddlMisc");
                            //TextBox txtMiscVal = (TextBox)GridView1.Rows[dtCurrentTable.Rows.Count - 1].FindControl("txtMisc");                        
                            decimal lastAmount = 0.0M;
                            bool isMisc = decimal.TryParse(txtMisc.Text, out lastAmount);
                            if ((isMisc == true & lastAmount > 0.0M))
                            {
                                isMisc = true;
                            }
                            else
                            {
                                isMisc = false;
                            }
                            if ((ddlMisc.SelectedIndex <= 0) & isMisc == true)
                            {
                                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Please Choose Misc Head Valid Details');", true);
                                //Response.Write("<script>alert('Please Provide Valid Details');</script>");
                                return;
                            }
                            if (ddlMisc.SelectedIndex > 0 & isMisc != true)
                            {
                                ScriptManager.RegisterClientScriptBlock(Page, Page.GetType(), Guid.NewGuid().ToString(), "alert('Please Provide Misc Amount Details');", true);
                                return;
                                //Response.Write("<script>alert('Please Provide Valid Details');</script>");
                            }

                            for (int i = 1; i <= dtCurrentTable.Rows.Count; i++)
                            {
                                drCurrentRow = dtCurrentTable.NewRow();
                                drCurrentRow["BranchName"] = listbranch.SelectedItem;   
                                drCurrentRow["chittoken"] = seltokenname;     
                                drCurrentRow["Narration"] = txtNarration.Text;
                                drCurrentRow["Amount"] = txtAmount.Text;
                                drCurrentRow["MiscHead"] = ddlMisc.SelectedItem;
                                drCurrentRow["MiscAmount"] = txtMisc.Text;
                                drCurrentRow["GrpTokenid"] = selectedchit;     //ddlChitno.SelectedValue;
                                drCurrentRow["Branchid"] = listbranch.SelectedValue;      //ddlBranchName.SelectedValue;
                                drCurrentRow["RCNumber"] = txtReceiptNumber.Text;

                                if ((ddlMisc.SelectedValue != null) && (ddlMisc.SelectedValue != "0,0"))
                                {
                                    if (ddlMisc.SelectedValue.Contains(','))
                                    {
                                        drCurrentRow["firstmisc"] = ddlMisc.SelectedValue.Split(',')[0];
                                        drCurrentRow["secmisc"] = ddlMisc.SelectedItem.Value.Split(',')[1];
                                    }
                                    else
                                    {
                                        drCurrentRow["firstmisc"] = "0";
                                        drCurrentRow["secmisc"] = "0";
                                    }
                                }
                                else
                                {
                                    drCurrentRow["firstmisc"] = "0";
                                    drCurrentRow["secmisc"] = "0";
                                }
                            }
                            //Rebind the Grid with the current data
                            //Remove initial blank row
                            if (dtCurrentTable.Rows[0][0].ToString() == "")
                            {
                                dtCurrentTable.Rows[0].Delete();
                                dtCurrentTable.AcceptChanges();                               
                            }
                            drCurrentRow["RowNumber"] = dtCurrentTable.Rows.Count + 1;
                            dtCurrentTable.Rows.Add(drCurrentRow);
                            ViewState["CurrentTable"] = dtCurrentTable;

                            //if (ddlMisc.SelectedValue != null)
                            //{
                            //    RefNo.Add(ddlMisc.SelectedValue.Split(',')[1]);
                            //    RefNo1.Add(ddlMisc.SelectedItem.Value.Split(',')[0]);
                            //}
                            //Rebind the Grid with the current data
                            GViewCROther_Selected.DataSource = dtCurrentTable;
                            GViewCROther_Selected.DataBind();

                            //Clear Existing Values                        
                           // ddlBranchName.ClearSelection();
                            listbranch.ClearSelection();
                            //ddlChitno.ClearSelection();
                           // ddlChitno.Items.Clear();
                            txtNarration.Text = "";
                            txtMisc.Text = "";
                            txtAmount.Text = "";
                            ddlMisc.ClearSelection();
                            btnGenerate.Focus();
                        }
              
                    }

                //SetPreviousData(false);
            }
            catch (Exception e)
            { }
        }
       
        //private void SetPreviousData(bool isRemove)
        //{
        //    int rowIndex = 0;
        //    if (ViewState["CurrentTable"] != null)
        //    {
        //        DataTable dt = (DataTable)ViewState["CurrentTable"];
        //        if (dt.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dt.Rows.Count; i++)
        //            {
        //                //Set the Previous Selected Items on Each DropDownList on Postbacks
        //                DropDownList ddlBranchName = (DropDownList)GridView1.Rows[i].FindControl("ddlBranchName");
        //                TextBox txtNarration = (TextBox)GridView1.Rows[i].FindControl("txtNarration");
        //                TextBox txtAmount = (TextBox)GridView1.Rows[i].FindControl("txtAmount");
        //                DropDownList ddlMisc = (DropDownList)GridView1.Rows[i].FindControl("ddlMisc");
        //                TextBox txtMisc = (TextBox)GridView1.Rows[i].FindControl("txtMisc");
        //                //Fill the DropDownList with Data
        //                FillDropDownList(ddlBranchName, 0, "");
        //                FillDropDownList(ddlMisc, 2, "");
        //                //FillDropDownList(ddl3);
        //                if (i < dt.Rows.Count)
        //                {
        //                    if (isRemove == false & i == dt.Rows.Count - 1)
        //                    {
        //                        break;
        //                    }
        //                    ddlBranchName.ClearSelection();
        //                    ddlBranchName.Items.FindByValue(dt.Rows[i]["BranchName"].ToString()).Selected = true;
        //                    txtNarration.Text = dt.Rows[i]["Narration"].ToString();
        //                    ddlMisc.ClearSelection();
        //                    ddlMisc.Items.FindByValue(dt.Rows[i]["MiscHead"].ToString()).Selected = true;
        //                    txtAmount.Text = dt.Rows[i]["Amount"].ToString();
        //                    txtMisc.Text = dt.Rows[i]["MiscAmount"].ToString();
        //                    //ddl3.ClearSelection();
        //                    //ddl3.Items.FindByValue(dt.Rows[i]["Column3"].ToString()).Selected = true;
        //                }
        //                rowIndex++;
        //            }
        //        }
        //    }
        //}
        public List<string> Code
        {
            get
            {
                if (HttpContext.Current.Session["Code"] == null)
                {
                    HttpContext.Current.Session["Code"] = new List<string>();
                }
                return HttpContext.Current.Session["Code"] as List<string>;
            }
            set
            {
                HttpContext.Current.Session["Code"] = value;
            }

        }
        //protected void ButtonRemove_Click(object sender, ImageClickEventArgs e)
        //{
        //    if (GridView1.Rows.Count > 1)
        //    {
        //        RemoveLastRowToGrid();

        //    }

        //}
        protected void ButtonAdd_Click345345(object sender, ImageClickEventArgs e)
        {
            //Page.Validate("GrpRow");
            //foreach (GridViewRow gvRow in GridView1.Rows)
            //{
            //    //((RequiredFieldValidator)gvRow.FindControl("RFVtxtAmount")).Validate();
            //    //((CompareValidator)gvRow.FindControl("CVddlBranchName")).Validate();
            //}
            //if (Page.IsValid)
            //{
            try
            {
                AddNewRowToGrid();
                //for (int i = 0; i < GridView1.Rows.Count - 1; i++)
                //{
                //    DropDownList ddl = (DropDownList)GridView1.Rows[i].FindControl("ddlBranchName");
                //    ddl.Enabled = false;
                //}
            }
            catch (Exception) { }
        }
        protected void btnConfirmationNo_Click(object sender, EventArgs e)
        {
            gvConfirm.DataSource = null;
            gvConfirm.DataBind();
            ModalPopupExtender1.Hide();
            pnlConfirmation.Visible = false;
            ViewState["CurrentTable"] = null;
            GViewCROther_Selected.DataSource = (DataTable)ViewState["CurrentTable"];
            GViewCROther_Selected.DataBind();
            Response.Redirect(Request.Url.AbsoluteUri);

        }
        protected void btnConfirmationYes_Click(object sender, EventArgs e)
        {           
            if (Session["CheckRefresh"].ToString() != ViewState["CheckRefresh"].ToString())
            {
                return;
            }

            string selectedRSeries = "";
         

            string selseries = "";

            //Collector name
            selectedRSeries = Request.Form[ddlColloctorName.UniqueID];

            //Receipt series
            PopulateDropDownList(CRSeries_OtherBranch(selectedRSeries), ddlReceiptSeries);
            selseries = HD_RSeriesid.Value;
            ddlReceiptSeries.Items.FindByText(selseries).Selected = true;
           

         
            //TransactionLayer trn = new TransactionLayer();
            string TransactionKeyDue = "";
            gvConfirm.DataSource = null;
            gvConfirm.DataBind();
            System.Guid guid = Guid.NewGuid();
            string memname = "";
              string GroupID = "";
              string ChitsBranchID = "";
              string MemberID = "";
              string TokenNo = "";
              string RootID = "";
              string RowddlMisc = "";
              string txtmisc = "";
              string qry = "";
              string ddlmisc = ""; string narration = "";
            string hexstring = BitConverter.ToString(guid.ToByteArray());
            string guidForBinary16 = "0x" + hexstring.Replace("-", string.Empty);
            string DualTransactionKey = guidForBinary16;
            string memberid = "";
            try
            {


                ClsSession objSession = (ClsSession)Session["objSession"];


                DateTime dtChoosenDate = DateTime.Parse(txtReceivedDate.Text);
                string CashOrBankID = "";
                string trans_medium = "";
                if (CheckBox1.Checked != true)
                {
                    CashOrBankID = "12";
                    trans_medium = "0";
                }
                string mischd1 = "", mischd2 = "";
                for (int i = 0; i <= GViewCROther_Selected.Rows.Count-1; i++)
                {
                    //DropDownList RowddlBranchName = (DropDownList)GridView1.Rows[i].FindControl("ddlBranchName");
                    //TextBox txtNarration = (TextBox)GridView1.Rows[i].FindControl("txtNarration");
                    //TextBox RowtxtAmount = (TextBox)GridView1.Rows[i].FindControl("txtAmount");
                    //DropDownList RowddlMisc = (DropDownList)GridView1.Rows[i].FindControl("ddlMisc");
                    //TextBox RowtxtMisc = (TextBox)GridView1.Rows[i].FindControl("txtMisc");
                    memname = GViewCROther_Selected.Rows[i].Cells[1].Text;

                    //if (memname.Contains("&amp;"))
                    //{
                    //    memname = memname.Replace("&amp;", "&");
                    //}

                    Label ChitgpTokenid = (Label)GViewCROther_Selected.Rows[i].FindControl("lblgp_tokenid");
                    Label Branchid = (Label)GViewCROther_Selected.Rows[i].FindControl("lblBranchid");
                    Label Rcptno = (Label)GViewCROther_Selected.Rows[i].FindControl("lblrcnumber");  
                    RowddlMisc = GViewCROther_Selected.Rows[i].Cells[5].Text;
                    RowddlMisc = RowddlMisc.Replace("&gt;&gt;", ">>");

                    if (RowddlMisc != "--Select--")
                    {
                        Label r1 = (Label)GViewCROther_Selected.Rows[i].FindControl("lblref1");
                        Label r2 = (Label)GViewCROther_Selected.Rows[i].FindControl("lblref2");

                        mischd1 = r1.Text;
                        mischd2 = r2.Text;
                    }

                    if (RowddlMisc == "--Select--")
                    {
                        RowddlMisc = "";
                    }


                    txtmisc = GViewCROther_Selected.Rows[i].Cells[6].Text;
                    if (txtmisc == "&nbsp;")
                    {
                        txtmisc = "0.0";
                    }
                    GroupID = "0";
                    ChitsBranchID = Branchid.Text;                 
                    MemberID = "0";
                    TokenNo = Branchid.Text;
                    RootID = "";
                    string empname="";
                    string countval = balayer.GetSingleValue("select count(*) from svcf.headstree where ParentID=1 and node ='" + memname + "';");
                    if(countval=="1")
                    {
                        memname = "";
                    }
                    
                    if (HD_Empname.Value != "")
                    {
                        empname = HD_Empname.Value;
                    }
                    else
                    {
                        empname = ddlEmployee.SelectedItem.Text;
                    }


                    if (CheckBox1.Checked != true)
                    {
                        RootID = "12";
                    }
                    if (ChitsBranchID == balayer.ToobjectstrEvenNull(Session["Branchid"]))
                    {
                        
                    }
                    else
                    {
                        long strCashHead = 0;
                        if (decimal.Parse(GViewCROther_Selected.Rows[i].Cells[4].Text) != 0.00M)
                        {
                            ddlmisc = balayer.MySQLEscapeString(GViewCROther_Selected.Rows[i].Cells[3].Text);
                            if (ddlmisc.Contains("&amp;"))
                            {
                                narration = ddlmisc.Replace("&amp;", "&");
                            }
                            else
                            {
                                narration= balayer.MySQLEscapeString(GViewCROther_Selected.Rows[i].Cells[3].Text);
                            }
                            // string strChitHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'C'," + ChitsBranchID + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + (GViewCROther_Selected.Rows[i].Cells[2].Text + ":" + balayer.MySQLEscapeString(GViewCROther_Selected.Rows[i].Cells[3].Text)) + "'," + GViewCROther_Selected.Rows[i].Cells[4].Text + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + ",1," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "')";

                            // string strCashHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'D'," + CashOrBankID + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + (GViewCROther_Selected.Rows[i].Cells[2].Text + ":" + balayer.MySQLEscapeString(GViewCROther_Selected.Rows[i].Cells[3].Text)) + "'," + GViewCROther_Selected.Rows[i].Cells[4].Text + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + "," + RootID + "," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "')";

                            //CRRnew
                            // string strChitHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'C'," + ChitsBranchID + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + "Recd From:" + "-" + " - :" + "-" + ":" + Rcptno.Text + "-" + narration + ":" + GViewCROther_Selected.Rows[i].Cells[2].Text + "'," + GViewCROther_Selected.Rows[i].Cells[4].Text + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + ",1," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "')";
                            // string strCashHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'D'," + CashOrBankID + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + "Recd From:" + "-" + " - :" + "-" + ":" + Rcptno.Text + "-" + narration + ":" + GViewCROther_Selected.Rows[i].Cells[2].Text + "'," + GViewCROther_Selected.Rows[i].Cells[4].Text + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + "," + RootID + "," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "')";
                            //string strCashHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'D'," + ChitgpTokenid.Text + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + balayer.MySQLEscapeString(GViewCROther_Selected.Rows[i].Cells[2].Text) + "'," + GViewCROther_Selected.Rows[i].Cells[4].Text + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + "," + RootID + "," + GroupID + ")";
                            //string strCashHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`) VALUES (1," + DualTransactionKey + "," + objcls.ToobjstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + txtReceiptNumber.Text + ",'D'," + CashOrBankID + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + objcls.MySQLEscapeString1(txtNarration.Text) + "'," + GViewCROther_Selected.Rows[i].Cells[4].Text + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + objcls.ToobjstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + "," + RootID + "," + GroupID + ")";
                            //  long strChitHead = trn.insertorupdateTrn(strChitHeadQuery);
                            // strCashHead = trn.insertorupdateTrn(strCashHeadQuery);
                            if (CheckBox2.Checked)
                            {
                                var chitheadid = ChitgpTokenid.Text;
                                var chitnumber = GViewCROther_Selected.Rows[i].Cells[2].Text;
                                var Nameofsubscriber = narration;
                                var branch1 = GViewCROther_Selected.Rows[i].Cells[1].Text;
                                var branchid1 = balayer.GetSingleValue("SELECT NodeID FROM svcf.headstree where TreeHint=1 and Node='" + branch1 + "';");
                                var amount = GViewCROther_Selected.Rows[i].Cells[4].Text;
                                var branch = GViewCROther_Selected.Rows[i].Cells[1].Text;
                                var branchid = ChitsBranchID;
                                var ChoosenDate = dtChoosenDate.ToString("yyyy-MM-dd");
                                var recno = Rcptno.Text;
                                var ss = "Insert into `svcf`.`chitcollection` (DualTransactionKey,chitnumber,Nameofsubscriber,amount,BranchID,ChoosenDate,ChitHead_id,VoucherHeadid) values('" + DualTransactionKey + "','" + chitnumber + "','" + Nameofsubscriber + "','" + amount + "','" + branchid + "','" + ChoosenDate + "',"+ chitheadid + ",'43')";
                                trn.insertorupdateTrn(ss);
                                string strChitHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'C','43','" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + "Recd From:" + "-" + " - :" + "-" + ":" + Rcptno.Text + "-" + narration + ":" + GViewCROther_Selected.Rows[i].Cells[2].Text + "'," + GViewCROther_Selected.Rows[i].Cells[4].Text + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + ",5," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "')";
                                string strCashHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'D'," + CashOrBankID + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + "Recd From:" + "-" + " - :" + "-" + ":" + Rcptno.Text + "-" + narration + ":" + GViewCROther_Selected.Rows[i].Cells[2].Text + "'," + GViewCROther_Selected.Rows[i].Cells[4].Text + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + "," + RootID + "," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "')";
                                long strChitHead = trn.insertorupdateTrn(strChitHeadQuery);
                                strCashHead = trn.insertorupdateTrn(strCashHeadQuery);
                            }
                            else
                            {
                                string strChitHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'C'," + ChitsBranchID + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + "Recd From:" + "-" + " - :" + "-" + ":" + Rcptno.Text + "-" + narration + ":" + GViewCROther_Selected.Rows[i].Cells[2].Text + "'," + GViewCROther_Selected.Rows[i].Cells[4].Text + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + ",1," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "')";
                                string strCashHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'D'," + CashOrBankID + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + "Recd From:" + "-" + " - :" + "-" + ":" + Rcptno.Text + "-" + narration + ":" + GViewCROther_Selected.Rows[i].Cells[2].Text + "'," + GViewCROther_Selected.Rows[i].Cells[4].Text + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + "," + RootID + "," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "')";
                                long strChitHead = trn.insertorupdateTrn(strChitHeadQuery);
                                strCashHead = trn.insertorupdateTrn(strCashHeadQuery);
                            }
                        }
                        if (CheckBox1.Checked == true)
                        {
                            TransactionKeyDue = strCashHead.ToString();
                        }
                        if (RowddlMisc != "")
                        {
                           // string strChitmISCHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'C'," + mischd1 + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + (GViewCROther_Selected.Rows[i].Cells[2].Text + ":" + balayer.MySQLEscapeString(GViewCROther_Selected.Rows[i].Cells[3].Text)) + "'," + txtmisc + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + "," + mischd2 + "," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "') ";
                       //  string strCashmISCHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'D'," + CashOrBankID + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + (GViewCROther_Selected.Rows[i].Cells[2].Text + ":" + balayer.MySQLEscapeString(GViewCROther_Selected.Rows[i].Cells[3].Text)) + "'," + txtmisc + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + "," + RootID + "," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "') ";
                       //  CRRnew
                            if (ddlmisc.Contains("&amp;"))
                            {
                                narration = ddlmisc.Replace("&amp;", "&");
                            }
                            else
                            {
                                narration = balayer.MySQLEscapeString(GViewCROther_Selected.Rows[i].Cells[3].Text);
                            }
                            string strChitmISCHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'C'," + mischd1 + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + "Misc :" + " -" + " Recd from " + "-" + Rcptno.Text + "-" + narration + ":" + GViewCROther_Selected.Rows[i].Cells[2].Text + "'," + txtmisc + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + "," + mischd2 + "," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "') ";
                            string strCashmISCHeadQuery = "INSERT INTO `svcf`.`voucher` (`Other_Trans_Type`,`DualTransactionKey`,`BranchID`,`CurrDate`,`Voucher_No`,`Voucher_Type`,`Head_Id`,`ChoosenDate`,`Narration`,`Amount`,`Series`,`ReceievedBy`,`Trans_Type`,`T_Day`,`T_Month`,`T_Year`,`MemberID`,`Trans_Medium`,`RootID`,`ChitGroupId`,`M_Id`,LoginIP) VALUES (1," + DualTransactionKey + "," + balayer.ToobjectstrEvenNull(Session["Branchid"]) + ",'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'," + Rcptno.Text + ",'D'," + CashOrBankID + ",'" + dtChoosenDate.ToString("yyyy-MM-dd") + "','" + "Misc :" + " -" + " Recd from " + "-" + Rcptno.Text + "-" + narration + ":" + GViewCROther_Selected.Rows[i].Cells[2].Text + "'," + txtmisc + ",'" + ddlReceiptSeries.SelectedItem.Text + "','" + balayer.ToobjectstrEvenNull(Session["UserName"]) + "',1," + dtChoosenDate.Day + "," + dtChoosenDate.Month + "," + dtChoosenDate.Year + "," + MemberID + "," + trans_medium + "," + RootID + "," + GroupID + "," + ddlColloctorName.SelectedItem.Value + ",'" + objSession.LoginIp + "') ";


                            long strChitMiscHead = trn.insertorupdateTrn(strChitmISCHeadQuery);
                            long strCashHeadMisc = trn.insertorupdateTrn(strCashmISCHeadQuery);
                        }
                    }
                }
                if (ddlColloctorName.ToolTip.ToString().Trim() != "")
                {
                    //put  the  query to check all the numbers used or not 
                    trn.insertorupdateTrn("update svcf.assignreceiptbook set IsFinished=1,alreadyusedReceipts=" + ddlColloctorName.ToolTip.ToString() + " where receiptseries='" + ddlReceiptSeries.SelectedItem.Text + "' and receiptnoto in(" + ddlColloctorName.ToolTip.ToString().Trim() + ") and BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]));
                }
                else
                {
                    //update last used receipt no. in assignreceiptbook                    
                    trn.insertorupdateTrn("update svcf.assignreceiptbook set alreadyusedReceipts=" + RCNumber + " where receiptseries='" + ddlReceiptSeries.SelectedItem.Text + "' and receiptnoto in(" + rcpttorange.Value + ") and BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]));
                }
                //ModalPopupExtender1.PopupControlID = "pnlmsg";
                //BtnOK.Focus();
                //ModalPopupExtender1.Show();
                //BtnOK.Focus();
                //pnlmsg.Visible = true;
                //lblh.Text = "Status";
                //lblcon.Text = "Your Transaction Processed Successfully!!!";
                //lblcon.ForeColor = System.Drawing.Color.Green;
                rcpttorange.Value = "";
                rcptfrmrange.Value = "";

                ViewState["CurrentTable"] = null;
                GViewCROther_Selected.DataSource = (DataTable)ViewState["CurrentTable"];
                GViewCROther_Selected.DataBind();
                SetInitialRow();
                mischd1 = "";
                mischd2 = "";
                //RefNo.Clear();
                //RefNo1.Clear();             
                trn.CommitTrn();
               // Response.Redirect(Request.Url.AbsoluteUri, false);
                logger.Info("CRROtherBranch.aspx - btnConfirmationYes_click() - Completed: " + DateTime.Now + " by: " + Convert.ToString(Session["UserName"]) + "");
            }
            catch (Exception err)
            {
                try
                {
                    trn.RollbackTrn();
                    ViewState["CurrentTable"] = null;
                    GViewCROther_Selected.DataSource = (DataTable)ViewState["CurrentTable"];
                    GViewCROther_Selected.DataBind();
                    logger.Info("CRROtherBranch.aspx - btnConfirmationYes_click() - Error: " + err.Message + ": " + DateTime.Now + " by: " + Convert.ToString(Session["UserName"]) + "");
                }
                catch 
                { }
                finally
                {
                    ModalPopupExtender1.PopupControlID = "Pnlgendrate";
                    ModalPopupExtender1.Show();
                    Pnlgendrate.Visible = true;
                    lblHD.Text = "Status";
                    lblContent.Text = "Problem with Your Transaction Please Contact Administrator!!!";
                    lblContent.ForeColor = System.Drawing.Color.Red;
                    Response.Redirect(Request.Url.AbsoluteUri);
                }
            }
            finally
            {
                trn.DisposeTrn();
               // Response.Redirect(Request.Url.AbsoluteUri);
            }
            pnlConfirmation.Visible = false;
        }
        protected void btnGenerate_Click(object sender, EventArgs e)
        {
            Page.Validate("a");
            Page.Validate("GrpRow");
            Page.Validate("b");
            if (!Page.IsValid)
            {
                return;
            }
            if (Session["CheckRefresh"].ToString() != ViewState["CheckRefresh"].ToString())
            {
                return;
            }
            if (Page.IsValid == true)
            {
                decimal dblTotalAmount = decimal.Parse(txtTotalAmount.Text);
                decimal dblDueAmount = 0.0M;
                decimal dblDueTemp;
                bool isMisc;
                bool isMiscIssue = false;
                string mischead = "";
                string miscamnt = "";
                
                string selectedRSeries = "";
                string selectedbranch = "";
              
              
                string selseries = "";
              
                //Collector name
                selectedRSeries = Request.Form[ddlColloctorName.UniqueID];

                //Receipt series
                PopulateDropDownList(CRSeries_OtherBranch(selectedRSeries), ddlReceiptSeries);
                selseries = HD_RSeriesid.Value;
                ddlReceiptSeries.Items.FindByText(selseries).Selected = true;


                //Selected Branch
                selectedbranch = Request.Form[listbranch.UniqueID];
                listbranch.Items.FindByValue(selectedbranch).Selected = true;

           

               //// //RCNumber = Convert.ToInt32(txtReceiptNumber.Text);
               //// //Receipt series
               //// selectedRSeries = Request.Form[ddlColloctorName.UniqueID];
               //// PopulateDropDownList(CRSeries_OtherBranch(selectedRSeries), ddlReceiptSeries);

               //// //Selected Branch
               //// selectedbranch = Request.Form[ddlBranchName.UniqueID];
               //// //PopulateDropDownList(ChitGrp(selectedbranch), ddlGroup);
               //// //selectedchit = HD_SelectedChit.Value;

               //// ddlBranchName.Items.FindByValue(selectedbranch).Selected = true;

               //// //ddlGroup.Items.FindByValue(selectedchit).Selected = true;

               //// //Chit Token
               //// //GpChitToken = Request.Form[ddlChitno.UniqueID];
               //// //ddlChitno.Items.FindByValue(d).Selected = true;

               //// //LoadedSeries = Request.Form[ddlReceiptSeries.UniqueID];   
               //// LoadedSeries = HD_RSeriesid.Value;

               //// //if (ddlReceiptSeries.Items.Count > 0)
               //// //{
               //// ddlReceiptSeries.Items.FindByText(LoadedSeries).Selected = true;
               ////// }
               ////// txtReceiptNumber.Text = RCNumber.ToString();
               

                foreach (GridViewRow gvRow in GViewCROther_Selected.Rows)
                {
                    //decimal dblDueTemp = decimal.Parse(((TextBox)gvRow.FindControl("txtAmount")).Text);
                    dblDueTemp = decimal.Parse(gvRow.Cells[4].Text);
                    decimal dblMiscTemp = 0.0M;

                    //isMisc = decimal.TryParse(((TextBox)gvRow.FindControl("txtMisc")).Text, out dblMiscTemp);
                    miscamnt = gvRow.Cells[6].Text;
                    if (miscamnt == "&nbsp;")
                    {
                        miscamnt = "0";
                    }
                    isMisc = decimal.TryParse((miscamnt), out dblMiscTemp);
                    dblDueAmount += dblDueTemp + dblMiscTemp;
                    
                    //DropDownList ddlMisc = ((DropDownList)gvRow.FindControl("ddlMisc"));
                    mischead = gvRow.Cells[5].Text;
                    mischead = mischead.Replace("&gt;&gt;", ">>");
                    if (mischead == "--Select--")
                    {
                        mischead = "";
                    }
                    if (isMisc == true & mischead != "")
                    {
                        isMiscIssue = true;
                    }
                    else if (isMisc == false & mischead != "")
                    {
                        isMiscIssue = true;
                    }
                }
                if (dblTotalAmount != dblDueAmount)
                {
                    ModalPopupExtender1.PopupControlID = "Pnlgendrate";
                    ModalPopupExtender1.Show();
                    Pnlgendrate.Visible = true;
                    lblHD.Text = "Status";
                    if (isMiscIssue == false)
                    {
                        lblContent.Text = "Total Amount Not Tally With Due Amount and Misc Amount!!!";
                    }
                    else
                    {
                        lblContent.Text = "Total Amount Not Tally With Due Amount and Misc Amount!!!<br><br>Please  Check Misc Area!!!";
                    }
                    lblContent.ForeColor = System.Drawing.Color.Red;
                    return;
                }
                string finishedReceiptNo = "";
                string strErrorMessage = "";
                string strExistMessage = "";
                int ReceiptNo = 0;
                int FromRange = 0;
                int toRange = 0;
                DataTable dtAll = balayer.GetDataTable("SELECT  (receiptnoto-total),receiptnoto FROM svcf.assignreceiptbook where  moneycollid=" + ddlColloctorName.SelectedValue + "  and BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and receiptseries='" + ddlReceiptSeries.SelectedItem.Text + "' and IsFinished=0");
                //for (int i = 0; i < GridView1.Rows.Count && keepGoing; i++)
                //{
                //TextBox txtReceiptNo = (TextBox)GridView1.Rows[i].FindControl("txtReceiptNo");
                for (int j = 0; j < dtAll.Rows.Count; j++)
                {
                   // ReceiptNo = int.Parse(txtReceiptNumber.Text);
                    Label RCNUM = (Label)GViewCROther_Selected.Rows[0].FindControl("lblrcnumber");
                    ReceiptNo = Convert.ToInt32(RCNUM.Text);
                    FromRange = int.Parse(dtAll.Rows[j][0].ToString());
                    rcptfrmrange.Value = Convert.ToString(FromRange);

                    toRange = int.Parse(dtAll.Rows[j][1].ToString());
                    rcpttorange.Value = Convert.ToString(toRange);

                    if (ReceiptNo >= FromRange & ReceiptNo <= toRange)
                    {
                        if (ReceiptNo == toRange)
                        {
                            finishedReceiptNo = ReceiptNo + ",";
                        }
                        if (0 != int.Parse(balayer.GetSingleValue("select ifnull(Count(*),0) from voucher where BranchID=" + balayer.ToobjectstrEvenNull(Session["Branchid"]) + " and  Voucher_No=" + ReceiptNo + " and Series='" + ddlReceiptSeries.SelectedItem.Text+ "'")))
                        {
                            if (strExistMessage == "")
                            {
                                strErrorMessage = "";
                                strExistMessage = "Following ReceiptNo Already Exist In Series " + ddlReceiptSeries.SelectedItem.Text + " :<br><br>" + ReceiptNo;
                                break;
                            }
                            else
                            {
                                strExistMessage += "<br>" + ReceiptNo;
                            }
                        }
                        else
                        {
                            strExistMessage = "";
                            strErrorMessage = "";
                            break;
                        }
                    }
                    else
                    {
                        if (strErrorMessage == "")
                        {
                            strErrorMessage = "Following ReceiptNo Not Resides inside The Allocated Range In Series " + ddlReceiptSeries.SelectedItem.Text + ":<br><br> " + ReceiptNo;
                        }
                        else
                        {
                            strErrorMessage += "<br>" + ReceiptNo;
                        }
                        //error message 
                    }
                }
                //}
                ddlColloctorName.ToolTip = finishedReceiptNo.Trim().Trim(',');
                if (strErrorMessage.Trim() != "" || strExistMessage.Trim() != "")
                {
                    ModalPopupExtender1.PopupControlID = "Pnlgendrate";
                    ModalPopupExtender1.Show();
                    Pnlgendrate.Visible = true;
                    lblHD.Text = "Status";
                    string finalError = "";
                    if (strErrorMessage.Trim() != "")
                    {
                        finalError += strErrorMessage + "<br><br>";
                    }
                    if (strExistMessage.Trim() != "")
                    {
                        finalError += strExistMessage + "<br>";
                    }
                    lblContent.Text = finalError;
                    lblContent.ForeColor = System.Drawing.Color.Red;
                    return;
                }
                //validation end
                DataTable dtConfirmation = new DataTable();
                dtConfirmation.Columns.Add("Member Name");
                dtConfirmation.Columns.Add("Amount Paying");
                dtConfirmation.Columns.Add("Draw Details");
                dtConfirmation.Columns.Add("ChitNo");

                ddltooltip = new string[GViewCROther_Selected.Rows.Count];
                for (int i = 0; i <= GViewCROther_Selected.Rows.Count - 1; i++)
                {
                    try
                    {
                        dtConfirmation.Rows.Add();
                        Label branchid = (Label)GViewCROther_Selected.Rows[i].FindControl("lblBranchid");
                        Label gpTokenid = (Label)GViewCROther_Selected.Rows[i].FindControl("lblgp_tokenid");
                        mischead = GViewCROther_Selected.Rows[i].Cells[5].Text;
                        mischead = mischead.Replace("&gt;&gt;", ">>");
                        miscamnt = GViewCROther_Selected.Rows[i].Cells[6].Text;
                        if (miscamnt == "&nbsp;")
                        {
                            miscamnt = "0";
                        }
                        if (mischead == "--Select--")
                        {
                            mischead = "";
                        }
                        //DropDownList RowddlBranchName = (DropDownList)GridView1.Rows[i].FindControl("ddlBranchName");
                        //TextBox txtNarration = (TextBox)GridView1.Rows[i].FindControl("txtNarration");
                        //TextBox RowtxtAmount = (TextBox)GridView1.Rows[i].FindControl("txtAmount");
                        //DropDownList RowddlMisc = (DropDownList)GridView1.Rows[i].FindControl("ddlMisc");
                        //TextBox RowtxtMisc = (TextBox)GridView1.Rows[i].FindControl("txtMisc");
                        decimal dblMiscTemp = 0.0M;
                        //isMisc = decimal.TryParse(RowtxtMisc.Text, out dblMiscTemp);
                        isMisc = decimal.TryParse(GViewCROther_Selected.Rows[i].Cells[6].Text, out dblMiscTemp);
                        //new change
                        if ((isMisc == true & dblMiscTemp > 0.0M))
                        {
                            isMisc = true;
                        }
                        else
                        {
                            isMisc = false;
                        }
                        //new change
                        string GroupID = "0";
                        dtConfirmation.Rows[i]["Member Name"] = GViewCROther_Selected.Rows[i].Cells[1].Text;
                        dtConfirmation.Rows[i]["Amount Paying"] = GViewCROther_Selected.Rows[i].Cells[4].Text;
                        decimal TotalPaidAmount = 0.00M;
                        decimal AddTotalPaidAmount = TotalPaidAmount;
                        string FromNarration = "";
                        string ToNarration = "";
                        int FromDraw = 0;
                        int ToDraw = 0;
                        if (TotalPaidAmount == 0.00M)
                        {
                            FromNarration = "1";
                            FromDraw = 1;
                            //TotalPaidAmount = TotalPaidAmount + decimal.Parse(RowtxtAmount.Text);
                            TotalPaidAmount = TotalPaidAmount + decimal.Parse(GViewCROther_Selected.Rows[i].Cells[4].Text);
                            //DataTable dtAuction = balayer.GetDataTable("SELECT DrawNO,CurrentDueAmount FROM `svcf`.`auctiondetails` where GroupID=" + GroupID + " and CurrentDueAmount<>'0.00' order by DrawNO");
                            DataTable dtAuction = balayer.GetDataTable("SELECT DrawNO,CurrentDueAmount  FROM `svcf`.`auctiondetails` where CurrentDueAmount<>'0.00' and Branchid=" + branchid.Text + " and PrizedMemberID=" + gpTokenid.Text + " order by DrawNO");
                            for (int iAuc = 0; iAuc < dtAuction.Rows.Count; iAuc++)
                            {
                                decimal currentDueAmount = decimal.Parse(dtAuction.Rows[iAuc]["CurrentDueAmount"].ToString());
                                if (TotalPaidAmount > currentDueAmount)
                                {
                                    TotalPaidAmount = TotalPaidAmount - currentDueAmount;
                                }
                                else
                                {
                                    TotalPaidAmount = currentDueAmount - TotalPaidAmount;
                                }
                                decimal tempDueAmount = TotalPaidAmount;
                                if (tempDueAmount == 0.00M)
                                {
                                    ToNarration = (iAuc + 1).ToString();
                                    ToDraw = iAuc + 1;
                                    break;
                                }
                                else if (tempDueAmount < 0.00M)
                                {
                                    ToDraw = iAuc + 1;
                                    ToNarration = iAuc + 1 + " Part Payment";
                                    break;
                                }
                            }
                            if (ToNarration == "")
                            {
                                if (dtAuction.Rows.Count > 0)
                                {
                                    FromNarration += " To " + (int.Parse(dtAuction.Rows[dtAuction.Rows.Count - 1]["DrawNO"].ToString()) + 1).ToString() + "+ Excess Payment";
                                }
                            }
                            if (FromDraw != ToDraw)
                            {
                                FromNarration += " To " + ToNarration;
                            }
                            txtNarration.ToolTip = FromNarration;
                            ddltooltip[i] = FromNarration;
                            //dtConfirmation.Rows[i]["Misc Head"] = RowddlBranchName.ToolTip.ToString();
                        }
                        else
                        {
                            DataTable dtAuction = balayer.GetDataTable("SELECT DrawNO,CurrentDueAmount FROM `svcf`.`auctiondetails` where GroupID=" + GroupID + " and CurrentDueAmount<>'0.00' order by DrawNO");
                            TotalPaidAmount = AddTotalPaidAmount;
                            for (int iAuc = 0; iAuc < dtAuction.Rows.Count; iAuc++)
                            {
                                decimal currentDueAmount = decimal.Parse(dtAuction.Rows[iAuc]["CurrentDueAmount"].ToString());
                                TotalPaidAmount = TotalPaidAmount - currentDueAmount;
                                decimal tempDueAmount = TotalPaidAmount;
                                if (tempDueAmount == 0.00M)
                                {
                                    FromNarration = (iAuc + 2).ToString();
                                    FromDraw = iAuc + 2;
                                    break;
                                }
                                else if (tempDueAmount < 0.00M)
                                {
                                    FromNarration = iAuc + 1 + " Part Payment";
                                    FromDraw = iAuc + 1;
                                    break;
                                }
                            }
                            if (FromNarration == "")
                            {
                                if (dtAuction.Rows.Count > 0)
                                {
                                    FromNarration = (int.Parse(dtAuction.Rows[dtAuction.Rows.Count - 1]["DrawNO"].ToString()) + 1).ToString() + "+ Excess Payment";
                                }
                            }
                            else
                            {
                                TotalPaidAmount = AddTotalPaidAmount;
                                //TotalPaidAmount = TotalPaidAmount + decimal.Parse(RowtxtAmount.Text);
                                TotalPaidAmount = TotalPaidAmount + decimal.Parse(GViewCROther_Selected.Rows[i].Cells[4].Text);
                                for (int iAuc = 0; iAuc < dtAuction.Rows.Count; iAuc++)
                                {
                                    decimal currentDueAmount = decimal.Parse(dtAuction.Rows[iAuc]["CurrentDueAmount"].ToString());
                                    TotalPaidAmount = TotalPaidAmount - currentDueAmount;
                                    decimal tempDueAmount = TotalPaidAmount;
                                    if (tempDueAmount == 0.00M)
                                    {
                                        ToNarration = (iAuc + 1).ToString();
                                        ToDraw = iAuc + 1;
                                        break;
                                    }
                                    else if (tempDueAmount < 0.00M)
                                    {
                                        ToDraw = iAuc + 1;
                                        ToNarration = iAuc + 1 + " Part Payment";
                                        break;
                                    }
                                }
                                if (ToNarration == "")
                                {
                                    ToNarration = "+ Excess Payment";
                                }
                            }
                            if (ToNarration != "")
                            {
                                if (FromDraw != ToDraw)
                                {
                                    //txtNarration.ToolTip = FromNarration + " To " + ToNarration;
                                    ddltooltip[i] = FromNarration + " To " + ToNarration;
                                }
                                else
                                {
                                    //txtNarration.ToolTip = ToNarration;
                                    ddltooltip[i] = ToNarration;
                                }
                            }
                            else
                            {
                                //txtNarration.ToolTip = FromNarration;
                                ddltooltip[i] = FromNarration;
                            }
                        }
                        //dtConfirmation.Rows[i]["Draw Details"] = txtNarration.ToolTip.ToString();
                        dtConfirmation.Rows[i]["Draw Details"] = ddltooltip[i];
                        dtConfirmation.Rows[i]["ChitNo"] = GViewCROther_Selected.Rows[i].Cells[2].Text;
                        if (isMisc == true)
                        {
                            if (!dtConfirmation.Columns.Contains("Misc Head"))
                            {
                                dtConfirmation.Columns.Add("Misc Head");
                                dtConfirmation.Columns.Add("Misc Amount");
                            }
                            //dtConfirmation.Rows[i]["Misc Head"] = RowddlMisc.SelectedItem.Text;
                            //dtConfirmation.Rows[i]["Misc Amount"] = RowtxtMisc.Text;
                            dtConfirmation.Rows[i]["Misc Head"] = mischead;
                            dtConfirmation.Rows[i]["Misc Amount"] = miscamnt;
                        }
                    }
                    catch
                    {
                    }
                    finally
                    {
                    }
                }
                gvConfirm.DataSource = dtConfirmation;
                gvConfirm.DataBind();
                lblHeadingConfirmation.Text = "Confirmation";
                ModalPopupExtender1.PopupControlID = "pnlConfirmation";
                ModalPopupExtender1.Show();
                pnlConfirmation.Visible = true;
                Button1.Focus();
            }
        }
        protected void btnyes_Click(object sender, EventArgs e)
        {
            ModalPopupExtender1.Hide();
        }
        protected void btnNo_Click(object sender, EventArgs e)
        {
            ModalPopupExtender1.Hide();
        }
        protected void btnOK_Click(object sender, EventArgs e)
        {
            Response.Redirect(Request.Url.AbsolutePath);
        }
        protected void ResetPage()
        {
            Response.Redirect(Request.Url.AbsolutePath);
        }

        protected void GView_Selected_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            try
            {
                int index = Convert.ToInt32(e.RowIndex);
                DataTable dtable = ViewState["CurrentTable"] as DataTable;
                dtable.Rows[index].Delete();
                ViewState["CurrentTable"] = dtable;
                GViewCROther_Selected.DataSource = ViewState["CurrentTable"];
                GViewCROther_Selected.DataBind();

                if (GViewCROther_Selected.Rows.Count == 0)
                {
                    SetInitialRow();
                }
            }
            catch (Exception)
            {

            }
            finally
            {

            }
        }

        [System.Web.Services.WebMethod]
        public static string GetCustomername(string hdid)
        {
            string custname = "";
            try
            {
                //custname = balayer.CmnList("select MemberIDNew,concat(MemberID,' | ', CustomerName) as 'CustomerName' from membermaster where TypeOfMember<>'Foreman'");
                BusinessLayer blayer = new BusinessLayer();
                custname = blayer.GetSingleValue("select MemberName from membertogroupmaster where Head_Id=" + hdid + "");
            }
            catch (Exception) { }
            return custname;
        }
       

        [System.Web.Services.WebMethod]
        public static List<ListItem> ChitToken(string branchid)
        {
            //DataTable dtMC = balayer.GetDataTable("Select distinct receiptseries from assignreceiptbook where moneycollid='" + ddlColloctorName.SelectedValue + "' and IsFinished=0");
            //CommonClassFile objcls = new CommonClassFile();
            BusinessLayer blayer = new BusinessLayer();
            List<ListItem> TList = new List<ListItem>();
            TList.Clear();
            TList = blayer.BindTokenist("SELECT Head_Id,GrpMemberID FROM membertogroupmaster where BranchID=" + branchid + " ");
            return TList;
        }



        [System.Web.Services.WebMethod]
        public static List<ListItem> Getsrchlist(string branchid, string seltext)
        {
            //DataTable dtMC = balayer.GetDataTable("Select distinct receiptseries from assignreceiptbook where moneycollid='" + ddlColloctorName.SelectedValue + "' and IsFinished=0");
            //CommonClassFile objcls = new CommonClassFile();
            BusinessLayer blayer = new BusinessLayer();
            List<ListItem> TList = new List<ListItem>();
            TList.Clear();
            TList = blayer.BindTokenist("SELECT Head_Id,GrpMemberID FROM membertogroupmaster where BranchID=" + branchid + " and  GrpMemberID like '%" + seltext + "%'");
            return TList;
        }


        [System.Web.Services.WebMethod]
        public static List<ListItem> ChitGrp(string branchid)
        {
            //DataTable dtMC = balayer.GetDataTable("Select distinct receiptseries from assignreceiptbook where moneycollid='" + ddlColloctorName.SelectedValue + "' and IsFinished=0");
            BusinessLayer blayer = new BusinessLayer();
            List<ListItem> TList = new List<ListItem>();
            TList.Clear();
            TList =blayer.BindGrpList("select Head_Id, GROUPNO from groupmaster where BranchID=" + branchid + " ");
            return TList;
        }



        [System.Web.Services.WebMethod]
        public static List<ListItem> CRSeries_OtherBranch(string mcid)
        {
            //DataTable dtMC = balayer.GetDataTable("Select distinct receiptseries from assignreceiptbook where moneycollid='" + ddlColloctorName.SelectedValue + "' and IsFinished=0");
            //CommonClassFile objcls = new CommonClassFile();
            BusinessLayer blayer = new BusinessLayer();
            List<ListItem> TList = new List<ListItem>();
            TList.Clear();
            TList = blayer.BindDD_List("Select distinct receiptseries,moneycollid from assignreceiptbook where moneycollid='" + mcid + "' and IsFinished=0");
            return TList;
        }


        [System.Web.Services.WebMethod]
        public static string getRcptNumber(string Series, string CollectorID)
        {
            string receiptno = "";
            try
            {
              //  CommonClassFile objcls = new CommonClassFile();
                BusinessLayer blayer = new BusinessLayer();
          
                List<ListItem> TList = new List<ListItem>();
                TList.Clear();
                TList = blayer.BindDD_List("Select distinct receiptseries,moneycollid from assignreceiptbook where moneycollid='" + CollectorID + "' and IsFinished=0");

                DataTable dtAll = blayer.GetDataTable("SELECT  alreadyusedreceipts,receiptnoto   FROM svcf.assignreceiptbook where  moneycollid=" + CollectorID + "  and IsFinished=0 and BranchID=" + blayer.ToobjectstrEvenNull(HttpContext.Current.Session["Branchid"]) + " and receiptseries='" + TList[0].Text + "'");
                if (dtAll.Rows.Count != 0)
                {
                    //receiptno = dtAll.Rows[0][1].ToString();
                    int from = int.Parse(dtAll.Rows[0][0].ToString());
                    int t0 = int.Parse(dtAll.Rows[0][1].ToString());
                    string strQuery = "select ifnull(max(Voucher_No)+1,0) from voucher where BranchID=" +blayer.ToobjectstrEvenNull(HttpContext.Current.Session["Branchid"]) + " and Trans_Type=1 and Voucher_No>=" + from + " and Voucher_No<=" + t0 + " and `Series`='" + TList[0].Text + "'";
                    int RecNo = int.Parse(blayer.GetSingleValue(strQuery));
                    if (RecNo != 0)
                    {
                        receiptno = RecNo.ToString();
                    }
                    else
                    {
                        receiptno = from.ToString();
                    }
                }
                else
                {
                    receiptno = "0";
                    //ScriptManager.RegisterStartupScript(this, GetType(), "Warning", "alert(' Please Assign new Reciept Book!!!');", true);
                }

            }
            catch (Exception) { }
            return receiptno;
        }

        [System.Web.Services.WebMethod]
        public static string gtRcptBkNumber(string Series, string CollectorID)
        {
            string receiptno = "";
            try
            {
               // CommonClassFile objcls = new CommonClassFile();
                BusinessLayer blayer = new BusinessLayer();
          
                DataTable dtAll = blayer.GetDataTable("SELECT  alreadyusedreceipts,receiptnoto   FROM svcf.assignreceiptbook where  moneycollid=" + CollectorID + "  and IsFinished=0 and BranchID=" + blayer.ToobjectstrEvenNull(HttpContext.Current.Session["Branchid"]) + " and receiptseries='" + Series + "'");
                if (dtAll.Rows.Count != 0)
                {
                    int from = int.Parse(dtAll.Rows[0][0].ToString());
                    int t0 = int.Parse(dtAll.Rows[0][1].ToString());
                    string strQuery = "select ifnull(max(Voucher_No)+1,0) from voucher where BranchID=" + blayer.ToobjectstrEvenNull(HttpContext.Current.Session["Branchid"]) + " and Trans_Type=1 and Voucher_No>=" + from + " and Voucher_No<=" + t0 + " and `Series`='" + Series + "'";
                    int RecNo = int.Parse(blayer.GetSingleValue(strQuery));
                    if (RecNo != 0)
                    {
                        receiptno = RecNo.ToString();
                    }
                    else
                    {
                        receiptno = from.ToString();
                    }
                }
                else
                {
                    receiptno = "0";
                    //ScriptManager.RegisterStartupScript(this, GetType(), "Warning", "alert(' Please Assign new Reciept Book!!!');", true);
                }

            }
            catch (Exception) { }
            return receiptno;
        }

        protected void Button3_Click(object sender, EventArgs e)
        {
            try
            {
                AddNewRowToGrid();               
            }
            catch (Exception) { }
        }
    }
}