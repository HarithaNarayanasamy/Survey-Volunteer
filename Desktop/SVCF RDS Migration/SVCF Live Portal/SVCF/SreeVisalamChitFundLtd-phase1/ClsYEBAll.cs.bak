using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using SVCF_BusinessAccessLayer;
using SVCF_TransactionLayer;
using SVCF_DataAccessLayer;
using Spire.Xls;
using System.Drawing;
using System.Globalization;

namespace SreeVisalamChitFundLtd_phase1
{
    public class ClsYEBAll
    {

        CommonVariables objCOM = new CommonVariables();
        #region Object
        BusinessLayer balayer = new BusinessLayer();
        TransactionLayer trn = new TransactionLayer();
        #endregion
        DataTable rentpaid = new DataTable();
        DataTable baddebts = new DataTable();

        DataTable dtbranch = new DataTable();
        DataTable dtinvest = new DataTable();
        DataTable Finalivest = new DataTable();
        DataTable dtBank = new DataTable();
        DataTable Foreman = new DataTable();
        DataTable Decree = new DataTable();
        DataTable Loans = new DataTable();
        DataTable OtherItems = new DataTable();
        DataTable Monthlychit = new DataTable();
        DataTable Chitheads = new DataTable();
        DataTable Stamps = new DataTable();
        DataTable Heads = new DataTable();
        DataTable dtbind = new DataTable();
        int secondtablewidth = 0;
        int thirdtablewidth = 0;
        int fourthtablewidth = 0;
        int firsttablerowcount = 0;

        int comparefirst = 0;
        int comparethird = 0;


        DataTable Outstunpaid = new DataTable();


        decimal PrizeMoney = 0;
        decimal Kasar = 0;
        decimal OSTotal = 0;
        decimal Commission = 0;
        decimal UPTotal = 0;
        decimal amtremit = 0;


        DataTable Loansout = new DataTable();

        DataTable Chitdebit = new DataTable();

        string strChits = "";
        DataTable dtC;
        string credit;
        string debit;
        decimal E_Credit = 0;
        decimal E_Debit = 0;
        decimal P_Arrear = 0;
        decimal Sr_Amount = 0;
        decimal Call_Amount = 0;
        decimal Decree_Amount = 0;
        decimal Court_Amount = 0;


        DataTable sundries = new DataTable();

        string outputlocation = "";

        public ClsYEBAll(string filepath)
        {
            outputlocation = filepath;
        }

        #region RentPaid

        public DataTable BindRentpaid(string fromsdate, string todate, string branchid)
        {
            var rateofrent = "";
            var Fromdate = "";
            double total = 0;
            var x = 0;
            DataTable ss = new DataTable();
            try
            {
                //string qry = @"select a1.Amount,a1.frmdate,a1.todate,a1.rateofrent,(select b1.purpose from svcf.branchsuboffice as b1 where b1.id = a1.subhead_id) as officename,(select b1.residentialaddress from svcf.branchsuboffice as b1 where b1.id = a1.subhead_id) as raddress,(select b1.officeaddress from svcf.branchsuboffice as b1 where b1.id = a1.subhead_id) as offaddress from  svcf.accruedloanfd_details as a1 join svcf.voucher as v1 on a1.dualtransactionkey=v1.DualTransactionKey where a1.BranchID = '" + branchid + "' and a1.choosendate between '" + balayer.indiandateToMysqlDate(fromsdate) + "' and '" + balayer.indiandateToMysqlDate(todate) + "' and a1.head_id in('94','1132559','1132561') and v1.Voucher_Type='D' order by officename,frmdate,rateofrent ;"; //Commente on 30-10-2020
                string qry = @"select v1.Amount,a1.frmdate,a1.todate,a1.rateofrent,(select b1.purpose from svcf.branchsuboffice as b1 where b1.id = a1.subhead_id) as officename,(select b1.residentialaddress from svcf.branchsuboffice as b1 where b1.id = a1.subhead_id) as raddress,(select b1.officeaddress from svcf.branchsuboffice as b1 where b1.id = a1.subhead_id) as offaddress from  svcf.accruedloanfd_details as a1 join svcf.voucher as v1 on a1.dualtransactionkey=v1.DualTransactionKey where a1.BranchID = '" + branchid + "' and a1.choosendate between '" + balayer.indiandateToMysqlDate(fromsdate) + "' and '" + balayer.indiandateToMysqlDate(todate) + "' and a1.head_id in('94','1132559','1132561') and v1.head_id in('94','1132559','1132561')  and v1.Voucher_Type='D' order by officename,frmdate,rateofrent ;";

                rentpaid = balayer.GetDataTable(qry);

                ss.Columns.Add("Total");
                ss.Columns.Add("Fromdate");
                ss.Columns.Add("Todate");
                ss.Columns.Add("raddress");
                ss.Columns.Add("offaddress");
                ss.Columns.Add("officename");
                ss.Columns.Add("rateofrent");
                if (rentpaid.Rows.Count > 1)
                {
                    rateofrent = rentpaid.Rows[0]["rateofrent"].ToString();
                    Fromdate = String.Format("{0:MM/dd/yy}", rentpaid.Rows[0]["frmdate"].ToString());
                }
                int j = 1;
                //DateTime date1;
                //DateTime date2;
                //int month1 = 0;
                //int month2 = 0;
                //int diff = 0;
                for (int i = 0; i < rentpaid.Rows.Count; i++, j++)
                {
                    x = i;
                    if (rentpaid.Rows[i]["officename"].ToString() == rentpaid.Rows[j]["officename"].ToString())
                    {
                        if (rentpaid.Rows[i]["rateofrent"].ToString() == rentpaid.Rows[j]["rateofrent"].ToString())
                        {
                            //date1 = Convert.ToDateTime(rentpaid.Rows[i]["frmdate"].ToString());
                            //date2 = Convert.ToDateTime(rentpaid.Rows[i]["todate"].ToString());
                            //month1 = date1.Month;
                            //month2 = date2.Month;
                            //diff = month2 - month1;

                            //if (rentpaid.Rows[i]["frmdate"].ToString() == rentpaid.Rows[j]["frmdate"].ToString() && rentpaid.Rows[i]["todate"].ToString() == rentpaid.Rows[j]["todate"].ToString())
                            //{
                            //    total = 0;
                            //}
                            //else
                            //{
                                total += Convert.ToDouble(rentpaid.Rows[i]["Amount"].ToString());
                                //if (diff > 0)
                                //    total += (diff+1) * Convert.ToDouble(rentpaid.Rows[i]["rateofrent"].ToString());
                                //else
                                //    total += Convert.ToDouble(rentpaid.Rows[i]["rateofrent"].ToString());
                            //}
                        }
                        else
                        {
                            //date1 = Convert.ToDateTime(rentpaid.Rows[i]["frmdate"].ToString());
                            //date2 = Convert.ToDateTime(rentpaid.Rows[i]["todate"].ToString());
                            //month1 = date1.Month;
                            //month2 = date2.Month;
                            //diff = month2 - month1;
                            //if (diff > 0)
                            //    total += (diff+1) * Convert.ToDouble(rentpaid.Rows[i]["rateofrent"].ToString());
                            //else
                            //    total += Convert.ToDouble(rentpaid.Rows[i]["rateofrent"].ToString());
                            total += Convert.ToDouble(rentpaid.Rows[i]["Amount"].ToString());
                            var dd = ss.NewRow();
                            dd["Total"] = total.ToString();
                            dd["Fromdate"] = Fromdate;
                            dd["Todate"] = String.Format("{0:MM/dd/yy}", rentpaid.Rows[i]["todate"].ToString());
                            dd["raddress"] = rentpaid.Rows[i]["raddress"].ToString();
                            dd["offaddress"] = rentpaid.Rows[i]["offaddress"].ToString();
                            dd["officename"] = rentpaid.Rows[i]["officename"].ToString();
                            dd["rateofrent"] = rateofrent;
                            if (rentpaid.Rows.Count > i)
                            {
                                rateofrent = rentpaid.Rows[j]["rateofrent"].ToString();
                                Fromdate = String.Format("{0:MM/dd/yy}", rentpaid.Rows[j]["frmdate"].ToString());
                            }
                            ss.Rows.Add(dd.ItemArray);
                            total = 0;
                        }
                    }
                    else
                    {
                        //date1 = Convert.ToDateTime(rentpaid.Rows[i]["frmdate"].ToString());
                        //date2 = Convert.ToDateTime(rentpaid.Rows[i]["todate"].ToString());
                        //month1 = date1.Month;
                        //month2 = date2.Month;
                        //diff = month2 - month1;
                        //if (diff > 0)
                        //    total += (diff+1) * Convert.ToDouble(rentpaid.Rows[i]["rateofrent"].ToString());
                        //else
                        //    total += Convert.ToDouble(rentpaid.Rows[i]["rateofrent"].ToString());
                        total += Convert.ToDouble(rentpaid.Rows[i]["Amount"].ToString());
                        var dd = ss.NewRow();
                        dd["Total"] = total.ToString();
                        dd["Fromdate"] = Fromdate;
                        dd["Todate"] = String.Format("{0:MM/dd/yy}", rentpaid.Rows[i]["todate"].ToString());
                        dd["raddress"] = rentpaid.Rows[i]["raddress"].ToString();
                        dd["offaddress"] = rentpaid.Rows[i]["offaddress"].ToString();
                        dd["officename"] = rentpaid.Rows[i]["officename"].ToString();
                        dd["rateofrent"] = rateofrent;
                        if (rentpaid.Rows.Count > i)
                        {
                            rateofrent = rentpaid.Rows[j]["rateofrent"].ToString();
                            Fromdate = String.Format("{0:MM/dd/yy}", rentpaid.Rows[j]["frmdate"].ToString());
                        }
                        ss.Rows.Add(dd.ItemArray);
                        total = 0;
                    }
                }

            }
            catch (Exception ex)
            {
                total += Convert.ToDouble(rentpaid.Rows[x]["rateofrent"].ToString());
                var dd = ss.NewRow();
                dd["Total"] = total.ToString();
                dd["Fromdate"] = Fromdate;
                dd["Todate"] = String.Format("{0:MM/dd/yy}", rentpaid.Rows[x]["todate"].ToString());
                dd["raddress"] = rentpaid.Rows[x]["raddress"].ToString();
                dd["offaddress"] = rentpaid.Rows[x]["offaddress"].ToString();
                dd["officename"] = rentpaid.Rows[x]["officename"].ToString();
                dd["rateofrent"] = rateofrent;
                ss.Rows.Add(dd.ItemArray);
            }
            return ss;
        }

        //public void Rentpaid(string fromsdate,string todate,string branchid,string imagepath)
        //{
        //    Workbook workbook = new Workbook();
        //    workbook.CreateEmptySheets(1);
        //    Worksheet sheet = workbook.Worksheets[0];

        //    ExcelFont fontBold = workbook.CreateFont();
        //    fontBold.IsBold = true;


        //    sheet.Name = "Rent paid St- 15";

        //    BindRentpaid(fromsdate, todate, branchid);

        //    string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + branchid + ";");

        //   // sheet.Pictures.Add(1, 1, imagepath);


        //    CellRange range = sheet.Range["A4:I5"];
        //    range.Borders.LineStyle = LineStyleType.Double;
        //    range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
        //    range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


        //    sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
        //    RichText richText01 = sheet.Range["C1"].RichText;
        //    richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

        //    sheet.Range["C2"].Value = "Branch: "+ branchname + "";
        //    RichText richText02 = sheet.Range["C2"].RichText;
        //    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);


        //    string[] values = todate.Split('/');

        //    int datelt = Convert.ToInt32(values[2]);
        //    string fstdt = (datelt - 1).ToString();
        //    string scnddt = datelt.ToString();

        //    sheet.Range["A3"].Value = "Particulars of Rent paid during the financial year "+ fstdt + "-"+ scnddt;
        //    RichText richText03 = sheet.Range["A3"].RichText;
        //    richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
        //    sheet.Range["A3:I3"].Merge();

        //    sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

        //    sheet.Range["A4:A5"].Merge();
        //    sheet.Range["A4"].Value = "Sl.No.";
        //    sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;


        //    sheet.Range["B4:B5"].Merge();
        //    sheet.Range["B4"].Value = "Full Address of the Building Occupied";
        //    sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["C4:C5"].Merge();
        //    sheet.Range["C4"].Text = "Nature of occupation like office, Record Room, Staff Room and Car shed";
        //    sheet.Range["C4"].Style.WrapText = true;
        //    sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["D4:D5"].Merge();
        //    sheet.Range["D4"].Text = "Rate of Rent per Month";
        //    sheet.Range["D4"].Style.WrapText = true;
        //    sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["E4:F4"].Merge();
        //    sheet.Range["E4"].Value = "Period of Rent";
        //    sheet.Range["E4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["E4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["E5"].Value = "From";
        //    sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["F5"].Value = "To";
        //    sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["G4:G5"].Merge();
        //    sheet.Range["G4"].Text = "Total Rent paid";
        //    sheet.Range["G4"].Style.WrapText = true;
        //    sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["H4:H5"].Merge();
        //    sheet.Range["H4"].Text = "Amount of Rent Advance paid";
        //    sheet.Range["H4"].Style.WrapText = true;
        //    sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["I4:I5"].Merge();
        //    sheet.Range["I4"].Value = "Full Residential address of the Building Owner";
        //    sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;


        //    int rowcnt = 5;
        //    int slno = 0;

        //    decimal Total = 0;

        //    foreach (DataRow dr in rentpaid.Rows)
        //    {
        //        slno = slno + 1;
        //        rowcnt = rowcnt + 1;
        //        sheet.Range["A" + rowcnt].Value = slno.ToString();
        //        sheet.Range["B" + rowcnt].Value = dr.ItemArray[6].ToString();
        //        sheet.Range["C" + rowcnt].Value = dr.ItemArray[4].ToString();
        //        if (Convert.ToString(dr.ItemArray[3]) != "")
        //        {
        //            sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //            sheet.Range["D" + rowcnt].NumberFormat = "0.00";
        //        }
        //        sheet.Range["E" + rowcnt].Value = dr.ItemArray[1].ToString();
        //        sheet.Range["F" + rowcnt].Value = dr.ItemArray[2].ToString();
        //        if (Convert.ToString(dr.ItemArray[0]) != "")
        //        {
        //            sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[0]);
        //            sheet.Range["G" + rowcnt].NumberFormat = "0.00";
        //        }
        //        sheet.Range["H" + rowcnt].Value = "";
        //        sheet.Range["I" + rowcnt].Value = dr.ItemArray[5].ToString();

        //        Total = Total + Convert.ToDecimal(dr.ItemArray[0]);

        //    }

        //    rowcnt = rowcnt + 2;

        //    sheet.Range["F" + rowcnt].Value = "Total";
        //    RichText richText04 = sheet.Range["F" + rowcnt].RichText;
        //    richText04.SetFont(0, richText04.Text.Length - 1, fontBold);

        //    sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(Total);
        //    sheet.Range["G" + rowcnt].NumberFormat = "0.00";

        //    CellRange range1 = sheet.Range["A5:" + "I" + rowcnt];
        //    range1.BorderAround(LineStyleType.Medium, Color.Black);


        //    sheet.AllocatedRange.AutoFitColumns();
        //    sheet.AllocatedRange.AutoFitRows();

        //    sheet.SetRowHeight(4, 29);
        //    sheet.SetColumnWidth(1, 9);
        //    sheet.SetRowHeight(5, 24);
        //    sheet.SetRowHeight(1, 24);
        //    sheet.SetRowHeight(2, 24);

        //    string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

        //    //workbook.SaveToFile(outputlocation + "RentpaidSt-15" + "_" + timestamp + ".xls");
        //    //System.Diagnostics.Process.Start(outputlocation + "RentpaidSt-15" + "_" + timestamp + ".xls");
        //    workbook.SaveToHttpResponse("RentpaidSt.xls", HttpContext.Current.Response);
        //}

        #endregion


        #region BadDebts


        public void Baddebts(string fromsdate, string todate, string branchid, string imagepath)
        {

            Workbook workbook = new Workbook();
            workbook.CreateEmptySheets(1);
            Worksheet sheet = workbook.Worksheets[0];

            ExcelFont fontBold = workbook.CreateFont();
            fontBold.IsBold = true;

            sheet.Name = "Baddebts written off St- 18";

            string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + branchid + ";");

            sheet.Pictures.Add(1, 1, imagepath);

            CellRange range = sheet.Range["A4:L5"];
            range.Borders.LineStyle = LineStyleType.Double;
            range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


            sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
            RichText richText01 = sheet.Range["C1"].RichText;
            richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

            sheet.Range["C2"].Value = "Branch: " + branchname + "";
            RichText richText02 = sheet.Range["C2"].RichText;
            richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

            string[] values = todate.Split('/');

            int datelt = Convert.ToInt32(values[2]);
            string fstdt = (datelt - 1).ToString();
            string scnddt = datelt.ToString();

            sheet.Range["A3"].Value = "Particulars of Bad Debts written off during the financial year  " + fstdt + "-" + scnddt;
            RichText richText03 = sheet.Range["A3"].RichText;
            richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
            sheet.Range["A3:L3"].Merge();

            sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

            sheet.Range["A4:A5"].Merge();
            sheet.Range["A4"].Value = "Sl.No.";
            sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;


            sheet.Range["B4:G4"].Merge();
            sheet.Range["B4"].Value = "CASE DETAILS";
            sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["B5"].Value = "Chit Number";
            sheet.Range["B5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["B5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["C5"].Value = "C.C Number";
            sheet.Range["C5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["C5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["D5"].Value = "Case Number";
            sheet.Range["D5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["D5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["E5"].Value = "Year";
            sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["F5"].Value = "Court";
            sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["G5"].Value = "Place";
            sheet.Range["G5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["G5"].Style.VerticalAlignment = VerticalAlignType.Center;


            sheet.Range["H4:H5"].Merge();
            sheet.Range["H4"].Value = "Name and Full address of the Defendants";
            sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["I4:K4"].Merge();
            sheet.Range["I4"].Value = "BAD DEBTS WRITTEN OFF";
            sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["I5"].Value = "Decree Amount";
            sheet.Range["I5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["I5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["J5"].Value = "Cost Amount";
            sheet.Range["J5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["J5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["K5"].Value = "Total amount written off";
            sheet.Range["K5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["K5"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["L4:L5"].Merge();
            sheet.Range["L4"].Value = "Detailed Report for written off the amount";
            sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;



            int rowcnt = 5;
            decimal crsum = 0;
            decimal drsum = 0;
            decimal Totalsum = 0;



            #region Baddebts

            string qry = @"select uuid_from_bin(DualTransactionKey) as Dukey from voucher where ChoosenDate between '" + balayer.indiandateToMysqlDate(fromsdate) + "' and '" + balayer.indiandateToMysqlDate(todate) + "' and BranchID=" + branchid + " and Head_Id=135;";

            DataTable dttranskey = balayer.GetDataTable(qry);

            foreach (DataRow ddr in dttranskey.Rows)
            {

                string qryy = @"select v1.Amount as Amount,v1.Head_Id as Headid,tc.CC as CC,SUBSTRING_INDEX( tc.Number, '/', 1) as Number,SUBSTRING_INDEX( tc.Number, '/', -1) as year,(select SUBSTRING_INDEX( Node, ' ', 1 ) as node from headstree where NodeID = v1.Head_Id ) as node,(SELECT 
                               SUBSTRING_INDEX(Node, ' ', - 1) AS node
                                  FROM
                                  headstree
                                  WHERE
                              NodeID = v1.Head_Id) AS node1 from voucher as v1 join transcourt as tc on(tc.TransactionKey=v1.TransactionKey) where v1.DualTransactionKey = uuid_to_bin('" + ddr.ItemArray[0] + "')  and v1.BranchID = " + branchid + " and v1.Voucher_Type='C' and tc.VoucherType='C';";


                baddebts = balayer.GetDataTable(qryy);

                var newDt = baddebts.AsEnumerable()
               .GroupBy(r => r.Field<UInt32>("Headid"))
               .Select(g =>
               {
                   var row = baddebts.NewRow();

                   row["Headid"] = g.Key;
                   row["Amount"] = g.Sum(r => r.Field<Decimal>("Amount"));

                   return row;
               }).CopyToDataTable();

                newDt.Columns.Remove("CC");
                newDt.Columns.Remove("Number");
                newDt.Columns.Remove("Year");
                newDt.Columns.Remove("node");
                newDt.Columns.Remove("node1");

                var unique = baddebts.AsEnumerable()
                       .GroupBy(x => x.Field<UInt32>("Headid"))
                       .Select(g => g.First()).CopyToDataTable();


                var val1 = unique.Columns[4].DataType;

                var JoinResult = (from p in newDt.AsEnumerable()
                                  join t in unique.AsEnumerable()
                                  on p.Field<UInt32>("Headid") equals t.Field<UInt32>("Headid")
                                  select new
                                  {
                                      Headid = p.Field<UInt32>("Headid"),
                                      Amount = p.Field<Decimal>("Amount"),
                                      CC = t.Field<string>("CC"),
                                      Number = t.Field<string>("Number"),
                                      Year = t.Field<string>("Year"),
                                      node = t.Field<string>("node"),
                                      node1 = t.Field<string>("node1")

                                  }).ToList();


                //foreach (DataRow dr in newDt.Rows)

                int inc = 0;
                decimal total = 0;

                foreach (var ddd in JoinResult)
                {

                    string qrydecree = @"SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(TreeHint, ',', 2 ),',',-1) as id FROM svcf.headstree where NodeID='" + ddd.Headid + "';";

                    string val = balayer.GetSingleValue(qrydecree);

                    //DataRow[] dataPer = (from myRow in baddebts.AsEnumerable()
                    //                     where myRow.Field<UInt32>("Headid") == Convert.ToInt32(ddd.Headid)
                    //                     select myRow).ToArray();

                    List<ListItem> memgrp = new List<ListItem>();

                    if ((ddd.node.ToString()).Contains("/"))
                    {
                        memgrp = balayer.Getlistdata("SELECT MemberName,MemberAddress FROM svcf.membertogroupmaster where GrpMemberID='" + ddd.node.ToString() + "';");
                    }
                    else if ((ddd.node1.ToString()).Contains("/"))
                    {
                        memgrp = balayer.Getlistdata("SELECT MemberName,MemberAddress FROM svcf.membertogroupmaster where GrpMemberID='" + ddd.node1.ToString() + "';");
                    }

                    if (inc == 0)
                    {

                        rowcnt = rowcnt + 1;

                        if ((ddd.node.ToString()).Contains("/"))
                        {
                            sheet.Range["B" + rowcnt].Value = ddd.node.ToString();
                        }
                        else if ((ddd.node1.ToString()).Contains("/"))
                        {
                            sheet.Range["B" + rowcnt].Value = ddd.node1.ToString();
                        }
                        else
                        {
                            sheet.Range["B" + rowcnt].Value = ddd.node.ToString();
                        }

                        sheet.Range["C" + rowcnt].Value = ddd.CC.ToString();
                        sheet.Range["D" + rowcnt].Value = ddd.Number.ToString();
                        sheet.Range["E" + rowcnt].Value = ddd.Year.ToString();
                        sheet.Range["F" + rowcnt].Value = ddd.Number.Split(' ')[0].ToString();

                        if (memgrp.Count > 0)
                        {
                            sheet.Range["H" + rowcnt].Value = (memgrp[0].Value + ", " + memgrp[0].Text).ToString();
                        }

                        if (val == "51")
                        {
                            sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                            sheet.Range["I" + rowcnt].NumberFormat = "0.00";

                            crsum = crsum + ddd.Amount;

                            total = total + ddd.Amount;

                        }
                        else if (val == "52")
                        {
                            sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                            sheet.Range["J" + rowcnt].NumberFormat = "0.00";

                            drsum = drsum + ddd.Amount;

                            total = total + ddd.Amount;


                        }
                    }
                    else
                    {
                        if (JoinResult[inc - 1].node == JoinResult[inc].node)
                        {
                            if (val == "51")
                            {
                                sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                                sheet.Range["I" + rowcnt].NumberFormat = "0.00";

                                crsum = crsum + ddd.Amount;

                                total = total + ddd.Amount;
                            }
                            else if (val == "52")
                            {
                                sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                                sheet.Range["J" + rowcnt].NumberFormat = "0.00";

                                drsum = drsum + ddd.Amount;

                                total = total + ddd.Amount;
                            }

                            Totalsum = Totalsum + total;

                            sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(total);
                            sheet.Range["K" + rowcnt].NumberFormat = "0.00";
                        }
                        else
                        {
                            rowcnt = rowcnt + 1;

                            if ((ddd.node.ToString()).Contains("/"))
                            {
                                sheet.Range["B" + rowcnt].Value = ddd.node.ToString();
                            }
                            else if ((ddd.node1.ToString()).Contains("/"))
                            {
                                sheet.Range["B" + rowcnt].Value = ddd.node1.ToString();
                            }
                            else
                            {
                                sheet.Range["B" + rowcnt].Value = ddd.node.ToString();
                            }

                            sheet.Range["C" + rowcnt].Value = ddd.CC.ToString();
                            sheet.Range["D" + rowcnt].Value = ddd.Number.ToString();
                            sheet.Range["E" + rowcnt].Value = ddd.Year.ToString();
                            sheet.Range["F" + rowcnt].Value = ddd.Number.Split(' ')[0].ToString();

                            if (memgrp.Count > 0)
                            {
                                sheet.Range["H" + rowcnt].Value = (memgrp[0].Value + ", " + memgrp[0].Text).ToString();
                            }

                            if (val == "51")
                            {
                                sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                                sheet.Range["I" + rowcnt].NumberFormat = "0.00";

                                crsum = crsum + ddd.Amount;

                                total = total + ddd.Amount;


                            }
                            else if (val == "52")
                            {
                                sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(ddd.Amount);
                                sheet.Range["J" + rowcnt].NumberFormat = "0.00";

                                drsum = drsum + ddd.Amount;

                                total = total + ddd.Amount;

                            }

                        }

                    }

                    inc = inc + 1;
                }
                sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(total);
                sheet.Range["K" + rowcnt].NumberFormat = "0.00";
                Totalsum = Totalsum + total;

                total = 0;
            }
            #endregion


            rowcnt = rowcnt + 2;

            sheet.Range["H" + rowcnt].Value = "TOTAL / Carried over";
            RichText richText04 = sheet.Range["H" + rowcnt].RichText;
            richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
            sheet.Range["H" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

            sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(crsum);
            sheet.Range["I" + rowcnt].NumberFormat = "0.00";
            sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(drsum);
            sheet.Range["J" + rowcnt].NumberFormat = "0.00";
            sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(Totalsum);
            sheet.Range["K" + rowcnt].NumberFormat = "0.00";

            rowcnt = rowcnt + 2;

            CellRange range1 = sheet.Range["A6:" + "L" + rowcnt];
            range1.BorderAround(LineStyleType.Medium, Color.Black);


            sheet.AllocatedRange.AutoFitColumns();
            sheet.AllocatedRange.AutoFitRows();

            sheet.SetRowHeight(4, 29);
            sheet.SetColumnWidth(1, 9);
            sheet.SetRowHeight(5, 24);
            sheet.SetRowHeight(1, 24);
            sheet.SetRowHeight(2, 24);


            string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

            workbook.SaveToFile(outputlocation + "BaddebtswrittenoffSt-18" + "_" + timestamp + ".xls");
            System.Diagnostics.Process.Start(outputlocation + "BaddebtswrittenoffSt-18" + "_" + timestamp + ".xls");
        }


        #endregion


        #region Outstanding_St5E




        public List<decimal> BindOutstanding1(string fromsdate, string todate, string branchid)
        {
            // gridOutstandingandUnpaid.SettingsText.Title = "PARTICULARS OF OUTSTANDING & UNPAID PRIZE MONEY PAYABLE AS ON " + todate;
            // gridOutstandingandUnpaid.Visible = true;
            List<decimal> ss = new List<decimal>();
            decimal balancem;
            decimal sdfgd1;
            decimal balancevalue;
            DataTable rebit = new DataTable();
            var today = DateTime.ParseExact(todate, "dd/MM/yyyy", null);
            var month = new DateTime(today.Year, today.Month, 1);
            DataTable dtrdate = new DataTable();
            dtrdate.Columns.Add("RefNo", typeof(UInt32));
            dtrdate.Columns.Add("OldAuctionDate");
            dtrdate.Columns.Add("OldPrizedToken");
            dtrdate.Columns.Add("OldPrizedMember");
            dtrdate.Columns.Add("OldPrizedValue");
            dtrdate.Columns.Add("GroupID", typeof(UInt32));
            dtrdate.Columns.Add("BranchId");
            dtrdate.Columns.Add("id");
            DataRow dro = dtrdate.NewRow();
            //List<Daybookclass> VoucherData = dt.DataTableToList<Daybookclass>();

            //var dtrdate = "";
            DataTable dtHeads = balayer.GetDataTable("select cast(concat(PrizedMemberID,'',',')as char) from svcf.auctiondetails join trans_payment tp where tp.TokenNumber=auctiondetails.PrizedMemberID and tp.DrawNo=auctiondetails.DrawNO and tp.ChitGroupId=auctiondetails.GroupID and tp.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' and IsPrized='Y'  and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and auctiondetails.BranchId=" + branchid + "");

            string sHeads = "";



            if (dtHeads.Rows.Count <= 0)
            {
            }
            else
            {
                for (int i = 0; i < dtHeads.Rows.Count; i++)
                {
                    sHeads += balayer.ToobjectstrEvenNull(dtHeads.Rows[i][0]);
                }
                sHeads = sHeads.TrimEnd(',').Replace(",,", ",");
                sHeads = " and auctiondetails.prizedMemberID not  in (" + sHeads + ")";
            }


            var str = @"SELECT `auctiondetails`.`PrizedMemberID`,`auctiondetails`.`inccolumn` as incol,DATE_FORMAT(`auctiondetails`.`Rebiddate1`,'%d/%m/%Y') AS `Date1`,DATE_FORMAT(`auctiondetails`.`Rebiddate2`,'%d/%m/%Y') AS `Date2`,`membertogroupmaster`.`GrpMemberID` AS `Chit Number`,`membertogroupmaster`.`GroupID` AS `GroupId`,`auctiondetails`.`DrawNO` AS `Instmnt`,DATE_FORMAT(`auctiondetails`.`AuctionDate`,'%d/%m/%Y') AS `Date`,`membertogroupmaster`.`MemberName` as `Name of the Subscriber`,(`auctiondetails`.`PrizedAmount`) AS `PrizedMoney1`,if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`auctiondetails`.`PrizedAmount`+`commissiondetails`.`Commission`),0.0) AS `Kasar`,(`auctiondetails`.`PrizedAmount` +`auctiondetails`.`KasarAmount`) as `Total`, if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`,`commissiondetails`.`ChitValue` AS `PrizeMoney2`, '' AS Arrears FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` and `auctiondetails`.`BranchID`=" + branchid + " and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'" + sHeads + "";

            DataTable dt = new DataTable();
            dt = balayer.GetDataTable(str);
            var fg = todate;
            var jj = dt.Columns["Date1"].ToString();

            var dt1 = dt.AsEnumerable().Where(r => r.Field<System.String>("Date1") != null).ToList();
            if (dt1.Count > 0)
            {
                var dtr1 = dt1.CopyToDataTable();
                //  var dtrebit = dt.AsEnumerable().Where(r => r.Field<System.String>("Date2") != null).CopyToDataTable();
                // dtr1.Merge(dtrebit);
                string str5 = dtr1.AsEnumerable().Select(r1 => r1["GroupID"].ToString()).Aggregate((a1, a2) => string.Concat(a1, "," + a2));
                var dt3 = balayer.GetDataTable("select * from svcf.reauctionparticulars where BranchId=" + branchid + " and GroupID in(" + str5 + ")");
                var startDate = Convert.ToDateTime(todate);

                foreach (DataRow k in dtr1.Rows)
                {

                    ////  if(k.ItemArray[2].ToString()!= "0000-00-00")
                    //if (!string.IsNullOrEmpty(dateString))
                    //{
                    //    DateTime date = DateTime.Parse(dateString);
                    //}
                    var rebitdate = k.ItemArray[2].ToString();

                    var rebitdate1 = k.ItemArray[3].ToString();
                    if (Convert.ToString(rebitdate1) == "")
                    {
                        if (Convert.ToDateTime(rebitdate) > startDate)
                        {
                            //DateTime date4 = Convert.ToDateTime(k.ItemArray[6]);
                            // string date = Convert.ToString(balayer.GetChangeDatFormat(date4, 2));
                            //    var jjjjjj = date.GetType();
                            //   var jj = dt3.Columns["GroupID"].DataType;
                            //var jj1 = dt3.Columns["Newprizedtoken"].DataType;
                            //var old = dt3.Columns["OldAuctionDate"].DataType;
                            //var inccolumn = dt3.Columns["RefNo"].GetType();
                            var RefNo = k.ItemArray[1].GetType();

                            var dtrdatelist = dt3.AsEnumerable().Where(r => r.Field<System.UInt32>("GroupID") == Convert.ToUInt32(k.ItemArray[5]) && r.Field<System.UInt32>("RefNo") == Convert.ToUInt32(k.ItemArray[1])).ToList();
                            foreach (var rr in dtrdatelist)
                            {
                                dro["RefNo"] = rr.ItemArray[0];
                                dro["OldAuctionDate"] = rr.ItemArray[1];
                                dro["OldPrizedToken"] = rr.ItemArray[2];
                                dro["OldPrizedMember"] = rr.ItemArray[3];
                                dro["OldPrizedValue"] = rr.ItemArray[4];
                                dro["GroupID"] = rr.ItemArray[5];
                                dro["BranchId"] = rr.ItemArray[6];
                                dro["id"] = rr.ItemArray[7];
                                dtrdate.Rows.Add(dro.ItemArray);
                            }



                        }
                    }
                    else
                    {
                        if (Convert.ToDateTime(rebitdate1) > startDate)
                        {
                            var jj1 = dt3.Columns["Newprizedtoken"].DataType;
                            var old = dt3.Columns["OldAuctionDate"].DataType;
                            var inccolumn = dt3.Columns["RefNo"].GetType();
                            var RefNo = k.ItemArray[1].GetType();
                            var dtrdatelist = dt3.AsEnumerable().Where(r => r.Field<System.UInt32>("GroupID") == Convert.ToUInt32(k.ItemArray[5]) && r.Field<System.UInt32>("RefNo") == Convert.ToUInt32(k.ItemArray[1])).ToList();
                            //  List<bookletout> dtrdate4 = dtrdate.DataTableToList<bookletout>();
                            foreach (var rr in dtrdatelist)
                            {
                                dro["RefNo"] = rr.ItemArray[0];
                                dro["OldAuctionDate"] = rr.ItemArray[1];
                                dro["OldPrizedToken"] = rr.ItemArray[2];
                                dro["OldPrizedMember"] = rr.ItemArray[3];
                                dro["OldPrizedValue"] = rr.ItemArray[4];
                                dro["GroupID"] = rr.ItemArray[5];
                                dro["BranchId"] = rr.ItemArray[6];
                                dro["id"] = rr.ItemArray[7];
                                dtrdate.Rows.Add(dro.ItemArray);
                            }

                        }
                    }
                }

            }
            DataTable dtBind = new DataTable();
            dtBind.Columns.Add("SNo");
            dtBind.Columns.Add("ChitNumber");
            dtBind.Columns.Add("GroupId");
            dtBind.Columns.Add("PrizedMemberID");
            dtBind.Columns.Add("Instmnt");
            dtBind.Columns.Add("Date");
            dtBind.Columns.Add("NameoftheSubscriber");
            dtBind.Columns.Add("OutPrizedMoney", typeof(decimal));
            dtBind.Columns.Add("OutKasar", typeof(decimal));
            dtBind.Columns.Add("OutTotal", typeof(decimal));
            dtBind.Columns.Add("UnpaidCommision", typeof(decimal));
            dtBind.Columns.Add("UnpaidPrizeMoney", typeof(decimal));
            dtBind.Columns.Add("AmountActuallyremittedbytheParty", typeof(decimal));
            dtBind.Columns.Add("Arrears");
            dtBind.Columns.Add("UnpaidPrizeMoneyPayable");
            dtBind.Columns.Add("Rebitdate");
            decimal data2 = 0;
            DataRow drBind = dtBind.NewRow();
            int mmmm = 0;
            for (int i = 0; i < dt.Rows.Count; i++)
            {

                var gg = dt.Rows[i]["GroupId"].GetType();
                var incol = dt.Rows[i]["incol"].GetType();
                var date = dt.Rows[i]["Date"].GetType();
                var gg1 = dtrdate.Columns["GroupID"].GetType();
                var inkk = dtrdate.Columns["RefNo"].GetType();
                var dd = dtrdate.Columns["OldAuctionDate"].GetType();
                var dtr = dtrdate.AsEnumerable().Where(r => r.Field<System.UInt32>("GroupID") == Convert.ToUInt32(dt.Rows[i]["GroupId"]) && r.Field<System.UInt32>("RefNo") == Convert.ToUInt32(dt.Rows[i]["incol"]) && r.Field<System.String>("OldAuctionDate") == Convert.ToString(dt.Rows[i]["Date"])).ToList();
                if (dtr.Count > 0)
                {
                    //foreach (DataRow nn in dtrdate.Rows)
                    //{
                    string groupid = dtr[0].ItemArray[5].ToString();
                    string refcol = dtr[0].ItemArray[0].ToString();
                    if (balayer.ToobjectstrEvenNull(dt.Rows[i]["GroupId"]) == groupid && balayer.ToobjectstrEvenNull(dt.Rows[i]["incol"]) == refcol)
                    {
                        drBind["SNo"] = mmmm + 1;
                        drBind["ChitNumber"] = balayer.GetSingleValue("select GrpMemberID from svcf.membertogroupmaster where BranchID=" + branchid + " and Head_Id=" + dtr[0].ItemArray[2] + " ");
                        drBind["Instmnt"] = balayer.GetSingleValue("select DrawNO from svcf.auctiondetails where BranchID=" + branchid + " and inccolumn=" + dtr[0].ItemArray[0] + " ");
                        drBind["Date"] = dtr[0].ItemArray[1];
                        drBind["NameoftheSubscriber"] = balayer.GetSingleValue("select MemberName from svcf.membertogroupmaster where BranchID=" + branchid + " and Head_Id=" + dtr[0].ItemArray[2] + " "); ;
                        decimal prizemoney = Convert.ToDecimal(dtr[0].ItemArray[4]);
                        drBind["OutPrizedMoney"] = dtr[0].ItemArray[4];
                        //decimal kaser = Convert.ToDecimal(balayer.GetSingleValue("SELECT if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`reauctionparticulars`.`OldPrizedValue`+`commissiondetails`.`Commission`),0.0) AS `Kasar`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'"));
                        decimal kaser = Convert.ToDecimal(balayer.GetSingleValue("SELECT if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`reauctionparticulars`.`OldPrizedValue`+`commissiondetails`.`Commission`),0.0) AS `Kasar`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' AND `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID`"));
                        //drBind["OutKasar"] = balayer.GetSingleValue("SELECT if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`reauctionparticulars`.`OldPrizedValue`+`commissiondetails`.`Commission`),0.0) AS `Kasar`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'");
                        drBind["OutKasar"] = balayer.GetSingleValue("SELECT if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`reauctionparticulars`.`OldPrizedValue`+`commissiondetails`.`Commission`),0.0) AS `Kasar`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' AND `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID`");
                        drBind["OutTotal"] = prizemoney + kaser;
                        //drBind["UnpaidCommision"] = balayer.GetSingleValue("SELECT if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`)  join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'");
                        drBind["UnpaidCommision"] = balayer.GetSingleValue("SELECT if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`)  join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' AND `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID`");
                        //drBind["UnpaidPrizeMoney"] = balayer.GetSingleValue("SELECT`commissiondetails`.`ChitValue` AS `PrizeMoney2`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'");
                        drBind["UnpaidPrizeMoney"] = balayer.GetSingleValue("SELECT`commissiondetails`.`ChitValue` AS `PrizeMoney2`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' AND `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID`");
                        string TotaldueAmount = "";

                        TotaldueAmount = balayer.GetSingleValue(@"select sum(CurrentDueAmount) from auctiondetails where GroupID=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " and AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "';");

                        string nparr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " and v1.Head_Id=" + Convert.ToInt32(dtr[0].ItemArray[2]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (string.IsNullOrEmpty(nparr))
                        {
                            drBind["Arrears"] = "0.00";
                        }
                        else
                        {
                            drBind["Arrears"] = nparr;
                        }
                        string sdfgd = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " and v1.Head_Id=" + Convert.ToInt32(dtr[0].ItemArray[2]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

                        if (string.IsNullOrEmpty(sdfgd))
                        {
                            drBind["AmountActuallyremittedbytheParty"] = "0.00";

                        }
                        else
                        {
                            drBind["AmountActuallyremittedbytheParty"] = sdfgd;
                            data2 += Convert.ToDecimal(sdfgd);
                        }

                        //drBind["UnpaidPrizeMoneyPayable"] = "";
                        drBind["UnpaidPrizeMoneyPayable"] = "0.00";
                        drBind["Rebitdate"] = "";
                        dtBind.Rows.Add(drBind.ItemArray);
                        mmmm++;

                    }
                    else
                    {
                        drBind["SNo"] = mmmm + 1;
                        drBind["ChitNumber"] = dt.Rows[i]["Chit Number"];
                        drBind["Instmnt"] = dt.Rows[i]["Instmnt"];
                        drBind["Date"] = dt.Rows[i]["Date"];
                        drBind["NameoftheSubscriber"] = dt.Rows[i]["Name of the Subscriber"];
                        drBind["OutPrizedMoney"] = dt.Rows[i]["PrizedMoney1"];
                        drBind["OutKasar"] = dt.Rows[i]["Kasar"];
                        drBind["OutTotal"] = dt.Rows[i]["Total"];
                        drBind["UnpaidCommision"] = dt.Rows[i]["Commision"];
                        drBind["UnpaidPrizeMoney"] = dt.Rows[i]["PrizeMoney2"];


                        string sdfgd = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

                        if (string.IsNullOrEmpty(sdfgd))
                        {
                            drBind["AmountActuallyremittedbytheParty"] = "0.00"; ;
                        }
                        else
                        {
                            drBind["AmountActuallyremittedbytheParty"] = sdfgd;
                            data2 += Convert.ToDecimal(sdfgd);
                        }
                        string TotaldueAmount = "";

                        TotaldueAmount = balayer.GetSingleValue(@"select sum(CurrentDueAmount) from auctiondetails where GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "';");

                        string nparr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (string.IsNullOrEmpty(nparr))
                        {
                            drBind["Arrears"] = "0.00";
                        }
                        else
                        {
                            drBind["Arrears"] = nparr;
                        }

                        //drBind["Arrears"] = "";
                        //drBind["UnpaidPrizeMoneyPayable"] = "";
                        drBind["UnpaidPrizeMoneyPayable"] = "0.00";
                        drBind["Rebitdate"] = dt.Rows[i]["Date1"] + "" + dt.Rows[i]["Date2"];
                        // drBind["Rebitdate"] = "";

                        dtBind.Rows.Add(drBind.ItemArray);
                        mmmm++;
                        break;
                    }
                    // }
                }
                else
                {
                    drBind["SNo"] = mmmm + 1;
                    drBind["ChitNumber"] = dt.Rows[i]["Chit Number"];
                    drBind["Instmnt"] = dt.Rows[i]["Instmnt"];
                    drBind["Date"] = dt.Rows[i]["Date"];
                    drBind["NameoftheSubscriber"] = dt.Rows[i]["Name of the Subscriber"];
                    drBind["OutPrizedMoney"] = dt.Rows[i]["PrizedMoney1"];
                    drBind["OutKasar"] = dt.Rows[i]["Kasar"];
                    drBind["OutTotal"] = dt.Rows[i]["Total"];
                    drBind["UnpaidCommision"] = dt.Rows[i]["Commision"];
                    drBind["UnpaidPrizeMoney"] = dt.Rows[i]["PrizeMoney2"];


                    string sdfgd = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

                    if (string.IsNullOrEmpty(sdfgd))
                    {
                        drBind["AmountActuallyremittedbytheParty"] = "0.00"; ;
                    }
                    else
                    {
                        drBind["AmountActuallyremittedbytheParty"] = sdfgd;
                        data2 += Convert.ToDecimal(sdfgd);
                    }
                    string TotaldueAmount = "";

                    TotaldueAmount = balayer.GetSingleValue(@"select sum(CurrentDueAmount) from auctiondetails where GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "';");

                    //string nparr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                    //if (string.IsNullOrEmpty(nparr))
                    //{
                    //    drBind["Arrears"] = "0.00";
                    //}
                    //else
                    //{
                    //    drBind["Arrears"] = nparr;
                    //}
                    balancem = Convert.ToDecimal(balayer.GetSingleValue("SELECT `commissiondetails`.`ChitValue` AS `PrizeMoney2` FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` and `auctiondetails`.`BranchID`=" + branchid + " and membertogroupmaster.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'" + sHeads + ""));
                    var sss = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ");
                    if (sss != "")
                    {
                        sdfgd1 = Convert.ToDecimal(sss);
                    }
                    else { sdfgd1 = Convert.ToDecimal("0.00"); }
                    balancevalue = balancem - sdfgd1;
                    drBind["Arrears"] = balancevalue;

                    //drBind["Arrears"] = "";
                    drBind["UnpaidPrizeMoneyPayable"] = "0.00";
                    drBind["Rebitdate"] = dt.Rows[i]["Date1"] + "" + dt.Rows[i]["Date2"];
                    dtBind.Rows.Add(drBind.ItemArray);
                    mmmm++;


                }
            }
            decimal data1 = 0;
            DataTable unpaiddt = balayer.GetDataTable("select (case when (sum(case when t1.Voucher_Type='C' and t1.Head_Id=46 then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' and t1.Head_Id=46 then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' and t1.Head_Id=46 then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' and t1.Head_Id=46 then t1.Amount else 0.00 end ) else 0.00 end ) as `Amount` from voucher as t1  where `t1`.`BranchID` =" + branchid + " and t1.ChoosenDate <='" + balayer.indiandateToMysqlDate(todate) + "'");
            for (int i = 0; i < unpaiddt.Rows.Count; i++)
            {
                drBind["SNo"] = mmmm + 1;
                drBind["ChitNumber"] = "";
                drBind["Instmnt"] = "";
                drBind["Date"] = "";
                drBind["GroupId"] = "";
                drBind["NameoftheSubscriber"] = "";
                drBind["PrizedMemberID"] = "";
                drBind["OutPrizedMoney"] = "0.00";
                drBind["OutKasar"] = "0.00";
                drBind["OutTotal"] = "0.00";
                drBind["UnpaidCommision"] = "0.00";
                drBind["UnpaidPrizeMoney"] = "0.00";
                drBind["AmountActuallyremittedbytheParty"] = "0.00";
                drBind["Arrears"] = "0.00";
                //drBind["balance"] = "0.00";
                drBind["UnpaidPrizeMoneyPayable"] = unpaiddt.Rows[i]["Amount"];
                data1 = Convert.ToDecimal(unpaiddt.Rows[i]["Amount"]);
                dtBind.Rows.Add(drBind.ItemArray);

            }
            ss.Add(data1);
            ss.Add(data2);
            return ss;
        }
















        public DataTable BindOutstanding(string fromsdate, string todate, string branchid)
        {
            // gridOutstandingandUnpaid.SettingsText.Title = "PARTICULARS OF OUTSTANDING & UNPAID PRIZE MONEY PAYABLE AS ON " + todate;
            // gridOutstandingandUnpaid.Visible = true;
            decimal balancem;
            decimal sdfgd1;
            decimal balancevalue;
            DataTable rebit = new DataTable();
            var today = DateTime.ParseExact(todate, "dd/MM/yyyy", null);
            var month = new DateTime(today.Year, today.Month, 1);
            DataTable dtrdate = new DataTable();
            dtrdate.Columns.Add("RefNo", typeof(UInt32));
            dtrdate.Columns.Add("OldAuctionDate");
            dtrdate.Columns.Add("OldPrizedToken");
            dtrdate.Columns.Add("OldPrizedMember");
            dtrdate.Columns.Add("OldPrizedValue");
            dtrdate.Columns.Add("GroupID", typeof(UInt32));
            dtrdate.Columns.Add("BranchId");
            dtrdate.Columns.Add("id");
            DataRow dro = dtrdate.NewRow();
            //List<Daybookclass> VoucherData = dt.DataTableToList<Daybookclass>();

            //var dtrdate = "";
            DataTable dtHeads = balayer.GetDataTable("select cast(concat(PrizedMemberID,'',',')as char) from svcf.auctiondetails join trans_payment tp where tp.TokenNumber=auctiondetails.PrizedMemberID and tp.DrawNo=auctiondetails.DrawNO and tp.ChitGroupId=auctiondetails.GroupID and tp.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' and IsPrized='Y'  and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and auctiondetails.BranchId=" + branchid + "");

            string sHeads = "";



            if (dtHeads.Rows.Count <= 0)
            {
            }
            else
            {
                for (int i = 0; i < dtHeads.Rows.Count; i++)
                {
                    sHeads += balayer.ToobjectstrEvenNull(dtHeads.Rows[i][0]);
                }
                sHeads = sHeads.TrimEnd(',').Replace(",,", ",");
                sHeads = " and auctiondetails.prizedMemberID not  in (" + sHeads + ")";
            }


            var str = @"SELECT `auctiondetails`.`PrizedMemberID`,`auctiondetails`.`inccolumn` as incol,DATE_FORMAT(`auctiondetails`.`Rebiddate1`,'%d/%m/%Y') AS `Date1`,DATE_FORMAT(`auctiondetails`.`Rebiddate2`,'%d/%m/%Y') AS `Date2`,`membertogroupmaster`.`GrpMemberID` AS `Chit Number`,`membertogroupmaster`.`GroupID` AS `GroupId`,`auctiondetails`.`DrawNO` AS `Instmnt`,DATE_FORMAT(`auctiondetails`.`AuctionDate`,'%d/%m/%Y') AS `Date`,`membertogroupmaster`.`MemberName` as `Name of the Subscriber`,(`auctiondetails`.`PrizedAmount`) AS `PrizedMoney1`,if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`auctiondetails`.`PrizedAmount`+`commissiondetails`.`Commission`),0.0) AS `Kasar`,(`auctiondetails`.`PrizedAmount` +`auctiondetails`.`KasarAmount`) as `Total`, if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`,`commissiondetails`.`ChitValue` AS `PrizeMoney2`, '' AS Arrears FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` and `auctiondetails`.`BranchID`=" + branchid + " and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'" + sHeads + "";
            //var str = @"SELECT `auctiondetails`.`PrizedMemberID`,`auctiondetails`.`inccolumn` as incol,DATE_FORMAT(`auctiondetails`.`Rebiddate1`,'%d/%m/%Y') AS `Date1`,DATE_FORMAT(`auctiondetails`.`Rebiddate2`,'%d/%m/%Y') AS `Date2`,`membertogroupmaster`.`GrpMemberID` AS `Chit Number`,`membertogroupmaster`.`GroupID` AS `GroupId`,`auctiondetails`.`DrawNO` AS `Instmnt`,DATE_FORMAT(`auctiondetails`.`AuctionDate`,'%d/%m/%Y') AS `Date`,`membertogroupmaster`.`MemberName` as `Name of the Subscriber`,(`auctiondetails`.`PrizedAmount`) AS `PrizedMoney1`,if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`auctiondetails`.`PrizedAmount`+`commissiondetails`.`Commission`),0.0) AS `Kasar`,(`auctiondetails`.`PrizedAmount` +`auctiondetails`.`KasarAmount`) as `Total`, if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`,`commissiondetails`.`ChitValue` AS `PrizeMoney2`, '' AS Arrears FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'" + sHeads + "";

            DataTable dt = new DataTable();
            dt = balayer.GetDataTable(str);
            var fg = todate;
            var jj = dt.Columns["Date1"].ToString();

            var dt1 = dt.AsEnumerable().Where(r => r.Field<System.String>("Date1") != null).ToList();
            if (dt1.Count > 0)
            {
                var dtr1 = dt1.CopyToDataTable();
                //  var dtrebit = dt.AsEnumerable().Where(r => r.Field<System.String>("Date2") != null).CopyToDataTable();
                // dtr1.Merge(dtrebit);
                string str5 = dtr1.AsEnumerable().Select(r1 => r1["GroupID"].ToString()).Aggregate((a1, a2) => string.Concat(a1, "," + a2));
                var dt3 = balayer.GetDataTable("select * from svcf.reauctionparticulars where BranchId=" + branchid + " and GroupID in(" + str5 + ")");
                var startDate = Convert.ToDateTime(todate);

                foreach (DataRow k in dtr1.Rows)
                {

                    ////  if(k.ItemArray[2].ToString()!= "0000-00-00")
                    //if (!string.IsNullOrEmpty(dateString))
                    //{
                    //    DateTime date = DateTime.Parse(dateString);
                    //}
                    var rebitdate = k.ItemArray[2].ToString();

                    var rebitdate1 = k.ItemArray[3].ToString();
                    if (Convert.ToString(rebitdate1) == "")
                    {
                        if (Convert.ToDateTime(rebitdate) > startDate)
                        {
                            //DateTime date4 = Convert.ToDateTime(k.ItemArray[6]);
                            // string date = Convert.ToString(balayer.GetChangeDatFormat(date4, 2));
                            //    var jjjjjj = date.GetType();
                            //   var jj = dt3.Columns["GroupID"].DataType;
                            //var jj1 = dt3.Columns["Newprizedtoken"].DataType;
                            //var old = dt3.Columns["OldAuctionDate"].DataType;
                            //var inccolumn = dt3.Columns["RefNo"].GetType();
                            var RefNo = k.ItemArray[1].GetType();

                            var dtrdatelist = dt3.AsEnumerable().Where(r => r.Field<System.UInt32>("GroupID") == Convert.ToUInt32(k.ItemArray[5]) && r.Field<System.UInt32>("RefNo") == Convert.ToUInt32(k.ItemArray[1])).ToList();
                            foreach (var rr in dtrdatelist)
                            {
                                dro["RefNo"] = rr.ItemArray[0];
                                dro["OldAuctionDate"] = rr.ItemArray[1];
                                dro["OldPrizedToken"] = rr.ItemArray[2];
                                dro["OldPrizedMember"] = rr.ItemArray[3];
                                dro["OldPrizedValue"] = rr.ItemArray[4];
                                dro["GroupID"] = rr.ItemArray[5];
                                dro["BranchId"] = rr.ItemArray[6];
                                dro["id"] = rr.ItemArray[7];
                                dtrdate.Rows.Add(dro.ItemArray);
                            }



                        }
                    }
                    else
                    {
                        if (Convert.ToDateTime(rebitdate1) > startDate)
                        {
                            var jj1 = dt3.Columns["Newprizedtoken"].DataType;
                            var old = dt3.Columns["OldAuctionDate"].DataType;
                            var inccolumn = dt3.Columns["RefNo"].GetType();
                            var RefNo = k.ItemArray[1].GetType();
                            var dtrdatelist = dt3.AsEnumerable().Where(r => r.Field<System.UInt32>("GroupID") == Convert.ToUInt32(k.ItemArray[5]) && r.Field<System.UInt32>("RefNo") == Convert.ToUInt32(k.ItemArray[1])).ToList();
                            //  List<bookletout> dtrdate4 = dtrdate.DataTableToList<bookletout>();
                            foreach (var rr in dtrdatelist)
                            {
                                dro["RefNo"] = rr.ItemArray[0];
                                dro["OldAuctionDate"] = rr.ItemArray[1];
                                dro["OldPrizedToken"] = rr.ItemArray[2];
                                dro["OldPrizedMember"] = rr.ItemArray[3];
                                dro["OldPrizedValue"] = rr.ItemArray[4];
                                dro["GroupID"] = rr.ItemArray[5];
                                dro["BranchId"] = rr.ItemArray[6];
                                dro["id"] = rr.ItemArray[7];
                                dtrdate.Rows.Add(dro.ItemArray);
                            }

                        }
                    }
                }

            }
            DataTable dtBind = new DataTable();
            dtBind.Columns.Add("SNo");
            dtBind.Columns.Add("ChitNumber");
            dtBind.Columns.Add("GroupId");
            dtBind.Columns.Add("PrizedMemberID");
            dtBind.Columns.Add("Instmnt");
            dtBind.Columns.Add("Date");
            dtBind.Columns.Add("NameoftheSubscriber");
            dtBind.Columns.Add("OutPrizedMoney", typeof(decimal));
            dtBind.Columns.Add("OutKasar", typeof(decimal));
            dtBind.Columns.Add("OutTotal", typeof(decimal));
            dtBind.Columns.Add("UnpaidCommision", typeof(decimal));
            dtBind.Columns.Add("UnpaidPrizeMoney", typeof(decimal));
            dtBind.Columns.Add("AmountActuallyremittedbytheParty", typeof(decimal));
            dtBind.Columns.Add("Arrears");
            dtBind.Columns.Add("UnpaidPrizeMoneyPayable");
            dtBind.Columns.Add("Rebitdate");
            DataRow drBind = dtBind.NewRow();
            int mmmm = 0;
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i]["Date"].ToString() != "00/00/0000")
                {
                    var gg = dt.Rows[i]["GroupId"].GetType();
                    var incol = dt.Rows[i]["incol"].GetType();
                    var date = dt.Rows[i]["Date"].GetType();
                    var gg1 = dtrdate.Columns["GroupID"].GetType();
                    var inkk = dtrdate.Columns["RefNo"].GetType();
                    var dd = dtrdate.Columns["OldAuctionDate"].GetType();
                    var dtr = dtrdate.AsEnumerable().Where(r => r.Field<System.UInt32>("GroupID") == Convert.ToUInt32(dt.Rows[i]["GroupId"]) && r.Field<System.UInt32>("RefNo") == Convert.ToUInt32(dt.Rows[i]["incol"]) && r.Field<System.String>("OldAuctionDate") == Convert.ToString(dt.Rows[i]["Date"])).ToList();
                    if (dtr.Count > 0)
                    {
                        //foreach (DataRow nn in dtrdate.Rows)
                        //{
                        string groupid = dtr[0].ItemArray[5].ToString();
                        string refcol = dtr[0].ItemArray[0].ToString();
                        if (balayer.ToobjectstrEvenNull(dt.Rows[i]["GroupId"]) == groupid && balayer.ToobjectstrEvenNull(dt.Rows[i]["incol"]) == refcol)
                        {
                            drBind["SNo"] = mmmm + 1;
                            drBind["ChitNumber"] = balayer.GetSingleValue("select GrpMemberID from svcf.membertogroupmaster where BranchID=" + branchid + " and Head_Id=" + dtr[0].ItemArray[2] + " ");
                            drBind["Instmnt"] = balayer.GetSingleValue("select DrawNO from svcf.auctiondetails where BranchID=" + branchid + " and inccolumn=" + dtr[0].ItemArray[0] + " ");
                            drBind["Date"] = dtr[0].ItemArray[1];
                            drBind["NameoftheSubscriber"] = balayer.GetSingleValue("select MemberName from svcf.membertogroupmaster where BranchID=" + branchid + " and Head_Id=" + dtr[0].ItemArray[2] + " "); ;
                            decimal prizemoney = Convert.ToDecimal(dtr[0].ItemArray[4]);
                            drBind["OutPrizedMoney"] = dtr[0].ItemArray[4];
                            //decimal kaser = Convert.ToDecimal(balayer.GetSingleValue("SELECT if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`reauctionparticulars`.`OldPrizedValue`+`commissiondetails`.`Commission`),0.0) AS `Kasar`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) where `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'"));
                            decimal kaser = Convert.ToDecimal(balayer.GetSingleValue("SELECT if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`reauctionparticulars`.`OldPrizedValue`+`commissiondetails`.`Commission`),0.0) AS `Kasar`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue` and `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID`) join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'"));
                            //drBind["OutKasar"] = balayer.GetSingleValue("SELECT if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`reauctionparticulars`.`OldPrizedValue`+`commissiondetails`.`Commission`),0.0) AS `Kasar`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) where `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'");
                            drBind["OutKasar"] = balayer.GetSingleValue("SELECT if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`reauctionparticulars`.`OldPrizedValue`+`commissiondetails`.`Commission`),0.0) AS `Kasar`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue` and `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID`) join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'");
                            drBind["OutTotal"] = prizemoney + kaser;
                            //drBind["UnpaidCommision"] = balayer.GetSingleValue("SELECT if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) where `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'");
                            drBind["UnpaidCommision"] = balayer.GetSingleValue("SELECT if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue` and `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID`) join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'");
                            //drBind["UnpaidPrizeMoney"] = balayer.GetSingleValue("SELECT`commissiondetails`.`ChitValue` AS `PrizeMoney2`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) where `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'");
                            drBind["UnpaidPrizeMoney"] = balayer.GetSingleValue("SELECT`commissiondetails`.`ChitValue` AS `PrizeMoney2`  FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue` and `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID`) join reauctionparticulars on (reauctionparticulars.RefNo=`auctiondetails`.`inccolumn`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and reauctionparticulars.OldPrizedToken=" + dtr[0].ItemArray[2] + "  and reauctionparticulars.OldAuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'");
                            string TotaldueAmount = "";

                            TotaldueAmount = balayer.GetSingleValue(@"select sum(CurrentDueAmount) from auctiondetails where GroupID=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " and AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "';");
                            //commented on 01-12-2020
                            //string nparr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " and v1.Head_Id=" + Convert.ToInt32(dtr[0].ItemArray[2]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            //if (string.IsNullOrEmpty(nparr))
                            //{
                            //    drBind["Arrears"] = "0.00";
                            //}
                            //else
                            //{
                            //    drBind["Arrears"] = nparr;
                            //}
                            string sdfgd = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " and v1.Head_Id=" + Convert.ToInt32(dtr[0].ItemArray[2]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

                            if (string.IsNullOrEmpty(sdfgd))
                            {
                                drBind["AmountActuallyremittedbytheParty"] = "0.00"; ;
                            }
                            else
                            {
                                drBind["AmountActuallyremittedbytheParty"] = sdfgd;
                            }
                            //added by bala 01-12-2020
                            balancem = Convert.ToDecimal(balayer.GetSingleValue("SELECT `commissiondetails`.`ChitValue` AS `PrizeMoney2` FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` and `auctiondetails`.`BranchID`=" + branchid + " and membertogroupmaster.GroupID=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'" + sHeads + ""));
                            var ss = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + Convert.ToInt32(dtr[0].ItemArray[5]) + " and v1.Head_Id=" + Convert.ToInt32(dtr[0].ItemArray[2]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ");
                            if (ss != "")
                            {
                                sdfgd1 = Convert.ToDecimal(ss);
                            }
                            else
                            {
                                sdfgd1 = Convert.ToDecimal("0.00");
                            }
                            balancevalue = balancem - sdfgd1;
                            drBind["Arrears"] = balancevalue;
                            //
                            //drBind["UnpaidPrizeMoneyPayable"] = "";
                            drBind["UnpaidPrizeMoneyPayable"] = "0.00";
                            drBind["Rebitdate"] = "";
                            dtBind.Rows.Add(drBind.ItemArray);
                            mmmm++;

                        }
                        else
                        {
                            drBind["SNo"] = mmmm + 1;
                            drBind["ChitNumber"] = dt.Rows[i]["Chit Number"];
                            drBind["Instmnt"] = dt.Rows[i]["Instmnt"];
                            drBind["Date"] = dt.Rows[i]["Date"];
                            drBind["NameoftheSubscriber"] = dt.Rows[i]["Name of the Subscriber"];
                            drBind["OutPrizedMoney"] = dt.Rows[i]["PrizedMoney1"];
                            drBind["OutKasar"] = dt.Rows[i]["Kasar"];
                            if (Convert.ToString(dt.Rows[i]["Total"]) == "")
                            {
                                drBind["OutTotal"] = "0.00";
                            }
                            else
                            {
                                drBind["OutTotal"] = dt.Rows[i]["Total"];
                            }
                            drBind["UnpaidCommision"] = dt.Rows[i]["Commision"];
                            drBind["UnpaidPrizeMoney"] = dt.Rows[i]["PrizeMoney2"];


                            string sdfgd = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

                            if (string.IsNullOrEmpty(sdfgd))
                            {
                                drBind["AmountActuallyremittedbytheParty"] = "0.00"; ;
                            }
                            else
                            {
                                drBind["AmountActuallyremittedbytheParty"] = sdfgd;
                            }
                            string TotaldueAmount = "";

                            TotaldueAmount = balayer.GetSingleValue(@"select sum(CurrentDueAmount) from auctiondetails where GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "';");
                            //commented on 01-12-2020
                            //string nparr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                            //if (string.IsNullOrEmpty(nparr))
                            //{
                            //    drBind["Arrears"] = "0.00";
                            //}
                            //else
                            //{
                            //    drBind["Arrears"] = nparr;
                            //}
                            //added by bala 01-12-2020
                            balancem = Convert.ToDecimal(balayer.GetSingleValue("SELECT `commissiondetails`.`ChitValue` AS `PrizeMoney2` FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` and `auctiondetails`.`BranchID`=" + branchid + " and membertogroupmaster.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'" + sHeads + ""));
                            var ss = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ");
                            if (ss != "")
                            {
                                sdfgd1 = Convert.ToDecimal(ss);
                            }
                            else
                            {
                                sdfgd1 = Convert.ToDecimal("0.00");
                            }
                            balancevalue = balancem - sdfgd1;
                            drBind["Arrears"] = balancevalue;

                            //drBind["Arrears"] = "";
                            //drBind["UnpaidPrizeMoneyPayable"] = "";
                            drBind["UnpaidPrizeMoneyPayable"] = "0.00";
                            drBind["Rebitdate"] = dt.Rows[i]["Date1"] + "" + dt.Rows[i]["Date2"];
                            // drBind["Rebitdate"] = "";

                            dtBind.Rows.Add(drBind.ItemArray);
                            mmmm++;
                            break;
                        }
                        // }
                    }
                    else
                    {
                        drBind["SNo"] = mmmm + 1;
                        drBind["ChitNumber"] = dt.Rows[i]["Chit Number"];
                        drBind["Instmnt"] = dt.Rows[i]["Instmnt"];
                        drBind["Date"] = dt.Rows[i]["Date"];
                        drBind["NameoftheSubscriber"] = dt.Rows[i]["Name of the Subscriber"];
                        drBind["OutPrizedMoney"] = dt.Rows[i]["PrizedMoney1"];
                        drBind["OutKasar"] = dt.Rows[i]["Kasar"];
                        if (Convert.ToString(dt.Rows[i]["Total"]) == "")
                        {
                            drBind["OutTotal"] = "0.00";
                        }
                        else
                        {
                            drBind["OutTotal"] = dt.Rows[i]["Total"];
                        }
                        drBind["UnpaidCommision"] = dt.Rows[i]["Commision"];
                        drBind["UnpaidPrizeMoney"] = dt.Rows[i]["PrizeMoney2"];


                        string sdfgd = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

                        if (string.IsNullOrEmpty(sdfgd))
                        {
                            drBind["AmountActuallyremittedbytheParty"] = "0.00"; ;
                        }
                        else
                        {
                            drBind["AmountActuallyremittedbytheParty"] = sdfgd;
                        }
                        string TotaldueAmount = "";

                        TotaldueAmount = balayer.GetSingleValue(@"select sum(CurrentDueAmount) from auctiondetails where GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "';");

                        //string nparr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + balayer.ToobjectstrEvenNull(branchid) + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        //if (string.IsNullOrEmpty(nparr))
                        //{
                        //    drBind["Arrears"] = "0.00";
                        //}
                        //else
                        //{
                        //    drBind["Arrears"] = nparr;
                        //}
                        balancem = Convert.ToDecimal(balayer.GetSingleValue("SELECT `commissiondetails`.`ChitValue` AS `PrizeMoney2` FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `groupmaster`.`Commission_ID`=`commissiondetails`.`Commission_ID` and `auctiondetails`.`BranchID`=" + branchid + " and membertogroupmaster.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'" + sHeads + ""));
                        var ss = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ");
                        if (ss != "")
                        {
                            sdfgd1 = Convert.ToDecimal(ss);
                        }
                        else
                        {
                            sdfgd1 = Convert.ToDecimal("0.00");
                        }
                        balancevalue = balancem - sdfgd1;
                        drBind["Arrears"] = balancevalue;

                        //drBind["Arrears"] = "";
                        drBind["UnpaidPrizeMoneyPayable"] = "0.00";
                        drBind["Rebitdate"] = dt.Rows[i]["Date1"] + "" + dt.Rows[i]["Date2"];
                        dtBind.Rows.Add(drBind.ItemArray);
                        mmmm++;


                    }
                }
            }
            DataTable unpaiddt = balayer.GetDataTable("select (case when (sum(case when t1.Voucher_Type='C' and t1.Head_Id=46 then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' and t1.Head_Id=46 then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' and t1.Head_Id=46 then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' and t1.Head_Id=46 then t1.Amount else 0.00 end ) else 0.00 end ) as `Amount` from voucher as t1  where `t1`.`BranchID` =" + branchid + " and t1.ChoosenDate <='" + balayer.indiandateToMysqlDate(todate) + "'");
            for (int i = 0; i < unpaiddt.Rows.Count; i++)
            {
                if (Convert.ToString(unpaiddt.Rows[i]["Amount"]) != "0.00")
                {
                    drBind["SNo"] = mmmm + 1;
                    drBind["ChitNumber"] = "";
                    drBind["Instmnt"] = "";
                    drBind["Date"] = "";
                    drBind["GroupId"] = "";
                    drBind["NameoftheSubscriber"] = "";
                    drBind["PrizedMemberID"] = "";
                    drBind["OutPrizedMoney"] = "0.00";
                    drBind["OutKasar"] = "0.00";
                    drBind["OutTotal"] = "0.00";
                    drBind["UnpaidCommision"] = "0.00";
                    drBind["UnpaidPrizeMoney"] = "0.00";
                    drBind["AmountActuallyremittedbytheParty"] = "0.00";
                    drBind["Arrears"] = "0.00";
                    //drBind["balance"] = "0.00";
                    drBind["UnpaidPrizeMoneyPayable"] = unpaiddt.Rows[i]["Amount"];
                    dtBind.Rows.Add(drBind.ItemArray);
                }

            }

            return dtBind;
        }
        //public DataTable BindOutstanding(string fromsdate, string todate, string branchid)
        //{
        //    string str = "";
        //    var today = DateTime.Parse(todate);
        //    var month = new DateTime(today.Year, today.Month, 1);
        //    decimal balancem;
        //    decimal sdfgd1;
        //    decimal balancevalue;
        //    DataTable dtHeads = balayer.GetDataTable("select cast(concat(PrizedMemberID,'',',')as char) from svcf.auctiondetails join trans_payment tp where tp.TokenNumber=auctiondetails.PrizedMemberID and tp.DrawNo=auctiondetails.DrawNO and tp.ChitGroupId=auctiondetails.GroupID and tp.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' and IsPrized='Y'  and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and auctiondetails.BranchId=" + branchid + "");

        //    string sHeads = "";


        //    if (dtHeads.Rows.Count <= 0)
        //    {
        //    }
        //    else
        //    {
        //        for (int i = 0; i < dtHeads.Rows.Count; i++)
        //        {
        //            sHeads += balayer.ToobjectstrEvenNull(dtHeads.Rows[i][0]);
        //        }
        //        sHeads = sHeads.TrimEnd(',').Replace(",,", ",");
        //        sHeads = " and auctiondetails.prizedMemberID not  in (" + sHeads + ")";
        //    }


        //    str = @"SELECT `auctiondetails`.`PrizedMemberID`,`membertogroupmaster`.`GrpMemberID` AS `Chit Number`,`membertogroupmaster`.`GroupID` AS `GroupId`,`auctiondetails`.`DrawNO` AS `Instmnt`,DATE_FORMAT(`auctiondetails`.`AuctionDate`,'%d/%m/%Y') AS `Date`,`membertogroupmaster`.`MemberName` as `Name of the Subscriber`,(`auctiondetails`.`PrizedAmount`) AS `PrizedMoney1`,if(`auctiondetails`.`DrawNO`> 1 ,`groupmaster`.`ChitValue`-(`auctiondetails`.`PrizedAmount`+`commissiondetails`.`Commission`),0.0) AS `Kasar`,(`auctiondetails`.`PrizedAmount` +`auctiondetails`.`KasarAmount`) as `Total`, if (`auctiondetails`.`DrawNO`> 1 ,`commissiondetails`.`Commission`,0.0) AS `Commision`,`commissiondetails`.`ChitValue` AS `PrizeMoney2`, '' AS Arrears FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'" + sHeads + "";

        //    DataTable dt = new DataTable();
        //    dt = balayer.GetDataTable(str);

        //    DataTable unpaiddt = balayer.GetDataTable("select (case when (sum(case when t1.Voucher_Type='C' and t1.Head_Id=46 then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' and t1.Head_Id=46 then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' and t1.Head_Id=46 then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' and t1.Head_Id=46 then t1.Amount else 0.00 end ) else 0.00 end ) as `Amount` from voucher as t1  where `t1`.`BranchID` =" + branchid + " and t1.ChoosenDate <='" + balayer.indiandateToMysqlDate(todate) + "'");



        //    Outstunpaid.Columns.Add("SNo");
        //    Outstunpaid.Columns.Add("ChitNumber");
        //    Outstunpaid.Columns.Add("GroupId");
        //    Outstunpaid.Columns.Add("PrizedMemberID");
        //    Outstunpaid.Columns.Add("Instmnt");
        //    Outstunpaid.Columns.Add("Date");
        //    Outstunpaid.Columns.Add("NameoftheSubscriber");
        //    Outstunpaid.Columns.Add("OutPrizedMoney", typeof(decimal));
        //    Outstunpaid.Columns.Add("OutKasar", typeof(decimal));
        //    Outstunpaid.Columns.Add("OutTotal", typeof(decimal));
        //    Outstunpaid.Columns.Add("UnpaidCommision", typeof(decimal));
        //    Outstunpaid.Columns.Add("UnpaidPrizeMoney", typeof(decimal));
        //    Outstunpaid.Columns.Add("AmountActuallyremittedbytheParty", typeof(decimal));
        //    Outstunpaid.Columns.Add("balance", typeof(decimal));
        //   // Outstunpaid.Columns.Add("Arrears",typeof(decimal));
        //    Outstunpaid.Columns.Add("UnpaidPrizeMoneyPayable",typeof(decimal));
        //    Outstunpaid.Columns.Add("Remarks");

        //    DataRow drBind = Outstunpaid.NewRow();
        //   // DataRow drBind = Outstunpaid.NewRow();
        //    int mmmm = 0;
        //    for (int i = 0; i < dt.Rows.Count; i++)
        //    {
        //        if (balayer.ToobjectstrEvenNull(dt.Rows[i]["Chit Number"]) == "CX-31-4" || balayer.ToobjectstrEvenNull(dt.Rows[i]["Chit Number"]) == "CX-31/25")
        //        { }
        //        else
        //        {
        //            drBind["SNo"] = mmmm + 1;
        //            drBind["ChitNumber"] = dt.Rows[i]["Chit Number"];
        //            drBind["Instmnt"] = dt.Rows[i]["Instmnt"];
        //            drBind["Date"] = dt.Rows[i]["Date"];
        //            drBind["NameoftheSubscriber"] = dt.Rows[i]["Name of the Subscriber"];
        //            drBind["OutPrizedMoney"] = dt.Rows[i]["PrizedMoney1"];
        //            drBind["OutKasar"] = dt.Rows[i]["Kasar"];
        //            drBind["OutTotal"] = dt.Rows[i]["Total"];
        //            drBind["UnpaidCommision"] = dt.Rows[i]["Commision"];
        //            drBind["UnpaidPrizeMoney"] = dt.Rows[i]["PrizeMoney2"];

        //            string sdfgd = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");

        //            if (string.IsNullOrEmpty(sdfgd))
        //            {
        //                drBind["AmountActuallyremittedbytheParty"] = "0.00"; ;
        //            }
        //            else
        //            {
        //                drBind["AmountActuallyremittedbytheParty"] = sdfgd;
        //            //    drBind["balance"] =


        //            }
        //            balancem = Convert.ToDecimal(balayer.GetSingleValue("SELECT `commissiondetails`.`ChitValue` AS `PrizeMoney2` FROM svcf.auctiondetails JOIN membertogroupmaster ON (`auctiondetails`.`PrizedMemberID`=`membertogroupmaster`.`Head_Id`) LEFT JOIN `svcf`.`groupmaster` ON (`auctiondetails`.`GroupID`=`groupmaster`.`Head_Id`) JOIN `svcf`.`commissiondetails` ON (`groupmaster`.`ChitValue`=`commissiondetails`.`ChitValue`) WHERE `auctiondetails`.`BranchID`=" + branchid + " and membertogroupmaster.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and auctiondetails.AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "'" + sHeads + ""));
        //            sdfgd1 = Convert.ToDecimal(balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC "));
        //            balancevalue = balancem - sdfgd1;
        //            drBind["balance"] = balancevalue;
        //            string TotaldueAmount = "";

        //            TotaldueAmount = balayer.GetSingleValue(@"select sum(CurrentDueAmount) from auctiondetails where GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "';");

        ////string nparr = balayer.GetSingleValue(@"select (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (" + TotaldueAmount + "-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join groupmaster as vgwd1 on vgwd1.`Head_Id`=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + Convert.ToInt32(dt.Rows[i]["GroupId"]) + " and v1.Head_Id=" + Convert.ToInt32(dt.Rows[i]["PrizedMemberID"]) + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
        ////if (string.IsNullOrEmpty(nparr))
        ////{
        ////    drBind["Arrears"] = "0.00";
        ////}
        ////else
        ////{
        ////    drBind["Arrears"] = nparr;
        ////}

        //            //drBind["Arrears"] = "";
        //            drBind["UnpaidPrizeMoneyPayable"] = "0.00";
        //            drBind["Remarks"] = "";
        //            Outstunpaid.Rows.Add(drBind.ItemArray);
        //           mmmm++;
        //        }



        //    }
        //    for (int i = 0; i < unpaiddt.Rows.Count; i++)
        //    {
        //        drBind["SNo"] = mmmm + 1;
        //        drBind["ChitNumber"] = "";
        //        drBind["Instmnt"] = "";
        //        drBind["Date"] = "";
        //        drBind["GroupId"] = "";
        //        drBind["NameoftheSubscriber"] = "";
        //        drBind["OutPrizedMoney"] = "0.00";
        //        drBind["OutKasar"] = "0.00";
        //        drBind["OutTotal"] = "0.00";
        //        drBind["UnpaidCommision"] = "0.00";
        //        drBind["UnpaidPrizeMoney"] = "0.00";
        //        drBind["AmountActuallyremittedbytheParty"] = "0.00";
        //    //    drBind["Arrears"] = "0.00";
        //        drBind["balance"] = "0.00";
        //        drBind["UnpaidPrizeMoneyPayable"] = unpaiddt.Rows[i]["Amount"];
        //        Outstunpaid.Rows.Add(drBind.ItemArray);
        //    }
        //   // if (Outstunpaid.Rows.Count > 0)
        //   // {
        //        //PrizeMoney = Convert.ToDecimal(Outstunpaid.Compute("sum(OutPrizedMoney)", ""));
        //        //Kasar = Convert.ToDecimal(Outstunpaid.Compute("sum(OutKasar)", ""));
        //        //OSTotal = Convert.ToDecimal(Outstunpaid.Compute("sum(OutTotal)", ""));
        //        //Commission = Convert.ToDecimal(Outstunpaid.Compute("sum(UnpaidCommision)", ""));
        //        //UPTotal = Convert.ToDecimal(Outstunpaid.Compute("sum(UnpaidPrizeMoney)", ""));
        //        //amtremit = Convert.ToDecimal(Outstunpaid.Compute("sum(AmountActuallyremittedbytheParty)", ""));
        //        //decimal balance= Convert.ToDecimal(Outstunpaid.Compute("sum(balance)", ""));
        //        //DataRow dr = Outstunpaid.NewRow();


        //        //dr["NameoftheSubscriber"] = "Total";
        //        //dr["OutPrizedMoney"] = PrizeMoney;
        //        //dr["OutKasar"] = Kasar;
        //        //dr["OutTotal"] = OSTotal;
        //        //dr["UnpaidCommision"] = Commission;
        //        //dr["UnpaidPrizeMoney"] = UPTotal;
        //        //dr["AmountActuallyremittedbytheParty"] = amtremit;
        //        //dr["balance"] = balance;
        //        //Outstunpaid.Rows.Add(dr.ItemArray);
        //   //}
        //    return Outstunpaid;
        //}

        //public void Outstanding(string fromsdate, string todate, string branchid,string imagepath)
        //{
        //    Workbook workbook = new Workbook();
        //    workbook.CreateEmptySheets(1);
        //    Worksheet sheet = workbook.Worksheets[0];

        //    ExcelFont fontBold = workbook.CreateFont();
        //    fontBold.IsBold = true;

        //    BindOutstanding(fromsdate, todate, branchid);

        //    sheet.Name = "Out.Prize & unprize St-5(E)";

        //    string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + branchid + ";");

        //    sheet.Pictures.Add(1, 1, imagepath);

        //    CellRange range = sheet.Range["A4:M5"];
        //    range.Borders.LineStyle = LineStyleType.Double;
        //    range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
        //    range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


        //    sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
        //    RichText richText01 = sheet.Range["C1"].RichText;
        //    richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

        //    sheet.Range["C2"].Value = "Branch: " + branchname + "";
        //    RichText richText02 = sheet.Range["C2"].RichText;
        //    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

        //    sheet.Range["A3"].Value = "Particulars of Outstanding Prizemoney and Unpaid Prizemoney as at "+ balayer.Getstringdaymonth(todate) +"";
        //    RichText richText03 = sheet.Range["A3"].RichText;
        //    richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
        //    sheet.Range["A3:L3"].Merge();
        //    sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

        //    sheet.Range["A4:A5"].Merge();
        //    sheet.Range["A4"].Value = "Sl.No.";
        //    sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["B4:E4"].Merge();
        //    sheet.Range["B4"].Value = "DRAWAL";
        //    sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["B5"].Value = "Chit Number";
        //    sheet.Range["B5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["B5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["C5"].Value = "Instal. No.";
        //    sheet.Range["C5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["C5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["D5"].Value = "Date";
        //    sheet.Range["D5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["D5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["E5"].Value = "Name of the Subscriber";
        //    sheet.Range["E5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["E5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["F4:I4"].Merge();
        //    sheet.Range["F4"].Value = "OUTSTANDING PRIZE MONEY";
        //    sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["F5"].Value = "Prize Money";
        //    sheet.Range["F5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["F5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["G5"].Value = "Kasar";
        //    sheet.Range["G5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["G5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["H5"].Value = "Total";
        //    sheet.Range["H5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["H5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["I5"].Value = "Commission";
        //    sheet.Range["I5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["I5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["J4"].Value = "Unpaid prize Money";
        //    sheet.Range["J4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["J4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["J5"].Value = "Total";
        //    sheet.Range["J5"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["J5"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["K4:K5"].Merge();
        //    sheet.Range["K4"].Value = "Amount actually remitted by the subscriber";
        //    sheet.Range["K4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["K4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["L4:L5"].Merge();
        //    sheet.Range["L4"].Value = "Balance payable by  the subscriber";
        //    sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["M4:M5"].Merge();
        //    sheet.Range["M4"].Value = "Unpaid Prize Money (Ledger Credit)";
        //    sheet.Range["M4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["M4"].Style.VerticalAlignment = VerticalAlignType.Center;


        //    decimal Balpay = 0;

        //    int rowcnt = 5;
        //    foreach (DataRow dr in Outstunpaid.Rows)
        //    {
        //        rowcnt = rowcnt + 1;

        //        if (dr.ItemArray[6].ToString() != "Total")
        //        {
        //            sheet.Range["A" + rowcnt].Value = dr.ItemArray[0].ToString();
        //            sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
        //            sheet.Range["C" + rowcnt].Value = dr.ItemArray[4].ToString();
        //            sheet.Range["D" + rowcnt].Value = dr.ItemArray[5].ToString();
        //            sheet.Range["E" + rowcnt].Value = dr.ItemArray[6].ToString();
        //            sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[7]);
        //            sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[8]);
        //            sheet.Range["G" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[9]);
        //            sheet.Range["H" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[10]);
        //            sheet.Range["I" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[11]);
        //            sheet.Range["J" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[12]);
        //            sheet.Range["K" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(dr.ItemArray[11]) - Convert.ToDecimal(dr.ItemArray[12]));
        //            sheet.Range["L" + rowcnt].NumberFormat = "0.00";

        //            Balpay = Balpay + (Convert.ToDecimal(dr.ItemArray[11]) - Convert.ToDecimal(dr.ItemArray[12]));
        //        }
        //        else
        //        {
        //            rowcnt = rowcnt + 2;
        //            sheet.Range["E" + rowcnt].Value = dr.ItemArray[6].ToString();
        //            RichText richText04 = sheet.Range["E" + rowcnt].RichText;
        //            richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
        //            sheet.Range["E" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

        //            sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(PrizeMoney);
        //            sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(Kasar);
        //            sheet.Range["G" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(OSTotal);
        //            sheet.Range["H" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["I" + rowcnt].NumberValue = Convert.ToDouble(Commission);
        //            sheet.Range["I" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["J" + rowcnt].NumberValue = Convert.ToDouble(UPTotal);
        //            sheet.Range["J" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["K" + rowcnt].NumberValue = Convert.ToDouble(amtremit);
        //            sheet.Range["K" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["L" + rowcnt].NumberValue = Convert.ToDouble(Balpay);
        //            sheet.Range["L" + rowcnt].NumberFormat = "0.00";

        //        }
        //    }


        //    rowcnt = rowcnt + 2;

        //    CellRange range1 = sheet.Range["A6:" + "M" + rowcnt];
        //    range1.BorderAround(LineStyleType.Medium, Color.Black);


        //    sheet.AllocatedRange.AutoFitColumns();
        //    sheet.AllocatedRange.AutoFitRows();


        //    sheet.SetRowHeight(4, 29);
        //    sheet.SetRowHeight(5, 24);
        //    sheet.SetRowHeight(1, 24);
        //    sheet.SetRowHeight(2, 24);

        //    string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

        //    workbook.SaveToFile(outputlocation +"OutPrizeunprizeSt-5" + "_" + timestamp + ".xls");
        //    System.Diagnostics.Process.Start(outputlocation + "OutPrizeunprizeSt-5" + "_" + timestamp + ".xls");

        //}


        #endregion


        #region LoansOutAccruedint

        public DataTable BindLoansout(string fromsdate, string todate, string branchid)
        {
            decimal decCredit = 0;
            decimal decDebit = 0;

            string str = @"select t1.ChoosenDate,t3.Node as Name,t3.NodeID,t3.ParentID , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 8 and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`";
            // string str = @"select t1.ChoosenDate,t3.Node as Name,t3.NodeID,t3.ParentID ,sum(case when(t1.Voucher_Type = 'C' and t1.trans_Type <> 2 and t1.Other_Trans_Type <> 5 and t1.RootID = 5) then t1.Amount else 0.00 end) - sum(case when(t1.Voucher_Type = 'D' and t1.trans_Type <> 2 and t1.Other_Trans_Type <> 5 and t1.RootID = 5) then t1.Amount else 0.00 end) as `Credit`,(case when(sum((case when t1.Voucher_Type = 'D' then t1.Amount else 0.00 end)) > sum((case when t1.Voucher_Type = 'C' then t1.Amount else 0.00 end))) then sum((case when t1.Voucher_Type = 'D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type = 'C' then t1.Amount else 0.00 end)) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID = t3.NodeID left join trans_payment as tp1 on t1.Head_Id = tp1.TokenNumber where `t1`.`BranchID` = " + branchid + " and `t1`.`RootID` in(8,5) and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`";
            DataTable dt1 = balayer.GetDataTable(str);
            //DataTable dt = new DataTable();
            Loansout.Columns.Add("SNo");
            Loansout.Columns.Add("Type");
            Loansout.Columns.Add("Name");
            Loansout.Columns.Add("Credit", typeof(decimal));
            Loansout.Columns.Add("Debit", typeof(decimal));
            Loansout.Columns.Add("Date");
            Loansout.Columns.Add("RateofInt");
            Loansout.Columns.Add("Period");
            Loansout.Columns.Add("Interest", typeof(decimal));
            Loansout.Columns.Add("chitno");
            Loansout.Columns.Add("amount");
            Loansout.Columns.Add("Remarks");
            DataRow dr = Loansout.NewRow();
            int icount = 0;
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["Debit"]) > 0)
                {
                    if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["ParentID"]) == "53")
                    {
                        dr["SNo"] = icount + 1;
                        dr["Type"] = "Chit Loan";
                        dr["Name"] = balayer.GetSingleValue("SELECT MemberName FROM svcf.chitheads where HeadId=" + dt1.Rows[i]["NodeID"]);
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "24%";
                        dr["Period"] = "";
                        dr["Interest"] = 0;
                        dr["chitno"] = balayer.GetSingleValue("SELECT ChitName FROM svcf.chitheads where HeadId=" + dt1.Rows[i]["NodeID"]);
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loansout.Rows.Add(dr.ItemArray);
                    }

                    else if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["ParentID"]) == "55")
                    {
                        dr["SNo"] = icount + 1;
                        dr["Type"] = "Staff Loan";
                        dr["Name"] = dt1.Rows[i]["Name"];
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "12%";
                        dr["Period"] = "";
                        dr["Interest"] = 0;
                        dr["chitno"] = "";
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loansout.Rows.Add(dr.ItemArray);
                    }
                    else if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["NodeID"]) == "2076")
                    {
                        dr["SNo"] = icount + 1;
                        dr["Type"] = "Accrued Interest on Loan";
                        dr["Name"] = dt1.Rows[i]["Name"];
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "";
                        dr["Period"] = "";
                        dr["Interest"] = dt1.Rows[i]["Debit"];
                        dr["chitno"] = "";
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loansout.Rows.Add(dr.ItemArray);
                    }
                    else
                    {
                        dr["SNo"] = icount + 1;
                        dr["Type"] = "";
                        dr["Name"] = dt1.Rows[i]["Name"];
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "24%";
                        dr["Period"] = "";
                        dr["Interest"] = 0;
                        dr["chitno"] = "";
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loansout.Rows.Add(dr.ItemArray);
                    }
                    icount++;
                }
            }
            if (Loansout.Rows.Count > 0)
            {
                decCredit = Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                decDebit = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                dr["SNo"] = "";
                dr["Type"] = "";
                dr["Name"] = "TOTAL";
                dr["Credit"] = decCredit;
                dr["Debit"] = decDebit;
                dr["Date"] = "";
                dr["RateofInt"] = "";
                dr["Period"] = "";
                dr["Interest"] = 0;
                dr["chitno"] = "";
                dr["amount"] = "";
                dr["Remarks"] = "";
                Loansout.Rows.Add(dr.ItemArray);

                dr["SNo"] = "";
                if (decCredit == decDebit)
                {
                    dr["Name"] = "Balance";
                    dr["Credit"] = "0.00";
                    dr["Debit"] = "0.00";
                }
                else if (decCredit > decDebit)
                {
                    dr["Name"] = "Balance CR";
                    dr["Credit"] = decCredit - decDebit;
                    dr["Debit"] = "0.00";
                }
                else if (decCredit < decDebit)
                {
                    dr["Name"] = "Balance DR";
                    dr["Credit"] = "0.00";
                    dr["Debit"] = decDebit - decCredit;
                }
                dr["Date"] = "";
                dr["RateofInt"] = "";
                dr["Period"] = "";
                dr["Interest"] = 0;
                dr["chitno"] = "";
                dr["amount"] = "";
                dr["Remarks"] = "";
                Loansout.Rows.Add(dr.ItemArray);
            }
            return Loansout;
        }

        public DataTable BindLoansout1(string fromsdate, string todate, string branchid)
        {
            decimal decCredit = 0;
            decimal decDebit = 0;

            string str = @"select t1.ChoosenDate,t3.Node as Name,t3.NodeID,t3.ParentID , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 8 and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`";
            // string str = @"select t1.ChoosenDate,t3.Node as Name,t3.NodeID,t3.ParentID ,sum(case when(t1.Voucher_Type = 'C' and t1.trans_Type <> 2 and t1.Other_Trans_Type <> 5 and t1.RootID = 5) then t1.Amount else 0.00 end) - sum(case when(t1.Voucher_Type = 'D' and t1.trans_Type <> 2 and t1.Other_Trans_Type <> 5 and t1.RootID = 5) then t1.Amount else 0.00 end) as `Credit`,(case when(sum((case when t1.Voucher_Type = 'D' then t1.Amount else 0.00 end)) > sum((case when t1.Voucher_Type = 'C' then t1.Amount else 0.00 end))) then sum((case when t1.Voucher_Type = 'D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type = 'C' then t1.Amount else 0.00 end)) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID = t3.NodeID left join trans_payment as tp1 on t1.Head_Id = tp1.TokenNumber where `t1`.`BranchID` = " + branchid + " and `t1`.`RootID` in(8,5) and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`";
            DataTable dt1 = balayer.GetDataTable(str);
            //DataTable dt = new DataTable();
            Loansout.Columns.Add("SNo");
            Loansout.Columns.Add("Type");
            Loansout.Columns.Add("Name");
            Loansout.Columns.Add("Credit", typeof(decimal));
            Loansout.Columns.Add("Debit", typeof(decimal));
            Loansout.Columns.Add("Date");
            Loansout.Columns.Add("RateofInt");
            Loansout.Columns.Add("Period");
            Loansout.Columns.Add("Interest", typeof(decimal));
            Loansout.Columns.Add("chitno");
            Loansout.Columns.Add("amount");
            Loansout.Columns.Add("Remarks");
            DataRow dr = Loansout.NewRow();
            int icount = 0;
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["Debit"]) > 0)
                {
                    if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["ParentID"]) == "53")
                    {
                        dr["SNo"] = icount + 1;
                        dr["Type"] = "Chit Loan";
                        dr["Name"] = dt1.Rows[i]["Name"];
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "24%";
                        dr["Period"] = "";
                        dr["Interest"] = 0;
                        dr["chitno"] = balayer.GetSingleValue("SELECT ChitName FROM svcf.chitheads where HeadId=" + dt1.Rows[i]["NodeID"]);
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loansout.Rows.Add(dr.ItemArray);
                    }

                    else if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["ParentID"]) == "55")
                    {
                        dr["SNo"] = icount + 1;
                        dr["Type"] = "Staff Loan";
                        dr["Name"] = dt1.Rows[i]["Name"];
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "12%";
                        dr["Period"] = "";
                        dr["Interest"] = 0;
                        dr["chitno"] = "";
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loansout.Rows.Add(dr.ItemArray);
                    }
                    else if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["NodeID"]) == "2076")
                    {
                        dr["SNo"] = icount + 1;
                        dr["Type"] = "Accrued Interest on Loan";
                        dr["Name"] = dt1.Rows[i]["Name"];
                        dr["Credit"] = 0.00M;
                        dr["Debit"] = 0.00M;
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "";
                        dr["Period"] = "";
                        dr["Interest"] = dt1.Rows[i]["Debit"];
                        dr["chitno"] = "";
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loansout.Rows.Add(dr.ItemArray);
                    }
                    else
                    {
                        dr["SNo"] = icount + 1;
                        dr["Type"] = "";
                        dr["Name"] = dt1.Rows[i]["Name"];
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "24%";
                        dr["Period"] = "";
                        dr["Interest"] = 0;
                        dr["chitno"] = "";
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loansout.Rows.Add(dr.ItemArray);
                    }
                    icount++;
                }
            }
            if (Loansout.Rows.Count > 0)
            {
                decCredit = Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                decDebit = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                dr["SNo"] = "";
                dr["Type"] = "";
                dr["Name"] = "TOTAL";
                dr["Credit"] = decCredit;
                dr["Debit"] = decDebit;
                dr["Date"] = "";
                dr["RateofInt"] = "";
                dr["Period"] = "";
                dr["Interest"] = 0;
                dr["chitno"] = "";
                dr["amount"] = "";
                dr["Remarks"] = "";
                Loansout.Rows.Add(dr.ItemArray);

                dr["SNo"] = "";
                if (decCredit == decDebit)
                {
                    dr["Name"] = "Balance";
                    dr["Credit"] = "0.00";
                    dr["Debit"] = "0.00";
                }
                else if (decCredit > decDebit)
                {
                    dr["Name"] = "Balance CR";
                    dr["Credit"] = decCredit - decDebit;
                    dr["Debit"] = "0.00";
                }
                else if (decCredit < decDebit)
                {
                    dr["Name"] = "Balance DR";
                    dr["Credit"] = "0.00";
                    dr["Debit"] = decDebit - decCredit;
                }
                dr["Date"] = "";
                dr["RateofInt"] = "";
                dr["Period"] = "";
                dr["Interest"] = 0;
                dr["chitno"] = "";
                dr["amount"] = "";
                dr["Remarks"] = "";
                Loansout.Rows.Add(dr.ItemArray);
            }
            dtbind.Columns.Add("ChitNo1");
            dtbind.Columns.Add("Credit", typeof(decimal));
            DataTable floan = balayer.GetDataTable("select t1.ChoosenDate,t3.Node as Name,t3.NodeID,t3.ParentID ,sum(case when(t1.Voucher_Type = 'C' and t1.trans_Type <> 2 and t1.Other_Trans_Type <> 5 ) then t1.Amount else 0.00 end) - sum(case when(t1.Voucher_Type = 'D' and t1.trans_Type <> 2 and t1.Other_Trans_Type <> 5 ) then t1.Amount else 0.00 end) as `Credit` from voucher as t1  left Join headstree as t3 on t1.Head_ID = t3.NodeID left join trans_payment as tp1 on t1.Head_Id = tp1.TokenNumber where `t1`.`BranchID` = " + branchid + " and `t1`.`RootID` in(5) and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`");
            DataRow de = dtbind.NewRow();
            for (int i = 0; i < floan.Rows.Count; i++)
            {
                de["ChitNo1"] = floan.Rows[i]["Name"];
                de["Credit"] = floan.Rows[i]["Credit"];
                dtbind.Rows.Add(de.ItemArray);
            }
            var query = from tbl1 in dtbind.AsEnumerable()
                        join tbl2 in Loansout.AsEnumerable() on tbl1["ChitNo1"] equals tbl2["chitno"]
                        select new { DebitHeadId = tbl1["ChitNo1"], Amount = tbl1["Credit"] };
            foreach (DataRow Loansout in dtbind.Rows)
            {
                //string predec = Convert.ToString(dr.ItemArray[3]);
                var predec = Convert.ToString(Loansout.ItemArray[9]);

                foreach (var item in query)
                {
                    //  List<string> CommList = new List<string>();
                    //    CommList = Convert.ToString(item.DebitHeadId);
                    var pre = Convert.ToString(item.DebitHeadId);
                    //     string narname = Convert.ToString(item.name);
                    string amt = Convert.ToString(item.Amount);
                    if (predec == pre)
                    {


                        Loansout["PreAmount"] = item.Amount;
                        //          dr["ChoosenDate"] = item.datech;

                    }

                }

            }
            return Loansout;
        }
        public DataTable loan(string fromsdate, string todate, string branchid)
        {

            dtbind.Columns.Add("ChitNo1");
            dtbind.Columns.Add("Credit", typeof(decimal));
            DataTable floan = balayer.GetDataTable("select t1.ChoosenDate,t3.Node as Name,t3.NodeID,t3.ParentID ,sum(case when(t1.Voucher_Type = 'C' and t1.trans_Type <> 2 and t1.Other_Trans_Type <> 5 ) then t1.Amount else 0.00 end) - sum(case when(t1.Voucher_Type = 'D' and t1.trans_Type <> 2 and t1.Other_Trans_Type <> 5 ) then t1.Amount else 0.00 end) as `Credit` from voucher as t1  left Join headstree as t3 on t1.Head_ID = t3.NodeID left join trans_payment as tp1 on t1.Head_Id = tp1.TokenNumber where `t1`.`BranchID` = " + branchid + " and `t1`.`RootID` in(5) and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`");
            DataRow de = dtbind.NewRow();
            for (int i = 0; i < floan.Rows.Count; i++)
            {
                de["ChitNo1"] = floan.Rows[i]["Name"];
                de["Credit"] = floan.Rows[i]["Credit"];
                dtbind.Rows.Add(de.ItemArray);
            }
            return dtbind;
        }

        //public void LoansOutAccruedint(string fromsdate, string todate, string branchid,string imagepath)
        //{
        //    Workbook workbook = new Workbook();
        //    workbook.CreateEmptySheets(1);
        //    Worksheet sheet = workbook.Worksheets[0];

        //    ExcelFont fontBold = workbook.CreateFont();
        //    fontBold.IsBold = true;


        //    sheet.Name = "Loans Out & Accrued int. St-08";

        //    sheet.Pictures.Add(1, 1, imagepath);


        //    BindLoansout(fromsdate, todate, branchid);

        //    string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + branchid + ";");

        //    CellRange range = sheet.Range["A4:P4"];
        //    range.Borders.LineStyle = LineStyleType.Double;
        //    range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
        //    range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


        //    sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
        //    RichText richText01 = sheet.Range["C1"].RichText;
        //    richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

        //    sheet.Range["C2"].Value = "Branch: " + branchname + "";
        //    RichText richText02 = sheet.Range["C2"].RichText;
        //    richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

        //    sheet.Range["A3"].Value = "Particulars of Loans outstanding and Accrued Interest on Loans as at " + balayer.Getstringdaymonth(todate) + "";
        //    RichText richText03 = sheet.Range["A3"].RichText;
        //    richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
        //    sheet.Range["A3:L3"].Merge();

        //    sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;


        //    sheet.Range["A4"].Value = "Sl.No.";
        //    sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["B4"].Value = "Chit Number";
        //    sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;


        //    sheet.Range["C4"].Value = "Date of Loan";
        //    sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["D4"].Value = "Bank and Place";
        //    sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["E4"].Value = "Loan Amount";
        //    sheet.Range["E4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["E4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["F4"].Value = "Rate of Interest";
        //    sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["G4"].Value = "Period of Accrued Interest in Days";
        //    sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["H4"].Value = "Accrued Interest";
        //    sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["I4"].Value = "Amount at Credit in Chit A/c for Chit Loan";
        //    sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;


        //    sheet.Range["J4"].Value = "Sl.No.";
        //    sheet.Range["J4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["J4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["K4"].Value = "Date of Loan";
        //    sheet.Range["K4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["K4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["L4"].Value = "Name of the Staff";
        //    sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["M4"].Value = "Loan Amount";
        //    sheet.Range["M4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["M4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["N4"].Value = "Rate of Interest";
        //    sheet.Range["N4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["N4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["O4"].Value = "Period of Accrued Interest in Days";
        //    sheet.Range["O4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["O4"].Style.VerticalAlignment = VerticalAlignType.Center;

        //    sheet.Range["P4"].Value = "Accrued Interest";
        //    sheet.Range["P4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
        //    sheet.Range["P4"].Style.VerticalAlignment = VerticalAlignType.Center;


        //    sheet.Range["B5"].Value = "CHIT LOAN";
        //    RichText richText04 = sheet.Range["B5"].RichText;
        //    richText04.SetFont(0, richText04.Text.Length - 1, fontBold);

        //    sheet.Range["K5"].Value = "STAFF LOAN";
        //    RichText richText05 = sheet.Range["K5"].RichText;
        //    richText05.SetFont(0, richText05.Text.Length - 1, fontBold);

        //    decimal totamount = 0;
        //    decimal totamount1 = 0;
        //    decimal totamountacc = 0;

        //    decimal fulltotamount = 0;

        //    int rowcnt = 5;

        //    foreach (DataRow dr in Loansout.Rows)
        //    {
        //        rowcnt = rowcnt + 1;

        //        if (dr.ItemArray[1].ToString() == "Chit Loan")
        //        {
        //            //sheet.Range["A" + rowcnt].Value = dr.ItemArray[0].ToString();
        //            sheet.Range["B" + rowcnt].Value = dr.ItemArray[9].ToString();
        //            sheet.Range["C" + rowcnt].Value = dr.ItemArray[5].ToString();
        //            sheet.Range["D" + rowcnt].Value = dr.ItemArray[2].ToString();
        //            sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
        //            sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["F" + rowcnt].Value = dr.ItemArray[6].ToString();
        //            sheet.Range["G" + rowcnt].Value = dr.ItemArray[7].ToString();
        //            sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[8]);
        //            sheet.Range["H" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["I" + rowcnt].Value = dr.ItemArray[10].ToString();
        //            totamount = totamount + Convert.ToDecimal(dr.ItemArray[4]);
        //            totamountacc = totamountacc + Convert.ToDecimal(dr.ItemArray[8]);
        //        }
        //        else if (dr.ItemArray[1].ToString() == "Staff Loan")
        //        {
        //            //sheet.Range["J" + rowcnt].Value = dr.ItemArray[0].ToString();
        //            sheet.Range["K" + rowcnt].Value = dr.ItemArray[5].ToString();
        //            sheet.Range["L" + rowcnt].Value = dr.ItemArray[2].ToString();
        //            sheet.Range["M" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
        //            sheet.Range["M" + rowcnt].NumberFormat = "0.00";
        //            sheet.Range["N" + rowcnt].Value = dr.ItemArray[6].ToString();
        //            sheet.Range["O" + rowcnt].Value = dr.ItemArray[7].ToString();
        //            sheet.Range["P" + rowcnt].Value = dr.ItemArray[8].ToString();
        //            sheet.Range["P" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[8]);
        //            sheet.Range["P" + rowcnt].NumberFormat = "0.00";


        //            totamount1 = totamount1 + Convert.ToDecimal(dr.ItemArray[4]);
        //        }

        //        //totamount = totamount + Convert.ToDecimal(dr.ItemArray[15]);
        //    }


        //    fulltotamount = totamount + totamount1 + totamountacc;


        //    rowcnt = rowcnt + 6;

        //    sheet.Range["N" + rowcnt].Value = "ABSTRACT";
        //    RichText richText06 = sheet.Range["N" + rowcnt].RichText;
        //    richText06.SetFont(0, richText06.Text.Length - 1, fontBold);

        //    rowcnt = rowcnt + 1;
        //    sheet.Range["N" + rowcnt].Value = "Chit Loan";
        //    sheet.Range["O" + rowcnt].Value = "Rs.";
        //    sheet.Range["P" + rowcnt].NumberValue = Convert.ToDouble(totamount);
        //    sheet.Range["P" + rowcnt].NumberFormat = "0.00";

        //    rowcnt = rowcnt + 1;
        //    sheet.Range["N" + rowcnt].Value = "Staff Loan";
        //    sheet.Range["O" + rowcnt].Value = "Rs.";
        //    sheet.Range["P" + rowcnt].NumberValue = Convert.ToDouble(totamount1);
        //    sheet.Range["P" + rowcnt].NumberFormat = "0.00";

        //    rowcnt = rowcnt + 1;
        //    sheet.Range["N" + rowcnt].Value = "Accrued Interest";
        //    sheet.Range["O" + rowcnt].Value = "Rs.";
        //    sheet.Range["P" + rowcnt].NumberValue = Convert.ToDouble(totamountacc);
        //    sheet.Range["P" + rowcnt].NumberFormat = "0.00";

        //    rowcnt = rowcnt + 2;
        //    sheet.Range["N" + rowcnt].Value = "Total";
        //    sheet.Range["P" + rowcnt].NumberValue = Convert.ToDouble(fulltotamount);
        //    sheet.Range["P" + rowcnt].NumberFormat = "0.00";


        //    rowcnt = rowcnt + 3;

        //    CellRange range1 = sheet.Range["A5:" + "P" + rowcnt];
        //    range1.BorderAround(LineStyleType.Medium, Color.Black);

        //    sheet.AllocatedRange.AutoFitColumns();
        //    sheet.AllocatedRange.AutoFitRows();

        //    sheet.SetRowHeight(4, 29);
        //    sheet.SetColumnWidth(1, 9);
        //    sheet.SetRowHeight(5, 24);
        //    sheet.SetRowHeight(1, 24);
        //    sheet.SetRowHeight(2, 24);

        //    string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

        //    workbook.SaveToFile(outputlocation +"LoansOutAccruedintSt-08" + "_" + timestamp + ".xls");
        //    System.Diagnostics.Process.Start(outputlocation + "LoansOutAccruedintSt-08" + "_" + timestamp + ".xls");
        //}

        #endregion


        #region ChitDebit


        public void BindChitTrialdebit(string fromsdate, string todate, string branchid)
        {

            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + balayer.indiandateToMysqlDate(todate) + "') group by `auctiondetails`.`GroupID`");
            DataTable dt = balayer.GetDataTable("select * from groupmaster where `ChitStartDate` <= '" + balayer.indiandateToMysqlDate(todate) + "' and BranchID=" + branchid + "");

            DataTable grpids = balayer.GetDataTable("SELECT GroupmemberID FROM svcf.removedmaster where fromdate <= '" + balayer.indiandateToMysqlDate(todate) + "'");

            DataTable dt2 = new DataTable();
            DataTable dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            DataRow drB = dtB.NewRow();


            DataTable decreecrt = balayer.GetDataTable(@"SELECT ht2.NodeID, ht2.Node as Head,SUBSTRING_INDEX( ht2.Node, ' ', 1 ) as token,
                       (SELECT GroupID FROM svcf.membertogroupmaster where GrpMemberID = SUBSTRING_INDEX( ht2.Node, ' ', 1 )) as groupid,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Bal.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Bal.Debit`,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Court.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Court.Debit`,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Advocate.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Advocate.Debit`  FROM `voucher` as v1 join headstree as ht2 on v1.Head_Id=ht2.NodeID where v1.RootID=7 and v1.BranchID=" + branchid + " and v1.ChoosenDate<='2018-02-29' group by ht2.NodeID order by ht2.NodeID asc");



            for (int i = 0; i < dt.Rows.Count; i++)
            {
                DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(todate) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(todate) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);
                if (drawno == Noofmem)
                {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }

            DataTable dtBind = new DataTable();
            dtBind.Columns.Add("SNo");
            dtBind.Columns.Add("GroupNo");
            dtBind.Columns.Add("E_Debit", typeof(decimal));
            dtBind.Columns.Add("P_arrear", typeof(decimal));
            dtBind.Columns.Add("Sr_Amount", typeof(decimal));
            dtBind.Columns.Add("CSC_call", typeof(decimal));
            dtBind.Columns.Add("Decree", typeof(decimal));
            dtBind.Columns.Add("Cost", typeof(decimal));

            DataRow drBind = dtBind.NewRow();
            drBind["SNo"] = "";
            drBind["GroupNo"] = "Terminated";
            dtBind.Rows.Add(drBind.ItemArray);
            int iCount = 0;
            for (int i = 0; i < dtB.Rows.Count; i++)
            {

                DataTable dt1 = balayer.GetDataTable(@"select mg1.Head_Id,cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");


                string sumcsccl = "";
                DataTable comparedt = new DataTable();
                comparedt.Columns.Add("HeadId", typeof(Int32));

                comparedt = balayer.GetDataTable(@"SELECT Head_Id as HeadId FROM svcf.membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ";");

                if (dt1.Rows.Count > 0)
                {
                    #region start
                    if (((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M) && Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", "")) == 0.00M)
                    {

                    }
                    else
                    {

                        List<string> lstPArr = new List<string>();

                        if (Convert.ToInt32(dtB.Rows[i]["Head_Id"]) == 01193)
                        {
                            DataTable dtS = balayer.GetDataTable("SELECT sum((case when (Voucher_Type='C') then Amount else 0.00 end)) as Credit,sum((case when (Voucher_Type='D') then Amount else 0.00 end)) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and Head_id=1194");
                            if (dtS.Rows.Count > 0)
                            {
                                if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) < Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["E_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    iCount++;
                                    dtBind.Rows.Add(drBind.ItemArray);
                                }
                                else if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) > Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["E_Debit"] = 0.00;
                                    iCount++;
                                    dtBind.Rows.Add(drBind.ItemArray);
                                }
                            }
                        }
                        else
                        {
                            if (grpids.Rows.Count > 0)
                            {

                                DataTable dtCloned = comparedt.Clone();
                                dtCloned.Columns[0].DataType = typeof(Int32);

                                foreach (DataRow row in comparedt.Rows)
                                {
                                    dtCloned.ImportRow(row);
                                }

                                List<Int32> complist1 = dtCloned.AsEnumerable().Select(r => r.Field<Int32>("HeadId")).ToList();

                                List<Int32> complist2 = grpids.AsEnumerable().Select(r => r.Field<Int32>("GroupmemberID")).ToList();


                                var listCommon = complist2.Where(complist1.Contains).ToList();

                                string strids = string.Join<int>(",", listCommon);

                                if (strids != "")
                                {

                                    string dddd = balayer.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber in (" + strids + " ) and BranchID=" + branchid + " and PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "'");

                                    if (!(string.IsNullOrEmpty(dddd)))
                                    {
                                        DataTable ddt = ddt = balayer.GetDataTable(@"select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID in (" + dddd + ")");

                                        List<Int32> compcallidlist = ddt.AsEnumerable().Select(r => r.Field<Int32>("foremansubstitutedchitcall")).ToList();

                                        string callidlist = string.Join<int>(",", compcallidlist);

                                        sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (" + callidlist + ") and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (" + callidlist + ") and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')as 'Amount'");
                                    }
                                    else
                                    {
                                        sumcsccl = balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                                    }

                                }
                            }

                            decimal decreecr = 0;
                            decimal decreedr = 0;
                            decimal courtcr = 0;
                            decimal courtdr = 0;
                            decimal advcr = 0;
                            decimal advdr = 0;
                            decimal decreeresult = 0;

                            decimal totalcourtadvcr = 0;
                            decimal totalcourtadvdr = 0;

                            decimal courtadvresult = 0;


                            var dttype = decreecrt.Columns["groupid"].DataType;

                            DataRow[] checkgrp = decreecrt.Select("groupid=" + Convert.ToUInt64(dtB.Rows[i]["Head_Id"]));

                            foreach (var ddd in checkgrp)
                            {
                                decreecr = decreecr + Convert.ToDecimal(ddd.ItemArray[4]);
                                decreedr = decreedr + Convert.ToDecimal(ddd.ItemArray[5]);

                                courtcr = courtcr + Convert.ToDecimal(ddd.ItemArray[6]);
                                courtdr = courtdr + Convert.ToDecimal(ddd.ItemArray[7]);

                                advcr = advcr + Convert.ToDecimal(ddd.ItemArray[8]);
                                advdr = advdr + Convert.ToDecimal(ddd.ItemArray[9]);

                            }

                            totalcourtadvcr = courtcr + advcr;
                            totalcourtadvdr = courtdr + advdr;

                            if (decreecr > decreedr)
                            {
                                decreeresult = decreecr - decreedr;
                            }
                            else if (decreedr > decreecr)
                            {
                                decreeresult = decreedr - decreecr;
                            }

                            if (totalcourtadvcr > totalcourtadvdr)
                            {
                                courtadvresult = totalcourtadvcr - totalcourtadvdr;
                            }
                            else if (totalcourtadvdr > totalcourtadvcr)
                            {
                                courtadvresult = totalcourtadvdr - totalcourtadvcr;
                            }
                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                            drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) - Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", ""));
                            drBind["P_arrear"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", ""));
                            drBind["Sr_Amount"] = 0.00;
                            if (sumcsccl != "")
                            {
                                drBind["CSC_call"] = Convert.ToDecimal(sumcsccl);
                            }
                            else
                            {
                                drBind["CSC_call"] = "0.00";
                            }
                            drBind["Decree"] = decreeresult;
                            drBind["Cost"] = courtadvresult;
                            iCount++;
                            dtBind.Rows.Add(drBind.ItemArray);
                            sumcsccl = "";
                        }
                    }
                    #endregion
                }

            }
            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + balayer.indiandateToMysqlDate(todate) + "') group by `auctiondetails`.`GroupID`");
            dt = balayer.GetDataTable("select * from groupmaster where `PSOOrderDate` <= '" + balayer.indiandateToMysqlDate(todate) + "' and BranchID=" + branchid + "");

            if (dt.Rows.Count != 0)
            {

                dtB = new DataTable();
                dtB.Columns.Add("Head_Id");
                dtB.Columns.Add("GROUPNO");
                drB = dtB.NewRow();
                for (int i = 0; i < dt.Rows.Count; i++)
                {

                    DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(todate) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                    string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(todate) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);

                    if (drawno != Noofmem)
                    {
                        drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                        drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                        dtB.Rows.Add(drB.ItemArray);
                    }
                }
                DataRow drBind1 = dtBind.NewRow();
                drBind1["SNo"] = "";
                drBind1["GroupNo"] = "Running";
                dtBind.Rows.Add(drBind1.ItemArray);

                iCount = 0;
                for (int i = 0; i < dtB.Rows.Count; i++)
                {

                    DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                    string prizecount = balayer.GetSingleValue("select count(*) from trans_payment where ChitGroupID = " + dtB.Rows[i]["Head_Id"] + " and PaymentDate <='" + balayer.indiandateToMysqlDate(todate) + "';");
                    string Totalcount = balayer.GetSingleValue("select count(*) from auctiondetails where GroupID=" + dtB.Rows[i]["Head_Id"] + ";");
                    string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(todate) + "' and  GroupID=" + dtB.Rows[i]["Head_Id"]);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dtB.Rows[i]["Head_Id"]);
                    DataTable dt1 = balayer.GetDataTable(@"select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");

                    string sumcsccl = "";
                    DataTable comparedt = new DataTable();
                    comparedt.Columns.Add("HeadId", typeof(Int32));

                    comparedt = balayer.GetDataTable(@"SELECT Head_Id as HeadId FROM svcf.membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ";");


                    if (drawno != Noofmem && dt1.Rows.Count > 0)
                    {
                        if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M)
                        {

                        }
                        else
                        {

                            if (grpids.Rows.Count > 0)
                            {

                                DataTable dtCloned = comparedt.Clone();
                                dtCloned.Columns[0].DataType = typeof(Int32);

                                foreach (DataRow row in comparedt.Rows)
                                {
                                    dtCloned.ImportRow(row);
                                }

                                List<Int32> complist1 = dtCloned.AsEnumerable().Select(r => r.Field<Int32>("HeadId")).ToList();

                                List<Int32> complist2 = grpids.AsEnumerable().Select(r => r.Field<Int32>("GroupmemberID")).ToList();


                                var listCommon = complist2.Where(complist1.Contains).ToList();

                                string strids = string.Join<int>(",", listCommon);


                                if (strids != "")
                                {

                                    string dddd = balayer.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber in (" + strids + " ) and BranchID=" + branchid + " and PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "'");

                                    if (!(string.IsNullOrEmpty(dddd)))
                                    {
                                        DataTable ddt = ddt = balayer.GetDataTable(@"select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID in (" + dddd + ")");

                                        List<Int32> compcallidlist = ddt.AsEnumerable().Select(r => r.Field<Int32>("foremansubstitutedchitcall")).ToList();

                                        string callidlist = string.Join<int>(",", compcallidlist);

                                        sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (" + callidlist + ") and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (" + callidlist + ") and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')as 'Amount'");
                                    }
                                    else
                                    {
                                        sumcsccl = balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                                    }

                                }
                            }


                            decimal decreecr = 0;
                            decimal decreedr = 0;
                            decimal courtcr = 0;
                            decimal courtdr = 0;
                            decimal advcr = 0;
                            decimal advdr = 0;
                            decimal decreeresult = 0;

                            decimal totalcourtadvcr = 0;
                            decimal totalcourtadvdr = 0;

                            decimal courtadvresult = 0;


                            var dttype = decreecrt.Columns["groupid"].DataType;

                            DataRow[] checkgrp = decreecrt.Select("groupid=" + Convert.ToUInt64(dtB.Rows[i]["Head_Id"]));

                            foreach (var ddd in checkgrp)
                            {
                                decreecr = decreecr + Convert.ToDecimal(ddd.ItemArray[4]);
                                decreedr = decreedr + Convert.ToDecimal(ddd.ItemArray[5]);

                                courtcr = courtcr + Convert.ToDecimal(ddd.ItemArray[6]);
                                courtdr = courtdr + Convert.ToDecimal(ddd.ItemArray[7]);

                                advcr = advcr + Convert.ToDecimal(ddd.ItemArray[8]);
                                advdr = advdr + Convert.ToDecimal(ddd.ItemArray[9]);

                            }

                            totalcourtadvcr = courtcr + advcr;
                            totalcourtadvdr = courtdr + advdr;

                            if (decreecr > decreedr)
                            {
                                decreeresult = decreecr - decreedr;
                            }
                            else if (decreedr > decreecr)
                            {
                                decreeresult = decreedr - decreecr;
                            }

                            if (totalcourtadvcr > totalcourtadvdr)
                            {
                                courtadvresult = totalcourtadvcr - totalcourtadvdr;
                            }
                            else if (totalcourtadvdr > totalcourtadvcr)
                            {
                                courtadvresult = totalcourtadvdr - totalcourtadvcr;
                            }


                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                            drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            drBind["P_arrear"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", ""));
                            drBind["Sr_Amount"] = (Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(PArrier)", ""));
                            if (sumcsccl != "")
                            {
                                drBind["CSC_call"] = Convert.ToDecimal(sumcsccl);
                            }
                            else
                            {
                                drBind["CSC_call"] = "0.00";
                            }
                            drBind["Decree"] = decreeresult;
                            drBind["Cost"] = courtadvresult;
                            iCount++;
                            dtBind.Rows.Add(drBind.ItemArray);

                        }
                    }
                    else
                    {
                        strChits = "";
                        dtC = new DataTable();
                        dtC = balayer.GetDataTable("SELECT concat(Cast(NodeID as char(10)),',') FROM svcf.headstree where ParentID=" + dtB.Rows[i]["Head_Id"]);
                        for (int k = 0; k < dtC.Rows.Count; k++)
                        {
                            strChits = strChits + dtC.Rows[k][0];
                        }
                        if (string.IsNullOrEmpty(strChits))
                        {
                            strChits = "0";
                        }
                        else
                        {
                            strChits = strChits.TrimEnd(',');
                        }
                        credit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='C') then Amount else 0.00 end) as Credit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and Head_id in (" + strChits + ")");
                        if (prizecount == "0")
                        {
                            debit = "0.00";
                        }
                        else
                        {
                            debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and Head_id in (" + strChits + ")");
                        }

                        if (string.IsNullOrEmpty(credit))
                            credit = "0.00";
                        if (string.IsNullOrEmpty(debit))
                            debit = "0.00";
                        decimal decCredit = Convert.ToDecimal(credit);
                        decimal decDebit = Convert.ToDecimal(debit);
                        string npkas = "";
                        string pkas = "";
                        int NPcount = 0;
                        int Pcount = 0;
                        DataTable dtDetails = balayer.GetDataTable(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (" + strChits + ") and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC;");

                        if (dtDetails.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtDetails.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtDetails.Rows[iRow]["NPKasar"]) > 0)
                                    NPcount++;
                                if (Convert.ToDecimal(dtDetails.Rows[iRow]["PKasar"]) > 0)
                                    Pcount++;
                            }
                            pkas = Convert.ToString(dtDetails.Compute("sum(PKasar)", ""));
                            npkas = Convert.ToString(dtDetails.Compute("sum(NPKasar)", ""));
                            credit = Convert.ToString(dtDetails.Compute("sum(Credit)", ""));
                            debit = Convert.ToString(dtDetails.Compute("sum(Debit)", ""));
                        }

                        if (string.IsNullOrEmpty(npkas))
                            npkas = "0.00";
                        if (string.IsNullOrEmpty(pkas))
                            pkas = "0.00";

                        string netCredit = "0.00";
                        string netDebit = "0.00";

                        if ((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) > Convert.ToDecimal(debit))
                            netCredit = Convert.ToString((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) - Convert.ToDecimal(debit));
                        else
                            netDebit = Convert.ToString(Convert.ToDecimal(debit) - (Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)));

                        drBind["SNo"] = iCount + 1;
                        drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                        drBind["E_Debit"] = Convert.ToString(Convert.ToDecimal(debit) - Convert.ToDecimal(pkas));
                        iCount++;
                        dtBind.Rows.Add(drBind.ItemArray);
                    }
                }
                E_Debit = Convert.ToDecimal(dtBind.Compute("sum(E_Debit)", ""));
                P_Arrear = Convert.ToDecimal(dtBind.Compute("sum(P_arrear)", ""));
                Sr_Amount = Convert.ToDecimal(E_Debit - P_Arrear);
                Call_Amount = Convert.ToDecimal(dtBind.Compute("sum(CSC_call)", ""));
                Decree_Amount = Convert.ToDecimal(dtBind.Compute("sum(Decree)", ""));
                Court_Amount = Convert.ToDecimal(dtBind.Compute("sum(Cost)", ""));

                drBind["SNo"] = "";
                drBind["GroupNo"] = "TOTAL";
                drBind["E_Debit"] = E_Debit;
                drBind["P_arrear"] = P_Arrear;
                drBind["CSC_call"] = Call_Amount;
                drBind["Decree"] = Decree_Amount;
                drBind["Cost"] = Court_Amount;
                dtBind.Rows.Add(drBind.ItemArray);
            }

            Chitdebit = dtBind;
        }

        public void ChitDebit(string fromsdate, string todate, string branchid, string imagepath)
        {

            Workbook workbook = new Workbook();
            workbook.CreateEmptySheets(1);
            Worksheet sheet = workbook.Worksheets[0];

            ExcelFont fontBold = workbook.CreateFont();
            fontBold.IsBold = true;


            sheet.Name = "Chit Debit St-  24";

            //sheet.Pictures.Add(1, 1, imagepath);

            string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + branchid + ";");

            CellRange range = sheet.Range["A4:H4"];
            range.Borders.LineStyle = LineStyleType.Double;
            range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


            sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
            RichText richText01 = sheet.Range["C1"].RichText;
            richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

            sheet.Range["C2"].Value = "Branch: " + branchname + "";
            RichText richText02 = sheet.Range["C2"].RichText;
            richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

            sheet.Range["A3"].Value = "CHIT DEBIT DETAILS AS AT " + balayer.Getstringdaymonth(todate) + "";
            RichText richText03 = sheet.Range["A3"].RichText;
            richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
            sheet.Range["A3:H3"].Merge();

            sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;

            sheet.Range["A4"].Value = "Sl.No.";
            sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["B4"].Value = "Group Number";
            sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["C4"].Value = "Gross Debit Less Prized Kasar";
            sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["D4"].Value = "Less Arrears from Prized Subscribers";
            sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["E4"].Value = "Share amount due from prized Subscribers";
            sheet.Range["E4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["E4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["F4"].Value = "Call amount paid for Prized C.S.C Chits";
            sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["G4"].Value = "Amount in Decree Account";
            sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["H4"].Value = "Amount in Court Cost Account";
            sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;


            BindChitTrialdebit(fromsdate, todate, branchid);

            int rowcnt = 4;
            int slno = 0;
            foreach (DataRow dr in Chitdebit.Rows)
            {

                if (dr.ItemArray[1].ToString() != "Terminated" && dr.ItemArray[1].ToString() != "Running" && dr.ItemArray[1].ToString() != "TOTAL")
                {
                    slno = slno + 1;
                    rowcnt = rowcnt + 1;

                    sheet.Range["A" + rowcnt].Value = slno.ToString();
                    sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
                    sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                    sheet.Range["C" + rowcnt].NumberFormat = "0.00";
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                    sheet.Range["D" + rowcnt].NumberFormat = "0.00";
                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                    sheet.Range["E" + rowcnt].NumberFormat = "0.00";
                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
                    sheet.Range["E" + rowcnt].NumberFormat = "0.00";
                    sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[6]);
                    sheet.Range["G" + rowcnt].NumberFormat = "0.00";
                    sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[7]);
                    sheet.Range["H" + rowcnt].NumberFormat = "0.00";
                }
                if (dr.ItemArray[1].ToString() == "TOTAL")
                {
                    rowcnt = rowcnt + 2;
                    sheet.Range["B" + rowcnt].Value = "Carried Over";
                    RichText richText04 = sheet.Range["B" + rowcnt].RichText;
                    richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                    sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
                    sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
                    sheet.Range["C" + rowcnt].NumberFormat = "0.00";
                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
                    sheet.Range["D" + rowcnt].NumberFormat = "0.00";
                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
                    sheet.Range["E" + rowcnt].NumberFormat = "0.00";
                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
                    sheet.Range["E" + rowcnt].NumberFormat = "0.00";
                    sheet.Range["G" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[6]);
                    sheet.Range["G" + rowcnt].NumberFormat = "0.00";
                    sheet.Range["H" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[7]);
                    sheet.Range["H" + rowcnt].NumberFormat = "0.00";
                }
            }

            rowcnt = rowcnt + 2;

            CellRange range1 = sheet.Range["A5:" + "H" + rowcnt];
            range1.BorderAround(LineStyleType.Medium, Color.Black);


            sheet.AllocatedRange.AutoFitColumns();
            sheet.AllocatedRange.AutoFitRows();

            sheet.SetRowHeight(4, 29);
            sheet.SetColumnWidth(1, 9);
            sheet.SetRowHeight(5, 24);
            sheet.SetRowHeight(1, 24);
            sheet.SetRowHeight(2, 24);


            string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

            workbook.SaveToFile(outputlocation + "ChitDebitSt-24" + "_" + timestamp + ".xls");
            System.Diagnostics.Process.Start(outputlocation + "ChitDebitSt-24" + "_" + timestamp + ".xls");
        }

        #endregion


        #region SundriesandAdvances


        public DataTable Bindsundriesandadvance(string fromsdate, string todate, string branchid)
        {
            //            string str = @"select t3.Node as Heads,t3.NodeID,t3.ParentID,t1.Narration , 
            //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1119072%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `EB_Credit`,
            //                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1119072%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `EB_Debit`,
            //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
            //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,4739%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
            //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `TD_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
            //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,4739%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
            //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `TD_Debit`,
            //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
            //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,5730%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
            //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `RA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
            //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,5730%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
            //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `RA_Debit`,
            //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,167%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `S_Credit`,
            //                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,167%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `S_Debit`,
            //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
            //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1060%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
            //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `PPA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
            //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1060%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
            //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `PPA_Debit`,
            //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,172%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `VRA_Credit`,
            //                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,172%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `VRA_Debit`,
            //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,58%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `SC_Credit`,
            //                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,58%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `SC_Debit`
            //                            ,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1061%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `SDeb_Credit`,
            //                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1061%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `SDeb_Debit` 
            //                       from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + "  and `t1`.`RootID` = 9  and (t3.TreeHint like '9,1119072%' or t3.TreeHint like '9,4739%' or t3.TreeHint like '9,5730%' or t3.TreeHint like '9,167%' or t3.TreeHint like '9,1060%' or  t3.TreeHint like '9,58%' or  t3.TreeHint like '9,172%' or t3.TreeHint like '9,1061%') and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID` order by t3.ParentID asc,t1.ChoosenDate asc;";
            string str = @"select t3.Node as Heads,t3.NodeID,t3.ParentID,t1.Narration , 
                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1119072%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `EB_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1119072%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `EB_Debit`,
                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,4739%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `TD_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,4739%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `TD_Debit`,
                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,5730%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `RA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,5730%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `RA_Debit`,
                               (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,167%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `S_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,167%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `S_Debit`,
                                                (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1060%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `PPA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1060%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `PPA_Debit`,
                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,172%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `VRA_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,172%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `VRA_Debit`,
                                   (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,58%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `SC_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,58%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `SC_Debit`
                            ,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1061%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `SDeb_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1061%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `SDeb_Debit` ,
(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,59%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Degree_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,59%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Degree_Debit`,
                            
(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,5335%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Court_Credit`,
                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,5335%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Court_Debit`
                       from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + "  and `t1`.`RootID` = 9  and (t3.TreeHint like '9,1119072%' or t3.TreeHint like '9,4739%' or t3.TreeHint like '9,5730%' or t3.TreeHint like '9,167%' or t3.TreeHint like '9,1060%' or  t3.TreeHint like '9,58%' or  t3.TreeHint like '9,172%' or t3.TreeHint like '9,1061%' or t3.TreeHint like '9,59%' or t3.TreeHint like '9,5335%') and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID` order by t3.ParentID asc,t1.ChoosenDate asc";
            sundries = balayer.GetDataTable(str);
            return sundries;
        }


        public void SundriesandAdvances(string fromsdate, string todate, string branchid, string imagepath)
        {
            Workbook workbook = new Workbook();
            workbook.CreateEmptySheets(1);
            Worksheet sheet = workbook.Worksheets[0];

            ExcelFont fontBold = workbook.CreateFont();
            fontBold.IsBold = true;


            Bindsundriesandadvance(fromsdate, todate, branchid);


            sheet.Name = "Sundries & Advance St-09";

            sheet.Pictures.Add(1, 1, imagepath);


            string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + branchid + ";");

            CellRange range = sheet.Range["A4:F4"];
            range.Borders.LineStyle = LineStyleType.Double;
            range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
            range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


            sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
            RichText richText01 = sheet.Range["C1"].RichText;
            richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

            sheet.Range["C2"].Value = "Branch: " + branchname + "";
            RichText richText02 = sheet.Range["C2"].RichText;
            richText02.SetFont(0, richText02.Text.Length - 1, fontBold);


            sheet.Range["A3"].Value = "Particulars of Sundries and Advances as at " + balayer.Getstringdaymonth(todate) + "";
            RichText richText03 = sheet.Range["A3"].RichText;
            richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
            sheet.Range["A3:L3"].Merge();

            sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;


            sheet.Range["A4"].Value = "Sl.No.";
            sheet.Range["A4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["A4"].Style.VerticalAlignment = VerticalAlignType.Center;


            sheet.Range["B4"].Value = "Particulars";
            sheet.Range["B4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["B4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["C4"].Value = "Amount";
            sheet.Range["C4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["C4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["D4"].Value = "Gross Credit";
            sheet.Range["D4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["D4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["E4"].Value = "Gross Debit";
            sheet.Range["E4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["E4"].Style.VerticalAlignment = VerticalAlignType.Center;

            sheet.Range["F4"].Value = "on account of";
            sheet.Range["F4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
            sheet.Range["F4"].Style.VerticalAlignment = VerticalAlignType.Center;


            int rowcnt = 5;
            int rowcnt2 = 5;

            decimal Totalcreditsum = 0;
            decimal Totaldebitsum = 0;

            decimal Total = 0;


            List<UInt32> parentid = (from row in sundries.AsEnumerable()
                                     select row.Field<UInt32>("ParentID")).ToList<UInt32>();

            var result = (from d in parentid select d).Distinct().ToList();

            DataTable totaldt = new DataTable();

            string innercolname = "";
            int slno = 0;

            foreach (var dd in result)
            {
                string qry = balayer.GetSingleValue("SELECT Node FROM svcf.headstree where NodeID=" + dd + ";");

                DataTable selectedTable = sundries.AsEnumerable()
                            .Where(r => r.Field<UInt32>("ParentID") == dd)
                            .CopyToDataTable();

                string[] columnNames = selectedTable.Columns.Cast<DataColumn>()
                                 .Select(x => x.ColumnName)
                                 .ToArray();

                int excludecol = 0;

                foreach (var ddd in columnNames)
                {
                    excludecol = excludecol + 1;

                    if (excludecol > 4)
                    {
                        int count = selectedTable.AsEnumerable().Where(r => r.Field<decimal>(ddd) != 0).Count();

                        DataTable totaldtnew = new DataTable();

                        if (count > 0)
                        {
                            totaldtnew = selectedTable.AsEnumerable().Where(r => r.Field<decimal>(ddd) != 0).CopyToDataTable();

                        }
                        if (totaldtnew.Rows.Count > 0)
                        {
                            totaldt = totaldtnew;

                            innercolname = ddd.Split('_')[1];
                            break;
                        }
                    }
                }

                int arrval = excludecol - 1;

                int heading = 0;

                int comparecnt = 0;

                if (rowcnt <= 40)
                {
                    foreach (DataRow dr in totaldt.Rows)
                    {
                        comparecnt = comparecnt + 1;

                        if (rowcnt >= 40)
                        {
                            break;
                        }

                        if (heading == 0)
                        {
                            slno = slno + 1;

                            sheet.Range["A" + rowcnt].Value = slno.ToString();
                            sheet.Range["B" + rowcnt].Value = qry.ToString();
                            RichText richText04 = sheet.Range["B" + rowcnt].RichText;
                            richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                        }

                        heading = heading + 1;

                        rowcnt = rowcnt + 1;

                        sheet.Range["B" + rowcnt].Value = dr.ItemArray[0].ToString();

                        if (innercolname == "Debit")
                        {
                            if (Convert.ToInt32(dr.ItemArray[arrval]) > 0)
                            {
                                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[arrval]);
                                sheet.Range["C" + rowcnt].NumberFormat = "0.00";
                                sheet.Range["D" + rowcnt].NumberValue = 0;
                                sheet.Range["D" + rowcnt].NumberFormat = "0.00";
                                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[arrval]);
                                sheet.Range["E" + rowcnt].NumberFormat = "0.00";

                                Totaldebitsum = Totaldebitsum + Convert.ToDecimal(dr.ItemArray[arrval]);
                            }
                            else if (Convert.ToInt32(dr.ItemArray[arrval - 1]) > 0)
                            {
                                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[arrval - 1]);
                                sheet.Range["C" + rowcnt].NumberFormat = "0.00";
                                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[arrval - 1]);
                                sheet.Range["D" + rowcnt].NumberFormat = "0.00";
                                sheet.Range["E" + rowcnt].NumberValue = 0;
                                sheet.Range["E" + rowcnt].NumberFormat = "0.00";

                                Totalcreditsum = Totalcreditsum + Convert.ToDecimal(dr.ItemArray[arrval - 1]);

                            }
                        }
                        else if (innercolname == "Credit")
                        {
                            if (Convert.ToInt32(dr.ItemArray[arrval]) > 0)
                            {

                                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[arrval]);
                                sheet.Range["C" + rowcnt].NumberFormat = "0.00";
                                sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[arrval]);
                                sheet.Range["D" + rowcnt].NumberFormat = "0.00";
                                sheet.Range["E" + rowcnt].NumberValue = 0;
                                sheet.Range["E" + rowcnt].NumberFormat = "0.00";

                                Totalcreditsum = Totalcreditsum + Convert.ToDecimal(dr.ItemArray[arrval]);

                            }
                            else if (Convert.ToInt32(dr.ItemArray[arrval + 1]) > 0)
                            {

                                sheet.Range["C" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[arrval + 1]);
                                sheet.Range["C" + rowcnt].NumberFormat = "0.00";
                                sheet.Range["D" + rowcnt].NumberValue = 0;
                                sheet.Range["D" + rowcnt].NumberFormat = "0.00";
                                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[arrval + 1]);
                                sheet.Range["E" + rowcnt].NumberFormat = "0.00";

                                Totaldebitsum = Totaldebitsum + Convert.ToDecimal(dr.ItemArray[arrval + 1]);
                            }
                        }
                    }
                }

                if (rowcnt >= 40)
                {
                    rowcnt = rowcnt + 1;
                    if (rowcnt2 == 5)
                    {

                        CellRange range2 = sheet.Range["G4:L4"];
                        range2.Borders.LineStyle = LineStyleType.Double;
                        range2.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
                        range2.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

                        sheet.Range["G4"].Value = "Sl.No.";
                        sheet.Range["G4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                        sheet.Range["G4"].Style.VerticalAlignment = VerticalAlignType.Center;


                        sheet.Range["H4"].Value = "Particulars";
                        sheet.Range["H4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                        sheet.Range["H4"].Style.VerticalAlignment = VerticalAlignType.Center;

                        sheet.Range["I4"].Value = "Amount";
                        sheet.Range["I4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                        sheet.Range["I4"].Style.VerticalAlignment = VerticalAlignType.Center;

                        sheet.Range["J4"].Value = "Gross Credit";
                        sheet.Range["J4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                        sheet.Range["J4"].Style.VerticalAlignment = VerticalAlignType.Center;

                        sheet.Range["K4"].Value = "Gross Debit";
                        sheet.Range["K4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                        sheet.Range["K4"].Style.VerticalAlignment = VerticalAlignType.Center;

                        sheet.Range["L4"].Value = "on account of";
                        sheet.Range["L4"].Style.HorizontalAlignment = HorizontalAlignType.Center;
                        sheet.Range["L4"].Style.VerticalAlignment = VerticalAlignType.Center;

                    }
                    if (comparecnt > 0)
                    {

                        for (int r1 = 0; r1 <= comparecnt; r1++)
                        {
                            totaldt.Rows.RemoveAt(0);
                        }

                    }

                    foreach (DataRow dr in totaldt.Rows)
                    {
                        if (heading == 0)
                        {
                            slno = slno + 1;

                            sheet.Range["G" + rowcnt2].Value = slno.ToString();
                            sheet.Range["H" + rowcnt2].Value = qry.ToString();
                            RichText richText04 = sheet.Range["H" + rowcnt2].RichText;
                            richText04.SetFont(0, richText04.Text.Length - 1, fontBold);
                        }


                        heading = heading + 1;

                        rowcnt2 = rowcnt2 + 1;

                        sheet.Range["H" + rowcnt2].Value = dr.ItemArray[0].ToString();

                        if (innercolname == "Debit")
                        {
                            if (Convert.ToInt32(dr.ItemArray[arrval]) > 0)
                            {
                                sheet.Range["I" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[arrval]);
                                sheet.Range["I" + rowcnt2].NumberFormat = "0.00";
                                sheet.Range["J" + rowcnt2].NumberValue = 0;
                                sheet.Range["J" + rowcnt2].NumberFormat = "0.00";
                                sheet.Range["K" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[arrval]);
                                sheet.Range["K" + rowcnt2].NumberFormat = "0.00";

                                Totaldebitsum = Totaldebitsum + Convert.ToDecimal(dr.ItemArray[arrval]);
                            }
                            else if (Convert.ToInt32(dr.ItemArray[arrval - 1]) > 0)
                            {
                                sheet.Range["I" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[arrval - 1]);
                                sheet.Range["I" + rowcnt2].NumberFormat = "0.00";
                                sheet.Range["J" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[arrval - 1]);
                                sheet.Range["J" + rowcnt2].NumberFormat = "0.00";
                                sheet.Range["K" + rowcnt2].NumberValue = 0;
                                sheet.Range["K" + rowcnt2].NumberFormat = "0.00";

                                Totalcreditsum = Totalcreditsum + Convert.ToDecimal(dr.ItemArray[arrval - 1]);
                            }
                        }
                        else if (innercolname == "Credit")
                        {
                            if (Convert.ToInt32(dr.ItemArray[arrval]) > 0)
                            {

                                sheet.Range["I" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[arrval]);
                                sheet.Range["I" + rowcnt2].NumberFormat = "0.00";
                                sheet.Range["J" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[arrval]);
                                sheet.Range["J" + rowcnt2].NumberFormat = "0.00";
                                sheet.Range["K" + rowcnt2].NumberValue = 0;
                                sheet.Range["K" + rowcnt2].NumberFormat = "0.00";

                                Totalcreditsum = Totalcreditsum + Convert.ToDecimal(dr.ItemArray[arrval]);

                            }
                            else if (Convert.ToInt32(dr.ItemArray[arrval + 1]) > 0)
                            {

                                sheet.Range["I" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[arrval + 1]);
                                sheet.Range["I" + rowcnt2].NumberFormat = "0.00";
                                sheet.Range["J" + rowcnt2].NumberValue = 0;
                                sheet.Range["J" + rowcnt2].NumberFormat = "0.00";
                                sheet.Range["K" + rowcnt2].NumberValue = Convert.ToDouble(dr.ItemArray[arrval + 1]);
                                sheet.Range["K" + rowcnt2].NumberFormat = "0.00";

                                Totaldebitsum = Totaldebitsum + Convert.ToDecimal(dr.ItemArray[arrval + 1]);
                            }
                        }
                    }
                    rowcnt2 = rowcnt2 + 1;
                }
                if (rowcnt < 40)
                {
                    rowcnt = rowcnt + 1;
                }
            }

            if (rowcnt > 40)
            {

                CellRange range1 = sheet.Range["A5:" + "F" + rowcnt];
                range1.BorderAround(LineStyleType.Medium, Color.Black);


                rowcnt2 = rowcnt2 + 1;

                sheet.Range["I" + rowcnt2].Value = "Total";
                RichText richText04 = sheet.Range["I" + rowcnt2].RichText;
                richText04.SetFont(0, richText04.Text.Length - 1, fontBold);

                if (Totalcreditsum > Totaldebitsum)
                {
                    Total = Totalcreditsum - Totaldebitsum;

                    sheet.Range["K" + rowcnt2].NumberValue = Convert.ToDouble(Total);
                    sheet.Range["K" + rowcnt2].NumberFormat = "0.00";
                }
                else if (Totaldebitsum > Totalcreditsum)
                {
                    Total = Totaldebitsum - Totalcreditsum;

                    sheet.Range["L" + rowcnt2].NumberValue = Convert.ToDouble(Total);
                    sheet.Range["L" + rowcnt2].NumberFormat = "0.00";
                }

                rowcnt2 = rowcnt2 + 3;

                CellRange range2 = sheet.Range["G5:" + "L" + rowcnt2];
                range2.BorderAround(LineStyleType.Medium, Color.Black);
            }
            else
            {
                rowcnt = rowcnt + 1;

                sheet.Range["B" + rowcnt].Value = "Total";
                RichText richText04 = sheet.Range["B" + rowcnt].RichText;
                richText04.SetFont(0, richText04.Text.Length - 1, fontBold);

                if (Totalcreditsum > Totaldebitsum)
                {
                    Total = Totalcreditsum - Totaldebitsum;

                    sheet.Range["D" + rowcnt].NumberValue = Convert.ToDouble(Total);
                    sheet.Range["D" + rowcnt].NumberFormat = "0.00";
                }
                else if (Totaldebitsum > Totalcreditsum)
                {
                    Total = Totaldebitsum - Totalcreditsum;

                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(Total);
                    sheet.Range["E" + rowcnt].NumberFormat = "0.00";
                }

                rowcnt = rowcnt + 3;

                CellRange range1 = sheet.Range["A5:" + "F" + rowcnt];
                range1.BorderAround(LineStyleType.Medium, Color.Black);
            }


            sheet.AllocatedRange.AutoFitColumns();
            sheet.AllocatedRange.AutoFitRows();

            sheet.SetRowHeight(4, 29);
            sheet.SetColumnWidth(1, 9);
            sheet.SetRowHeight(5, 24);
            sheet.SetRowHeight(1, 24);
            sheet.SetRowHeight(2, 24);



            string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

            workbook.SaveToFile(outputlocation + "SundriesAdvanceSt-09" + "_" + timestamp + ".xls");
            System.Diagnostics.Process.Start(outputlocation + "SundriesAdvanceSt-09" + "_" + timestamp + ".xls");
        }

        #endregion


        #region Trial Balance

        public DataTable BindBranches(string fromsdate, string todate, string branchid)
        {
            DataTable dt1;
            decimal decCredit;
            decimal decDebit;


            string str = @"select t1.ChoosenDate as `Date`,t3.Node as Branch , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` = " + branchid + " and `t1`.`RootID` = 1 and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`";
            dt1 = new DataTable();
            dt1 = balayer.GetDataTable(str);

            dtbranch.Columns.Add("SNo");
            dtbranch.Columns.Add("Heads");
            dtbranch.Columns.Add("Balance");
            dtbranch.Columns.Add("Credit", typeof(decimal));
            dtbranch.Columns.Add("Debit", typeof(decimal));
            DataRow dr = dtbranch.NewRow();
            int icount = 0;
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["Debit"]) > 0)
                {
                    dr["SNo"] = icount + 1;
                    dr["Heads"] = dt1.Rows[i]["Branch"];
                    dr["Credit"] = dt1.Rows[i]["Credit"];
                    dr["Debit"] = dt1.Rows[i]["Debit"];
                    dtbranch.Rows.Add(dr.ItemArray);
                    icount++;
                }
            }
            decCredit = Convert.ToDecimal(dtbranch.Compute("Sum(Credit)", ""));
            decDebit = Convert.ToDecimal(dtbranch.Compute("Sum(Debit)", ""));
            dr["SNo"] = "";
            // dr["Heads"] = "";
            dr["Heads"] = "TOTAL";
            dr["Credit"] = decCredit;
            dr["Debit"] = decDebit;
            dtbranch.Rows.Add(dr.ItemArray);

            dr["SNo"] = "";
            if (decCredit == decDebit)
            {
                // dr["Heads"] = "";
                dr["Heads"] = "Balance";
                dr["Credit"] = "0.00";
                dr["Debit"] = "0.00";
            }
            else if (decCredit > decDebit)
            {
                //dr["Heads"] = "";
                dr["Heads"] = "Balance CR";
                dr["Credit"] = decCredit - decDebit;
                dr["Debit"] = "0.00";
            }
            else if (decCredit < decDebit)
            {
                //dr["Heads"] = "";
                dr["Heads"] = "Balance DR";
                dr["Credit"] = "0.00";
                dr["Debit"] = decDebit - decCredit;
            }
            dtbranch.Rows.Add(dr.ItemArray);
            return dtbranch;
        }

        public DataTable BindBranches2(string fromsdate, string todate, string branchid)
        {
            DataTable dt1;
            DataTable dtbranch1 = new DataTable();
            decimal decCredit;
            decimal decDebit;

            string str = @"select t1.ChoosenDate as `Date`,t3.Node as Branch , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` = " + branchid + " and `t1`.`RootID` = 1 and t1.Series='AfterClosing' and  t1.ChoosenDate between '" + balayer.indiandateToMysqlDate(fromsdate) + "' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`;";

            dt1 = new DataTable();
            dt1 = balayer.GetDataTable(str);


            dtbranch1.Columns.Add("SNo");
            dtbranch1.Columns.Add("Heads");
            dtbranch1.Columns.Add("Balance");
            dtbranch1.Columns.Add("Credit", typeof(decimal));
            dtbranch1.Columns.Add("Debit", typeof(decimal));
            DataRow dr = dtbranch1.NewRow();
            int icount = 0;
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["Debit"]) > 0)
                {
                    dr["SNo"] = icount + 1;
                    dr["Heads"] = dt1.Rows[i]["Branch"];
                    dr["Credit"] = dt1.Rows[i]["Credit"];
                    dr["Debit"] = dt1.Rows[i]["Debit"];
                    dtbranch1.Rows.Add(dr.ItemArray);
                    icount++;
                }
            }
            if (dtbranch1.Rows.Count != 0)
            {
                decCredit = Convert.ToDecimal(dtbranch1.Compute("Sum(Credit)", ""));
                decDebit = Convert.ToDecimal(dtbranch1.Compute("Sum(Debit)", ""));

                dr["SNo"] = "";
                // dr["Heads"] = "";
                dr["Heads"] = "TOTAL";
                dr["Credit"] = decCredit;
                dr["Debit"] = decDebit;
                dtbranch1.Rows.Add(dr.ItemArray);

                dr["SNo"] = "";
                if (decCredit == decDebit)
                {
                    // dr["Heads"] = "";
                    dr["Heads"] = "Balance";
                    dr["Credit"] = "0.00";
                    dr["Debit"] = "0.00";
                }
                else if (decCredit > decDebit)
                {
                    //dr["Heads"] = "";
                    dr["Heads"] = "Balance CR";
                    dr["Credit"] = decCredit - decDebit;
                    dr["Debit"] = "0.00";
                }
                else if (decCredit < decDebit)
                {
                    //dr["Heads"] = "";
                    dr["Heads"] = "Balance DR";
                    dr["Credit"] = "0.00";
                    dr["Debit"] = decDebit - decCredit;
                }
                dtbranch1.Rows.Add(dr.ItemArray);
            }
            return dtbranch1;
        }

        public DataTable BindInvestments(string fromsdate, string todate, string branchid)
        {
            decimal decCredit;
            decimal decDebit;
            string str = @"select t4.Node as Heads,t4.NodeID as NodeId,t3.Node as Narration,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID left Join headstree as t4 on (t3.ParentID=t4.NodeID) where `t1`.`BranchID` = " + branchid + " and `t1`.`RootID` = 2 and t1.ChoosenDate between '2009/03/01' and '" + balayer.indiandateToMysqlDate(todate) + "' group by t4.Node";
            DataTable dt1 = balayer.GetDataTable(str);

            //DataTable dt = new DataTable();
            dtinvest.Columns.Add("SNo");
            dtinvest.Columns.Add("Heads");
            dtinvest.Columns.Add("Narration");
            dtinvest.Columns.Add("Credit", typeof(decimal));
            dtinvest.Columns.Add("Debit", typeof(decimal));
            dtinvest.Columns.Add("NodeId", typeof(Int32));
            DataRow dr = dtinvest.NewRow();
            int iCount = 0;
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["Debit"]) > 0)
                {
                    dr["SNo"] = iCount + 1;
                    dr["Heads"] = dt1.Rows[i]["Heads"];
                    dr["Narration"] = dt1.Rows[i]["Narration"];
                    dr["Credit"] = dt1.Rows[i]["Credit"];
                    dr["Debit"] = dt1.Rows[i]["Debit"];
                    dr["NodeId"] = dt1.Rows[i]["NodeId"];
                    dtinvest.Rows.Add(dr.ItemArray);
                    iCount++;
                }
            }
            List<string> invest = new List<string> { "Bi-Cycles", "Buildings", "Computers", "Electrical Machineries", "Four wheelers", "Furniture & Fittings", "Lands", "Machineries", "Shares held with other Companies", "Two wheelers", "Vechicles" };

            for (int i = 0; i < invest.Count; i++)
            {
                int temp = 0;
                for (int j = 0; j < dtinvest.Rows.Count; j++)
                {
                    if (dtinvest.Rows[j]["Heads"].ToString() == invest[i])
                    {
                        temp = 1;
                    }
                }
                if (temp == 0)
                {
                    dr["SNo"] = "";
                    dr["Narration"] = "";
                    dr["Heads"] = invest[i];
                    dr["Credit"] = "0.00";
                    dr["Debit"] = "0.00";
                    dtinvest.Rows.Add(dr.ItemArray);
                }
            }
            if (dtinvest.Rows.Count > 0)
            {
                decCredit = Convert.ToDecimal(dtinvest.Compute("Sum(Credit)", ""));
                decDebit = Convert.ToDecimal(dtinvest.Compute("Sum(Debit)", ""));
                dr["SNo"] = "";
                dr["Heads"] = "TOTAL";
                dr["Narration"] = "TOTAL";
                dr["Credit"] = decCredit;
                dr["Debit"] = decDebit;
                //     dr["Narration"] = "";
                dtinvest.Rows.Add(dr.ItemArray);

                dr["SNo"] = "";
                if (decCredit == decDebit)
                {
                    dr["Narration"] = "Balance";
                    dr["Heads"] = "Balance";
                    dr["Credit"] = "0.00";
                    dr["Debit"] = "0.00";
                }
                else if (decCredit > decDebit)
                {
                    dr["Narration"] = "Balance CR";
                    dr["Heads"] = "Balance CR";
                    dr["Credit"] = decCredit - decDebit;
                    dr["Debit"] = "0.00";
                }
                else if (decCredit < decDebit)
                {
                    dr["Narration"] = "Balance DR";
                    dr["Heads"] = "Balance DR";
                    dr["Credit"] = "0.00";
                    dr["Debit"] = decDebit - decCredit;
                }
                //    dr["Narration"] = "";
                dtinvest.Rows.Add(dr.ItemArray);



            }

            return dtinvest;
            //  Finalivest = dtinvest.AsEnumerable().OrderBy(c => c.Field<Int32>("NodeId")).CopyToDataTable();
        }

        public DataTable BindBanks(string fromsdate, string todate, string branchid)
        {
            decimal fCredit;
            decimal fDebit;
            decimal nCredit;
            decimal nDebit;
            decimal decCredit;
            decimal decDebit;



            string str = @"select t3.BankName as BankName,  t3.BankLocation as BankLocation,t3.AccountNo as AccountNo, (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join bankdetails as t3 on t1.Head_ID=t3.Head_ID where t3.TypeofBank='Scheduled Banks' and t1.RootID=3 and `t1`.`BranchID` =" + branchid + " and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`";
            DataTable dt1 = new DataTable();
            dt1 = balayer.GetDataTable(str);

            dtBank.Columns.Add("SNo");
            dtBank.Columns.Add("BankName");
            dtBank.Columns.Add("BankLocation");
            dtBank.Columns.Add("AccountNo");
            dtBank.Columns.Add("Credit", typeof(decimal));
            dtBank.Columns.Add("Debit", typeof(decimal));
            dtBank.Columns.Add("flag");
            DataRow dr = dtBank.NewRow();

            dr["SNo"] = "";
            dr["BankName"] = "Scheduled Banks";
            dr["BankLocation"] = "(In albhapetical Order)";
            dr["AccountNo"] = "";
            dr["Credit"] = "0.00";
            dr["Debit"] = "0.00";
            dr["flag"] = "0";
            dtBank.Rows.Add(dr.ItemArray);

            int icount = 0;
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["Debit"]) > 0)
                {
                    dr["SNo"] = icount + 1;
                    dr["BankName"] = dt1.Rows[i]["BankName"];
                    dr["BankLocation"] = dt1.Rows[i]["BankLocation"];
                    dr["AccountNo"] = dt1.Rows[i]["AccountNo"];
                    dr["Credit"] = dt1.Rows[i]["Credit"];
                    dr["Debit"] = dt1.Rows[i]["Debit"];
                    dr["flag"] = "0";
                    dtBank.Rows.Add(dr.ItemArray);
                    icount++;
                }
            }
            if (dtBank.Rows.Count > 0)
            {
                decCredit = Convert.ToDecimal(dtBank.Compute("Sum(Credit)", ""));
                decDebit = Convert.ToDecimal(dtBank.Compute("Sum(Debit)", ""));
            }
            else
            {
                decCredit = 0;
                decDebit = 0;
            }
            dr["SNo"] = "";
            dr["BankName"] = "TOTAL";
            dr["BankLocation"] = "";
            dr["AccountNo"] = "";
            dr["Credit"] = decCredit;
            dr["Debit"] = decDebit;
            dr["flag"] = "0";
            dtBank.Rows.Add(dr.ItemArray);

            dr["SNo"] = "";
            dr["BankName"] = "Fixed Deposit with Banks";
            dr["BankLocation"] = "(In albhapetical Order)";
            dr["AccountNo"] = "";
            dr["Credit"] = "0.00";
            dr["Debit"] = "0.00";
            dr["flag"] = "0";
            dtBank.Rows.Add(dr.ItemArray);

            str = @"select t3.BankName as BankName,  t3.BankLocation as BankLocation,t3.AccountNo as AccountNo, (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join bankdetails as t3 on t1.Head_ID=t3.Head_ID where t3.TypeofBank='Fixed deposits with Banks' and t1.RootID=3 and `t1`.`BranchID` = " + branchid + " and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`";
            dt1 = balayer.GetDataTable(str);
            icount = 0;
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["Debit"]) > 0)
                {
                    dr["SNo"] = icount + 1;
                    dr["BankName"] = dt1.Rows[i]["BankName"];
                    dr["BankLocation"] = dt1.Rows[i]["BankLocation"];
                    dr["AccountNo"] = dt1.Rows[i]["AccountNo"];
                    dr["Credit"] = dt1.Rows[i]["Credit"];
                    dr["Debit"] = dt1.Rows[i]["Debit"];
                    dr["flag"] = "1";
                    dtBank.Rows.Add(dr.ItemArray);
                    icount++;
                }
            }

            fCredit = dtBank.AsEnumerable()
                        .Where(r => (String)r["SNo"] != "" && (String)r["flag"] == "1")
                        .Sum(r => (decimal)r["Credit"]);
            fDebit = dtBank.AsEnumerable()
                        .Where(r => (String)r["SNo"] != "" && (String)r["flag"] == "1")
                        .Sum(r => (decimal)r["Debit"]);

            dr["SNo"] = "";
            dr["BankName"] = "TOTAL";
            dr["BankLocation"] = "";
            dr["AccountNo"] = "";
            dr["Credit"] = fCredit;
            dr["Debit"] = fDebit;
            dr["flag"] = "1";
            dtBank.Rows.Add(dr.ItemArray);

            nCredit = dtBank.AsEnumerable()
                        .Where(r => (String)r["SNo"] != "")
                        .Sum(r => (decimal)r["Credit"]);
            nDebit = dtBank.AsEnumerable()
                        .Where(r => (String)r["SNo"] != "")
                        .Sum(r => (decimal)r["Debit"]);


            dr["SNo"] = "";
            if (nCredit == nDebit)
            {
                dr["BankName"] = "Balance";
                dr["Credit"] = "0.00";
                dr["Debit"] = "0.00";
            }
            else if (nCredit > nDebit)
            {
                dr["BankName"] = "Balance CR";
                dr["Credit"] = nCredit - nDebit;
                dr["Debit"] = "0.00";
            }
            else if (nCredit < nDebit)
            {
                dr["BankName"] = "Balance DR";
                dr["Credit"] = "0.00";
                dr["Debit"] = nDebit - nCredit;
            }
            dr["AccountNo"] = "";
            dr["flag"] = "1";
            dtBank.Rows.Add(dr.ItemArray);
            return dtBank;
        }

        public DataTable BindForeman(string fromsdate, string todate, string branchid)
        {
            int CSCCallId = 0, CSCPrizedId = 0;
            double CSCDebitValue = 0;
            double CSCCreditValue = 0;
            decimal decPrizeMoney1 = 0;
            decimal decCallAmount1 = 0;
            decimal decBalancePayable1 = 0;
            decimal decCallAmountPaid1 = 0;
            string ssss;
            string dddd;
            decimal decPrizeMoney2 = 0;
            decimal decCallAmount2 = 0;
            decimal decBalancePayable2 = 0;
            decimal decCallAmountPaid2 = 0;
            //copied from bookletExport
            decimal ForemanCallSumAmount_Cr = 0;
            decimal ForemanCallSumAmount_Db = 0;
            decimal ForemanPrizedSumAmount_Cr = 0;
            decimal ForemanPrizedSumAmount_Db = 0;
            int ForemanCallId = 0, ForemanPrizedId = 0;
            double CallCSCDebitValue = 0, CallCSCCreditValue = 0;
            double PrizedCSCDebitValue = 0;
            double PrizedCSCCreditValue = 0;
            //End
            DataTable dt = balayer.GetDataTable("select * from groupmaster where BranchID=" + branchid + "");

            DataTable dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            dtB.Columns.Add("ChitValue");
            dtB.Columns.Add("NoofMembers");
            if (dt.Rows.Count > 0)
            {
                DataRow drB = dtB.NewRow();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dt.Rows[i]["Head_Id"]);
                    if (dtTerminated.Rows.Count > 0)
                    {
                        drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                        drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                        drB["ChitValue"] = dt.Rows[i]["ChitValue"];
                        drB["NoofMembers"] = dt.Rows[i]["NoofMembers"];
                        dtB.Rows.Add(drB.ItemArray);
                    }
                }

                //DataTable Foreman = new DataTable();
                Foreman.Columns.Add("SNo");
                Foreman.Columns.Add("ChitNumber", typeof(string));
                Foreman.Columns.Add("PrizeMoney", typeof(decimal));
                Foreman.Columns.Add("CallAmount", typeof(decimal));
                Foreman.Columns.Add("BalancePayable", typeof(decimal));
                Foreman.Columns.Add("CallAmountPaid", typeof(decimal));
                Foreman.Columns.Add("NoofInstalmentsPaid");//
                DataRow dr = Foreman.NewRow();
                dr["SNo"] = "I";
                dr["ChitNumber"] = "Foreman Chits";
                Foreman.Rows.Add(dr.ItemArray);
                int iCount = 0;
                DataTable dtforeman = new DataTable();
                int Foremancallid = 0;
                string foremanToken = "";
                //copied from BookletExport
                string query = "";
                //
                DataTable foremanpramount = new DataTable();

                for (int i = 0; i < dtB.Rows.Count; i++)
                {

                    int iSum = Convert.ToInt32(balayer.GetSingleValue("SELECT count(*) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]));

                    decimal iCreditDebitDiff = Convert.ToDecimal(balayer.GetSingleValue("Select COALESCE(sum(case when Voucher_Type='C' then Amount else 0.00 end )-sum(case when Voucher_Type='D' then Amount else 0.00 end ),0) From voucher Where Head_Id in (Select nodeid from headstree where parentid = " + dtB.Rows[i]["Head_Id"] + ")"));

                    dtforeman = balayer.GetDataTable("select NodeID,Node from headstree where ParentID = 1054 and Node in (select GrpMemberID from membertogroupmaster mg join membermaster mm on (mm.MemberIDNew=mg.MemberID) where mm.TypeOfMember = 'Foreman' and mg.branchid= " + branchid + " and mg.GroupID=" + dtB.Rows[i]["Head_Id"] + ")");
                    if (dtforeman.Rows.Count > 0)
                    {
                        if (Convert.ToString(dtforeman.Rows[0]["Node"]) == "Null")
                            foremanToken = Convert.ToString(dtforeman.Rows[0]["Node"]).Split('/')[1];


                        foremanpramount = balayer.GetDataTable("select (select NodeID FROM svcf.headstree where Node='" + Convert.ToString(dtforeman.Rows[0]["Node"]) + "' and ParentID=1052 ) as Prmemberid,(select if (Amount > 0,Amount,0) from voucher where Head_Id = Prmemberid and Trans_Type=2  and Voucher_Type ='D' and ChoosenDate <='" + balayer.indiandateToMysqlDate(todate) + "') as Amount");


                        if ((iSum != 0 && Convert.ToString(foremanpramount.Rows[0]["Amount"]) == "" && dtforeman.Rows.Count > 0) || (iCreditDebitDiff != 0 && Convert.ToString(foremanpramount.Rows[0]["Amount"]) == "" && foremanToken == Convert.ToString(dt.Rows[i]["NoofMembers"])))
                        {
                            //code copied from BookletExport-start
                            query = "select NodeID from headstree where parentid = 1054 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ");";
                            ForemanCallId = balayer.GetScalarDataInt(query);

                            query = "select NodeID from headstree where parentid = 1052 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ");";
                            ForemanPrizedId = balayer.GetScalarDataInt(query);

                            //Foreman Call Credit Sum
                            query = "select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where Head_Id=" + ForemanCallId + " and voucher_type='C' and ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "';";
                            ForemanCallSumAmount_Cr = balayer.GetScalarDecimal(query);

                            //Foreman Call Debit Sum
                            query = "select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where Head_Id=" + ForemanCallId + " and voucher_type='D' and ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "';";
                            ForemanCallSumAmount_Db = balayer.GetScalarDecimal(query);

                            //Foreman Prized Credit Sum
                            query = "select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where Head_Id=" + ForemanPrizedId + " and voucher_type='C' and ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "';";
                            ForemanPrizedSumAmount_Cr = balayer.GetScalarDecimal(query);

                            //Foreman Prized Debit Sum
                            query = "select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where Head_Id=" + ForemanPrizedId + " and voucher_type='D' and ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "';";
                            ForemanPrizedSumAmount_Db = balayer.GetScalarDecimal(query);


                            ////1052 Foreman Chit(prized)
                            decimal dtPrizedAmount = Convert.ToDecimal(balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where head_id in (select NodeID from headstree where parentid = 1052 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ")) and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'"));
                            ////1054 Foreman chit(call)
                            decimal dtCallAmount = Convert.ToDecimal(balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where head_id in (select NodeID from headstree where parentid = 1054 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ")) and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'"));

                            //decimal subprizedncall = dtPrizedAmount - dtCallAmount;

                            //if (subprizedncall != 0)
                            //{
                            if ((ForemanCallSumAmount_Cr - ForemanCallSumAmount_Db) != 0 && (ForemanPrizedSumAmount_Cr - ForemanPrizedSumAmount_Db) != 0)
                            {
                                //End
                                /*
                                decimal dtPrizedAmount = Convert.ToDecimal(balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where head_id in (select NodeID from headstree where parentid = 1052 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ")) and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'"));
                                decimal dtCallAmount = Convert.ToDecimal(balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from voucher where head_id in (select NodeID from headstree where parentid = 1054 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dtB.Rows[i]["Head_Id"] + ")) and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'"));

                                decimal subprizedncall = dtPrizedAmount - dtCallAmount;

                                if (dtPrizedAmount - dtCallAmount != 0)
                                {*/
                                dr["SNo"] = iCount + 1;

                                dr["ChitNumber"] = dtB.Rows[i]["GROUPNO"];

                                decimal dcPrizedAmount = 0;

                                if (dtPrizedAmount != 0)

                                    dcPrizedAmount = dtPrizedAmount;

                                dr["PrizeMoney"] = dcPrizedAmount;

                                Foremancallid = Convert.ToInt32(dtforeman.Rows[0][0]);

                                dr["CallAmount"] = balayer.GetScalarDataDbl("select sum(amount) from voucher where BranchId=" + branchid + " and Head_Id=" + Foremancallid + " and Voucher_Type='D' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'");


                                dr["BalancePayable"] = Convert.ToDecimal(dr["PrizeMoney"]) - Convert.ToDecimal(dr["CallAmount"]);
                                dr["CallAmountPaid"] = 0.00;
                                dr["NoofInstalmentsPaid"] = iSum;
                                Foreman.Rows.Add(dr.ItemArray);
                                iCount++;
                            }
                        }
                    }
                }
                DataRow dr2 = Foreman.NewRow();
                decPrizeMoney1 = Convert.ToDecimal(Foreman.Compute("sum(PrizeMoney)", ""));
                decCallAmount1 = Convert.ToDecimal(Foreman.Compute("sum(CallAmount)", ""));
                decBalancePayable1 = Convert.ToDecimal(Foreman.Compute("sum(BalancePayable)", ""));
                decCallAmountPaid1 = Convert.ToDecimal(Foreman.Compute("sum(CallAmountPaid)", ""));

                dr2["PrizeMoney"] = decPrizeMoney1;
                dr2["CallAmount"] = decCallAmount1;
                dr2["BalancePayable"] = decBalancePayable1;
                dr2["CallAmountPaid"] = 0.00;
                Foreman.Rows.Add(dr2.ItemArray);



                string sA = balayer.GetSingleValue("set group_concat_max_len=30000; " +
                   "SELECT cast(group_concat( GroupmemberID) as char) FROM svcf.removedmaster where (fromdate<='" + balayer.indiandateToMysqlDate(todate) + "')");
                DataTable dt1 = balayer.GetDataTable("SELECT * FROM svcf.membertogroupmaster where  Head_Id in (" + sA + ") and BranchID=" + branchid + "");

                iCount = 0;
                decimal sumAmnt = 0;
                string sumsingle = "";
                string sumcsc = "";
                string sumcsccl = "";

                string sumauct = "";
                DataRow dr1 = Foreman.NewRow();
                dr1["SNo"] = "II";
                dr1["ChitNumber"] = "CSC Chits";
                Foreman.Rows.Add(dr1.ItemArray);
                string qry = "";
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    string removemastergro = balayer.GetSingleValue(" SELECT * FROM svcf.removedmaster where (todate<='" + balayer.indiandateToMysqlDate(todate) + "') and GroupmemberID='" + dt1.Rows[i]["Head_Id"] + "'");
                    if (removemastergro == "")
                    {
                        int sum = Convert.ToInt32(balayer.GetSingleValue("SELECT NoofMembers FROM svcf.groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]));
                        int iSum = Convert.ToInt32(balayer.GetSingleValue("SELECT count(*) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                        ////Foreman Prized Id
                        qry = "select NodeID from headstree where parentid = 49 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dt1.Rows[i]["GroupID"] + ")";
                        CSCPrizedId = balayer.GetScalarDataInt(qry);

                        //copied from bookletExport- start
                        qry = "select NodeID from headstree where parentid = 50 and node in (select GrpMemberID from membertogroupmaster where GroupID=" + dt1.Rows[i]["GroupID"] + " and GrpMemberID='" + dt1.Rows[i]["GrpMemberID"] + "')";
                        CSCCallId = balayer.GetScalarDataInt(qry);
                        //end
                        /*qry = "select sum(Amount) from voucher where Head_Id=" + CSCPrizedId + " and Voucher_Type='C' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'";
                        CSCCreditValue = balayer.GetScalarDataDbl(qry);

                        qry = "select sum(Amount) from voucher where Head_Id=" + CSCPrizedId + " and Voucher_Type='D' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'";
                        CSCDebitValue = balayer.GetScalarDataDbl(qry);*/

                        //copied from bookletExport- start
                        qry = "select sum(Amount) from voucher where Head_Id=" + CSCPrizedId + " and Voucher_Type='C' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'";
                        PrizedCSCCreditValue = balayer.GetScalarDataDbl(qry);

                        qry = "select sum(Amount) from voucher where Head_Id=" + CSCPrizedId + " and Voucher_Type='D' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'";
                        PrizedCSCDebitValue = balayer.GetScalarDataDbl(qry);

                        qry = "select sum(Amount) from voucher where Head_Id=" + CSCCallId + " and Voucher_Type='C' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'";
                        CallCSCCreditValue = balayer.GetScalarDataDbl(qry);

                        qry = "select sum(Amount) from voucher where Head_Id=" + CSCCallId + " and Voucher_Type='D' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'";
                        CallCSCDebitValue = balayer.GetScalarDataDbl(qry);
                        //end

                        if (sum == iSum)
                        {
                            //Sum of prized id(c) - sum of prized id(d) = 0
                            //if ((CSCCreditValue - CSCDebitValue) != 0)
                            if ((PrizedCSCCreditValue - PrizedCSCDebitValue) != 0 && (CallCSCCreditValue - CallCSCDebitValue) != 0)
                            {
                                dr["SNo"] = iCount + 1;
                                dr["ChitNumber"] = dt1.Rows[i]["GrpMemberID"];
                                DataTable dtG = new DataTable();
                                dtG = balayer.GetDataTable("select * from groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]);
                                dddd = balayer.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber=" + dt1.Rows[i]["Head_Id"] + " and BranchID=" + branchid + " and PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "'");

                                ssss = balayer.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and PrizedMemberID=" + dt1.Rows[i]["Head_Id"]);



                                if (!(string.IsNullOrEmpty(dddd)))
                                {
                                    sumcsc = balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id in (select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'");
                                    sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')as 'Amount'");

                                }


                                if (string.IsNullOrEmpty(dddd))
                                {
                                    dr["PrizeMoney"] = 0.00;
                                    dr["CallAmount"] = 0.00;
                                    dr["BalancePayable"] = 0.00;
                                    dr["CallAmountPaid"] = Convert.ToDecimal(balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                                    dr["NoofInstalmentsPaid"] = iSum;
                                }
                                else
                                {
                                    sumauct = balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dt1.Rows[i]["GroupID"]);

                                    //if (!(string.IsNullOrEmpty(sumcsc)))
                                    if (string.IsNullOrEmpty(sumcsc))
                                    {
                                        dr["PrizeMoney"] = Convert.ToDecimal(ssss) + Convert.ToDecimal(sumcsc);
                                    }
                                    else
                                    {
                                        dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                                    }

                                    if (!(string.IsNullOrEmpty(sumcsccl)))
                                    {
                                        dr["CallAmount"] = Convert.ToDecimal(sumcsccl);
                                    }
                                    else
                                    {
                                        dr["CallAmount"] = 0.00;
                                        sumcsccl = null;
                                    }

                                    sumsingle = balayer.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'");

                                    if (sumsingle != "")
                                    {
                                        sumAmnt = Convert.ToDecimal(sumsingle);
                                    }

                                    if (!(string.IsNullOrEmpty(sumcsc)))
                                    {
                                        dr["BalancePayable"] = (Convert.ToDecimal(sumcsc)) - (Convert.ToDecimal(sumcsccl));
                                    }
                                    else if (!(string.IsNullOrEmpty(sumcsccl)))
                                    {
                                        dr["BalancePayable"] = Convert.ToDecimal(sumcsc);
                                    }
                                    else
                                    {
                                        dr["BalancePayable"] = Convert.ToDecimal(sumcsc);
                                    }

                                    dr["CallAmountPaid"] = 0.00;
                                    dr["NoofInstalmentsPaid"] = iSum;
                                }

                                Foreman.Rows.Add(dr.ItemArray);
                                iCount++;
                            }
                            else
                            {
                            }

                        }
                        else if (sum != iSum)
                        {
                            dr["SNo"] = iCount + 1;
                            dr["ChitNumber"] = dt1.Rows[i]["GrpMemberID"];

                            DataTable dtG = new DataTable();

                            dtG = balayer.GetDataTable("select * from groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]);
                            dddd = balayer.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber=" + dt1.Rows[i]["Head_Id"] + " and BranchID=" + branchid + " and PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "'");

                            ssss = balayer.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and PrizedMemberID=" + dt1.Rows[i]["Head_Id"]);

                            if (!(string.IsNullOrEmpty(dddd)))
                            {
                                sumcsc = balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id in (select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'");
                                sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')as 'Amount'");
                            }


                            if (string.IsNullOrEmpty(dddd))
                            {
                                dr["PrizeMoney"] = 0.00;
                                dr["CallAmount"] = 0.00;
                                dr["BalancePayable"] = 0.00;
                                //dr["CallAmountPaid"] = Convert.ToDecimal(balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                                dr["CallAmountPaid"] = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')as 'Amount'");
                                dr["NoofInstalmentsPaid"] = iSum;
                            }
                            else
                            {
                                sumauct = balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dt1.Rows[i]["GroupID"]);

                                if ((string.IsNullOrEmpty(sumcsc)))
                                {
                                    dr["PrizeMoney"] = Convert.ToDecimal(ssss) + Convert.ToDecimal(sumcsc);
                                }
                                else
                                {
                                    dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                                }

                                if (!(string.IsNullOrEmpty(sumcsccl)))
                                {
                                    dr["CallAmount"] = Convert.ToDecimal(sumcsccl);
                                }
                                else
                                {
                                    dr["CallAmount"] = 0.00;
                                    sumcsccl = null;
                                }

                                sumsingle = balayer.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'");

                                if (sumsingle != "")
                                {
                                    sumAmnt = Convert.ToDecimal(sumsingle);
                                }

                                if (!(string.IsNullOrEmpty(sumcsc)))
                                {
                                    if (Convert.ToDecimal(sumcsc) > Convert.ToDecimal(sumcsccl))
                                    {
                                        dr["BalancePayable"] = (Convert.ToDecimal(sumcsc)) - (Convert.ToDecimal(sumcsccl));
                                    }
                                    else
                                    {
                                        dr["BalancePayable"] = (Convert.ToDecimal(sumcsccl)) - (Convert.ToDecimal(sumcsc));
                                    }

                                }
                                else if (!(string.IsNullOrEmpty(sumcsccl)))
                                {
                                    dr["BalancePayable"] = Convert.ToDecimal(sumcsc) - Convert.ToDecimal(sumcsccl);
                                }
                                else
                                {
                                    dr["BalancePayable"] = Convert.ToDecimal(sumcsc);
                                }

                                dr["CallAmountPaid"] = 0.00;
                                dr["NoofInstalmentsPaid"] = iSum;
                            }

                            Foreman.Rows.Add(dr.ItemArray);
                            iCount++;
                        }
                        else
                        {
                            DataTable st = balayer.GetDataTable("SELECT insertkey_from_bin(DualTransactionKey) FROM svcf.voucher where Head_id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='D' and ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "'");
                            for (int k = 0; k < st.Rows.Count; k++)
                            {
                                DataTable sdsd = balayer.GetDataTable("select * from voucher where Voucher_Type='C' and Head_Id=00069");
                                if (sdsd.Rows.Count <= 0)
                                {
                                    dr["SNo"] = iCount + 1;
                                    dr["ChitNumber"] = dt1.Rows[i]["GrpMemberID"];
                                    DataTable dtG = balayer.GetDataTable("select * from groupmaster where Head_Id=" + dt1.Rows[i]["GroupID"]);

                                    string dddd1 = balayer.GetSingleValue("SELECT cast(group_concat(TokenNumber) as char) FROM svcf.trans_payment where TokenNumber=" + dt1.Rows[i]["Head_Id"] + " and BranchID=" + branchid + " and PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "'");

                                    string ssss1 = balayer.GetSingleValue("SELECT PrizedAmount FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and PrizedMemberID=" + dt1.Rows[i]["Head_Id"]);


                                    if (!(string.IsNullOrEmpty(dddd1)))
                                    {
                                        sumcsc = balayer.GetSingleValue("select if(sum(amount)>0,sum(amount),0) as 'Amount' from svcf.voucher where Head_Id in (select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dddd1 + " ) and Voucher_Type='C' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'");
                                        sumcsccl = balayer.GetSingleValue("select (select if(sum(amount)>0,sum(amount),0) from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd1 + " ) and Voucher_Type='D' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')-(select if(sum(amount)>0,sum(amount),0)  from svcf.voucher where Head_Id in (select foremansubstitutedchitcall from svcf.removedmaster where GroupMemberID=" + dddd1 + " ) and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "')as 'Amount'");
                                    }

                                    if (string.IsNullOrEmpty(dddd1))
                                    {
                                        sumcsc = balayer.GetSingleValue("select sum(amount) from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + ") and Voucher_Type='C' and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'");

                                        dr["PrizeMoney"] = 0.00;
                                        dr["CallAmount"] = 0.00;
                                        dr["BalancePayable"] = 0.00;
                                        dr["CallAmountPaid"] = Convert.ToDecimal(balayer.GetSingleValue("SELECT sum(CurrentDueAmount) FROM svcf.auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dt1.Rows[i]["GroupID"]));
                                        dr["NoofInstalmentsPaid"] = iSum;
                                    }
                                    else
                                    {
                                        if ((string.IsNullOrEmpty(sumcsc)))
                                        {
                                            dr["PrizeMoney"] = Convert.ToDecimal(sumcsc);
                                        }
                                        else
                                        {
                                            dr["PrizeMoney"] = Convert.ToDecimal(ssss1);
                                        }
                                        dr["CallAmount"] = Convert.ToDecimal(sumcsccl);

                                        sumsingle = balayer.GetSingleValue("SELECT sum(Amount) FROM svcf.voucher where Head_Id=" + dt1.Rows[i]["Head_Id"] + " and Voucher_Type='C' and Trans_Type=1 and Other_Trans_Type=0 and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'");
                                        if (sumsingle != "")
                                        {
                                            sumcsc = balayer.GetSingleValue("select sum(amount) from svcf.voucher where Head_Id=(select foremansubstitutedchitprized from svcf.removedmaster where GroupMemberID=" + dt1.Rows[i]["Head_Id"] + ") and Voucher_Type='C' and ChoosenDate <= '" + balayer.indiandateToMysqlDate(todate) + "'");
                                            sumAmnt = Convert.ToDecimal(sumsingle) + Convert.ToDecimal(sumcsc);
                                        }
                                        if (Convert.ToDecimal(sumcsc) > Convert.ToDecimal(sumcsccl))
                                        {
                                            dr["BalancePayable"] = (Convert.ToDecimal(sumcsc)) - (Convert.ToDecimal(sumcsccl));
                                        }
                                        else
                                        {
                                            dr["BalancePayable"] = (Convert.ToDecimal(sumcsccl)) - (Convert.ToDecimal(sumcsc));
                                        }


                                        dr["CallAmountPaid"] = 0.00;
                                        dr["NoofInstalmentsPaid"] = iSum;
                                    }
                                    Foreman.Rows.Add(dr.ItemArray);
                                    iCount++;
                                    break;
                                }
                            }
                        }
                    }
                }
                decPrizeMoney2 = Convert.ToDecimal(Foreman.Compute("sum(PrizeMoney)", ""));
                decCallAmount2 = Convert.ToDecimal(Foreman.Compute("sum(CallAmount)", ""));
                decBalancePayable2 = Convert.ToDecimal(Foreman.Compute("sum(BalancePayable)", ""));
                decCallAmountPaid2 = Convert.ToDecimal(Foreman.Compute("sum(CallAmountPaid)", ""));

                dr2["PrizeMoney"] = decPrizeMoney2 - decPrizeMoney1 - decPrizeMoney1;
                dr2["CallAmount"] = decCallAmount2 - decCallAmount1 - decCallAmount1;
                dr2["BalancePayable"] = decBalancePayable2 - decBalancePayable1 - decBalancePayable1;
                dr2["CallAmountPaid"] = decCallAmountPaid2 - 0.00m;
                Foreman.Rows.Add(dr2.ItemArray);

                dr1["SNo"] = "";
                dr1["ChitNumber"] = "TOTAL";
                dr1["PrizeMoney"] = decPrizeMoney2 - decPrizeMoney1;
                dr1["CallAmount"] = decCallAmount2 - decCallAmount1;
                dr1["BalancePayable"] = decBalancePayable2 - decBalancePayable1;
                dr1["CallAmountPaid"] = decCallAmountPaid2;
                Foreman.Rows.Add(dr1.ItemArray);

                DataRow dr3 = Foreman.NewRow();

                if ((decBalancePayable2 - decBalancePayable1) > (decCallAmountPaid2))
                {
                    dr3["ChitNumber"] = "Net Balance CR";
                    dr3["BalancePayable"] = (decBalancePayable2 - decBalancePayable1) - (decCallAmountPaid2);
                }
                else
                {
                    dr3["ChitNumber"] = "Net Balance DR";
                    dr3["CallAmountPaid"] = (decCallAmountPaid2) - (decBalancePayable2 - decBalancePayable1);
                }
                Foreman.Rows.Add(dr3.ItemArray);
            }
            return Foreman;
        }

        public DataTable BindDecree(string fromsdate, string todate, string branchid)
        {

            DateTime dtTo = DateTime.ParseExact(todate, @"d/M/yyyy",
    System.Globalization.CultureInfo.InvariantCulture).AddMonths(1);

            DataTable dtDistinct = balayer.GetDataTable("SELECT v1.TransactionKey,ht2.NodeID, ht2.Node as Head,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Bal.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Bal.Debit`,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Court.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,52%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Court.Debit`,(case when (sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )>sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )) then sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )-sum(case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%')  then v1.Amount else 0.00 end ) else 0.00 end ) as `Advocate.Credit`,(case when (sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))>sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))) then sum((case when (v1.Voucher_Type='D' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end ))-sum((case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,4638%') then v1.Amount else 0.00 end )) else 0.00 end ) as `Advocate.Debit`  FROM `voucher` as v1 join headstree as ht2 on v1.Head_Id=ht2.NodeID where v1.RootID=7 and v1.BranchID=" + branchid + " and v1.ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' group by ht2.NodeID order by ht2.NodeID asc");

            DataRow dr = Decree.NewRow();
            Decree.Columns.Add("SlNo");
            Decree.Columns.Add("CC No");
            Decree.Columns.Add("EP No./OS No./ARC No./ARB No.");
            Decree.Columns.Add("ChitName");
            Decree.Columns.Add("Name");
            Decree.Columns.Add("Totalamount", typeof(decimal));
            Decree.Columns.Add("Date");
            Decree.Columns.Add("AmountReceived", typeof(decimal));
            Decree.Columns.Add("CreditDECREE", typeof(decimal));
            Decree.Columns.Add("DebitDECREE", typeof(decimal));
            Decree.Columns.Add("CreditCOST", typeof(decimal));
            Decree.Columns.Add("DebitCOST", typeof(decimal));
            Decree.Columns.Add("CreditAdvocate", typeof(decimal));
            Decree.Columns.Add("DebitAdvocate", typeof(decimal));
            Decree.Columns.Add("Description");

            int iCount = 0;
            for (int i = 0; i < dtDistinct.Rows.Count; i++)
            {

                if (Convert.ToDecimal(dtDistinct.Rows[i]["Bal.Credit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Bal.Debit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Court.Credit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Court.Debit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Advocate.Credit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Advocate.Debit"]) > 0.00M)
                {
                    dr["SlNo"] = iCount + 1;
                    dr["CC No"] = balayer.GetSingleValue("SELECT CC FROM svcf.transcourt where TransactionKey=" + dtDistinct.Rows[i]["TransactionKey"]);
                    dr["EP No./OS No./ARC No./ARB No."] = balayer.GetSingleValue("SELECT Number FROM svcf.transcourt where TransactionKey=" + dtDistinct.Rows[i]["TransactionKey"]);
                    dr["ChitName"] = balayer.GetSingleValue("SELECT ChitName FROM svcf.chitheads where HeadId=" + dtDistinct.Rows[i]["NodeID"]);
                    dr["Name"] = balayer.GetSingleValue("SELECT MemberName FROM svcf.chitheads where HeadId=" + dtDistinct.Rows[i]["NodeID"]);

                    string amtRec = Convert.ToString(balayer.GetSingleValue("select t1.Amount as `Credit` from voucher as t1 left Join headstree as t3 on t1.Head_ID=t3.NodeID left join membermaster as t4 on t4.MemberIDNew=t1.MemberID left join headstree as t8 on (t1.ChitGroupID=t8.NodeID) left join headstree as t9 on (t9.NodeID=t1.Head_Id) left join headstree as t10 on (t10.NodeID=t9.ParentID)where t1.Voucher_Type='C' and `t1`.`BranchID` =" + branchid + "  and `t1`.`RootID` = 7  and t1.Amount<>0 and t1.ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and t1.IsDeleted=0 and t1.Head_Id=" + dtDistinct.Rows[i]["NodeID"] + " order by t1.ChoosenDate desc Limit 1"));
                    if (amtRec != "")
                    {

                        //dr["AmountReceived"] = Convert.ToDecimal(balayer.GetSingleValue("select (case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )as `Credit` from voucher as t1 left Join headstree as t3 on t1.Head_ID=t3.NodeID left join membermaster as t4 on t4.MemberIDNew=t1.MemberID left join headstree as t8 on (t1.ChitGroupID=t8.NodeID) left join headstree as t9 on (t9.NodeID=t1.Head_Id) left join headstree as t10 on (t10.NodeID=t9.ParentID)where  `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 7  and t1.Amount<>0 and t1.ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and t1.IsDeleted=0 and t1.Head_Id=" + dtDistinct.Rows[i]["NodeID"] + " order by t1.ChoosenDate desc Limit 1"));
                        dr["AmountReceived"] = Convert.ToDecimal(balayer.GetSingleValue("select t1.Amount as `Credit` from voucher as t1 left Join headstree as t3 on t1.Head_ID=t3.NodeID left join membermaster as t4 on t4.MemberIDNew=t1.MemberID left join headstree as t8 on (t1.ChitGroupID=t8.NodeID) left join headstree as t9 on (t9.NodeID=t1.Head_Id) left join headstree as t10 on (t10.NodeID=t9.ParentID)where t1.Voucher_Type='C' and `t1`.`BranchID` =" + branchid + "  and `t1`.`RootID` = 7  and t1.Amount<>0 and t1.ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and t1.IsDeleted=0 and t1.Head_Id=" + dtDistinct.Rows[i]["NodeID"] + " order by t1.ChoosenDate desc Limit 1"));
                        dr["Totalamount"] = Convert.ToDecimal(balayer.GetSingleValue("select(sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end))  as `Cr.total`FROM `voucher` as v1  join headstree as ht2 on v1.Head_Id=ht2.NodeID where v1.RootID=7 and v1.BranchID=" + branchid + "  and ht2.NodeID=" + dtDistinct.Rows[i]["NodeID"] + " and v1.ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "'"));
                    }
                    else
                    {
                        dr["AmountReceived"] = "0.00";
                        dr["Totalamount"] = "0.00";
                    }
                    string date = balayer.GetSingleValue("select DATE_FORMAT( t1.`ChoosenDate`, '%d/%m/%Y') as `Date`from voucher as t1 left Join headstree as t3 on t1.Head_ID=t3.NodeID left join membermaster as t4 on t4.MemberIDNew=t1.MemberID left join headstree as t8 on (t1.ChitGroupID=t8.NodeID) left join headstree as t9 on (t9.NodeID=t1.Head_Id) left join headstree as t10 on (t10.NodeID=t9.ParentID)where t1.Voucher_Type='C' and `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 7  and t1.Amount<>0 and t1.ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and t1.IsDeleted=0 and t1.Head_Id=" + dtDistinct.Rows[i]["NodeID"] + " order by t1.ChoosenDate desc Limit 1");
                    if (date != "")
                    {
                        dr["Date"] = balayer.GetSingleValue("select DATE_FORMAT( t1.`ChoosenDate`, '%d/%m/%Y') as `Date`from voucher as t1 left Join headstree as t3 on t1.Head_ID=t3.NodeID left join membermaster as t4 on t4.MemberIDNew=t1.MemberID left join headstree as t8 on (t1.ChitGroupID=t8.NodeID) left join headstree as t9 on (t9.NodeID=t1.Head_Id) left join headstree as t10 on (t10.NodeID=t9.ParentID)where t1.Voucher_Type='C' and `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 7  and t1.Amount<>0 and t1.ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and t1.IsDeleted=0 and t1.Head_Id=" + dtDistinct.Rows[i]["NodeID"] + " order by t1.ChoosenDate desc Limit 1");
                        dr["Totalamount"] = Convert.ToDecimal(balayer.GetSingleValue("select(sum(case when (v1.Voucher_Type='C' and ht2.TreeHint like '7,51%') then v1.Amount else 0.00 end))  as `Cr.total`FROM `voucher` as v1  join headstree as ht2 on v1.Head_Id=ht2.NodeID where v1.RootID=7 and v1.BranchID=" + branchid + "  and ht2.NodeID=" + dtDistinct.Rows[i]["NodeID"] + " and v1.ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "'"));
                        // dr["Totalamount"] = Convert.ToDecimal(dtDistinct.Rows[i]["Cr.total"]);
                    }
                    else
                    {
                        dr["Date"] = "";
                        dr["Totalamount"] = "0.00";
                    }


                    dr["CreditDECREE"] = dtDistinct.Rows[i]["Bal.Credit"];
                    dr["DebitDECREE"] = dtDistinct.Rows[i]["Bal.Debit"];
                    dr["CreditCOST"] = dtDistinct.Rows[i]["Court.Credit"];
                    dr["DebitCOST"] = dtDistinct.Rows[i]["Court.Debit"];
                    //Advocate
                    dr["CreditAdvocate"] = dtDistinct.Rows[i]["Advocate.Credit"];
                    dr["DebitAdvocate"] = dtDistinct.Rows[i]["Advocate.Debit"];
                    dr["Description"] = "";
                    Decree.Rows.Add(dr.ItemArray);
                    iCount++;
                }
            }
            //   dtBind.Rows.Add(dr.ItemArray);
            //   }

            if (Decree.Rows.Count > 0)
            {
                decimal Deecreeamount = Convert.ToDecimal(Decree.Compute("sum(AmountReceived)", ""));
                decimal Deecreetotal = Convert.ToDecimal(Decree.Compute("sum(Totalamount)", ""));
                decimal DeecreeCR = Convert.ToDecimal(Decree.Compute("sum(CreditDECREE)", ""));
                decimal DeecreeDR = Convert.ToDecimal(Decree.Compute("sum(DebitDECREE)", ""));
                decimal CostCR = Convert.ToDecimal(Decree.Compute("sum(CreditCOST)", ""));
                decimal CostDR = Convert.ToDecimal(Decree.Compute("sum(DebitCOST)", ""));
                decimal AdvocateCR = Convert.ToDecimal(Decree.Compute("sum(CreditAdvocate)", ""));
                decimal AdvocateDR = Convert.ToDecimal(Decree.Compute("sum(DebitAdvocate)", ""));

                DataRow rowTotal = Decree.NewRow();
                rowTotal["Name"] = "Total";
                rowTotal["AmountReceived"] = Deecreeamount;
                rowTotal["Totalamount"] = Deecreetotal;
                rowTotal["CreditDECREE"] = DeecreeCR;
                rowTotal["DebitDECREE"] = DeecreeDR;
                rowTotal["CreditCOST"] = CostCR;
                rowTotal["DebitCOST"] = CostDR;
                rowTotal["CreditAdvocate"] = AdvocateCR;
                rowTotal["DebitAdvocate"] = AdvocateDR;
                Decree.Rows.Add(rowTotal.ItemArray);

                DataRow rowNet = Decree.NewRow();
                rowNet["Name"] = "Net Balance";
                if ((DeecreeCR + CostCR + AdvocateCR) >= (DeecreeDR + CostDR + AdvocateDR))
                {
                    decimal net = (DeecreeCR + CostCR + AdvocateCR) - (DeecreeDR + CostDR + AdvocateDR);
                    rowNet["CreditDECREE"] = net;
                }
                else
                {
                    decimal net = (DeecreeDR + CostDR + AdvocateDR) - (DeecreeCR + CostCR + AdvocateCR);
                    rowNet["DebitDECREE"] = net;
                }
                Decree.Rows.Add(rowNet.ItemArray);
            }
            return Decree;
        }

        public DataTable BindLoans(string fromsdate, string todate, string branchid)
        {
            decimal decCredit = 0;
            decimal decDebit = 0;

            string str = @"select t1.ChoosenDate,t3.Node as Name,t3.NodeID,t3.ParentID  , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 8 and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID`";
            DataTable dt1 = balayer.GetDataTable(str);
            //DataTable dt = new DataTable();
            Loans.Columns.Add("SNo");
            Loans.Columns.Add("Name");
            Loans.Columns.Add("Credit", typeof(decimal));
            Loans.Columns.Add("Debit", typeof(decimal));
            Loans.Columns.Add("Date");
            Loans.Columns.Add("RateofInt");
            Loans.Columns.Add("Period");
            Loans.Columns.Add("Interest", typeof(decimal));
            Loans.Columns.Add("chitno");
            Loans.Columns.Add("amount");
            Loans.Columns.Add("Remarks");
            DataRow dr = Loans.NewRow();
            int icount = 0;
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["Debit"]) > 0)
                {
                    if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["ParentID"]) == "53")
                    {
                        dr["SNo"] = icount + 1;
                        dr["Name"] = "Chit Loan";
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "24%";
                        dr["Period"] = "";
                        dr["Interest"] = 0;
                        dr["chitno"] = balayer.GetSingleValue("SELECT ChitName FROM svcf.chitheads where HeadId=" + dt1.Rows[i]["NodeID"]);
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loans.Rows.Add(dr.ItemArray);
                    }
                    else if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["ParentID"]) == "55")
                    {
                        dr["SNo"] = icount + 1;
                        dr["Name"] = "Staff Loan";
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "12%";
                        dr["Period"] = "";
                        dr["Interest"] = 0;
                        dr["chitno"] = "";
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loans.Rows.Add(dr.ItemArray);
                    }
                    else if (balayer.ToobjectstrEvenNull(dt1.Rows[i]["NodeID"]) == "2076")
                    {
                        dr["SNo"] = icount + 1;
                        dr["Name"] = "Accrued Interest on Loan";
                        dr["Credit"] = 0.00M;
                        dr["Debit"] = 0.00M;
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "";
                        dr["Period"] = "";
                        dr["Interest"] = dt1.Rows[i]["Debit"];
                        dr["chitno"] = "";
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loans.Rows.Add(dr.ItemArray);
                    }
                    else
                    {
                        dr["SNo"] = icount + 1;
                        dr["Name"] = dt1.Rows[i]["Name"];
                        dr["Credit"] = dt1.Rows[i]["Credit"];
                        dr["Debit"] = dt1.Rows[i]["Debit"];
                        dr["Date"] = dt1.Rows[i]["ChoosenDate"];
                        dr["RateofInt"] = "24%";
                        dr["Period"] = "";
                        dr["Interest"] = 0;
                        dr["chitno"] = "";
                        dr["amount"] = "";
                        dr["Remarks"] = "";
                        Loans.Rows.Add(dr.ItemArray);
                    }
                    icount++;
                }
            }
            if (Loans.Rows.Count > 0)
            {
                decCredit = Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                decDebit = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                dr["SNo"] = "";
                dr["Name"] = "TOTAL";
                dr["Credit"] = decCredit;
                dr["Debit"] = decDebit;
                dr["Date"] = "";
                dr["RateofInt"] = "";
                dr["Period"] = "";
                dr["Interest"] = 0;
                dr["chitno"] = "";
                dr["amount"] = "";
                dr["Remarks"] = "";
                Loans.Rows.Add(dr.ItemArray);

                dr["SNo"] = "";
                if (decCredit == decDebit)
                {
                    dr["Name"] = "Balance";
                    dr["Credit"] = "0.00";
                    dr["Debit"] = "0.00";
                }
                else if (decCredit > decDebit)
                {
                    dr["Name"] = "Balance CR";
                    dr["Credit"] = decCredit - decDebit;
                    dr["Debit"] = "0.00";
                }
                else if (decCredit < decDebit)
                {
                    dr["Name"] = "Balance DR";
                    dr["Credit"] = "0.00";
                    dr["Debit"] = decDebit - decCredit;
                }
                dr["Date"] = "";
                dr["RateofInt"] = "";
                dr["Period"] = "";
                dr["Interest"] = 0;
                dr["chitno"] = "";
                dr["amount"] = "";
                dr["Remarks"] = "";
                Loans.Rows.Add(dr.ItemArray);
            }
            return Loans;
        }

        //        public void TrialBalance(string fromsdate, string todate, string branchid, string imagepath)
        //        {
        //            Workbook workbook = new Workbook();
        //            workbook.CreateEmptySheets(1);
        //            Worksheet sheet = workbook.Worksheets[0];

        //            ExcelFont fontBold = workbook.CreateFont();
        //            fontBold.IsBold = true;

        //            BindBranches(fromsdate, todate, branchid);
        //            BindInvestments(fromsdate, todate, branchid);
        //            BindBanks(fromsdate, todate, branchid);
        //            BindForeman(fromsdate, todate, branchid);
        //            BindDecree(fromsdate, todate, branchid);
        //            BindLoans(fromsdate, todate, branchid);
        //            BindOtherItems(fromsdate, todate, branchid);
        //            BindStamps(fromsdate, todate, branchid);
        //            //BindChitTrial();
        //            BindChitAbstract(fromsdate, todate, branchid);
        //            Bind12Heads(fromsdate, todate, branchid);
        //            //BindOutstanding();

        //            firsttablerowcount = dtbranch.Rows.Count + 1;

        //            sheet.Name = "Tr. St-02";

        //            string branchname = balayer.GetSingleValue(@"select Node from headstree where NodeID =" + branchid + ";");

        //            sheet.Pictures.Add(1, 1, imagepath);

        //            CellRange range = sheet.Range["A4:F4"];
        //            range.Borders.LineStyle = LineStyleType.Double;
        //            range.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
        //            range.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

        //            //dt.Clear();

        //            //List<DataRow> list = new List<DataRow>();
        //            sheet.Range["C1"].Value = "Sree Visalam Chit Fund Ltd.,";
        //            RichText richText01 = sheet.Range["C1"].RichText;
        //            richText01.SetFont(0, richText01.Text.Length - 1, fontBold);

        //            sheet.Range["C2"].Value = "Branch: " + branchname + "";
        //            RichText richText02 = sheet.Range["C2"].RichText;
        //            richText02.SetFont(0, richText02.Text.Length - 1, fontBold);

        //            DateTime odate = Convert.ToDateTime(todate);

        //            //string strDate = odate.ToString("MM/dd/yyyy");

        //            sheet.Range["A3"].Value = "TRIAL BALANCE AS AT " + balayer.Getstringdaymonth(todate) + "";
        //            RichText richText03 = sheet.Range["A3"].RichText;
        //            richText03.SetFont(0, richText03.Text.Length - 1, fontBold);
        //            sheet.Range["A3:M3"].Merge();

        //            sheet.Range["A3"].Style.HorizontalAlignment = HorizontalAlignType.Center;


        //            sheet.Range["A4"].Value = "Sl. No.";
        //            RichText richText = sheet.Range["A4"].RichText;
        //            richText.SetFont(0, richText.Text.Length - 1, fontBold);

        //            sheet.Range["D4"].Value = "HEADS";
        //            RichText richText1 = sheet.Range["D4"].RichText;
        //            richText1.SetFont(0, richText1.Text.Length - 1, fontBold);

        //            sheet.Range["E4"].Value = "CREDIT";
        //            RichText richText2 = sheet.Range["E4"].RichText;
        //            richText2.SetFont(0, richText2.Text.Length - 1, fontBold);

        //            sheet.Range["F4"].Value = "DEBIT";
        //            RichText richText3 = sheet.Range["F4"].RichText;
        //            richText3.SetFont(0, richText3.Text.Length - 1, fontBold);

        //            #region Branches

        //            sheet.Range["A5"].Value = "I.";
        //            RichText richText4 = sheet.Range["A5"].RichText;
        //            richText4.SetFont(0, richText4.Text.Length - 1, fontBold);

        //            sheet.Range["B5"].Value = "BRANCHES";
        //            RichText richText5 = sheet.Range["B5"].RichText;
        //            richText5.SetFont(0, richText5.Text.Length - 1, fontBold);


        //            int rowcnt = 5;
        //            foreach (DataRow dr in dtbranch.Rows)
        //            {
        //                rowcnt = rowcnt + 1;

        //                sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
        //                sheet.Range["D" + rowcnt].Value = dr.ItemArray[2].ToString();
        //                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
        //                sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //            }

        //            #endregion

        //            #region Investments

        //            rowcnt = rowcnt + 2;

        //            sheet.Range["A" + rowcnt].Value = "II.";
        //            RichText richText6 = sheet.Range["A" + rowcnt].RichText;
        //            richText6.SetFont(0, richText6.Text.Length - 1, fontBold);

        //            sheet.Range["B" + rowcnt].Value = "INVESTMENTS";
        //            RichText richText7 = sheet.Range["B" + rowcnt].RichText;
        //            richText7.SetFont(0, richText7.Text.Length - 1, fontBold);

        //            string prvcntstr = "";

        //            foreach (DataRow dr in Finalivest.Rows)
        //            {
        //                rowcnt = rowcnt + 1;

        //                if (prvcntstr != dr.ItemArray[1].ToString())
        //                {
        //                    sheet.Range["B" + rowcnt].Value = dr.ItemArray[1].ToString();
        //                }
        //                sheet.Range["D" + rowcnt].Value = dr.ItemArray[2].ToString();
        //                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[4]);
        //                sheet.Range["F" + rowcnt].NumberFormat = "0.00";

        //                prvcntstr = dr.ItemArray[1].ToString();
        //            }

        //            #endregion

        //            #region Banks

        //            rowcnt = rowcnt + 2;

        //            sheet.Range["A" + rowcnt].Value = "III.";
        //            RichText richText8 = sheet.Range["A" + rowcnt].RichText;
        //            richText8.SetFont(0, richText8.Text.Length - 1, fontBold);

        //            sheet.Range["B" + rowcnt].Value = "Banks";
        //            RichText richText9 = sheet.Range["B" + rowcnt].RichText;
        //            richText9.SetFont(0, richText9.Text.Length - 1, fontBold);


        //            foreach (DataRow dr in dtBank.Rows)
        //            {
        //                rowcnt = rowcnt + 1;

        //                if (dr.ItemArray[1].ToString() == "Scheduled Banks")
        //                {
        //                    sheet.Range["B" + rowcnt].Value = "A.";
        //                    sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //                    RichText richText10 = sheet.Range["B" + rowcnt].RichText;
        //                    richText10.SetFont(0, richText10.Text.Length - 1, fontBold);

        //                    sheet.Range["C" + rowcnt].Value = "Scheduled Banks";
        //                    RichText richText11 = sheet.Range["C" + rowcnt].RichText;
        //                    richText11.SetFont(0, richText11.Text.Length - 1, fontBold);

        //                    sheet.Range["E" + rowcnt].Value = "Balance DR";
        //                    RichText richText12 = sheet.Range["E" + rowcnt].RichText;
        //                    richText12.SetFont(0, richText12.Text.Length - 1, fontBold);

        //                    sheet.Range["F" + rowcnt].Value = "Total Amount";
        //                    RichText richText13 = sheet.Range["F" + rowcnt].RichText;
        //                    richText13.SetFont(0, richText13.Text.Length - 1, fontBold);

        //                }
        //                else if (dr.ItemArray[1].ToString() == "Fixed Deposit with Banks")
        //                {
        //                    sheet.Range["B" + rowcnt].Value = "B.";
        //                    sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //                    RichText richText14 = sheet.Range["B" + rowcnt].RichText;
        //                    richText14.SetFont(0, richText14.Text.Length - 1, fontBold);

        //                    sheet.Range["C" + rowcnt].Value = "Fixed Deposit with Banks";
        //                    RichText richText15 = sheet.Range["C" + rowcnt].RichText;
        //                    richText15.SetFont(0, richText15.Text.Length - 1, fontBold);

        //                }
        //                else
        //                {
        //                    if (dr.ItemArray[1].ToString() == "TOTAL" || dr.ItemArray[1].ToString() == "Balance DR" || dr.ItemArray[1].ToString() == "Balance CR")
        //                    {
        //                        sheet.Range["D" + rowcnt].Value = dr.ItemArray[1].ToString();
        //                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
        //                        sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                    }
        //                    else
        //                    {
        //                        sheet.Range["C" + rowcnt].Value = dr.ItemArray[0].ToString();
        //                        sheet.Range["C" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Left;
        //                        sheet.Range["D" + rowcnt].Value = dr.ItemArray[1].ToString() + "..," + "A/C.No." + dr.ItemArray[3].ToString();
        //                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
        //                        sheet.Range["E" + rowcnt].NumberFormat = "0.00";

        //                    }

        //                }

        //            }

        //            rowcnt = rowcnt + 2;

        //            comparefirst = rowcnt;

        //            CellRange range1 = sheet.Range["A5:" + "F" + rowcnt];
        //            range1.BorderAround(LineStyleType.Medium, Color.Black);


        //            #endregion


        //            #region Secound Table

        //            //Secound Vertical Table

        //            rowcnt = rowcnt + 3;

        //            sheet.Range["A" + rowcnt].Value = "Sl. No.";
        //            RichText richText16 = sheet.Range["A" + rowcnt].RichText;
        //            richText16.SetFont(0, richText16.Text.Length - 1, fontBold);

        //            sheet.Range["D" + rowcnt].Value = "HEADS";
        //            RichText richText17 = sheet.Range["D" + rowcnt].RichText;
        //            richText17.SetFont(0, richText17.Text.Length - 1, fontBold);

        //            sheet.Range["E" + rowcnt].Value = "CREDIT";
        //            RichText richText18 = sheet.Range["E" + rowcnt].RichText;
        //            richText18.SetFont(0, richText18.Text.Length - 1, fontBold);

        //            sheet.Range["F" + rowcnt].Value = "DEBIT";
        //            RichText richText19 = sheet.Range["F" + rowcnt].RichText;
        //            richText19.SetFont(0, richText19.Text.Length - 1, fontBold);



        //            CellRange range2 = sheet.Range["A" + rowcnt + ":F" + rowcnt];
        //            range2.Borders.LineStyle = LineStyleType.Double;
        //            range2.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
        //            range2.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;

        //            //****************


        //            #region FOREMAN CHITS

        //            rowcnt = rowcnt + 1;

        //            secondtablewidth = rowcnt;

        //            sheet.Range["A" + rowcnt].Value = "VI.";
        //            RichText richText20 = sheet.Range["A" + rowcnt].RichText;
        //            richText20.SetFont(0, richText20.Text.Length - 1, fontBold);

        //            sheet.Range["B" + rowcnt].Value = "FOREMAN CHITS";
        //            RichText richText21 = sheet.Range["B" + rowcnt].RichText;
        //            richText21.SetFont(0, richText21.Text.Length - 1, fontBold);

        //            sheet.Range["E" + rowcnt].Value = "Prize Money";
        //            RichText richText22 = sheet.Range["E" + rowcnt].RichText;
        //            richText22.SetFont(0, richText22.Text.Length - 1, fontBold);

        //            sheet.Range["F" + rowcnt].Value = "Call Amount";
        //            RichText richText23 = sheet.Range["F" + rowcnt].RichText;
        //            richText23.SetFont(0, richText23.Text.Length - 1, fontBold);


        //            DataTable tblforeman = new DataTable();

        //            if (Foreman.Rows.Count > 0)
        //            {

        //                tblforeman = (from DataRow dr in Foreman.Rows
        //                              where dr["SNo"].ToString() == "" && dr["SNo"].ToString() != "0"
        //                              select dr).CopyToDataTable();
        //            }


        //            int sno = 0;

        //            foreach (DataRow dr in tblforeman.Rows)
        //            {
        //                rowcnt = rowcnt + 1;
        //                sno = sno + 1;

        //                if (sno == 1)
        //                {
        //                    sheet.Range["B" + rowcnt].Value = sno.ToString();
        //                    sheet.Range["C" + rowcnt].Value = "Foreman Chits";
        //                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
        //                    sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                    sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                }
        //                else if (sno == 2)
        //                {
        //                    sheet.Range["B" + rowcnt].Value = sno.ToString();
        //                    sheet.Range["C" + rowcnt].Value = "Foreman Substituted Chits (Prized)";
        //                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
        //                    sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                    sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                }
        //                else if (sno == 3)
        //                {
        //                    sheet.Range["B" + rowcnt].Value = sno.ToString();
        //                    sheet.Range["C" + rowcnt].Value = "Foreman Substituted Chits (Non Prized)";
        //                    sheet.Range["E" + rowcnt].Value = "";
        //                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[5]);
        //                    sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                    rowcnt = rowcnt + 1;

        //                    sheet.Range["D" + rowcnt].Value = dr.ItemArray[1].ToString();
        //                    sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

        //                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
        //                    sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                    sheet.Range["F" + rowcnt].NumberFormat = "0.00";

        //                    if (Convert.ToDecimal(dr.ItemArray[2]) > Convert.ToDecimal(dr.ItemArray[3]))
        //                    {
        //                        rowcnt = rowcnt + 1;

        //                        sheet.Range["D" + rowcnt].Value = "Balance  Cr.";
        //                        RichText richText24 = sheet.Range["D" + rowcnt].RichText;
        //                        richText24.SetFont(0, richText24.Text.Length - 1, fontBold);
        //                        sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

        //                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(dr.ItemArray[2]) - Convert.ToDecimal(dr.ItemArray[3]));
        //                        sheet.Range["E" + rowcnt].NumberFormat = "0.00";

        //                    }
        //                    else if (Convert.ToDecimal(dr.ItemArray[3]) > Convert.ToDecimal(dr.ItemArray[2]))
        //                    {
        //                        rowcnt = rowcnt + 1;

        //                        sheet.Range["D" + rowcnt].Value = "Balance  Dr.";
        //                        RichText richText25 = sheet.Range["D" + rowcnt].RichText;
        //                        richText25.SetFont(0, richText25.Text.Length - 1, fontBold);
        //                        sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

        //                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(dr.ItemArray[3]) - Convert.ToDecimal(dr.ItemArray[2]));
        //                        sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                    }

        //                }



        //            }

        //            #endregion


        //            #region Decree

        //            rowcnt = rowcnt + 1;

        //            sheet.Range["A" + rowcnt].Value = "VII.";
        //            RichText richText26 = sheet.Range["A" + rowcnt].RichText;
        //            richText26.SetFont(0, richText26.Text.Length - 1, fontBold);

        //            sheet.Range["B" + rowcnt].Value = "DECREE DEBTORS";
        //            RichText richText27 = sheet.Range["B" + rowcnt].RichText;
        //            richText27.SetFont(0, richText27.Text.Length - 1, fontBold);

        //            var listDecree = (from DataRow dr in Decree.Rows
        //                              where dr["Name"].ToString() == "Total"
        //                              select dr).ToList();


        //            decimal crtotalDecree = 0;
        //            decimal drtotalDecree = 0;
        //            decimal crtotalCourt = 0;
        //            decimal drtotalCourt = 0;
        //            decimal decreecourttotalcr = 0;
        //            decimal decreecourttotaldr = 0;
        //            decimal total_decreecourt = 0;
        //            decimal crcourt = 0;
        //            decimal drcourt = 0;

        //            foreach (var d in listDecree)
        //            {
        //                rowcnt = rowcnt + 1;

        //                sheet.Range["B" + rowcnt].Value = "1";
        //                sheet.Range["C" + rowcnt].Value = "Balance in Decree A/c";
        //                if (Convert.ToDecimal(d.ItemArray[8]) > Convert.ToDecimal(d.ItemArray[9]))
        //                {
        //                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(d.ItemArray[8]) - Convert.ToDecimal(d.ItemArray[9]));
        //                    sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                    crtotalDecree = Convert.ToDecimal(d.ItemArray[8]) - Convert.ToDecimal(d.ItemArray[9]);
        //                }
        //                else if (Convert.ToDecimal(d.ItemArray[9]) > Convert.ToDecimal(d.ItemArray[8]))
        //                {
        //                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(Convert.ToDecimal(d.ItemArray[9]) - Convert.ToDecimal(d.ItemArray[8]));
        //                    sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                    drtotalDecree = Convert.ToDecimal(d.ItemArray[9]) - Convert.ToDecimal(d.ItemArray[8]);
        //                }

        //                rowcnt = rowcnt + 1;

        //                sheet.Range["B" + rowcnt].Value = "2";
        //                sheet.Range["C" + rowcnt].Value = "Court Cost paid";

        //                crcourt = Convert.ToDecimal(d.ItemArray[10]) + Convert.ToDecimal(d.ItemArray[12]);
        //                drcourt = Convert.ToDecimal(d.ItemArray[11]) + Convert.ToDecimal(d.ItemArray[13]);


        //                if (crcourt > drcourt)
        //                {
        //                    sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(crcourt - drcourt);
        //                    sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                    crtotalCourt = crcourt - drcourt;

        //                }
        //                else if (drcourt > crcourt)
        //                {
        //                    sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(drcourt - crcourt);
        //                    sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                    drtotalCourt = drcourt - crcourt;
        //                }

        //            }

        //            rowcnt = rowcnt + 1;

        //            sheet.Range["D" + rowcnt].Value = "Total";
        //            sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //            RichText richText28 = sheet.Range["D" + rowcnt].RichText;
        //            richText28.SetFont(0, richText28.Text.Length - 1, fontBold);


        //            decreecourttotalcr = crtotalDecree + crtotalCourt;
        //            decreecourttotaldr = drtotalDecree + drtotalCourt;

        //            if (decreecourttotalcr > decreecourttotaldr)
        //            {
        //                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(decreecourttotalcr - decreecourttotaldr);
        //                sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                rowcnt = rowcnt + 1;
        //                sheet.Range["D" + rowcnt].Value = "Balance Cr.";
        //                sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //                RichText richText29 = sheet.Range["D" + rowcnt].RichText;
        //                richText29.SetFont(0, richText29.Text.Length - 1, fontBold);

        //                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(decreecourttotalcr - decreecourttotaldr);
        //                sheet.Range["E" + rowcnt].NumberFormat = "0.00";

        //            }
        //            else
        //            {
        //                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(decreecourttotaldr - decreecourttotalcr);
        //                sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                rowcnt = rowcnt + 1;
        //                sheet.Range["D" + rowcnt].Value = "Balance Dr.";
        //                sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //                RichText richText30 = sheet.Range["D" + rowcnt].RichText;
        //                richText30.SetFont(0, richText30.Text.Length - 1, fontBold);

        //                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(decreecourttotaldr - decreecourttotalcr);
        //                sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //            }


        //            #endregion


        //            #region Loans

        //            rowcnt = rowcnt + 1;

        //            sheet.Range["A" + rowcnt].Value = "VIII.";
        //            RichText richText31 = sheet.Range["A" + rowcnt].RichText;
        //            richText31.SetFont(0, richText31.Text.Length - 1, fontBold);

        //            sheet.Range["B" + rowcnt].Value = "LOANS";
        //            RichText richText32 = sheet.Range["B" + rowcnt].RichText;
        //            richText32.SetFont(0, richText32.Text.Length - 1, fontBold);

        //            List<string> listloan = new List<string>();

        //            listloan.Add("Chit Loan");
        //            listloan.Add("Staff Loan");
        //            listloan.Add("Accrued Interest on Loan");

        //            foreach (var dd in listloan)
        //            {

        //                DataTable Chitloan = new DataTable();
        //                int Count1 = (from DataRow row in Loans.Rows where (string)row["Name"] == dd select row).Count();

        //                if (Count1 > 0)
        //                {
        //                    Chitloan = (from DataRow dr in Loans.Rows
        //                                where dr["Name"].ToString() == dd
        //                                select dr).CopyToDataTable();
        //                }

        //                rowcnt = rowcnt + 1;
        //                sheet.Range["B" + rowcnt].Value = dd;

        //                if (Chitloan.Rows.Count > 0)
        //                {
        //                    if (dd != "Accrued Interest on Loan")
        //                    {
        //                        decimal sumcr = Chitloan.AsEnumerable().Sum(dr => dr.Field<Decimal>("Credit"));
        //                        decimal sumdr = Chitloan.AsEnumerable().Sum(dr => dr.Field<Decimal>("Debit"));

        //                        if (sumcr > sumdr)
        //                        {
        //                            sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(sumcr - sumdr);
        //                            sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                        }
        //                        else if (sumdr > sumcr)
        //                        {
        //                            sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(sumdr - sumcr);
        //                            sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                        }
        //                    }
        //                    else
        //                    {
        //                        //string datatype = Chitloan.Columns[7].DataType.Name.ToString();

        //                        decimal sumintrest = Chitloan.AsEnumerable().Sum(dr => dr.Field<decimal>("Interest"));
        //                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(sumintrest);
        //                        sheet.Range["F" + rowcnt].NumberFormat = "0.00";

        //                    }

        //                }

        //            }
        //            rowcnt = rowcnt + 1;

        //            string loanbal = Loans.Rows[Loans.Rows.Count - 1][1].ToString();

        //            if (loanbal == "Balance CR")
        //            {
        //                sheet.Range["D" + rowcnt].Value = "Total Cr.";
        //                sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //                RichText richText33 = sheet.Range["D" + rowcnt].RichText;
        //                richText33.SetFont(0, richText33.Text.Length - 1, fontBold);
        //                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(Loans.Rows[Loans.Rows.Count - 1][2]);
        //                sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //            }
        //            else if (loanbal == "Balance DR")
        //            {
        //                sheet.Range["D" + rowcnt].Value = "Total Dr.";
        //                sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //                RichText richText34 = sheet.Range["D" + rowcnt].RichText;
        //                richText34.SetFont(0, richText34.Text.Length - 1, fontBold);
        //                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(Loans.Rows[Loans.Rows.Count - 1][3]);
        //                sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //            }

        //            #endregion

        //            #region SUNDRIES


        //            string str = @"select t3.Node as Heads,t3.NodeID,t3.ParentID,t1.Narration , 
        //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1119072%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `EB_Credit`,
        //                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1119072%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `EB_Debit`,
        //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
        //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,4739%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
        //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `TD_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
        //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,4739%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
        //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `TD_Debit`,
        //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
        //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,5730%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
        //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `RA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
        //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,5730%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
        //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `RA_Debit`,
        //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,167%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `S_Credit`,
        //                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,167%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `S_Debit`,
        //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>
        //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1060%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-
        //sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `PPA_Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>
        //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1060%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-
        //sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `PPA_Debit`,
        //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,172%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `VRA_Credit`,
        //                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,172%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `VRA_Debit`,
        //                            (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,58%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `SC_Credit`,
        //                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,58%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `SC_Debit`
        //                            ,(case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) and t3.TreeHint like '9,1061%') then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `SDeb_Credit`,
        //                            (case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) and t3.TreeHint like '9,1061%') then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `SDeb_Debit` 
        //                       from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + "  and `t1`.`RootID` = 9  and (t3.TreeHint like '9,1119072%' or t3.TreeHint like '9,4739%' or t3.TreeHint like '9,5730%' or t3.TreeHint like '9,167%' or t3.TreeHint like '9,1060%' or  t3.TreeHint like '9,58%' or  t3.TreeHint like '9,172%' or t3.TreeHint like '9,1061%') and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID` order by t3.ParentID asc,t1.ChoosenDate asc;";

        //            DataTable dt1 = balayer.GetDataTable(str);


        //            decimal EB_deposit = 0;
        //            string EB = "";
        //            decimal TD_deposit = 0;
        //            string TD = "";
        //            decimal RA_deposit = 0;
        //            string RA = "";
        //            decimal S_deposit = 0;
        //            string S = "";
        //            decimal PPA_deposit = 0;
        //            string PPA = "";
        //            decimal VRA_deposit = 0;
        //            string VRA = "";
        //            decimal SC_deposit = 0;
        //            string SC = "";
        //            decimal SDeb_deposit = 0;
        //            string SDeb = "";

        //            decimal EB_Credit = ((from s in dt1.AsEnumerable()
        //                                  select decimal.Parse(s[4].ToString())) as IEnumerable<decimal>).Sum();

        //            decimal EB_Debit = ((from s in dt1.AsEnumerable()
        //                                 select decimal.Parse(s[5].ToString())) as IEnumerable<decimal>).Sum();

        //            if (EB_Credit > EB_Debit)
        //            {
        //                EB_deposit = EB_Credit - EB_Debit;
        //                EB = "cr";
        //            }
        //            else
        //            {
        //                EB_deposit = EB_Debit - EB_Credit;
        //                EB = "dr";
        //            }

        //            decimal TD_Credit = ((from s in dt1.AsEnumerable()
        //                                  select decimal.Parse(s[6].ToString())) as IEnumerable<decimal>).Sum();
        //            decimal TD_Debit = ((from s in dt1.AsEnumerable()
        //                                 select decimal.Parse(s[7].ToString())) as IEnumerable<decimal>).Sum();

        //            if (TD_Credit > TD_Debit)
        //            {
        //                TD_deposit = TD_Credit - TD_Debit;
        //                TD = "cr";
        //            }
        //            else
        //            {
        //                TD_deposit = TD_Debit - TD_Credit;
        //                TD = "dr";
        //            }

        //            decimal RA_Credit = ((from s in dt1.AsEnumerable()
        //                                  select decimal.Parse(s[8].ToString())) as IEnumerable<decimal>).Sum();
        //            decimal RA_Debit = ((from s in dt1.AsEnumerable()
        //                                 select decimal.Parse(s[9].ToString())) as IEnumerable<decimal>).Sum();

        //            if (RA_Credit > RA_Debit)
        //            {
        //                RA_deposit = RA_Credit - RA_Debit;
        //                RA = "cr";
        //            }
        //            else
        //            {
        //                RA_deposit = RA_Debit - RA_Credit;
        //                RA = "dr";
        //            }

        //            decimal S_Credit = ((from s in dt1.AsEnumerable()
        //                                 select decimal.Parse(s[10].ToString())) as IEnumerable<decimal>).Sum();
        //            decimal S_Debit = ((from s in dt1.AsEnumerable()
        //                                select decimal.Parse(s[11].ToString())) as IEnumerable<decimal>).Sum();

        //            if (S_Credit > S_Debit)
        //            {
        //                S_deposit = S_Credit - S_Debit;
        //                S = "cr";
        //            }
        //            else
        //            {
        //                S_deposit = S_Debit - S_Credit;
        //                S = "dr";
        //            }

        //            decimal PPA_Credit = ((from s in dt1.AsEnumerable()
        //                                   select decimal.Parse(s[12].ToString())) as IEnumerable<decimal>).Sum();
        //            decimal PPA_Debit = ((from s in dt1.AsEnumerable()
        //                                  select decimal.Parse(s[13].ToString())) as IEnumerable<decimal>).Sum();

        //            if (PPA_Credit > PPA_Debit)
        //            {
        //                PPA_deposit = PPA_Credit - PPA_Debit;
        //                PPA = "cr";
        //            }
        //            else
        //            {
        //                PPA_deposit = PPA_Debit - PPA_Credit;
        //                PPA = "dr";
        //            }

        //            decimal VRA_Credit = ((from s in dt1.AsEnumerable()
        //                                   select decimal.Parse(s[14].ToString())) as IEnumerable<decimal>).Sum();
        //            decimal VRA_Debit = ((from s in dt1.AsEnumerable()
        //                                  select decimal.Parse(s[15].ToString())) as IEnumerable<decimal>).Sum();

        //            if (VRA_Credit > VRA_Debit)
        //            {
        //                VRA_deposit = VRA_Credit - VRA_Debit;
        //                VRA = "cr";
        //            }
        //            else
        //            {
        //                VRA_deposit = VRA_Debit - VRA_Credit;
        //                VRA = "dr";
        //            }
        //            decimal SC_Credit = ((from s in dt1.AsEnumerable()
        //                                  select decimal.Parse(s[16].ToString())) as IEnumerable<decimal>).Sum();
        //            decimal SC_Debit = ((from s in dt1.AsEnumerable()
        //                                 select decimal.Parse(s[17].ToString())) as IEnumerable<decimal>).Sum();

        //            if (SC_Credit > SC_Debit)
        //            {
        //                SC_deposit = SC_Credit - SC_Debit;
        //                SC = "cr";
        //            }
        //            else
        //            {
        //                SC_deposit = SC_Debit - SC_Credit;
        //                SC = "dr";
        //            }
        //            decimal SDeb_Credit = ((from s in dt1.AsEnumerable()
        //                                    select decimal.Parse(s[18].ToString())) as IEnumerable<decimal>).Sum();
        //            decimal SDeb_Debit = ((from s in dt1.AsEnumerable()
        //                                   select decimal.Parse(s[19].ToString())) as IEnumerable<decimal>).Sum();

        //            if (SDeb_Credit > SDeb_Debit)
        //            {
        //                SDeb_deposit = SDeb_Credit - SDeb_Debit;
        //                SDeb = "cr";
        //            }
        //            else
        //            {
        //                SDeb_deposit = SDeb_Debit - SDeb_Credit;
        //                SDeb = "dr";
        //            }

        //            rowcnt = rowcnt + 1;

        //            sheet.Range["A" + rowcnt].Value = "IX.";
        //            RichText richText35 = sheet.Range["A" + rowcnt].RichText;
        //            richText35.SetFont(0, richText35.Text.Length - 1, fontBold);

        //            sheet.Range["B" + rowcnt].Value = "SUNDRIES AND ADVANCES";
        //            RichText richText36 = sheet.Range["B" + rowcnt].RichText;
        //            richText36.SetFont(0, richText36.Text.Length - 1, fontBold);

        //            decimal finalcrsum = 0;
        //            decimal finaldrsum = 0;

        //            List<string> SUNDRIESlist = new List<string>();

        //            SUNDRIESlist.Add("Decree Advance");
        //            SUNDRIESlist.Add("Rent Advance");
        //            SUNDRIESlist.Add("Staff Advance");
        //            SUNDRIESlist.Add("Prepaid Advance");
        //            SUNDRIESlist.Add("Electricity Deposit");
        //            SUNDRIESlist.Add("Telephone Deposit");
        //            int cnt = 0;
        //            foreach (var d in SUNDRIESlist)
        //            {
        //                rowcnt = rowcnt + 1;

        //                cnt = cnt + 1;
        //                sheet.Range["B" + rowcnt].Value = cnt.ToString();
        //                sheet.Range["B" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //                sheet.Range["C" + rowcnt].Value = d;
        //                if (cnt == 1)
        //                {
        //                    if (SDeb == "cr")
        //                    {
        //                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(SDeb_deposit);
        //                        sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                        finalcrsum = finalcrsum + SDeb_deposit;
        //                    }
        //                    else
        //                    {
        //                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(SDeb_deposit);
        //                        sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                        finaldrsum = finaldrsum + SDeb_deposit;
        //                    }

        //                }
        //                if (cnt == 2)
        //                {
        //                    if (RA == "cr")
        //                    {
        //                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(RA_deposit);
        //                        sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                        finalcrsum = finalcrsum + RA_deposit;
        //                    }
        //                    else
        //                    {
        //                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(RA_deposit);
        //                        sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                        finaldrsum = finaldrsum + RA_deposit;
        //                    }
        //                }
        //                if (cnt == 3)
        //                {
        //                    if (S == "cr")
        //                    {
        //                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(S_deposit);
        //                        sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                        finalcrsum = finalcrsum + S_deposit;
        //                    }
        //                    else
        //                    {
        //                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(S_deposit);
        //                        sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                        finaldrsum = finaldrsum + S_deposit;
        //                    }
        //                }
        //                if (cnt == 4)
        //                {
        //                    if (PPA == "cr")
        //                    {
        //                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(PPA_deposit);
        //                        sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                        finalcrsum = finalcrsum + PPA_deposit;
        //                    }
        //                    else
        //                    {
        //                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(PPA_deposit);
        //                        sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                        finaldrsum = finaldrsum + PPA_deposit;
        //                    }
        //                }
        //                if (cnt == 5)
        //                {
        //                    if (EB == "cr")
        //                    {
        //                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(EB_deposit);
        //                        sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                        finalcrsum = finalcrsum + EB_deposit;
        //                    }
        //                    else
        //                    {
        //                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(EB_deposit);
        //                        sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                        finaldrsum = finaldrsum + EB_deposit;
        //                    }
        //                }
        //                if (cnt == 6)
        //                {
        //                    if (TD == "cr")
        //                    {
        //                        sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(TD_deposit);
        //                        sheet.Range["E" + rowcnt].NumberFormat = "0.00";
        //                        finalcrsum = finalcrsum + TD_deposit;
        //                    }
        //                    else
        //                    {
        //                        sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(TD_deposit);
        //                        sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                        finaldrsum = finaldrsum + TD_deposit;
        //                    }
        //                }
        //            }

        //            rowcnt = rowcnt + 1;
        //            sheet.Range["D" + rowcnt].Value = "Total";
        //            sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //            RichText richText37 = sheet.Range["D" + rowcnt].RichText;
        //            richText37.SetFont(0, richText37.Text.Length - 1, fontBold);

        //            if (finalcrsum > finaldrsum)
        //            {
        //                sheet.Range["E" + rowcnt].NumberValue = Convert.ToDouble(finalcrsum - finaldrsum);
        //                sheet.Range["E" + rowcnt].NumberFormat = "0.00";

        //                rowcnt = rowcnt + 1;
        //                sheet.Range["D" + rowcnt].Value = "Net CR";
        //                sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //                RichText richText38 = sheet.Range["D" + rowcnt].RichText;
        //                richText38.SetFont(0, richText38.Text.Length - 1, fontBold);

        //            }
        //            else if (finaldrsum > finalcrsum)
        //            {

        //                rowcnt = rowcnt + 1;
        //                sheet.Range["F" + rowcnt].NumberValue = Convert.ToDouble(finaldrsum - finalcrsum);
        //                sheet.Range["F" + rowcnt].NumberFormat = "0.00";
        //                sheet.Range["D" + rowcnt].Value = "Net DR";
        //                sheet.Range["D" + rowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;
        //                RichText richText39 = sheet.Range["D" + rowcnt].RichText;
        //                richText39.SetFont(0, richText39.Text.Length - 1, fontBold);
        //            }

        //            #endregion

        //            rowcnt = rowcnt + 1;

        //            CellRange range3 = sheet.Range["A" + secondtablewidth + ":F" + rowcnt];
        //            range3.BorderAround(LineStyleType.Medium, Color.Black);

        //            #endregion

        //            //Secound Vertical table end

        //            #region Third Table
        //            //Third Table

        //            CellRange range4 = sheet.Range["H4:M4"];
        //            range4.Borders.LineStyle = LineStyleType.Double;
        //            range4.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
        //            range4.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


        //            sheet.Range["H4"].Value = "Sl. No.";
        //            RichText richText40 = sheet.Range["H4"].RichText;
        //            richText40.SetFont(0, richText40.Text.Length - 1, fontBold);

        //            sheet.Range["K4"].Value = "HEADS";
        //            RichText richText41 = sheet.Range["K4"].RichText;
        //            richText41.SetFont(0, richText41.Text.Length - 1, fontBold);

        //            sheet.Range["L4"].Value = "CREDIT";
        //            RichText richText42 = sheet.Range["L4"].RichText;
        //            richText42.SetFont(0, richText42.Text.Length - 1, fontBold);

        //            sheet.Range["M4"].Value = "DEBIT";
        //            RichText richText43 = sheet.Range["M4"].RichText;
        //            richText43.SetFont(0, richText43.Text.Length - 1, fontBold);


        //            int secrowcnt = 5;


        //            thirdtablewidth = secrowcnt;

        //            sheet.Range["H" + secrowcnt].Value = "IV.";
        //            RichText richText44 = sheet.Range["H" + secrowcnt].RichText;
        //            richText44.SetFont(0, richText44.Text.Length - 1, fontBold);

        //            sheet.Range["I" + secrowcnt].Value = "OTHER ITEMS";
        //            RichText richText45 = sheet.Range["I" + secrowcnt].RichText;
        //            richText45.SetFont(0, richText45.Text.Length - 1, fontBold);

        //            secrowcnt = secrowcnt + 1;

        //            sheet.Range["I" + secrowcnt].Value = "a.";
        //            RichText richText47 = sheet.Range["I" + secrowcnt].RichText;
        //            richText47.SetFont(0, richText47.Text.Length - 1, fontBold);

        //            sheet.Range["J" + secrowcnt].Value = "Outstanding Expenses payable";
        //            RichText richText48 = sheet.Range["J" + secrowcnt].RichText;
        //            richText48.SetFont(0, richText48.Text.Length - 1, fontBold);


        //            foreach (DataRow dr in OtherItems.Rows)
        //            {
        //                secrowcnt = secrowcnt + 1;
        //                if (dr.ItemArray[1].ToString() == "Total")
        //                {

        //                    sheet.Range["K" + secrowcnt].Value = dr.ItemArray[1].ToString();
        //                    RichText richText49 = sheet.Range["K" + secrowcnt].RichText;
        //                    richText49.SetFont(0, richText49.Text.Length - 1, fontBold);

        //                    sheet.Range["L" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
        //                    sheet.Range["L" + secrowcnt].NumberFormat = "0.00";
        //                    sheet.Range["M" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                    sheet.Range["M" + secrowcnt].NumberFormat = "0.00";
        //                }
        //                else if (dr.ItemArray[1].ToString() != "Total" && dr.ItemArray[0].ToString() == "")
        //                {
        //                    sheet.Range["K" + secrowcnt].Value = dr.ItemArray[1].ToString();
        //                    RichText richText50 = sheet.Range["K" + secrowcnt].RichText;
        //                    richText50.SetFont(0, richText50.Text.Length - 1, fontBold);

        //                    sheet.Range["L" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
        //                    sheet.Range["L" + secrowcnt].NumberFormat = "0.00";
        //                    sheet.Range["M" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                    sheet.Range["M" + secrowcnt].NumberFormat = "0.00";

        //                }
        //                else
        //                {
        //                    sheet.Range["J" + secrowcnt].Value = dr.ItemArray[0].ToString();
        //                    sheet.Range["K" + secrowcnt].Value = dr.ItemArray[1].ToString();
        //                    sheet.Range["L" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
        //                    sheet.Range["L" + secrowcnt].NumberFormat = "0.00";
        //                    sheet.Range["M" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                    sheet.Range["M" + secrowcnt].NumberFormat = "0.00";
        //                }

        //            }

        //            #endregion

        //            secrowcnt = secrowcnt + 2;

        //            #region CHITS

        //            sheet.Range["H" + secrowcnt].Value = "V";
        //            RichText richText51 = sheet.Range["H" + secrowcnt].RichText;
        //            richText51.SetFont(0, richText51.Text.Length - 1, fontBold);

        //            sheet.Range["I" + secrowcnt].Value = "CHITS";
        //            RichText richText52 = sheet.Range["I" + secrowcnt].RichText;
        //            richText52.SetFont(0, richText52.Text.Length - 1, fontBold);

        //            secrowcnt = secrowcnt + 1;

        //            decimal Chitheadcrsum = 0;
        //            decimal Chitheaddrsum = 0;

        //            foreach (DataRow dr in Chitheads.Rows)
        //            {
        //                secrowcnt = secrowcnt + 1;

        //                sheet.Range["I" + secrowcnt].Value = dr.ItemArray[0].ToString();
        //                sheet.Range["J" + secrowcnt].Value = dr.ItemArray[1].ToString();
        //                sheet.Range["L" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
        //                sheet.Range["L" + secrowcnt].NumberFormat = "0.00";
        //                sheet.Range["M" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                sheet.Range["M" + secrowcnt].NumberFormat = "0.00";

        //                Chitheadcrsum = Chitheadcrsum + Convert.ToDecimal(dr.ItemArray[2]);
        //                Chitheaddrsum = Chitheaddrsum + Convert.ToDecimal(dr.ItemArray[3]);

        //            }
        //            secrowcnt = secrowcnt + 1;

        //            sheet.Range["K" + secrowcnt].Value = "Total";
        //            RichText richText53 = sheet.Range["K" + secrowcnt].RichText;
        //            richText53.SetFont(0, richText53.Text.Length - 1, fontBold);

        //            sheet.Range["L" + secrowcnt].NumberValue = Convert.ToDouble(Chitheadcrsum);
        //            sheet.Range["L" + secrowcnt].NumberFormat = "0.00";
        //            sheet.Range["M" + secrowcnt].NumberValue = Convert.ToDouble(Chitheaddrsum);
        //            sheet.Range["M" + secrowcnt].NumberFormat = "0.00";

        //            if (Chitheadcrsum > Chitheaddrsum)
        //            {
        //                secrowcnt = secrowcnt + 1;

        //                sheet.Range["K" + secrowcnt].Value = "Balance CR  ";
        //                RichText richText54 = sheet.Range["K" + secrowcnt].RichText;
        //                richText54.SetFont(0, richText54.Text.Length - 1, fontBold);
        //                sheet.Range["L" + secrowcnt].NumberValue = Convert.ToDouble(Chitheadcrsum - Chitheaddrsum);
        //                sheet.Range["L" + secrowcnt].NumberFormat = "0.00";
        //            }
        //            else
        //            {
        //                secrowcnt = secrowcnt + 1;

        //                sheet.Range["K" + secrowcnt].Value = "Balance DR  ";
        //                RichText richText55 = sheet.Range["K" + secrowcnt].RichText;
        //                richText55.SetFont(0, richText55.Text.Length - 1, fontBold);
        //                sheet.Range["M" + secrowcnt].NumberValue = Convert.ToDouble(Chitheaddrsum - Chitheadcrsum);
        //                sheet.Range["M" + secrowcnt].NumberFormat = "0.00";
        //            }


        //            secrowcnt = secrowcnt + 1;

        //            comparethird = secrowcnt;

        //            if (comparefirst > comparethird)
        //            {
        //                CellRange range5 = sheet.Range["H" + thirdtablewidth + ":M" + comparefirst];
        //                range5.BorderAround(LineStyleType.Medium, Color.Black);

        //                secrowcnt = comparefirst;
        //            }
        //            else if (comparethird > comparefirst)
        //            {
        //                CellRange range5 = sheet.Range["H" + thirdtablewidth + ":M" + comparethird];
        //                range5.BorderAround(LineStyleType.Medium, Color.Black);
        //            }


        //            #endregion


        //            #region Fourth table

        //            secrowcnt = secrowcnt + 3;

        //            fourthtablewidth = secrowcnt;


        //            CellRange range6 = sheet.Range["H" + secrowcnt + ":M" + secrowcnt];
        //            range6.Borders.LineStyle = LineStyleType.Double;
        //            range6.Borders[BordersLineType.DiagonalDown].LineStyle = LineStyleType.None;
        //            range6.Borders[BordersLineType.DiagonalUp].LineStyle = LineStyleType.None;


        //            sheet.Range["H" + secrowcnt].Value = "Sl. No.";
        //            RichText richText56 = sheet.Range["H" + secrowcnt].RichText;
        //            richText56.SetFont(0, richText56.Text.Length - 1, fontBold);

        //            sheet.Range["K" + secrowcnt].Value = "HEADS";
        //            RichText richText57 = sheet.Range["K" + secrowcnt].RichText;
        //            richText57.SetFont(0, richText57.Text.Length - 1, fontBold);

        //            sheet.Range["L" + secrowcnt].Value = "CREDIT";
        //            RichText richText58 = sheet.Range["L" + secrowcnt].RichText;
        //            richText58.SetFont(0, richText58.Text.Length - 1, fontBold);

        //            sheet.Range["M" + secrowcnt].Value = "DEBIT";
        //            RichText richText59 = sheet.Range["M" + secrowcnt].RichText;
        //            richText59.SetFont(0, richText59.Text.Length - 1, fontBold);

        //            #region stamps

        //            secrowcnt = secrowcnt + 1;

        //            sheet.Range["H" + secrowcnt].Value = "X.";
        //            RichText richText60 = sheet.Range["H" + secrowcnt].RichText;
        //            richText60.SetFont(0, richText60.Text.Length - 1, fontBold);

        //            sheet.Range["I" + secrowcnt].Value = "STAMPS & STAMP PAPERS";
        //            RichText richText61 = sheet.Range["I" + secrowcnt].RichText;
        //            richText61.SetFont(0, richText61.Text.Length - 1, fontBold);


        //            foreach (DataRow dr in Stamps.Rows)
        //            {
        //                secrowcnt = secrowcnt + 1;

        //                if (dr.ItemArray[1].ToString() == "Total" || dr.ItemArray[1].ToString() == "Balance Cr" || dr.ItemArray[1].ToString() == "Balance Dr")
        //                {
        //                    sheet.Range["K" + secrowcnt].Value = dr.ItemArray[1].ToString();
        //                    RichText richText62 = sheet.Range["K" + secrowcnt].RichText;
        //                    richText62.SetFont(0, richText62.Text.Length - 1, fontBold);

        //                    sheet.Range["L" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
        //                    sheet.Range["L" + secrowcnt].NumberFormat = "0.00";
        //                    sheet.Range["M" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                    sheet.Range["M" + secrowcnt].NumberFormat = "0.00";
        //                }
        //                else
        //                {
        //                    sheet.Range["I" + secrowcnt].Value = dr.ItemArray[0].ToString();
        //                    sheet.Range["J" + secrowcnt].Value = dr.ItemArray[1].ToString();

        //                    sheet.Range["L" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
        //                    sheet.Range["L" + secrowcnt].NumberFormat = "0.00";
        //                    sheet.Range["M" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                    sheet.Range["M" + secrowcnt].NumberFormat = "0.00";
        //                }


        //            }

        //            secrowcnt = secrowcnt + 1;


        //            sheet.Range["H" + secrowcnt].Value = "XI.";
        //            RichText richText63 = sheet.Range["H" + secrowcnt].RichText;
        //            richText63.SetFont(0, richText63.Text.Length - 1, fontBold);

        //            sheet.Range["I" + secrowcnt].Value = "12 Heads";
        //            RichText richText64 = sheet.Range["I" + secrowcnt].RichText;
        //            richText64.SetFont(0, richText64.Text.Length - 1, fontBold);


        //            decimal Headssumcr = 0;
        //            decimal Headssumdr = 0;

        //            foreach (DataRow dr in Heads.Rows)
        //            {
        //                secrowcnt = secrowcnt + 1;

        //                sheet.Range["I" + secrowcnt].Value = dr.ItemArray[0].ToString();
        //                sheet.Range["J" + secrowcnt].Value = dr.ItemArray[1].ToString();

        //                sheet.Range["L" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[2]);
        //                sheet.Range["L" + secrowcnt].NumberFormat = "0.00";
        //                sheet.Range["M" + secrowcnt].NumberValue = Convert.ToDouble(dr.ItemArray[3]);
        //                sheet.Range["M" + secrowcnt].NumberFormat = "0.00";
        //                Headssumcr = Headssumcr + Convert.ToDecimal(dr.ItemArray[2]);
        //                Headssumdr = Headssumdr + Convert.ToDecimal(dr.ItemArray[3]);
        //            }

        //            secrowcnt = secrowcnt + 1;

        //            sheet.Range["K" + secrowcnt].Value = "Total";
        //            RichText richText65 = sheet.Range["K" + secrowcnt].RichText;
        //            richText65.SetFont(0, richText65.Text.Length - 1, fontBold);
        //            sheet.Range["K" + secrowcnt].Style.HorizontalAlignment = HorizontalAlignType.Right;

        //            sheet.Range["L" + secrowcnt].NumberValue = Convert.ToDouble(Headssumcr);
        //            sheet.Range["L" + secrowcnt].NumberFormat = "0.00";
        //            sheet.Range["M" + secrowcnt].NumberValue = Convert.ToDouble(Headssumdr);
        //            sheet.Range["M" + secrowcnt].NumberFormat = "0.00";

        //            #endregion

        //            secrowcnt = secrowcnt + 1;

        //            CellRange range7 = sheet.Range["H" + fourthtablewidth + ":M" + secrowcnt];
        //            range7.BorderAround(LineStyleType.Medium, Color.Black);

        //            #endregion


        //            //sheet.Pictures.Add(1, 1, @"E:\Visalam\Logo1.png");

        //            //Spire.Xls.Core.IPictures shape = sheet.Pictures.AddTextBox(1, 1, 15, 20);
        //            //shape.Fill.CustomPicture(@"E:\Visalam\Logo1.png");
        //            //shape.Fill.FillType = ShapeFillType.Picture;


        //            sheet.AllocatedRange.AutoFitColumns();
        //            sheet.AllocatedRange.AutoFitRows();

        //            sheet.SetRowHeight(1, 24);
        //            sheet.SetColumnWidth(1, 9);
        //            sheet.SetRowHeight(2, 24);

        //            string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

        //            //workbook.SaveToFile(outputlocation + "TrSt-02" + "_" + timestamp + ".xls");
        //            //System.Diagnostics.Process.Start(outputlocation + "TrSt-02" + "_" + timestamp + ".xls");
        //            workbook.SaveToHttpResponse("BaddebtswrittenoffSt.xls", HttpContext.Current.Response);
        //        }

        public DataTable Bind12Heads(string fromsdate, string todate, string branchid)
        {

            #region VarDeclaration
            decimal BranchCRSum = 0;
            decimal BranchDBSum = 0;
            decimal BranchFinal = 0;
            string DefaultId = "";
            string str = "";
            #endregion

            DataTable dt = new DataTable();
            dt = balayer.GetDataTable(@"SELECT voucher.RootID,`headstree`.`Node`,(case when (sum((case when voucher.Voucher_Type='C' then voucher.Amount else 0.00 end ))>sum((case when voucher.Voucher_Type='D' then voucher.Amount else 0.00 end ))) then sum((case when voucher.Voucher_Type='C' then voucher.Amount else 0.00 end ))-sum((case when voucher.Voucher_Type='D' then voucher.Amount else 0.00 end )) else 0.00 end ) as `Credit`,(case when (sum((case when voucher.Voucher_Type='D' then voucher.Amount else 0.00 end ))>sum((case when voucher.Voucher_Type='C' then voucher.Amount else 0.00 end ))) then sum((case when voucher.Voucher_Type='D' then voucher.Amount else 0.00 end ))-sum((case when voucher.Voucher_Type='C' then voucher.Amount else 0.00 end )) else 0.00 end ) as `Debit` FROM `svcf`.`voucher` join headstree on (voucher.RootID=headstree.NodeID) where voucher.BranchID=" + branchid + " and voucher.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by voucher.RootID");

            //dtAll = new DataTable();
            Heads.Columns.Add("SNo", typeof(int));
            Heads.Columns.Add("Heads");
            Heads.Columns.Add("Credit", typeof(decimal));
            Heads.Columns.Add("Debit", typeof(decimal));
            Heads.Columns.Add("Remarks");
            DataRow drBind = Heads.NewRow();
            DefaultId = "";
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                DefaultId += balayer.ToobjectstrEvenNull(dt.Rows[i][0]) + ",";
                drBind["SNo"] = dt.Rows[i]["RootID"];
                drBind["Heads"] = dt.Rows[i]["Node"];
                drBind["Credit"] = dt.Rows[i]["Credit"];
                drBind["Debit"] = dt.Rows[i]["Debit"];

                drBind["Remarks"] = "";
                Heads.Rows.Add(drBind.ItemArray);
            }
            DefaultId = DefaultId.TrimEnd(',');
            if (string.IsNullOrEmpty(DefaultId))
            {
                DefaultId = "0";
            }
            str = "select cast(NodeID as unsigned) as `SNo`, Node as Heads,0.00 as `Credit`,0.00 as `Debit`,'' as Remarks from headstree where NodeID not in (" + DefaultId + ") and ParentID=0";
            DataTable dt1 = new DataTable();
            dt1 = balayer.GetDataTable(str);
            for (int i = dt1.Rows.Count - 1; i >= 0; i--)
            {
                if (dt1.Rows[i][1] == DBNull.Value)
                    dt1.Rows[i].Delete();
            }
            if (dt1.Rows.Count > 0)
            {
                Heads.Merge(dt1, true, MissingSchemaAction.Ignore);
            }
            DataView dataview = Heads.DefaultView;
            dataview.Sort = "SNo";
            Heads = dataview.ToTable();

            return Heads;
        }



        public DataTable BindStamps(string fromsdate, string todate, string branchid)
        {

            DataTable dtDistinct = balayer.GetDataTable(" SELECT ht2.Node as Head,(case when (sum(case when v1.Voucher_Type='C' then v1.Amount else 0.00 end )>sum(case when v1.Voucher_Type='D' then v1.Amount else 0.00 end )) then sum(case when v1.Voucher_Type='C' then v1.Amount else 0.00 end )-sum(case when v1.Voucher_Type='D' then v1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when v1.Voucher_Type='D' then v1.Amount else 0.00 end ))>sum((case when v1.Voucher_Type='C' then v1.Amount else 0.00 end ))) then sum((case when v1.Voucher_Type='D' then v1.Amount else 0.00 end ))-sum((case when v1.Voucher_Type='C' then v1.Amount else 0.00 end )) else 0.00 end ) as `Debit`FROM `voucher` as v1 join headstree as ht2 on v1.Head_Id=ht2.NodeID where v1.RootID=10 and v1.BranchID=" + branchid + " and v1.ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' group by ht2.NodeID;");

            //DataTable dtBind = new DataTable();

            DataRow dr = Stamps.NewRow();
            Stamps.Columns.Add("SlNo");
            Stamps.Columns.Add("Head");
            Stamps.Columns.Add("Credit", typeof(decimal));
            Stamps.Columns.Add("Debit", typeof(decimal));
            int iCount = 0;
            for (int i = 0; i < dtDistinct.Rows.Count; i++)
            {
                if (Convert.ToDecimal(dtDistinct.Rows[i]["Credit"]) > 0.00M || Convert.ToDecimal(dtDistinct.Rows[i]["Debit"]) > 0.00M)
                {
                    dr["SlNo"] = iCount + 1;
                    dr["Head"] = dtDistinct.Rows[i]["Head"];
                    dr["Credit"] = dtDistinct.Rows[i]["Credit"];
                    dr["Debit"] = dtDistinct.Rows[i]["Debit"];
                    Stamps.Rows.Add(dr.ItemArray);
                    iCount++;
                }
            }
            if (Stamps.Rows.Count > 0)
            {
                decimal credit = Convert.ToDecimal(Stamps.Compute("sum(Credit)", ""));
                decimal debit = Convert.ToDecimal(Stamps.Compute("sum(Debit)", ""));

                DataRow rowTotal = Stamps.NewRow();
                rowTotal["Head"] = "Total";
                rowTotal["Credit"] = credit;
                rowTotal["Debit"] = debit;
                Stamps.Rows.Add(rowTotal.ItemArray);

                DataRow Net = Stamps.NewRow();

                if (credit >= debit)
                {
                    Net["Head"] = "Balance Cr";
                    Net["Credit"] = credit - debit;
                    Net["Debit"] = "0.00";
                }
                else
                {
                    Net["Head"] = "Balance Dr";
                    Net["Credit"] = "0.00";
                    Net["Debit"] = debit - credit;
                }
                Stamps.Rows.Add(Net.ItemArray);
            }
            return Stamps;
        }

        public DataTable BindChitAbstract(string fromsdate, string todate, string branchid)
        {

            DataTable dtChit = balayer.GetDataTable("select t3.Node as Heads , sum(case when ((case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as ChitCredit, sum(case when ((case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%' ) and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when ((t3.TreeHint like '5,40%' or t3.TreeHint like '5,41%' or t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as ChitDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "'");
            DataTable monthlyChit = balayer.GetDataTable("select t3.Node as Heads , sum(case when ((case when ((t3.TreeHint like '5,40%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when ((t3.TreeHint like '5,40%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when ((t3.TreeHint like '5,40%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when ((t3.TreeHint like '5,40%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as ChitCredit, sum(case when ((case when ((t3.TreeHint like '5,40%' ) and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when ((t3.TreeHint like '5,40%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when ((t3.TreeHint like '5,40%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when ((t3.TreeHint like '5,40%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as ChitDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "';");
            DataTable fortinightlyChit = balayer.GetDataTable("select t3.Node as Heads , sum(case when ((case when (( t3.TreeHint like '5,41%' ) and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when ((t3.TreeHint like '5,41%' ) and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (( t3.TreeHint like '5,41%' ) and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when ((  t3.TreeHint like '5,41%' ) and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as ChitCredit, sum(case when ((case when (( t3.TreeHint like '5,41%' ) and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (( t3.TreeHint like '5,41%' ) and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (( t3.TreeHint like '5,41%' ) and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (( t3.TreeHint like '5,41%' ) and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as ChitDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "';");
            DataTable trimonthlyChit = balayer.GetDataTable("select t3.Node as Heads , sum(case when ((case when ((t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (( t3.TreeHint like '5,42%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when ((t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (( t3.TreeHint like '5,42%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as ChitCredit, sum(case when ((case when ((t3.TreeHint like '5,42%') and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (( t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (( t3.TreeHint like '5,42%' ) and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when ((t3.TreeHint like '5,42%') and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as ChitDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "';");

            DataTable dtRCM1 = balayer.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as RCM1Credit, sum(case when ((case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,44%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as RCM1Debit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "'");
            DataTable dtRCM2 = balayer.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as RCM2Credit, sum(case when ((case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,45%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as RCM2Debit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "'");
            DataTable dtChitCollection = balayer.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as ChitCredit, sum(case when ((case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,43%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as ChitDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "'");
            DataTable dtOutStanding = balayer.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as OutCredit, sum(case when ((case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,47%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as OutDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "'");
            DataTable dtUnpaid = balayer.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as UnCredit, sum(case when ((case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,48%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as UnDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "'");
            DataTable Unpaidpayable = balayer.GetDataTable("select t3.Node as Heads , sum(case when ((case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)  else 0.00 end) as OutCredit, sum(case when ((case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)>(case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end) ) then (case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='D') then t1.Amount else 0.00 end)-(case when (t3.TreeHint like '5,46%' and t1.Voucher_Type='C') then t1.Amount else 0.00 end)  else 0.00 end) as OutDebit from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 5  and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "'");


            //DataTable dtBind = new DataTable();
            Chitheads.Columns.Add("Slno");
            Chitheads.Columns.Add("Abstract");
            Chitheads.Columns.Add("Credit", typeof(decimal));
            Chitheads.Columns.Add("Debit", typeof(decimal));
            DataRow dr = Chitheads.NewRow();


            dr["Slno"] = "1";
            dr["Abstract"] = "Monthly Chits";
            decimal decChitCrdit = Convert.ToDecimal(monthlyChit.Rows[0][1]);
            decimal decChitDebit = Convert.ToDecimal(monthlyChit.Rows[0][2]);
            if (decChitCrdit > decChitDebit)
            {
                dr["Credit"] = decChitCrdit - decChitDebit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decChitDebit - decChitCrdit;
            }
            Chitheads.Rows.Add(dr.ItemArray);

            dr["Slno"] = "2";
            dr["Abstract"] = "Fortnightly Chits";
            decimal decChitCrdit1 = Convert.ToDecimal(fortinightlyChit.Rows[0][1]);
            decimal decChitDebit1 = Convert.ToDecimal(fortinightlyChit.Rows[0][2]);
            if (decChitCrdit > decChitDebit)
            {
                dr["Credit"] = decChitCrdit1 - decChitDebit1;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decChitDebit1 - decChitCrdit1;
            }
            Chitheads.Rows.Add(dr.ItemArray);

            dr["Slno"] = "3";
            dr["Abstract"] = "Trimonthly Chits";
            decimal decChitCrdit2 = Convert.ToDecimal(trimonthlyChit.Rows[0][1]);
            decimal decChitDebit2 = Convert.ToDecimal(trimonthlyChit.Rows[0][2]);
            if (decChitCrdit > decChitDebit)
            {
                dr["Credit"] = decChitCrdit2 - decChitDebit2;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decChitDebit2 - decChitCrdit2;
            }
            Chitheads.Rows.Add(dr.ItemArray);






            dr["Slno"] = "4";
            dr["Abstract"] = "Chit Collection to be Accounted";
            decimal decChitCollectionCrdit = Convert.ToDecimal(dtChitCollection.Rows[0][1]);
            decimal decChitCollectionDebit = Convert.ToDecimal(dtChitCollection.Rows[0][2]);
            if (decChitCollectionCrdit > decChitCollectionDebit)
            {
                dr["Credit"] = decChitCollectionCrdit - decChitCollectionDebit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decChitCollectionDebit - decChitCollectionCrdit;
            }
            Chitheads.Rows.Add(dr.ItemArray);

            decimal totalrcmcr = 0;
            decimal totalrcmdr = 0;

            decimal decRcm1Crdit = Convert.ToDecimal(dtRCM1.Rows[0][1]);
            decimal decRcm1Debit = Convert.ToDecimal(dtRCM1.Rows[0][2]);
            decimal decRcm2Crdit = Convert.ToDecimal(dtRCM2.Rows[0][1]);
            decimal decRcm2Debit = Convert.ToDecimal(dtRCM2.Rows[0][2]);

            totalrcmcr = decRcm1Crdit + decRcm2Crdit;
            totalrcmdr = decRcm1Debit + decRcm2Debit;

            dr["Slno"] = "5";
            dr["Abstract"] = "Removed Chit Members Account";
            if (totalrcmcr > totalrcmdr)
            {
                dr["Credit"] = totalrcmcr - totalrcmdr;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = totalrcmdr - totalrcmcr;
            }
            Chitheads.Rows.Add(dr.ItemArray);

            dr["Slno"] = "6";
            dr["Abstract"] = "Unpaid Prizemoney payable (Ledger Credit)";
            decimal decpayable = Convert.ToDecimal(Unpaidpayable.Rows[0][1]);
            decimal decpayabledt = Convert.ToDecimal(Unpaidpayable.Rows[0][2]);
            if (decpayable > decpayabledt)
            {
                dr["Credit"] = decpayable - decpayabledt;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decpayabledt - decpayable;
            }

            Chitheads.Rows.Add(dr.ItemArray);

            dr["Slno"] = "7";
            dr["Abstract"] = "Outstanding Prize money payable";
            decimal decOutCrdit = Convert.ToDecimal(dtOutStanding.Rows[0][1]);
            decimal decOutDebit = Convert.ToDecimal(dtOutStanding.Rows[0][2]);
            if (decOutCrdit > decOutDebit)
            {
                dr["Credit"] = decOutCrdit - decOutDebit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decOutDebit - decOutCrdit;
            }
            Chitheads.Rows.Add(dr.ItemArray);

            dr["Slno"] = "8";
            dr["Abstract"] = "Unpaid Prize money ";
            decimal decUnCrdit = Convert.ToDecimal(dtUnpaid.Rows[0][1]);
            decimal decUnDebit = Convert.ToDecimal(dtUnpaid.Rows[0][2]);
            if (decUnCrdit > decUnDebit)
            {
                dr["Credit"] = decUnCrdit - decUnDebit;
                dr["Debit"] = "0.00";
            }
            else
            {
                dr["Credit"] = "0.00";
                dr["Debit"] = decUnDebit - decUnCrdit;
            }
            Chitheads.Rows.Add(dr.ItemArray);
            return Chitheads;
        }

        public void BindChitTrial(string fromsdate, string todate, string branchid)
        {
            string strChits = "";
            string credit;
            string debit;
            decimal I_Credit;
            decimal I_Debit;
            decimal E_Credit;
            decimal E_Debit;
            decimal N_Credit;
            decimal N_Debit;
            decimal NonPrized;
            decimal Prized;
            decimal TotalAmountofKasar;
            decimal NP;
            decimal P;
            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + balayer.indiandateToMysqlDate(todate) + "') group by `auctiondetails`.`GroupID`");
            DataTable dt = balayer.GetDataTable("select * from groupmaster where `ChitStartDate` <= '" + balayer.indiandateToMysqlDate(todate) + "' and BranchID=" + branchid + " ");

            DataTable dtB = new DataTable();
            dtB.Columns.Add("Head_Id");
            dtB.Columns.Add("GROUPNO");
            DataRow drB = dtB.NewRow();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(todate) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(todate) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);
                if (drawno == Noofmem)
                {
                    drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                    drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                    dtB.Rows.Add(drB.ItemArray);
                }
            }
            Monthlychit.Columns.Add("SNo");
            Monthlychit.Columns.Add("GroupNo");
            Monthlychit.Columns.Add("I_Credit", typeof(decimal));
            Monthlychit.Columns.Add("I_Debit", typeof(decimal));
            Monthlychit.Columns.Add("E_Credit", typeof(decimal));
            Monthlychit.Columns.Add("E_Debit", typeof(decimal));
            Monthlychit.Columns.Add("N_Credit", typeof(decimal));
            Monthlychit.Columns.Add("N_Debit", typeof(decimal));
            Monthlychit.Columns.Add("NonPrized", typeof(decimal));
            Monthlychit.Columns.Add("Prized", typeof(decimal));
            Monthlychit.Columns.Add("TotalAmountofKasar", typeof(decimal));
            Monthlychit.Columns.Add("NP", typeof(int));
            Monthlychit.Columns.Add("P", typeof(int));
            Monthlychit.Columns.Add("Remarks");
            DataRow drBind = Monthlychit.NewRow();
            drBind["SNo"] = "";
            drBind["GroupNo"] = "Terminated";
            drBind["Remarks"] = "";
            Monthlychit.Rows.Add(drBind.ItemArray);
            int iCount = 0;
            for (int i = 0; i < dtB.Rows.Count; i++)
            {

                DataTable dt1 = balayer.GetDataTable(@"select mg1.Head_Id,cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");
                if (dt1.Rows.Count > 0)
                {
                    #region start
                    if (((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M) && Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) == 0.00M && Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", "")) == 0.00M)
                    {

                    }
                    else
                    {

                        List<string> lstPArr = new List<string>();
                        int iPCount = 0;
                        int ip1 = 0;


                        DataTable dtNPkasar = balayer.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'2017/10/30') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (dtNPkasar.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtNPkasar.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtNPkasar.Rows[iRow]["NPKasar"]) > 0)
                                {
                                    lstPArr.Add(Convert.ToString(dtNPkasar.Rows[iRow]["Head_Id"]));
                                    ip1++;
                                }
                            }
                        }

                        DataTable dtPArr = balayer.GetDataTable(@"select v1.Head_Id, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC ;");
                        if (dtPArr.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtPArr.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtPArr.Rows[iRow]["PArrier"]) > 0)
                                {
                                    lstPArr.Add(Convert.ToString(dtPArr.Rows[iRow]["Head_Id"]));
                                    iPCount++;
                                }
                            }
                        }

                        if (Convert.ToInt32(dtB.Rows[i]["Head_Id"]) == 01193)
                        {
                            DataTable dtS = balayer.GetDataTable("SELECT sum((case when (Voucher_Type='C') then Amount else 0.00 end)) as Credit,sum((case when (Voucher_Type='D') then Amount else 0.00 end)) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and Head_id=1194");
                            if (dtS.Rows.Count > 0)
                            {
                                if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) < Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["I_Credit"] = 0.00;
                                    drBind["I_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["E_Credit"] = 0.00;
                                    drBind["E_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["N_Credit"] = 0.00;
                                    drBind["N_Debit"] = Convert.ToDecimal(dtS.Rows[0]["Debit"]) - Convert.ToDecimal(dtS.Rows[0]["Credit"]);
                                    drBind["NonPrized"] = "0.00";
                                    drBind["Prized"] = "0.00";
                                    drBind["TotalAmountofKasar"] = "0.00";
                                    drBind["NP"] = "0";
                                    drBind["P"] = "0";
                                    drBind["Remarks"] = "";
                                    iCount++;
                                    Monthlychit.Rows.Add(drBind.ItemArray);
                                }
                                else if (Convert.ToDecimal(dtS.Rows[0]["Credit"]) > Convert.ToDecimal(dtS.Rows[0]["Debit"]))
                                {
                                    drBind["SNo"] = iCount + 1;
                                    drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                                    drBind["I_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["I_Debit"] = 0.00;
                                    drBind["E_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["E_Debit"] = 0.00;
                                    drBind["N_Credit"] = Convert.ToDecimal(dtS.Rows[0]["Credit"]) - Convert.ToDecimal(dtS.Rows[0]["Debit"]);
                                    drBind["N_Debit"] = 0.00;
                                    drBind["NonPrized"] = "0.00";
                                    drBind["Prized"] = "0.00";
                                    drBind["TotalAmountofKasar"] = "0.00";
                                    drBind["NP"] = "0";
                                    drBind["P"] = "0";
                                    drBind["Remarks"] = "";
                                    iCount++;
                                    Monthlychit.Rows.Add(drBind.ItemArray);
                                }
                            }
                        }
                        else
                        {
                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];

                            drBind["I_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) + Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["I_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", ""));
                            drBind["E_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(ExcessRemittance)", "")) + Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                            drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(PArrier)", "")) - Convert.ToDecimal(dt1.Compute("Sum(NPArrier)", ""));

                            if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) > Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                                drBind["N_Debit"] = "0.00";

                            }
                            else if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) < Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")));
                            }
                            else
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = "0.00";
                            }
                            drBind["NonPrized"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["Prized"] = "0.00";
                            drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["NP"] = ip1;
                            drBind["P"] = iPCount; // "0";
                            drBind["Remarks"] = "";
                            iCount++;
                            Monthlychit.Rows.Add(drBind.ItemArray);
                        }
                    }
                    #endregion
                }

            }
            balayer.GetInsertItem("CREATE OR REPLACE VIEW `unpaidprizedmoney` AS select `voucher`.`Head_Id` AS `Head_Id`, `membertogroupmaster`.`GrpMemberID` AS `GrpMemberID`, (case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) AS `Credit`, (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end) AS `Debit`, ((case when (`voucher`.`Voucher_Type` = 'C') then sum(`voucher`.`Amount`) else 0.00 end) - (case when (`voucher`.`Voucher_Type` = 'D') then sum(`voucher`.`Amount`) else 0.00 end)) AS `AmountActuallyremittedbytheParty` from (`voucher` join `membertogroupmaster` ON ((`voucher`.`Head_Id` = `membertogroupmaster`.`Head_Id`))) group by `voucher`.`Head_Id`");
            balayer.GetInsertItem("create or replace view `view_groupwisedue` as select `groupmaster`.`GROUPNO` AS `GroupIDOriginal`,`groupmaster`.`IsFinished`, `auctiondetails`.`GroupID` AS `GroupId`, sum(`auctiondetails`.`CurrentDueAmount`) AS `TotaldueAmount` from (`auctiondetails` join `groupmaster` ON ((`auctiondetails`.`GroupID` = `groupmaster`.`Head_Id`))) where (`auctiondetails`.`AuctionDate` <= '" + balayer.indiandateToMysqlDate(todate) + "') group by `auctiondetails`.`GroupID`");
            dt = balayer.GetDataTable("select * from groupmaster where `PSOOrderDate` <= '" + balayer.indiandateToMysqlDate(todate) + "' and BranchID=" + branchid + "");

            if (dt.Rows.Count != 0)
            {

                dtB = new DataTable();
                dtB.Columns.Add("Head_Id");
                dtB.Columns.Add("GROUPNO");
                drB = dtB.NewRow();
                for (int i = 0; i < dt.Rows.Count; i++)
                {

                    DataTable dtTerminated = balayer.GetDataTable("SELECT * FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(todate) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);

                    string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(todate) + "' and  GroupID=" + dt.Rows[i]["Head_Id"]);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dt.Rows[i]["Head_Id"]);

                    if (drawno != Noofmem)
                    {
                        drB["Head_Id"] = dt.Rows[i]["Head_Id"];
                        drB["GROUPNO"] = dt.Rows[i]["GROUPNO"];
                        dtB.Rows.Add(drB.ItemArray);
                    }
                }
                DataRow drBind1 = Monthlychit.NewRow();
                drBind1["SNo"] = "";
                drBind1["GroupNo"] = "Running";
                drBind1["Remarks"] = "";
                Monthlychit.Rows.Add(drBind1.ItemArray);

                iCount = 0;
                for (int i = 0; i < dtB.Rows.Count; i++)
                {

                    DataTable dtInit = balayer.GetDataTable("select * from auctiondetails where AuctionDate<='" + balayer.indiandateToMysqlDate(todate) + "' and GroupID=" + dtB.Rows[i]["Head_Id"]);
                    string prizecount = balayer.GetSingleValue("select count(*) from trans_payment where ChitGroupID = " + dtB.Rows[i]["Head_Id"] + " and PaymentDate <='" + balayer.indiandateToMysqlDate(todate) + "';");
                    string Totalcount = balayer.GetSingleValue("select count(*) from auctiondetails where GroupID=" + dtB.Rows[i]["Head_Id"] + ";");
                    string drawno = balayer.GetSingleValue("SELECT max(DrawNO) FROM svcf.auctiondetails where AuctionDate <='" + balayer.indiandateToMysqlDate(todate) + "' and  GroupID=" + dtB.Rows[i]["Head_Id"]);
                    string Noofmem = balayer.GetSingleValue("select NoofMembers from groupmaster where Head_Id=" + dtB.Rows[i]["Head_Id"]);
                    DataTable dt1 = balayer.GetDataTable(@"select cast(digits(mg1.GrpMemberID) as unsigned) as ChitNo1, concat(mm.MemberID, ' | ', mg1.MemberName) as `MemberName`,sum(v1.Amount) , sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) as paidAmount,  (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount)>0.00) then (sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -vgwd1.TotaldueAmount) else 0.00 end) as ExcessRemittance ,vgwd1.TotaldueAmount, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end ) as PArrier, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then (case when( (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) )>0.00) then (vgwd1.TotaldueAmount-sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) +sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) ) else 0.00 end) else 0.00 end) as NPArrier from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (select NodeID from headstree where ParentID=" + dtB.Rows[i]["Head_Id"] + " ) and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned) ;");

                    if (drawno != Noofmem && dt1.Rows.Count > 0)
                    {
                        if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) == 0.00M)
                        {

                        }
                        else
                        {
                            drBind["SNo"] = iCount + 1;
                            drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                            drBind["I_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));
                            drBind["I_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
                            drBind["E_Credit"] = Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
                            drBind["E_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                            if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) > Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) - (Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")));
                                drBind["N_Debit"] = "0.00";
                            }
                            else if ((Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""))) < Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")))
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = Convert.ToDecimal(dt1.Compute("Sum(Debit)", "")) - (Convert.ToDecimal(dt1.Compute("Sum(Credit)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")));
                            }
                            else
                            {
                                drBind["N_Credit"] = "0.00";
                                drBind["N_Debit"] = "0.00";
                            }
                            drBind["NonPrized"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", ""));

                            if (prizecount == "1")
                            {
                                drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["P"] = (prizecount);
                                drBind["NP"] = Convert.ToInt16(Totalcount) - Convert.ToInt16(prizecount);
                            }
                            else if (prizecount != "1")
                            {
                                drBind["Prized"] = Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["TotalAmountofKasar"] = Convert.ToDecimal(dt1.Compute("Sum(NPKasar)", "")) + Convert.ToDecimal(dt1.Compute("Sum(PKasar)", ""));
                                drBind["NP"] = dt1.AsEnumerable()
                                        .Where(r => (decimal)r["NPKasar"] != 0.00m)
                                        .Count();
                                drBind["P"] = dt1.AsEnumerable()
                                            .Where(r => (decimal)r["PKasar"] != 0.00m)
                                            .Count(); ;
                            }
                            else if (prizecount == "0")
                            {
                                drBind["NP"] = Convert.ToInt16(Totalcount);
                            }
                            drBind["Remarks"] = "";
                            iCount++;
                            Monthlychit.Rows.Add(drBind.ItemArray);
                        }
                    }
                    else
                    {
                        strChits = "";
                        DataTable dtC = new DataTable();
                        dtC = balayer.GetDataTable("SELECT concat(Cast(NodeID as char(10)),',') FROM svcf.headstree where ParentID=" + dtB.Rows[i]["Head_Id"]);
                        for (int k = 0; k < dtC.Rows.Count; k++)
                        {
                            strChits = strChits + dtC.Rows[k][0];
                        }
                        if (string.IsNullOrEmpty(strChits))
                        {
                            strChits = "0";
                        }
                        else
                        {
                            strChits = strChits.TrimEnd(',');
                        }
                        credit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='C') then Amount else 0.00 end) as Credit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and Head_id in (" + strChits + ")");
                        if (prizecount == "0")
                        {
                            debit = "0.00";
                        }
                        else
                        {
                            debit = balayer.GetSingleValue("SELECT sum(case when(Voucher_Type='D') then Amount else 0.00 end) as Debit FROM svcf.voucher where ChoosenDate<='" + balayer.indiandateToMysqlDate(todate) + "' and Head_id in (" + strChits + ")");
                        }

                        if (string.IsNullOrEmpty(credit))
                            credit = "0.00";
                        if (string.IsNullOrEmpty(debit))
                            debit = "0.00";
                        decimal decCredit = Convert.ToDecimal(credit);
                        decimal decDebit = Convert.ToDecimal(debit);
                        string npkas = "";
                        string pkas = "";
                        int NPcount = 0;
                        int Pcount = 0;
                        DataTable dtDetails = balayer.GetDataTable(@"select (case when( tp1.PaymentDate is null or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum(case when (v1.Voucher_Type='C' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -sum(case when (v1.Voucher_Type='D' and v1.trans_Type<>2 and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Credit, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='D' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) -case when (v1.Voucher_Type='C' and v1.Other_Trans_Type<>5 ) then v1.Amount else 0.00 end) else 0.00 end ) as Debit, (case when( tp1.PaymentDate is null  or tp1.PaymentDate >'" + balayer.indiandateToMysqlDate(todate) + "') then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as NPKasar, (case when( tp1.PaymentDate<='" + balayer.indiandateToMysqlDate(todate) + "' ) then sum((case when (v1.Voucher_Type='C' and v1.Other_Trans_Type=5 ) then v1.Amount else 0.00 end)) else 0.00 end ) as PKasar                              from membertogroupmaster as mg1 join voucher as v1 on v1.Head_Id=mg1.Head_Id join view_groupwisedue as vgwd1 on vgwd1.`GroupId`=" + dtB.Rows[i]["Head_Id"] + " left join trans_payment as tp1 on v1.Head_Id =tp1.TokenNumber join membermaster as mm on (mg1.MemberID=mm.MemberIDNew) where mg1.BranchID=" + branchid + " and mg1.GroupID=" + dtB.Rows[i]["Head_Id"] + " and v1.Head_Id in (" + strChits + ") and v1.ChoosenDate<= '" + balayer.indiandateToMysqlDate(todate) + "' group by v1.Head_Id order by cast(digits(mg1.GrpMemberID) as unsigned),v1.Voucher_Type DESC;");

                        if (dtDetails.Rows.Count > 0)
                        {
                            for (int iRow = 0; iRow < dtDetails.Rows.Count; iRow++)
                            {
                                if (Convert.ToDecimal(dtDetails.Rows[iRow]["NPKasar"]) > 0)
                                    NPcount++;
                                if (Convert.ToDecimal(dtDetails.Rows[iRow]["PKasar"]) > 0)
                                    Pcount++;
                            }
                            pkas = Convert.ToString(dtDetails.Compute("sum(PKasar)", ""));
                            npkas = Convert.ToString(dtDetails.Compute("sum(NPKasar)", ""));
                            credit = Convert.ToString(dtDetails.Compute("sum(Credit)", ""));
                            debit = Convert.ToString(dtDetails.Compute("sum(Debit)", ""));
                        }

                        if (string.IsNullOrEmpty(npkas))
                            npkas = "0.00";
                        if (string.IsNullOrEmpty(pkas))
                            pkas = "0.00";

                        string netCredit = "0.00";
                        string netDebit = "0.00";

                        if ((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) > Convert.ToDecimal(debit))
                            netCredit = Convert.ToString((Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)) - Convert.ToDecimal(debit));
                        else
                            netDebit = Convert.ToString(Convert.ToDecimal(debit) - (Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas)));

                        drBind["SNo"] = iCount + 1;
                        drBind["GroupNo"] = dtB.Rows[i]["GROUPNO"];
                        drBind["I_Credit"] = Convert.ToString(Convert.ToDecimal(credit) + Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas));
                        drBind["I_Debit"] = debit; //0.00M;
                        drBind["E_Credit"] = credit; //decCredit - decDebit;
                        drBind["E_Debit"] = Convert.ToString(Convert.ToDecimal(debit) - Convert.ToDecimal(pkas)); //0.00M;
                        drBind["N_Credit"] = netCredit;
                        drBind["N_Debit"] = netDebit;
                        drBind["NonPrized"] = npkas;
                        drBind["Prized"] = pkas;
                        drBind["TotalAmountofKasar"] = Convert.ToString(Convert.ToDecimal(pkas) + Convert.ToDecimal(npkas));
                        //drBind["NP"] = NPcount;
                        //drBind["P"] = Pcount;
                        if (prizecount == "1")
                        {
                            drBind["P"] = (prizecount);
                            drBind["NP"] = Convert.ToInt16(Totalcount) - Convert.ToInt16(prizecount);
                        }
                        else if (prizecount != "1" && prizecount != "0")
                        {
                            drBind["NP"] = dt1.AsEnumerable()
                                   .Where(r => (decimal)r["NPKasar"] != 0.00m)
                                   .Count();
                            drBind["P"] = dt1.AsEnumerable()
                                        .Where(r => (decimal)r["PKasar"] != 0.00m)
                                        .Count(); ;
                        }
                        else if (prizecount == "0")
                        {
                            drBind["NP"] = Convert.ToInt16(Totalcount);
                            drBind["P"] = (prizecount);
                        }
                        drBind["Remarks"] = "";
                        iCount++;
                        Monthlychit.Rows.Add(drBind.ItemArray);
                    }
                }

                I_Credit = Convert.ToDecimal(Monthlychit.Compute("sum(I_Credit)", ""));
                I_Debit = Convert.ToDecimal(Monthlychit.Compute("sum(I_Debit)", ""));
                E_Credit = Convert.ToDecimal(Monthlychit.Compute("sum(E_Credit)", ""));
                E_Debit = Convert.ToDecimal(Monthlychit.Compute("sum(E_Debit)", ""));
                N_Credit = Convert.ToDecimal(Monthlychit.Compute("sum(N_Credit)", ""));
                N_Debit = Convert.ToDecimal(Monthlychit.Compute("sum(N_Debit)", ""));
                NonPrized = Convert.ToDecimal(Monthlychit.Compute("sum(NonPrized)", ""));
                Prized = Convert.ToDecimal(Monthlychit.Compute("sum(Prized)", ""));
                TotalAmountofKasar = Convert.ToDecimal(Monthlychit.Compute("sum(TotalAmountofKasar)", ""));
                NP = Convert.ToDecimal(Monthlychit.Compute("sum(NP)", ""));
                P = Convert.ToDecimal(Monthlychit.Compute("sum(P)", ""));

                drBind["SNo"] = "";
                drBind["GroupNo"] = "TOTAL";
                drBind["I_Credit"] = I_Credit;
                drBind["I_Debit"] = I_Debit;
                drBind["E_Credit"] = E_Credit;
                drBind["E_Debit"] = E_Debit;
                drBind["N_Credit"] = N_Credit;
                drBind["N_Debit"] = N_Debit;
                drBind["NonPrized"] = NonPrized;
                drBind["Prized"] = Prized;
                drBind["TotalAmountofKasar"] = TotalAmountofKasar;
                drBind["NP"] = NP;
                drBind["P"] = P;
                drBind["Remarks"] = "";
                Monthlychit.Rows.Add(drBind.ItemArray);

                DataRow drBind2 = Monthlychit.NewRow();
                if (I_Credit > I_Debit)
                {
                    drBind2["GroupNo"] = "Balance CR";
                    drBind2["I_Credit"] = I_Credit - I_Debit;
                }
                else if (I_Credit < I_Debit)
                {
                    drBind2["GroupNo"] = "Balance DR";
                    drBind2["I_Debit"] = I_Debit - I_Credit;
                }
                else
                {
                    drBind2["GroupNo"] = "Balance";
                    drBind2["I_Credit"] = I_Debit - I_Credit;
                    drBind2["I_Debit"] = I_Debit - I_Credit;
                }
                if (N_Credit > N_Debit)
                {
                    drBind2["N_Credit"] = N_Credit - N_Debit;


                }
                else if (N_Credit < N_Debit)
                {
                    drBind2["N_Debit"] = N_Debit - N_Credit;
                }
                else
                {
                    drBind2["GroupNo"] = "Balance";
                    drBind2["N_Credit"] = N_Credit - N_Debit;
                    drBind2["N_Debit"] = N_Debit - N_Credit;
                }
                Monthlychit.Rows.Add(drBind2.ItemArray);
            }
        }

        public DataTable BindOtherItems(string fromsdate, string todate, string branchid)
        {
            decimal decCredit = 0;
            decimal decDebit = 0;

            //string str = @"select t3.NodeID,t3.Node as Heads , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 4 and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID` order by `t1`.`Head_ID` asc";
            string str = @"select t3.NodeID,t3.Node as Heads , (case when (sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )>sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end )) then sum(case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )-sum(case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ) else 0.00 end ) as `Credit`,(case when (sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))>sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end ))) then sum((case when t1.Voucher_Type='D' then t1.Amount else 0.00 end ))-sum((case when t1.Voucher_Type='C' then t1.Amount else 0.00 end )) else 0.00 end ) as `Debit` from voucher as t1  left Join headstree as t3 on t1.Head_ID=t3.NodeID where `t1`.`BranchID` =" + branchid + " and `t1`.`RootID` = 4 and t1.series<>'AfterClosing' and t1.ChoosenDate between '2009/03/31' and '" + balayer.indiandateToMysqlDate(todate) + "' group by `t1`.`Head_ID` order by `t1`.`Head_ID` asc";
            DataTable dt1 = balayer.GetDataTable(str);

            DataTable OtherItems = new DataTable();

            OtherItems.Columns.Add("SNo");
            OtherItems.Columns.Add("Heads");
            OtherItems.Columns.Add("Credit", typeof(decimal));
            OtherItems.Columns.Add("Debit", typeof(decimal));
            OtherItems.Columns.Add("Remarks");
            DataRow dr = OtherItems.NewRow();
            int icount = 0;
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                if (Convert.ToDecimal(dt1.Rows[i]["Credit"]) > 0 || Convert.ToDecimal(dt1.Rows[i]["Debit"]) > 0)
                {

                    dr["SNo"] = icount + 1;
                    dr["Heads"] = dt1.Rows[i]["Heads"];
                    dr["Credit"] = dt1.Rows[i]["Credit"];
                    dr["Debit"] = dt1.Rows[i]["Debit"];
                    dr["Remarks"] = "";
                    OtherItems.Rows.Add(dr.ItemArray);
                    icount++;
                }
            }

            decCredit = Convert.ToDecimal(dt1.Compute("Sum(Credit)", ""));
            decDebit = Convert.ToDecimal(dt1.Compute("Sum(Debit)", ""));
            dr["SNo"] = "";
            dr["Heads"] = "TOTAL";
            dr["Credit"] = decCredit;
            dr["Debit"] = decDebit;
            dr["Remarks"] = "";
            OtherItems.Rows.Add(dr.ItemArray);

            dr["SNo"] = "";
            if (decCredit == decDebit)
            {
                dr["Heads"] = "Balance";
                dr["Credit"] = "0.00";
                dr["Debit"] = "0.00";
            }
            else if (decCredit > decDebit)
            {
                dr["Heads"] = "Balance CR";
                dr["Credit"] = decCredit - decDebit;
                dr["Debit"] = "0.00";
            }
            else if (decCredit < decDebit)
            {
                dr["Heads"] = "Balance DR";
                dr["Credit"] = "0.00";
                dr["Debit"] = decDebit - decCredit;
            }
            dr["Remarks"] = "";
            OtherItems.Rows.Add(dr.ItemArray);
            return OtherItems;
        }

        #endregion

    }
}